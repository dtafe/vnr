@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.HrmSystem.Models;

@model Sys_LockObjectItemModel

@{
    ViewBag.Title = "Sys_LockObjectItem";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Sys_Web = ConstantPathWeb.Hrm_Sys_Web;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Cat_Service;
    var _LockObjectID = Model == null ? Guid.Empty : Model.ID;


}

@{
    var window1 = new WindowBuilderInfo
    {
        Name = "windowConfigObject",
        Visible = false,
        LoadContentFrom = @_hrm_Sys_Web + "Sys_LockObject/LockObjectConfigObjectInfo/",
    };
}
@(Html.VnrWindow(window1))

<script>
    function onSave() {
        debugger;
        var objName = "";
        $("#LockObjectID").val($("#LockObject_ID").val());
        var multiLockObj = $("#LockObjectInfo_ObjectName").data("kendoMultiSelect");
        for (var i = 0; i < multiLockObj._dataItems.length; i++) {
            objName += multiLockObj._dataItems[i].Name + ",";
        }
        $("#ObjectName").val(objName.substring(0, objName.length - 1));
        onSaveAndContinue($('#form_Sys_LockObjectItem'), '@_hrm_Sys_Service', 'api/Sys_LockObjectItem/', 'grid_Sys_LockObjectItem', '@ConstantControlName.HRM_System_LockObjectItem_PopUp_Name');
        return false;
    };

    function onSaveClose() {
        debugger;
        var objName = "";
        $("#LockObjectID").val($("#LockObject_ID").val());
        var multiLockObj = $("#LockObjectInfo_ObjectName").data("kendoMultiSelect");
        for (var i = 0; i < multiLockObj._dataItems.length; i++) {
            objName += multiLockObj._dataItems[i].Name + ",";
        }
        $("#ObjectName").val(objName.substring(0, objName.length - 1));
        onSaveAndClose($('#form_Sys_LockObjectItem'), '@_hrm_Sys_Service', 'api/Sys_LockObjectItem/', 'grid_Sys_LockObjectItem', '@ConstantControlName.HRM_System_LockObjectItem_PopUp_Name');
        return false;
    };
    function onSaveDataPopUp() {
        debugger;
        var objName = "";
        $("#LockObjectID").val($("#LockObject_ID").val());
        var multiLockObj = $("#LockObjectInfo_ObjectName").data("kendoMultiSelect");
        for (var i = 0; i < multiLockObj._dataItems.length; i++) {
            objName += multiLockObj._dataItems[i].Name + ",";
        }
        $("#ObjectName").val(objName.substring(0, objName.length - 1));
        onlySave($('#form_Sys_LockObjectItem'), '@_hrm_Sys_Service', 'api/Sys_LockObjectItem/', 'grid_Sys_LockObjectItem'); return false;
    };

   

    function EvenClickConfigElement() {
        var _key = "@ConfigObject.HRM_SYS_LOCKOBJECT_CONFIGOBJECT.ToString()";

        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Sal_GetData/GetConfigElement",
            data: { Key: _key },
            dataType: 'json',
            success: function (returnValue) {
                debugger;
                $("#ValueKey").val(returnValue.Name);
                $("#ValueConfig").val(returnValue.Value1);
                $("#ConfigID").val(returnValue.ID);

                setTimeout(function () {
                    PopUpCreate("windowConfigObject", "Cấu Hình Đối Tượng", '@HRM.Infrastructure.Security.ConstantPermission.Sal_ItemForShop');
                }, 3000);
            }
        });
    };


    $(document).ready(function () {
        var _key = "@ConfigObject.HRM_SYS_LOCKOBJECT_CONFIGOBJECT.ToString()";
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Sal_GetData/GetConfigElement",
            data: { Key: _key },
            dataType: 'json',
            success: function (returnValue) {
                debugger;
                var elementConfiged = $("#LockObjectInfo_ObjectName").data("kendoMultiSelect");
                if (returnValue.Value1.indexOf(',') > 1) {
                    elementConfiged.dataSource.filter({});
                    elementConfiged.value(returnValue.Value1.split(","));
                } else {
                    elementConfiged.dataSource.filter({});
                    elementConfiged.value(returnValue.Value1);
                }
            }
        });
    });

</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Sys_LockObjectItem" }))
{
    @Html.HiddenFor(model => model.LockObjectItem_ID)
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.LockObjectID)
    @Html.HiddenFor(model => Model.ObjectName)
    @Html.Hidden("ValueKey")
@Html.Hidden("ValueConfig")
@Html.Hidden("ConfigID")
    <table>
        <tr>
            <td>
                


                @*<div id="div4">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ObjectName)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _objectName = new ComboBoxBuilderInfo()
                            {
                                DataTextField = "Name",
                                DataValueField = "Name",
                                Url = @_hrm_Cat_Service + "Cat_GetData/GetMultiObjectName",
                                Placeholder = ConstantDisplay.HRM_Category_Cat_Import_ObjectName.TranslateString(),
                                StyleCss = "Width:150px",
                            };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.ObjectName, _objectName))

                    </div>
                    <div style="clear: both;"></div>
                </div>*@

                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ObjectName)
                    </div>
                    <div class="FieldValue">

                        @{
                             var _ObjectName = new MultiSelectBuilderInfo
                            {
                                Name = "LockObjectInfo_ObjectName",
                                DataTextField = "Name",
                                DataValueField = "Name",
                                Url = @_hrm_Cat_Service + "Cat_GetData/GetMultiObjectName",
                                // MaxSelectedItems = 1,
                                Placeholder = ConstantDisplay.HRM_Category_Cat_Import_ObjectName.TranslateString(),
                                ServerFiltering = true,
                                Width = 500
                            };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.ObjectName, _ObjectName) &nbsp;
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "EvenClickConfigElement", Name = "btnConfigElement", ImageUrl = "/Content/images/icons/submenu/menu/Config-icon.png" })
                        @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "EvenClickConfigElement", Name = "btnConfigElement1111111111111111", ImageUrl = "/Content/images/icons/submenu/menu/Config-icon.png", CssStyle = "margin-left: 5px" })*@
                     @*<input type="button" name="asdasdasdasd" id="abcdasdas" value="asdasdasdasdasdasd" />*@
                    </div>
                </div>





                <div id="div3">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Commend)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Commend, "width:500px;height:120px")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-LockObjectItemInfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-LockObjectItemInfo", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-LockObjectItemInfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
        @Html.HiddenFor(model => model.ID)
    </table>
    <div>
        @{
            if(Model.ObjectName != null)
            {
                <script>
                    $(document).ready(function () {
                        debugger;
                        var multiLockObj = $("#LockObjectInfo_ObjectName").data("kendoMultiSelect");
                        var objName = '@Model.ObjectName';
                        multiLockObj.value(objName.split(','))
                    });
                </script>
            }
        }
    </div>
}
@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Utilities

@model HRM.Presentation.HrmSystem.Models.Sys_DynamicColumnModel
@using HRM.Presentation.UI.Controls.Kendo

@{
    ViewBag.Title = "SysDynamicColumn";
    Layout = null;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    
    IList<SelectListItem> listStatusDynamicColumn = Enum.GetValues(typeof(EnumDropDown.StatusDynamicColumn))
    .Cast<EnumDropDown.StatusDynamicColumn>()
    .Select(x => new SelectListItem { Text = x.ToString(), Value = EnumDropDown.GetEnumDescription(x) })
    .ToList();
    
    IList<SelectListItem> listTableName = Enum.GetValues(typeof(EnumDropDown.TypeElement))
   .Cast<EnumDropDown.TypeElement>()
   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
   .ToList();
   
    IList<SelectListItem> listDataType = Enum.GetValues(typeof(EnumDropDown.DataType))
  .Cast<EnumDropDown.DataType>()
  .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
  .ToList();

}
<script>
    var data = SetCharacteFieldRequired();
    function doSave() {
        
        if (CheckValidate(data)) {
            onSaveAndContinue($('#form_sys_DynamicColumn'), '@_hrm_Sys_Service', 'api/Sys_DynamicColumn/', 'gridDynamicColumn', 'windowDynamicColumn'); return false;
        }
    }

    function doSaveAndContinue() {
        if (CheckValidate(data)) {
            onSaveAndClose($('#form_sys_DynamicColumn'), '@_hrm_Sys_Service', 'api/Sys_DynamicColumn/', 'gridDynamicColumn', 'windowDynamicColumn'); return false;
        }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_sys_DynamicColumn" }))
{
     @Html.HiddenFor(model => model.ID)
     <div>
        <div class="FieldTitle">
            @Html.VnrLabelFor(mode => mode.ColumnName)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(mode => mode.ColumnName)
        </div>
    </div>
    <div>
        <div class="FieldTitle">
            @Html.VnrLabelFor(mode => mode.Code)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(mode => mode.Code)
        </div>
    </div>
    <div>
        <div class="FieldTitle">
            @Html.VnrLabelFor(mode => mode.Status)
        </div>
        <div class="FieldValue">
            @{
    var _status = new DropDownListBuilderInfo()
    {
        Name = "Status",
        DataTextField = "Value",
        DataValueField = "Text",
        OptionLabel = @ConstantDisplay.HRM_Category_SelectStatus.TranslateString(),
        BindTo = listStatusDynamicColumn
    };
            }
            @Html.VnrDropDownListFor(model => model.Status, _status)
        </div>
    </div>
    <div>
        <div class="FieldTitle">
            @Html.VnrLabelFor(mode => mode.DataType)
        </div>
        <div class="FieldValue">
            @{
    var dropdownDataType = new DropDownListBuilderInfo()
    {
        Name = "DataType",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listDataType,
        OptionLabel = @ConstantDisplay.HRM_System_DynamicColumn_SelectDataType.TranslateString(),
        EventChange = "ddlDataTypeChange"
    };
            }
            @(Html.VnrDropDownListFor(mode => mode.DataType, dropdownDataType))
        </div>
    </div>
     <div>
        <div class="FieldTitle">
            @Html.VnrLabelFor(mode => mode.Length)
        </div>
        <div class="FieldValue">
            @{
    var numericTextBoxLength = new NumericTextBoxBuilderInfo<int>()
    {
        //StyleCss = "width:170px;"
        Name = "Length"
    };
                    }
            @Html.VnrNumericTextBoxFor(model => model.Length, numericTextBoxLength)
            @Html.ValidationMessageFor(model => model.Length)
        </div>
    </div>
    <div>
        <div class="FieldTitle">
            @Html.VnrLabelFor(mode => mode.TableName)
        </div>
        <div class="FieldValue">
           @{
    var dropdownTableName = new DropDownListBuilderInfo()
    {
        Name = "TableName",
        DataTextField = "Text",
        DataValueField = "Value",
        OptionLabel = @ConstantDisplay.HRM_System_DynamicColumn_SelectTableName.TranslateString(),
        BindTo = listTableName
    };
            }
            @(Html.VnrDropDownListFor(mode => mode.TableName, dropdownTableName))
        </div>
    </div>
    <div>
        <div class="FieldTitle">
            @Html.VnrLabelFor(mode => mode.Comment)
        </div>
        <div class="FieldValue">
            @(Html.VnrTextAreaFor(model => model.Comment))
        </div>
    </div>
    
   
    <div>
        <div class="FieldTitle">

        </div>
        
        <div class="FieldValue">
            <div style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </div>

            @*<input type="button" value="@ConstantAction.HRM_Common_SaveNew.TranslateString()" onclick="onSaveAndContinue($('#form_sys_DynamicColumn'), '@_hrm_Sys_Service', 'api/Sys_DynamicColumn/', 'gridDynamicColumn','windowDynamicColumn'); return false;" class="k-button" />
            <input type="button" value="@ConstantAction.HRM_Common_SaveClose.TranslateString()" onclick="onSaveAndClose($('#form_sys_DynamicColumn'), '@_hrm_Sys_Service', 'api/Sys_DynamicColumn/', 'gridDynamicColumn','windowDynamicColumn'); return false;" class="k-button" />*@
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "doSave", Name = "save-close-DynamicColumn", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "doSaveAndContinue", Name = "save-continue-DynamicColumn", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
    </div>
    
    
}

@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@model HRM.Presentation.HrmSystem.Models.Sys_AllSettingModel
@{
    ViewBag.Title = "Sys_AllSetting";
    Layout = null;   
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    IList<SelectListItem> listSetting = Enum.GetValues(typeof(AppConfig))
        .Cast<AppConfig>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = x.ToString() })
        .ToList();
    IList<SelectListItem> listModule = Enum.GetValues(typeof(EnumDropDown.Module))
    .Cast<EnumDropDown.Module>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();
    SelectList dataSetting = new SelectList(listSetting, "Value", "Text");
    SelectList dataModule = new SelectList(listModule, "Value", "Text");
}

<script>
    //var Validator = CheckValidate();
    var data = SetCharacteFieldRequired();

    function onSave() {
        //if (CheckValidate(data)) {
        onSaveAndContinue($('#formSys_AllSetting'), '@_hrm_Sys_Service', 'api/Sys_AllSettingCustom/', 'Setting', 'windowAllSetting');
        //}
        return false;
    }

    function onSaveClose() {
        //if (CheckValidate(data)) {
        onSaveAndClose($('#formSys_AllSetting'), '@_hrm_Sys_Service', 'api/Sys_AllSettingCustom/', 'Setting', 'windowAllSetting');
        //}
        return false;
    }
    function OnlySave() {
        //if (CheckValidate(data)) {
        onlySave($('#formSys_AllSetting'), '@_hrm_Sys_Service', 'api/Sys_AllSettingCustom/', 'Setting', 'windowAllSetting');
        //}
        return false;
    }
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "formSys_AllSetting" }))
{
    @Html.HiddenFor(model => model.ID)

    
     <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Name)
                    </div>
                    <div class="FieldValue">
                        @{
                            var comboboxName = new ComboBoxBuilderInfo()
                            {
                                DataTextField = "Text",
                                DataValueField = "Value",
                                FilterType = FilterType.Contains,
                                BindTo = listSetting,
                               StyleCss= "Width: 300px",
                                Value = @Html.DisplayFor(model => model.Name).ToString()
                            };
                        }
                        @Html.VnrComboBoxFor(model => model.Name, comboboxName)                   
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Value1)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.Value1, "width: 300px")     
                                        
                    </div>
                </div>
               
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Value2)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.Value2, "width: 300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ModuleName)
                    </div>
                    <div class="FieldValue">
                      @{
                    var comboboxModuleName = new ComboBoxBuilderInfo()
                    {
                        DataTextField = "Text",
                        DataValueField = "Value",
                        FilterType = FilterType.Contains,
                        BindTo = listModule,
                        StyleCss = "Width: 300px",
                        Value = @Html.DisplayFor(model => model.ModuleName).ToString()
                    };
                    }
                    @Html.VnrComboBoxFor(model => model.ModuleName, comboboxModuleName)
    
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "OnlySave", Name = "save-continue-lauLocker", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-lauLocker", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-lauLocker", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
 </table>

}


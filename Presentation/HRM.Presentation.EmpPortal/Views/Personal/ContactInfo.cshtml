@using HRM.Presentation.EmpPortal.Models
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Utilities
@model Hre_ProfileModelPortal
@{
    Layout = null;
    var _Hrm_EmpPortal_Web = ConstantPathWeb.Hrm_EmpPortal_Web;
    var _Hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
}

<style>
    #Personal .padtop {
        padding-top: 2px;
    }

    input.customWH {
        width: 200px;
        height: 25px !important;
        margin-top: 0px;
    }

    .k-multiselect-wrap {
        height: 25px;
    }
</style>
<script>
    $(document).ready(function () {
        $('#ContactInfo-box-Info').show();
        $('#ContactInfo-box-Update').toggle();

        $("#ContactInfo_toolbar1").kendoToolBar({
            items: [
                { type: "button", text: "Chỉnh sửa", id: "btnUpdateContact", imageUrl: "/Content/images/icons/edit-file-icon.png" },
            ],
            click: function (e) {
                var id = e.id;
                switch (id) {
                    case "btnUpdateContact":
                        $('#ContactInfo-box-Info').toggle();
                        $('#ContactInfo-box-Update').show();
                        break;
                }
            }
        });

        $("#ContactInfo_toolbar2").kendoToolBar({
            items: [
                { type: "button", text: "Cập Nhật", id: "btnSaveContact", imageUrl: "/Content/images/icons/save.png" },
                { type: "separator" },
                { type: "button", text: "Hủy Bỏ", id: "btnCancelContact", imageUrl: "/Content/images/icons/reject.png" },
            ],
            click: function (e) {
                var id = e.id;
                switch (id) {
                    case "btnSaveContact":
                        debugger;
                        var result = false;

                        var dataReturn = onCreate($('#form-create-Contact'), '@_Hrm_EmpPortal_Web', 'Personal/CreateContactInfo/', "popupNotification");
                        if (dataReturn.ActionStatus == "ErrorDateOfBirth") {
                            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Ngày Tháng Không Hợp Lệ", "k-block k-info-colored");
                            return;
                        }
                        debugger;
                        if (dataReturn.ActionStatus == "Change") {
                            HreProfileChange_Contact();
                        } else {
                            if (dataReturn != null) {
                                result = true;
                            }
                        }

                        if (dataReturn.ActionStatus == "Success") {
                            ReloadTabsTrip("Hre");
                        }

                        $('#ContactInfo-box-Info').show();
                        $('#ContactInfo-box-Update').toggle();
                        return result;
                        break;
                    case "btnCancelContact":
                        $('#ContactInfo-box-Info').show();
                        $('#ContactInfo-box-Update').toggle();
                        break;
                }
            }
        });

    });

    function HreProfileChange_Contact() {
        $.when(kendo.ui.ExtOkCancelDialog.show({
            title: "Xác nhận",
            message: "Bạn Có Muốn Cập Nhật Thay Đổi Vào 'Quá Trình Công Tác'?",
            icon: "k-ext-warning"
        })
        ).done(function (response) {
            if (response.button == "OK") {
                $("#ActionStatus").val(1);
                onCreate($('#form-create-Contact'), '@_Hrm_EmpPortal_Web', 'Personal/CreateContactInfo/', "popupNotification");
            }
        });
    }
</script>
@if (Model != null)
{
    <div class="row" id="ContactInfo-box-Info">
        <div id="ContactInfo_example1">
            <div class="demo-section k-header">
                <div id="ContactInfo_toolbar1"></div>
            </div>
        </div>
        <div class="header-box">@ConstantDisplay.HRM_HR_Profile_ContactInfo.TranslateString()</div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
            <div class="div-parent">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                    @Html.VnrLabelFor(model => model.Email)
                </div>
                <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                    @Html.DisplayFor(model => model.Email)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                    @Html.VnrLabelFor(model => model.Cellphone)
                </div>
                <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                    @Html.DisplayFor(model => model.Cellphone)
                </div>
            </div>
                <div class="header-box">@ConstantDisplay.HRM_HR_Profile_TAAddress.TranslateString()</div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.TCountryName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.TCountryName)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.TProvinceName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.TProvinceName)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.TDistrictName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.TDistrictName)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.TVillageName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.TVillageName)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.TAddress)
                    </div>
                    <div class="padtop  col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.TAddress)
                    </div>
                </div>

            <div class="div-parent">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                    @Html.VnrLabelFor(model => model.AddressEmergency)
                </div>
                <div class="padtop  col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                    @Html.DisplayFor(model => model.AddressEmergency)
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
            <div class="div-parent">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                    @Html.VnrLabelFor(model => model.Email2)
                </div>
                <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                    @Html.DisplayFor(model => model.Email2)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                    @Html.VnrLabelFor(model => model.HomePhone)
                </div>
                <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                    @Html.DisplayFor(model => model.HomePhone)
                </div>
            </div>

                <div class="header-box">@ConstantDisplay.HRM_HR_Profile_PAAddress.TranslateString()</div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.PCountryName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.PCountryName)
                    </div>
                </div>

                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.PProvinceName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.PProvinceName)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.PDistrictName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.PDistrictName)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.PVillageName)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.DisplayFor(model => model.PVillageName)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.PAddress)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        <p>@Html.DisplayFor(model => model.PAddress)</p>
                        
                    </div>
                </div>


        </div>
    </div>

    <form action="#" method="POST" id="form-create-Contact">
        @Html.HiddenFor(model => model.ID)
        <div class="row" id="ContactInfo-box-Update">
            <div id="ContactInfo_example2">
                <div class="demo-section k-header">
                    <div id="ContactInfo_toolbar2"></div>
                </div>
            </div>
            <div class="header-box">@ConstantDisplay.HRM_HR_Profile_ContactInfo.TranslateString()</div>
            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.Email)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @{
    var _Email = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.Email != null ? Model.Email : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.Email, _Email)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.Cellphone)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @{
    var _Cellphone = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.Cellphone != null ? Model.Cellphone : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.Cellphone, _Cellphone)
                    </div>
                </div>

                <div class="header-box">@ConstantDisplay.HRM_HR_Profile_TAAddress.TranslateString()</div>
                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.TCountryID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                            @{
    var tCountryID = new ComboBoxBuilderInfo()
    {
        Name = "TCountryID",
        StyleCss = "Width: 200px",
        DataTextField = "CountryName",
        DataValueField = "ID",
        ServerFilter = true,
        FilterType = FilterType.Contains,
        Url = _Hrm_Hre_Service + "Cat_GetData/GetMultiCountry",
        Placeholder = ConstantDisplay.HRM_Category_SelectCountry.TranslateString(),
        Value = Model == null ? string.Empty : Model.TCountryID.ToString()
    };
                            }
                            @Html.VnrComboBoxFor(model => model.TCountryID, tCountryID).Text(Model == null ? string.Empty : Model.TCountryName)
                        </div>
                    </div>
                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.TProvinceID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">


                            <script>
                                function filterProvinces() {

                                    return {
                                        country: $("#TCountryID").val(),
                                        provinceFilter: $("#TProvinceID").data("kendoComboBox").input.val()
                                    };
                                }
                            </script>
                            @{
    var tProvince = new ComboBoxBuilderInfo()
    {
        Name = "TProvinceID",
        StyleCss = "Width: 200px",
        DataTextField = "ProvinceName",
        DataValueField = "ID",
        ServerFilter = true,
        FilterType = FilterType.Contains,
        Url = _Hrm_Hre_Service + "Cat_GetData/GetProvinceCascading/",
        CascadeFrom = "TCountryID",
        Data = "filterProvinces",
        //Autobind = false,
        Placeholder = ConstantDisplay.HRM_Category_SelectProvince.TranslateString(),
        Value = Model == null ? string.Empty : Model.TProvinceID.ToString()
    };
                            }
                            @Html.VnrComboBoxFor(model => model.TProvinceID, tProvince).Text(Model == null ? string.Empty : Model.TProvinceName)

                        </div>
                    </div>
                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.TDistrictID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                            <script>
                                function filterDistricts() {
                                    return {
                                        province: $("#TProvinceID").val(),
                                        districtFilter: $("#TDistrictID").data("kendoComboBox").input.val()
                                    };
                                }
                            </script>
                            @{
    var tDistrictID = new ComboBoxBuilderInfo()
    {
        DataTextField = "DistrictName",
        DataValueField = "ID",
        FilterType = FilterType.Contains,
        Url = _Hrm_Hre_Service + "Cat_GetData/GetDistrictCascading/",
        CascadeFrom = "TProvinceID",
        ServerFilter = true,
        StyleCss = "Width: 200px",
        Data = "filterDistricts",
        Placeholder = ConstantDisplay.HRM_Category_SelectDistrict.TranslateString(),
        Value = Model == null ? string.Empty : Model.TDistrictID.ToString()
    };
                            }
                            @Html.VnrComboBoxFor(model => model.TDistrictID, tDistrictID).Text(Model == null ? string.Empty : Model.TDistrictName)
                        </div>
                    </div>
                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.TAVillageID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                            <script>
                                function filterDistricts() {
                                    return {
                                        districtid: $("#TDistrictID").val(),
                                        villageFilter: $("#TAVillageID").data("kendoComboBox").input.val()
                                    };
                                }
                            </script>
                            @{
    var tVillageID = new ComboBoxBuilderInfo()
    {
        DataTextField = "VillageName",
        DataValueField = "ID",
        Url = _Hrm_Hre_Service + "Cat_GetData/GetVillageCascading/",
        CascadeFrom = "TDistrictID",
        ServerFilter = true,
        StyleCss = "Width: 200px",
        Data = "filterDistricts",
        Placeholder = "Chọn Phường Xã...", //ConstantDisplay.HRM_Category_SelectDistrict.TranslateString(),
        Value = Model == null ? string.Empty : Model.TAVillageID.ToString()
    };
                            }
                            @Html.VnrComboBoxFor(model => model.TAVillageID, tVillageID).Text(Model == null ? string.Empty : Model.TVillageName)
                        </div>
                    </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelForNoneIcon(model => model.TAddress)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.VnrTextAreaFor(model => model.TAddress, "width:100%;")
                    </div>
                </div>

                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelForNoneIcon(model => model.AddressEmergency)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value" >
                        @Html.VnrTextAreaFor(model => model.AddressEmergency, "width:100%;")
                    </div>
                </div>

            </div>

            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.Email2)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @{
    var _Email2 = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.Email2 != null ? Model.Email2 : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.Email2, _Email2)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelFor(model => model.HomePhone)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @{
    var _HomePhone = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.HomePhone != null ? Model.HomePhone : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.HomePhone, _HomePhone)
                    </div>
                </div>

                    <div class="header-box">@ConstantDisplay.HRM_HR_Profile_PAAddress.TranslateString()</div>
                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.PCountryID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                            @{
    var pCountry = new ComboBoxBuilderInfo()
    {
        DataTextField = "CountryName",
        DataValueField = "ID",
        StyleCss = "Width: 200px",
        FilterType = FilterType.Contains,
        Url = _Hrm_Hre_Service + "Cat_GetData/GetMultiCountry",
        Placeholder = ConstantDisplay.HRM_Category_SelectCountry.TranslateString(),
        Value = Model == null ? string.Empty : Model.PCountryID.ToString()
    };
                            }
                            @Html.VnrComboBoxFor(model => model.PCountryID, pCountry).Text(Model == null ? string.Empty : Model.PCountryName)
                        </div>
                    </div>

                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.PProvinceID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                            <script>
                                function filterProvincesDown() {
                                    return {
                                        country: $("#PCountryID").val(),
                                        provinceFilter: $("#PProvinceID").data("kendoComboBox").input.val()
                                    };
                                }
                            </script>
                            @{
    var pProvince = new ComboBoxBuilderInfo()
    {
        DataTextField = "ProvinceName",
        DataValueField = "ID",
        StyleCss = "Width: 200px",
        FilterType = FilterType.Contains,
        Url = _Hrm_Hre_Service + "Cat_GetData/GetProvinceCascading/",
        Placeholder = ConstantDisplay.HRM_Category_SelectProvince.TranslateString(),
        CascadeFrom = "PCountryID",
        ServerFilter = true,
        Data = "filterProvincesDown",
        Value = Model == null ? string.Empty : Model.PProvinceID.ToString()

    };
                            }
                            @Html.VnrComboBoxFor(model => model.PProvinceID, pProvince).Text(Model == null ? string.Empty : Model.PProvinceName)
                        </div>
                    </div>
                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.PDistrictID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                            <script>
                                function filterDistrictsDown() {
                                    return {
                                        province: $("#PProvinceID").val(),
                                        districtFilter: $("#PDistrictID").data("kendoComboBox").input.val()
                                    };
                                }
                            </script>
                            @{
    var pDistrict = new ComboBoxBuilderInfo()
    {
        DataTextField = "DistrictName",
        StyleCss = "Width: 200px",
        DataValueField = "ID",
        FilterType = FilterType.Contains,
        Url = _Hrm_Hre_Service + "Cat_GetData/GetDistrictCascading/",
        Placeholder = ConstantDisplay.HRM_Category_SelectDistrict.TranslateString(),
        CascadeFrom = "PProvinceID",
        ServerFilter = true,
        Data = "filterDistrictsDown",
        Value = Model == null ? string.Empty : Model.PDistrictID.ToString()
    };
                            }
                            @Html.VnrComboBoxFor(model => model.PDistrictID, pDistrict).Text(Model == null ? string.Empty : Model.PDistrictName)
                        </div>
                    </div>
                    <div class="div-parent">
                        <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                            @Html.VnrLabelForNoneIcon(model => model.VillageID)
                        </div>
                        <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                            <script>
                                function filterDistrictsDown() {
                                    return {
                                        districtid: $("#PDistrictID").val(),
                                        villageFilter: $("#VillageID").data("kendoComboBox").input.val()
                                    };
                                }
                            </script>
                            @{
    var pVillageID = new ComboBoxBuilderInfo()
    {
        DataTextField = "VillageName",
        DataValueField = "ID",
        FilterType = FilterType.Contains,
        Url = _Hrm_Hre_Service + "Cat_GetData/GetVillageCascading/",
        CascadeFrom = "PDistrictID",
        ServerFilter = true,
        StyleCss = "Width: 200px",
        Data = "filterDistrictsDown",
        Placeholder = "Chọn Phường Xã...", //ConstantDisplay.HRM_Category_SelectDistrict.TranslateString(),
        Value = Model == null ? string.Empty : Model.VillageID.ToString()
    };
                            }
                            @Html.VnrComboBoxFor(model => model.VillageID, pVillageID).Text(Model == null ? string.Empty : Model.PVillageName)
                        </div>
                    </div>
                <div class="div-parent" >
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3 lable">
                        @Html.VnrLabelForNoneIcon(model => model.PAddress)
                    </div>
                    <div class="padtop col-lg-9 col-md-9 col-sm-9 col-xs-9 value">
                        @Html.VnrTextAreaFor(model => model.PAddress,"width:100%;")
                    </div>
                </div>
            </div>
            
        </div>
    </form>
}
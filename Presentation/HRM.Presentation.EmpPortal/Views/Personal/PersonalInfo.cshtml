@using HRM.Infrastructure.Utilities
@using HRM.Presentation.EmpPortal.Models
@using HRM.Presentation.UI.Controls.Kendo
@{

    Layout = null;
    var _Hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _Hrm_EmpPortal_Web = ConstantPathWeb.Hrm_EmpPortal_Web;


}
@model Hre_ProfileModelPortal
<style>
    #Personal .padtop {
        padding-top: 2px;
    }

    input.customWH {
        width: 200px;
        height: 25px !important;
        margin-top: 0px;
    }

    .k-multiselect-wrap {
        height: 25px;
    }
</style>

@if (Model != null)
{
    IList<SelectListItem> listLaborType = Enum.GetValues(typeof(EnumDropDown.LaborType))
.Cast<EnumDropDown.LaborType>()
.Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
.ToList();
    IList<SelectListItem> listGender = Enum.GetValues(typeof(EnumDropDown.Gender))
       .Cast<EnumDropDown.Gender>()
       .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p => p.Text)
       .ToList();
    listGender = listGender.OrderBy(p => p.Text).ToList();

    IList<SelectListItem> lstDay = Common.Day();
    IList<SelectListItem> lstMonth = Common.Month();
    IList<SelectListItem> listMarriageStatus = Enum.GetValues(typeof(EnumDropDown.MarriageStatus))
   .Cast<EnumDropDown.MarriageStatus>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p => p.Text)
   .ToList();
    listMarriageStatus=listMarriageStatus.OrderBy(s=>s.Text).ToList();
    
    <script>
        $(document).ready(function () {
            $('#Personal-box-Info').show();
            $('#Personal-box-update').toggle();

            $("#Personal_toolbar1").kendoToolBar({
                items: [
                    { type: "button", text: "Chỉnh sửa", id: "btnUpdatePersonal", imageUrl: "/Content/images/icons/edit-file-icon.png" },
                ],
                click: function (e) {
                    var id = e.id;
                    switch (id) {
                        case "btnUpdatePersonal":
                            $('#Personal-box-Info').toggle();
                            $('#Personal-box-update').show();
                            break;
                    }
                }
            });

            $("#Personal_toolbar2").kendoToolBar({
                items: [
                    { type: "button", text: "Cập Nhật", id: "btnSavePersonal", imageUrl: "/Content/images/icons/save.png" },
                    { type: "separator" },
                    { type: "button", text: "Hủy Bỏ", id: "btnCancelPersonal", imageUrl: "/Content/images/icons/reject.png" },
                ],
                click: function (e) {
                    var id = e.id;
                    switch (id) {
                        case "btnSavePersonal":
                            debugger;
                            var result = false;

                            var dataReturn = onCreate($('#form-create-Personal'), '@_Hrm_EmpPortal_Web', 'Personal/CreatePersonalInfo/', "popupNotification");
                            if (dataReturn.ActionStatus == "ErrorDateOfBirth") {
                                ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Ngày Tháng Không Hợp Lệ", "k-block k-info-colored");
                                return;
                            }
                            debugger;
                            if (dataReturn.ActionStatus == "Change") {
                                HreProfileChange_Personal();
                            } else {
                                if (dataReturn != null) {
                                    result = true;
                                }

                                if (dataReturn.ActionStatus == "Success") {
                                    ReloadTabsTrip("Hre");
                                }

                                $('#Personal-box-Info').show();
                                $('#Personal-box-update').toggle();
                            }
                            
                            return result;
                            break;
                        case "btnCancelPersonal":
                            $('#Personal-box-Info').show();
                            $('#Personal-box-update').toggle();
                            break;
                    }
                }
            });

        });

        function HreProfileChange_Personal() {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "Xác nhận",
                message: "Bạn Có Muốn Cập Nhật Thay Đổi Vào 'Quá Trình Công Tác'?",
                icon: "k-ext-warning"
            })
            ).done(function (response) {
                if (response.button == "OK") {
                    $("#ActionStatus").val(1);
                    onCreate($('#form-create-Personal'), '@_Hrm_EmpPortal_Web', 'Personal/CreatePersonalInfo/', "popupNotification");
                    ReloadTabsTrip("Hre");

                    $('#Personal-box-Info').show();
                    $('#Personal-box-update').toggle();
                }
            });
        }
    </script>
    <div class="row" id="Personal-box-Info">
        <div id="Personal_example">
            <div class="demo-section k-header">
                <div id="Personal_toolbar1"></div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
            <hr class="hr-tabstrip" />


            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.NameEnglish)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.NameEnglish)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.GenderView)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.GenderView)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.DateOfBirth)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @String.Format("{0:dd/MM/yyyy}", Model.DateOfBirth)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.NationalityName)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.NationalityName)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.PlaceOfBirth)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.PlaceOfBirth)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.MarriageStatus)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @{
    if (!string.IsNullOrEmpty(Model.MarriageStatus))
    {
        @Model.MarriageStatusView
    }
    else
    {
        @Model.MarriageStatus
    }
                    }
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.IDNo)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.IDNo)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.IDDateOfIssue)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @String.Format("{0:dd/MM/yyyy}", Model.IDDateOfIssue)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.IDPlaceOfIssue)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.IDPlaceOfIssue)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.Origin)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.Origin)
                </div>
            </div>
            @*<div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.TypeOfVehicle)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.TypeOfVehicle)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.LockerName)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.LockerName)
                </div>
            </div>*@
        </div>

        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
            <hr class="hr-tabstrip" />
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.EducationLevelName)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.EducationLevelName)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.EthnicGroupName)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.EthnicGroupName)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.Height)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.Height)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.Weight)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.Weight)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.BloodType)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.BloodType)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.PassportNo)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.PassportNo)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.PassportPlaceOfIssue)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.PassportPlaceOfIssue)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.PassportDateOfIssue)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @String.Format("{0:dd/MM/yyyy}", Model.PassportDateOfIssue)
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.PassportDateOfExpiry)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @String.Format("{0:dd/MM/yyyy}", Model.PassportDateOfExpiry)
                </div>
            </div>
            @*<div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.Smoke)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @{
    if (Model.Smoke == true)
    {
        <span>@("Yes".TranslateString())</span>
    }
    else if (Model.Smoke == false)
    {
        <span>@("No".TranslateString())</span>
    }
                    }
                </div>
            </div>
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.IsDrivingLisence)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @{
    if (Model.IsDrivingLisence == true)
    {
        <span>@("Yes".TranslateString())</span>
    }
    else if (Model.IsDrivingLisence == false)
    {
        <span>@("No".TranslateString())</span>
    }
                    }
                </div>
            </div>*@
            <div class="div-parent">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                    @Html.VnrLabelFor(model => model.Notes)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                    @Html.DisplayFor(model => model.Notes)
                </div>

            </div>
        </div>
    </div>


    <form action="#" method="POST" id="form-create-Personal">
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.ActionStatus)
        <div class="row" id="Personal-box-update">
            <div id="example2_Personal">
                <div class="demo-section k-header">
                    <div id="Personal_toolbar2"></div>
                </div>
            </div>


            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
                <hr class="hr-tabstrip" />
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.NameEnglish)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _NameEnglish = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.NameEnglish != null ? Model.NameEnglish : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.NameEnglish, _NameEnglish)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.GenderView)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
                                var ddlGender = new DropDownListBuilderInfo()
                                {
                                    DataTextField = "Text",
                                    DataValueField = "Value",
                                    StyleCss = "width:200px; height:25px",
                                    BindTo = listGender
                                };
                        }
                        @Html.VnrDropDownListFor(model => model.Gender, ddlGender)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.DayOfBirth)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var ddlDay = new DropDownListBuilderInfo()
    {
        Name = "DayOfBirth",
        DataTextField = "Text",
        DataValueField = "Value",
        StyleCss = "width:70px; height:25px",
        BindTo = lstDay,
        OptionLabel = string.Empty,
        Value = Model == null ? string.Empty : Model.DayOfBirth.ToString()
    };
                        }
                        @Html.VnrDropDownListFor(model => model.DayOfBirth, ddlDay)
                        @{
    var ddlMonth = new DropDownListBuilderInfo()
    {
        Name = "MonthOfBirth",
        DataTextField = "Text",
        DataValueField = "Value",
        StyleCss = "width:70px; height:25px",
        BindTo = lstMonth,
        OptionLabel = string.Empty,
        Value = Model == null ? string.Empty : Model.MonthOfBirth.ToString()
    };
                        }

                        @Html.VnrDropDownListFor(model => model.MonthOfBirth, ddlMonth)
                        @Html.Kendo().MaskedTextBoxFor(model => model.YearOfBirth).Mask("0000").HtmlAttributes(new { style = "width:50px" })
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.NationalityID)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
                            var _NationalityName = new ComboBoxBuilderInfo()
                             {
                                 DataTextField = "CountryName",
                                 DataValueField = "ID",
                                 Url = _Hrm_Hre_Service + "Cat_GetData/GetCountryCascading",
                                 StyleCss = "width:200px; height:25px",
                                 Value = Model == null ? string.Empty : Model.NationalityID.ToString(),
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.NationalityID, _NationalityName).Text(Model == null ? string.Empty : Model.NationalityName))
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.PlaceOfBirth)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        <script>
                            function filterProvinces() {

                                return {
                                    country: $("#NationalityID").val(),
                                    provinceFilter: $("#_PlaceOfBirth").data("kendoComboBox").input.val()
                                };
                            }
                        </script>

                        @{
                            var comboboxPlaceOfBirth = new ComboBoxBuilderInfo()
                            {
                                Name = "_PlaceOfBirth",
                                DataTextField = "ProvinceName",
                                DataValueField = "ProvinceName",
                                FilterType = FilterType.Contains,
                                StyleCss = "width:200px; height:25px",
                                Url = _Hrm_Hre_Service + "Cat_GetData/GetProvinceCascading",
                                CascadeFrom = "NationalityID",
                                Data = "filterProvinces",
                                Value = Model == null ? string.Empty : Model.PlaceOfBirth
                            };
                        }
                        @Html.VnrComboBoxFor(model => model.PlaceOfBirth, comboboxPlaceOfBirth).Text(Model == null ? string.Empty : Model.PlaceOfBirth)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.MarriageStatus)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var ddlxMarriageStatus = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listMarriageStatus,
        StyleCss = "Width: 200px; height:25px",
    };
                        }
                        @Html.VnrDropDownListFor(model => model.MarriageStatus, ddlxMarriageStatus)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.IDNo)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _IDNo = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.IDNo != null ? Model.IDNo : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.IDNo, _IDNo)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.IDDateOfIssue)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var iDDateOfIssue = new DatePickerBuilderInfo()
    {
        Format = ConstantFormat.HRM_Format_DayMonthYear,
        StyleCss = "width:200px; height:25px",
    };
                        }
                        @Html.VnrDatePickerFor(model => model.IDDateOfIssue, iDDateOfIssue)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.IDPlaceOfIssue)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        <script>
                            function filterProvinces1() {

                                return {
                                    country: $("#NationalityID").val(),
                                    provinceFilter: $("#_iDPlaceOfIssue").data("kendoComboBox").input.val()
                                };
                            }
                        </script>
                        @{
                                    var iDPlaceOfIssue = new ComboBoxBuilderInfo()
                                    {
                                        Name="_iDPlaceOfIssue",
                                        DataTextField = "ProvinceName",
                                        DataValueField = "ProvinceName",
                                        FilterType = FilterType.Contains,
                                        Url = _Hrm_Hre_Service + "Cat_GetData/GetProvinceCascading",
                                        CascadeFrom = "NationalityID",
                                        Data = "filterProvinces1",
                                        
                                        Value = Model == null ? string.Empty : Model.IDPlaceOfIssue
                                    };
                        }
                        @Html.VnrComboBoxFor(model => model.IDPlaceOfIssue, iDPlaceOfIssue).Text(Model == null ? string.Empty : Model.IDPlaceOfIssue)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.Origin)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
                            var _Origin = new TextBoxBuilderInfo()
                            {
                                ClassName = "customWH",
                                Value = Model != null && Model.Origin != null ? Model.Origin : string.Empty
                            };
                        }
                        @Html.VnrTextBoxFor(model => model.Origin, _Origin)
                    </div>
                </div>
                @*<div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.TypeOfVehicle)

                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _TypeOfVehicle = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.TypeOfVehicle != null ? Model.TypeOfVehicle : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.TypeOfVehicle, _TypeOfVehicle)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.LockerName)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _LockerName = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.LockerName != null ? Model.LockerName : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.LockerName, _LockerName)
                    </div>
                </div>*@
            </div>

            <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12 row-data">
                <hr class="hr-tabstrip" />
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.EducationLevelID)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
                            var _EducationLevelName = new ComboBoxBuilderInfo()
                                 {
                                     DataTextField = "NameEntityName",
                                     DataValueField = "ID",
                                     Url = _Hrm_Hre_Service + "Cat_GetData/GetEducationLevelOrd",
                                     StyleCss = "width:200px; height:25px",
                                     Value = Model == null ? string.Empty : Model.EducationLevelID.ToString(),
                                 };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.EducationLevelID, _EducationLevelName).Text(Model == null ? string.Empty : Model.EducationLevelName))
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.EthnicGroupName)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
                                var _EthnicName = new ComboBoxBuilderInfo()
                                     {
                                         DataTextField = "EthnicGroupName",
                                         DataValueField = "ID",
                                         Url = _Hrm_Hre_Service + "Cat_GetData/GetEthnicGroupOrd",
                                         StyleCss = "width:200px; height:25px",
                                         Value = Model == null ? string.Empty : Model.EthnicID.ToString(),
                                     };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.EthnicID, _EthnicName).Text(Model == null ? string.Empty : Model.EthnicGroupName))
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.Height)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _Height = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:200px; height:25px",

    };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Height, _Height)@Html.VnrLabel("(Cm)")
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.Weight)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _Weight = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:200px; height:25px",
    };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Weight, _Weight)@Html.VnrLabel("(Kg)")
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.BloodType)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _BloodType = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.BloodType != null ? Model.BloodType : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.BloodType, _BloodType)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.PassportNo)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _PassportNo = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.PassportNo != null ? Model.PassportNo : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.PassportNo, _PassportNo)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.PassportPlaceOfIssue)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _PassportPlaceOfIssue = new TextBoxBuilderInfo()
    {
        ClassName = "customWH",
        Value = Model != null && Model.PassportPlaceOfIssue != null ? Model.PassportPlaceOfIssue : string.Empty
    };
                        }
                        @Html.VnrTextBoxFor(model => model.PassportPlaceOfIssue, _PassportPlaceOfIssue)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.PassportDateOfIssue)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _PassportDateOfIssue = new DatePickerBuilderInfo()
    {
        Format = ConstantFormat.HRM_Format_DayMonthYear,
           StyleCss = "width:200px; height:25px"
       };
                        }
                        @Html.VnrDatePickerFor(model => model.PassportDateOfIssue, _PassportDateOfIssue)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.PassportDateOfExpiry)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _PassportDateOfExpiry = new DatePickerBuilderInfo()
       {
           Format = ConstantFormat.HRM_Format_DayMonthYear,
           StyleCss = "width:200px; height:25px",
       };
                        }
                        @Html.VnrDatePickerFor(model => model.PassportDateOfExpiry, _PassportDateOfExpiry)
                    </div>
                </div>
                @*<div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.Smoke)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var Smoke = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.Smoke == true)
        {
            Smoke.Value = true;
        }
        else
        {
            Smoke.Value = false;
        }
    }

                        }
                        @Html.VnrCheckBoxFor(model => model.Smoke, Smoke)
                    </div>
                </div>
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.IsDrivingLisence)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var IsDrivingLisence = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.IsDrivingLisence == true)
        {
            IsDrivingLisence.Value = true;
        }
        else
        {
            IsDrivingLisence.Value = false;
        }
    }

                        }
                        @Html.VnrCheckBoxFor(model => model.IsDrivingLisence, IsDrivingLisence)
                    </div>
                </div>*@
                <div class="div-parent">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-5 lable">
                        @Html.VnrLabelForNoneIcon(model => model.Notes)
                    </div>
                    <div class="padtop col-lg-7 col-md-7 col-sm-7 col-xs-7 value">
                        @{
    var _Notes = new TextBoxBuilderInfo()
    {
        Value = Model != null && Model.Notes != null ? Model.Notes : string.Empty,
        CssStyle = "width: 200px; Height:100px"
    };
                        }
                        @Html.VnrTextBoxFor(model => model.Notes, _Notes)
                    </div>

                </div>
            </div>
        </div>

    </form>
}

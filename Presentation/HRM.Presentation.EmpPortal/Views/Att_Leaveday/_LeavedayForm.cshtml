@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Utilities
@model HRM.Presentation.Attendance.Models.Att_LeaveDayModel

@{
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;

    IList<SelectListItem> listDurationType = Enum.GetValues(typeof(LeaveDayDurationType))
      .Cast<LeaveDayDurationType>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
      .OrderBy(M => M.Text).ToList();

    IList<SelectListItem> list = Enum.GetValues(typeof(AttendanceDataStatus))
        .Cast<AttendanceDataStatus>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();
    var orgID = Session["OrgStructureID"];
    SelectList data = new SelectList(list, "Value", "Text");
    var _ProID = Session["ProfileId"];
}


<script>
       
       
</script>

<div class="form-content">
    <div class="col-lg-4 col-md-5 col-sm-12 col-xs-12">
        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.HiddenFor(mode => mode.ID)
            @Html.VnrLabelFor(mode => mode.ProfileID)
            @Html.HiddenFor(model => model.IsPortal)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div>
                @{
                    System.Collections.IEnumerable userProfile = new string[] { };
                    //if (Model != null)
                    //{
                    var profileName = Session["ProfileName"];
                    var profileId = Session["ProfileId"];
                    userProfile = new[] { new { ProfileName = profileName, ID = profileId } };

                }
                @{
                    var mtsProfile = new MultiSelectBuilderInfo()
                    {
                        DataTextField = "ProfileName",
                        DataValueField = "ID",
                        Url = @_hrm_Hre_Service + "HrMultiSelect/GetMultiProfile",
                        Width = 180,
                        Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                        EventChange = "loadHighSupervisor_Leaveday",
                        Value = userProfile
                    };

                    if (Model != null)
                    {
                        if (Model.ID != Guid.Empty)
                        {
                            mtsProfile.MaxSelectedItems = 1;
                        }
                    }
                }
                <div>
                    <div style="float:left">
                        @Html.VnrMultiSelectFor(model => model.ProfileID, mtsProfile)
                    </div>
                    <div>
                        <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                    </div>
                </div>
                @(Html.HiddenFor(model => model.ProfileIds))
            </div>

        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabel(ConstantDisplay.HRM_Attendance_Leaveday_DateFromTo.TranslateString())
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div>
                <div style="float:left;">
                    @{
                        var dateStart = new DatePickerBuilderInfo()
                        {
                            Format = ConstantFormat.HRM_Format_DayMonthYear,
                            EventSelect = "onChageDate",
                            Placeholder = ConstantDisplay.HRM_Attendance_DateFrom.TranslateString(),
                            StyleCss = "width:90px"
                        };
                    }
                    <div style="float:left">
                        @Html.VnrDatePickerFor(model => model.DateStart, dateStart)
                    </div>
                </div>
                <div style="float:left;">
                    @{
                        var DateEnd = new DatePickerBuilderInfo()
                        {
                            Format = ConstantFormat.HRM_Format_DayMonthYear,
                            EventSelect = "onChageDate",
                            Placeholder = ConstantDisplay.HRM_Attendance_DateTo.TranslateString(),
                            StyleCss = "width:90px"
                        };
                    }
                    <div class="">
                        <div style="float:left">
                            @Html.VnrDatePickerFor(model => model.DateEnd, DateEnd)
                        </div>
                    </div>
                </div>
                <div>
                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabelFor(mode => mode.LeaveDayTypeID)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div class="">
                <div style="float:left">
                    @{
                        var mtsLeaveDayType = new DropDownListBuilderInfo()
                        {


                            DataTextField = "LeaveDayTypeName",
                            DataValueField = "ID",
                            Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiLeaveDayType",
                            OptionLabel = ConstantDisplay.HRM_Category_SelectLeaveDayType.TranslateString(),
                            StyleCss = "width:180px",
                            Value = @Html.DisplayFor(mode => mode.LeaveDayTypeID).ToString()
                        };
                    }
                    @(Html.VnrDropDownListFor(mode => mode.LeaveDayTypeID, mtsLeaveDayType))
                </div>
                <div>
                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabelFor(mode => mode.DurationType)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div class="">
                <div style="float:left">
                    @{
                        var DurationType = new DropDownListBuilderInfo()
                        {
                            BindTo = listDurationType,
                            DataTextField = "Text",
                            DataValueField = "Value",
                            OptionLabel = ConstantDisplay.HRM_Category_SelectType.TranslateString(),
                            StyleCss = "width:180px",
                            EventSelect = "onSelectDurationType"
                        };
                    }
                    @Html.VnrDropDownListFor(mode => mode.DurationType, DurationType)
                    <div id="DurationTypeDetail">
                        <div class="OtherDurationType" style="width:245px">
                            <div class="lable" style="text-align: left !important">
                                @Html.VnrLabelFor(mode => mode.HoursFrom)
                            </div>
                            <div class="value">
                                @{
                                    var dateFrom = new TimePickerBuilderInfo()
                                    {
                                        StyleCss = "width: 75px;",
                                    };
                                }
                                <div>
                                    <div style="float:left">
                                        @Html.VnrTimePickerFor(mode => mode.HoursFrom, dateFrom)
                                    </div>
                                    <div>
                                        <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                                    </div>
                                </div>

                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div class="OtherDurationType" style="width:245px">
                            <div class="lable" style="text-align: left !important">
                                @Html.VnrLabelFor(mode => mode.HoursTo)
                            </div>
                            <div class="value">
                                @{
                                    var dateTo = new TimePickerBuilderInfo()
                                    {
                                        StyleCss = "width: 75px;",
                                    };
                                }
                                <div>
                                    <div style="float:left">
                                        @Html.VnrTimePickerFor(mode => mode.HoursTo, dateTo)
                                    </div>
                                    <div>
                                        <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                                    </div>
                                </div>

                            </div>
                            <div style="clear: both;"></div>
                        </div>



                        <div class="OtherDurationType" style="width:245px">
                            <div class="lable" style="text-align: left !important">
                                @Html.VnrLabelFor(mode => mode.LeaveHours)
                            </div>
                            <div class="value">
                                <div>
                                    <div style="float:left">
                                        @Html.VnrTextBoxFor(mode => mode.LeaveHours, "width:75px;")
                                        @Html.HiddenFor(mode => mode.Duration)
                                    </div>
                                    <div>
                                        <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                                    </div>
                                </div>
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="DurationTypeFullShift">
                            <div class="lable" style="text-align:left!important">
                                @Html.VnrLabelFor(mode => mode.LeaveDays)
                            </div>
                            <div class="value">
                                <div>
                                    <div style="float:left">
                                        @Html.VnrTextBoxFor(mode => mode.LeaveDays, "width:75px;")
                                        @Html.HiddenFor(mode => mode.TotalDuration)
                                    </div>
                                    <div>
                                        <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                                    </div>
                                </div>
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </div>
                </div>
                <div>
                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabelFor(mode => mode.UserApproveID)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div class="">
                <div style="float:left">
                    @{
                        System.Collections.IEnumerable valueUserApprove = new string[] { };
                        if (Model != null)
                        {
                            valueUserApprove = new[] { new { UserInfoName = Model.UserApproveName, ID = Model.UserApproveID } };
                        }
                    }

                    @{
                        var multiSelectUserApproveID1 = new MultiSelectBuilderInfo()
                        {
                            DataTextField = "UserInfoName",
                            DataValueField = "ID",
                            Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_" + ApproveType.E_LEAVE_DAY.ToString(),
                            //GetMultiUserApproved_E_LEAVE_DAY
                            Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                            MaxSelectedItems = 1,
                            //ReadData = "userApproved1Data",
                            Value = valueUserApprove,
                            Width = 180
                        };
                    }
                    @Html.VnrMultiSelectFor(mode => mode.UserApproveID, multiSelectUserApproveID1)
                </div>
                <div>
                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabelFor(mode => mode.UserApproveID2)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div class="">
                <div style="float:left">
                    @{
                        System.Collections.IEnumerable valueUserApprove2 = new string[] { };
                        if (Model != null)
                        {
                            valueUserApprove2 = new[] { new { UserInfoName = Model.UserApproveName2, ID = Model.UserApproveID2 } };
                        }
                    }
                    @{
                        var multiSelectUserApproveID2 = new MultiSelectBuilderInfo()
                        {
                            DataTextField = "UserInfoName",
                            DataValueField = "ID",
                            Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_" + ApproveType.E_LEAVE_DAY.ToString(),
                            //GetMultiUserApproved_E_LEAVE_DAY
                            Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                            MaxSelectedItems = 1,
                            //ReadData = "userApproved2Data",
                            Value = valueUserApprove2,
                            Width = 180
                        };
                    }
                    @Html.VnrMultiSelectFor(mode => mode.UserApproveID2, multiSelectUserApproveID2)
                </div>
                <div>
                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabelFor(mode => mode.Status)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div >
                <div style="float:left">
                    @{
                        var Status = new DropDownListBuilderInfo()
                        {
                            Name="Dropdown_Status",
                            BindTo = list,
                            DataTextField = "Text",
                            DataValueField = "Value",
                            StyleCss = "width:180px",
                            Value = AttendanceDataStatus.E_SUBMIT.ToString()
                        };
                    }
                    @Html.VnrDropDownListFor(mode => mode.Status, Status)
                </div>

                <div>
                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                </div>
            </div>

            @*<div id="div13">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.Status)
                </div>
                <div class="FieldValue">
                    @{
                        var dropdownStatus = new DropDownListBuilderInfo()
                        {
                            Name = "Status",
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = listStatus,
                            Value = AttendanceDataStatus.E_SUBMIT.ToString(),
                        };
                    }
                    @(Html.VnrDropDownListFor(mode => mode.Status, dropdownStatus))
                </div>
                <br />
            </div>*@



        </div>

    </div>
    <div class="col-lg-4 col-md-5 col-sm-12 col-xs-12">
        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @ConstantDisplay.HRM_Attendance_Leaveday_CommentReson.TranslateString()
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div class="">
                <div style="float:left">
                    @Html.VnrTextAreaFor(model => model.Comment, "width:180px")
                </div>
                <div>
                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabelFor(mode => mode.CommentApprove)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div class="">
                <div style="float:left">
                    @Html.VnrTextAreaFor(model => model.CommentApprove, "width:180px")
                </div>
                @*<div>
                        <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                    </div>*@
            </div>
        </div>

        <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
            @Html.VnrLabelFor(mode => mode.DeclineReason)
        </div>
        <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
            <div class="">
                <div style="float:left">
                    @Html.VnrTextAreaFor(model => model.DeclineReason, "width:180px")
                </div>
                @*<div>
                        <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                    </div>*@
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-md-2 col-sm-12 col-xs-12"></div>


</div>

<script>
    function onSelectUserApprovedOvertime(e) {
        debugger;
        var user1 = $("#UserApproveID2").data("kendoMultiSelect");
        user1.value($("#UserApproveID").val());
    }
</script>

<script>
                function userApproved1Data(e) {
                    debugger;
                    return {
                        text: $("#UserApproveID").data("kendoMultiSelect")._prev + "|" + '@orgID'
                    };
                }
                function userApproved2Data(e) {
                    return {
                        text: $("#UserApproveID2").data("kendoMultiSelect")._prev + "|" + '@orgID'
                    };
                }
</script>
<script>
    $(document).ready(function () {
        debugger;
        var dropdownlist = $("#Dropdown_Status").data("kendoDropDownList");
        dropdownlist.readonly();



                var hoursFrom = $("#HoursFrom").data("kendoTimePicker");
                var hoursTo = $("#HoursTo").data("kendoTimePicker");
                hoursFrom.enable(false);
                hoursTo.enable(false);
                document.getElementById("LeaveHours").readOnly = true;
                document.getElementById("LeaveDays").readOnly = true;
                var item1 = document.getElementsByClassName("OtherDurationType");
                var item2 = document.getElementById("DurationTypeFullShift");
                var item3 = document.getElementById("DurationTypeDetail");
                var value = $("#DurationType").val();
                if (value == '@LeaveDayDurationType.E_FULLSHIFT') {
                    SetShowHide(item1, item2, "none", "");
                    item3.style.display = "";
                }
                else {
                    if (value == '@LeaveDayDurationType.E_MIDDLEOFSHIFT') {
                        debugger;
                        hoursFrom.enable(true);
                        hoursTo.enable(true);
                    }
                    SetShowHide(item1, item2, "", "none");
                    item3.style.display = "";
                }
            });
</script>
<script>
                function ComputeDurationTypes(ShiftType) {
                    debugger;
                    var dateStart = $("#DateStart").val();
                    var dateEnd = $("#DateEnd").val();
                    if (dateStart != '' && dateEnd != '') {

                        var temp1 = dateStart.split("/");
                        var temp2 = dateEnd.split("/");
                        var dateStartNew = temp1[1] + "/" + temp1[0] + "/" + temp1[2];
                        var dateEndNew = temp2[1] + "/" + temp2[0] + "/" + temp2[2];
                        var profileIds = $("#ProfileID").val();
                        var profileId = profileIds != null && profileIds.length > 0 ? profileIds[0] : null;

                        $.ajax({
                            url: '@_hrm_Hre_Service' + "Att_GetData/GetRosterForCheckLeaveDay/",
                            data: { profileId: profileId, dateStart: dateStartNew, dateEnd: dateEndNew, ShiftType: ShiftType },
                            type: 'POST',
                            success: function (data) {
                                debugger;
                                if (data.Messages != null) {
                                    ShowNotificationProcessor(data.Messages);
                                    $("#LeaveHours").val(0);
                                    $("#LeaveDays").val(0);
                                }
                                else {
                                    $("#LeaveDays").val(data.LeaveDays);
                                    var hoursFrom = new Date(parseInt(data.HoursFrom.substr(6)));
                                    var hoursTo = new Date(parseInt(data.HoursTo.substr(6)));
                                    var time1 = hoursFrom.toTimeString().substr(0, 5);
                                    var time2 = hoursTo.toTimeString().substr(0, 5);

                                    $("#HoursFrom").val(time1);
                                    $("#HoursTo").val(time2);
                                    $("#LeaveHours").val(data.LeaveHours);
                                }
                            },
                            error: function (data) {
                                ShowNotificationProcessor(data.responseText);
                            }
                        });
                    }

                }

                                function onSelectDurationType(e) {
                                    debugger;
                                    var dataItem = this.dataItem(e.item.index());
                                    var value = dataItem.Value;
                                    SetComputeDurationTypes(value);
                                }

                                function HoursChange() {
                                    debugger;
                                    var timeFrom = $("#HoursFrom").val();
                                    var timeTo = $("#HoursTo").val();
                                    var totalHours = 0;
                                    if ((timeFrom != null && timeFrom != '' && timeFrom != undefined) && (timeTo != null && timeTo != '' && timeTo != undefined)) {
                                        var timesTo = timeTo.split(':');
                                        var hTo = timesTo[0];
                                        var mTo = timesTo[1];
                                        var timesFrom = timeFrom.split(':');
                                        var hFrom = timesFrom[0];
                                        var mFrom = timesFrom[1];
                                        var m = parseInt(mTo) - parseInt(mFrom);
                                        var h = (parseInt(hTo) * 60) - (parseInt(hFrom) * 60);
                                        h = (h + m) / 60;

                                        totalHours = h;
                                        $("#LeaveHours").val(totalHours);
                                        var ds = $("#DateStart").val();
                                        var de = $("#DateEnd").val();
                                        var dateStart = ds.substring(0,10) + " " + timeFrom + ":00";
                                        var dateEnd = de.substring(0, 10) + " " + timeTo + ":00";
                                        $("#DateStart").val(dateStart)
                                        $("#DateEnd").val(dateEnd)
                                    }
                                }
</script>
<script>
                function SetShowHide(item1, item2, value1, value2) {
                    for (var i = 0; i < item1.length; i++) {
                        item1[i].style.display = value1;
                        item2.style.display = value2;
                    }
                }

                function SetComputeDurationTypes(value) {
                    var item1 = document.getElementsByClassName("OtherDurationType");
                    var item2 = document.getElementById("DurationTypeFullShift");
                    var item3 = document.getElementById("DurationTypeDetail");
                    var hoursFrom = $("#HoursFrom").data("kendoTimePicker");
                    var hoursTo = $("#HoursTo").data("kendoTimePicker");
                    if (value == '@LeaveDayDurationType.E_FULLSHIFT') {
                        SetShowHide(item1, item2, "none", "");
                        ComputeDurationTypes(value);
                        item3.style.display = "";
                    }
                    else if (value == '@LeaveDayDurationType.E_FIRSTHALFSHIFT') {
                        SetShowHide(item1, item2, "", "none");
                        document.getElementById("LeaveHours").readOnly = true;

                        ComputeDurationTypes(value);
                        item3.style.display = "";
                        hoursFrom.enable(false);
                        hoursTo.enable(false);
                    }
                    else if (value == '@LeaveDayDurationType.E_LASTHALFSHIFT') {
                        SetShowHide(item1, item2, "", "none");
                        document.getElementById("LeaveHours").readOnly = true;

                        ComputeDurationTypes(value);
                        item3.style.display = "";
                        hoursFrom.enable(false);
                        hoursTo.enable(false);
                    }
                    else if (value == '@LeaveDayDurationType.E_MIDDLEOFSHIFT') {
                        $("#HoursFrom").val("");
                        $("#HoursTo").val("");
                        $("#LeaveHours").val(0);
                        hoursFrom.enable();
                        hoursTo.enable();
                        document.getElementById("LeaveHours").readOnly = false;
                        SetShowHide(item1, item2, "", "none");
                        item3.style.display = "";
                    }
                    else {
                        $("#HoursFrom").val("");
                        $("#HoursTo").val("");
                        $("#LeaveHours").val(0);
                        $("#LeaveDays").val(0);
                        item3.style.display = "none";
                    }
                }
                function onChageDate(e) {
                    var value = $("#DurationType").val();
                    SetComputeDurationTypes(value);
                }
</script>
<script>
        function loadHighSupervisor_Leaveday() {
            debugger;
            var pro = '@_ProID';
            if (pro != null) {
                $.ajax({
                    type: 'POST',
                    url: '@_hrm_Hre_Service' + 'Hre_GetData/GetHighSupervisor',
                    data: { ProfileID: pro },
                    datatype: 'JSON',
                    success: function (result) {
                        debugger;
                        var multiUserApproveID = $("#UserApproveID").data("kendoMultiSelect");
                        var multiUserApproveID2 = $("#UserApproveID2").data("kendoMultiSelect");

                        if (result.SupervisorID != null) {
                            multiUserApproveID.dataSource.add({ UserInfoName: result.SupervisorName, ID: result.SupervisorID });
                            multiUserApproveID.refresh();

                            multiUserApproveID.value(result.SupervisorID);
                        } else {
                            multiUserApproveID.refresh();
                            multiUserApproveID.value(null);
                        }

                        if (result.HighSupervisorID != null) {
                            multiUserApproveID2.dataSource.add({ UserInfoName: result.HighSupervisorName, ID: result.HighSupervisorID });
                            multiUserApproveID2.refresh();

                            multiUserApproveID2.value(result.HighSupervisorID);
                        } else {
                            multiUserApproveID2.refresh();
                            multiUserApproveID2.value(null);
                        }
                    }
                });
            } else {
                var multiUserApproveID = $("#UserApproveID").data("kendoMultiSelect");
                var multiUserApproveID2 = $("#UserApproveID2").data("kendoMultiSelect");
                multiUserApproveID.refresh();
                multiUserApproveID.value(null);
                multiUserApproveID2.refresh();
                multiUserApproveID2.value(null);
            }
        };
</script>
<script>
    $(document).ready(function () {

        $('#@Html.FieldIdFor(model=>model.IsPortal)').val(true);
                    debugger;
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hre_Service' + 'Hre_GetData/GetHighSupervisor',
                        data: { ProfileID: '@_ProID' },
                        datatype: 'JSON',
                        success: function (result) {
                            debugger;
                            var multiUA1 = $("#UserApproveID").data("kendoMultiSelect");
                            var multiUA2 = $("#UserApproveID2").data("kendoMultiSelect");

                            if (result.SupervisorID != null) {
                                multiUA1.dataSource.add({ UserInfoName: result.SupervisorName, ID: result.SupervisorID });
                                multiUA1.refresh();

                                multiUA1.value(result.SupervisorID);
                            } else {
                                multiUA1.refresh();
                                multiUA1.value(null);
                            }

                            if (result.HighSupervisorID != null) {
                                multiUA2.dataSource.add({ UserInfoName: result.HighSupervisorName, ID: result.HighSupervisorID });
                                multiUA2.refresh();

                                multiUA2.value(result.HighSupervisorID);
                            } else {
                                multiUA2.refresh();
                                multiUA2.value(null);
                            }
                        }
                    });

            });
</script>
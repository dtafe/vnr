@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Attendance.Models

@model Att_OvertimeAnalysisModel
@{
    ViewBag.Title = "Yêu Cầu Tăng Ca";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _Hrm_EmpPortal_Web = ConstantPathWeb.Hrm_EmpPortal_Web;
     

    IList<SelectListItem> listMethodPayment = Enum.GetValues(typeof(EnumDropDown.MethodPayment))
         .Cast<EnumDropDown.MethodPayment>()
         .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
         .ToList();

    IList<SelectListItem> listStatus = Enum.GetValues(typeof(EnumDropDown.OverTimeStatus))
       .Cast<EnumDropDown.OverTimeStatus>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
       .ToList();

    IList<SelectListItem> listOTDurationType = Enum.GetValues(typeof(EnumDropDown.OvertimeDurationType))
 .Cast<EnumDropDown.OvertimeDurationType>()
 .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(M => M.Text)
 .ToList();
    var ProfileId = Session["ProfileID"];
    var UserId = Session["UserId"];
    var orgID = Session["OrgStructureID"];
}

<script>
    //Các biến dùng chung trong page
    var GlobalDataSource = [];
    var IsFirstEvenDataBound = true;
    var LenghtGlobalDataSource = 0;
    var IsDelete = false;
    var IsCheckValidate = false;

    SetFieldRequiredByScreenName("Att_Overtime");
    var h = 0;
    function eventParaData() {
        debugger;
        var _profileID = '@Session["ProfileID"]';
        var _dateTime = $('#@Html.FieldIdFor(model => model.WorkDate)').val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $('#@Html.FieldIdFor(model => model.WorkDate)').val()) : null;
        var _dateHour = $("#WorkDateIn").val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#WorkDateIn").val()) : null;
        var _shiftID = $('#@Html.FieldIdFor(model => model.ShiftID)').val() != null ? $('#@Html.FieldIdFor(model => model.ShiftID)').val() : null;
        var _overtimeType = $('#SOvertimeTypeID').val() != null ? $('#SOvertimeTypeID').val() : null;
        var _registerHours = $('#SRegisterHours').val() != null ? $('#SRegisterHours').val() : null;
        var _methodPayment = $('#SMethodPayment').val() != null ? $('#SMethodPayment').val() : null;
        var _userApproveID = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').val() : null;
        var _userApproveID2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').val() : null;
        var _userApproveName = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').data("kendoComboBox").text() : null;
        var _userApproveName2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').data("kendoComboBox").text() : null;

        var _userApproveID3 = $('#UserApproveID_3').val() != null ? $('#UserApproveID_3').val() : null;
        var _userApproveName3 = $('#UserApproveID_3').val() != null ? $('#UserApproveID_3').data("kendoComboBox").text() : null;


        var _reasonOT = $('#SReasonOT').val() != null ? $('#SReasonOT').val() : null;
        var _durationType = $('#@Html.FieldIdFor(model => model.DurationType)').val() != null ? $('#@Html.FieldIdFor(model => model.DurationType)').val() : null;
        var _status = $('#@Html.FieldIdFor(model => model.Status)').val();
        //var _time = $('#Vnr_MaskedTextBox_Time').val();

        var dtime = $('#WorkDate').val();
        debugger;
        var _time = dtime.substring(dtime.length - 5, dtime.length) + ":00";

        var param = {
            ProfileID: _profileID,
            WorkDate: _dateTime,
            WorkDateTime: "00:00:00",
            WorkHour: _dateHour,
            ShiftID: _shiftID,
            OvertimeTypeID: _overtimeType,
            RegisterHours: _registerHours,
            MethodPayment: _methodPayment,
            UserApproveID: _userApproveID,
            UserApproveID2: _userApproveID2,
            UserApproveID3:_userApproveID3,
            UserApproveName: _userApproveName,
            UserApproveName2: _userApproveName2,
            UserApproveName3: _userApproveName3,
            DurationType: _durationType,
            ReasonOT: _reasonOT,
            Status: _status
        };
        return param;
    };

    function paramSave() {
        debugger;
        var _profileID = '@Session["ProfileID"]';
        var _dateTime = $('#@Html.FieldIdFor(model => model.WorkDate)').val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $('#@Html.FieldIdFor(model => model.WorkDate)').val()) : null;
        var _dateHour = $("#WorkDateIn").val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#WorkDateIn").val()) : null;
        var _shiftID = $('#@Html.FieldIdFor(model => model.ShiftID)').val() != null ? $('#@Html.FieldIdFor(model => model.ShiftID)').val() : null;
        var _overtimeType = $('#SOvertimeTypeID').val() != null ? $('#SOvertimeTypeID').val() : null;
        var _registerHours = $('#SRegisterHours').val() != null ? $('#SRegisterHours').val() : null;
        var _methodPayment = $('#SMethodPayment').val() != null ? $('#SMethodPayment').val() : null;
        var _userApproveID = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').val() : null;
        var _userApproveID2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').val() : null;
        var _userApproveName = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').data("kendoComboBox").text() : null;
        var _userApproveName2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').data("kendoComboBox").text() : null;

        var _userApproveID3 = $('#UserApproveID_3').val() != null ? $('#UserApproveID_3').val() : null;
        var _userApproveName3 = $('#UserApproveID_3').val() != null ? $('#UserApproveID_3').data("kendoComboBox").text() : null;



        var _reasonOT = $('#SReasonOT').val() != null ? $('#SReasonOT').val() : null;
        var _durationType = $('#@Html.FieldIdFor(model => model.DurationType)').val() != null ? $('#@Html.FieldIdFor(model => model.DurationType)').val() : null;
        var _status = $('#@Html.FieldIdFor(model => model.Status)').val();

        var dtime = $('#WorkDate').val();
        debugger;
        var _time = dtime.substring(dtime.length - 5, dtime.length) + ":00";
        //var _time = $('#Vnr_MaskedTextBox_Time').val();
        var param = {
            ProfileID: _profileID,
            WorkDate: _dateTime,
            WorkDateTime: "00:00:00",
            WorkHour: _dateHour,
            ShiftID: _shiftID,
            OvertimeTypeID: _overtimeType,
            RegisterHours: _registerHours,
            MethodPayment: _methodPayment,
            UserApproveID: _userApproveID,
            UserApproveID2: _userApproveID2,
            UserApproveName: _userApproveName,
            UserApproveName2: _userApproveName2,
            UserApproveID3:_userApproveID3,
            UserApproveName3:_userApproveName3,
            DurationType: _durationType,
            ReasonOT: _reasonOT,
            Status: _status
        };
        return param;
    };

    $(document).ready(function () {


        $("#Vnr_MaskedTextBox_Time").kendoMaskedTextBox({
            mask: "~!:&#:$%",
            rules: {
                "~": function (char) {
                    if (char == 0 || char == 1 || char == 2) {
                        h = char;
                        return char;
                    }
                    return "";
                },
                "!": function (char) {
                    if (h == 2) {
                        if (char > 3)
                            return "";
                    }
                    return char;
                },
                "&": function (char) {
                    if (char > 5)
                        return "";
                    return char;
                },
                "#": function (char) {
                    return char;
                },
                "$": function (char) {
                    if (char > 5)
                        return "";
                    return char;
                },
                "%": function (char) {
                    return char;
                },
            }
        });

        $("#btnAnalysis").click(function () {
            //if (window.CheckValidate(data)) {
            debugger;
            debugger;
            var userId = $("#UserLoginId").val();
            var userApprove1 = $("#UserApproveID_1").val();
            var userApprove2 = $("#UserApproveID_2").val();
            if (userId == userApprove1 || userId == userApprove2) {
                ShowNotificationProcessor("Người duyệt phải khác người đăng ký.");
            }
            else {

                var grid = $("#gridAtt_OvertimeAnalysis").data("kendoGrid");
                parameterMap = grid.dataSource.transport.parameterMap;
                var data = {};
                var dataTemp = {};

                var currentData = grid.dataSource.data();

                var updatedRecords = [];
                var newRecords = [];

                for (var i = 0; i < currentData.length; i++) {
                    updatedRecords.push(currentData[i].toJSON());
                }

                $.extend(data, parameterMap({ models: updatedRecords, params: eventParaData() }));


                $.ajax({
                    type: 'POST',
                    url: '@_hrm_Hre_Service' + 'Att_GetData/AnalysisOvertimeListValidatePortal',
                    data: data,
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        debugger;
                        if (data[0] == "error") {
                            ShowNotificationProcessor(data[1]);
                        } else if (data[0] == "errorRegisterHours") {
                            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Số Giờ ĐK Vượt Mức Số Giờ ĐK Quy Định", "k-block k-info-colored");
                        }
                        else {
                            IsCheckValidate = true;
                            $('#gridAtt_OvertimeAnalysis').data('kendoGrid').dataSource.read();
                        }
                        return false;
                    }
                });
            }
        });
    });

    //function ReloadGridOvertimeAnalysis1() {
    //    if (IsFirstEvenDataBound)
    //    {
    //        debugger;
    //        var Grid = $('#gridAtt_OvertimeAnalysis').data('kendoGrid');
    //        debugger;
    //        var DataSource = Grid.dataSource.data();
    //        for (var i = 0; i < DataSource.length; i++) {
    //            GlobalDataSource.push(DataSource[i]);
    //        }
    //        MappingDataSourceToGlobalData();
    //    }
    //};

    function MappingDataSourceToGlobalData() {
        debugger;
        IsFirstEvenDataBound = false;
        var Grid = $('#gridAtt_OvertimeAnalysis').data('kendoGrid');
        //xóa hết dữ liệu
        Grid.dataSource.data([]);
        for (var i = 0; i < GlobalDataSource.length; i++)
        {
            Grid.dataSource.add({
                ProfileID: GlobalDataSource[i].ProfileID, CodeEmp: GlobalDataSource[i].CodeEmp, ProfileName: GlobalDataSource[i].ProfileName, WorkDate: GlobalDataSource[i].WorkDate, ShiftName: GlobalDataSource[i].ShiftName,
                OvertimeTypeID: GlobalDataSource[i].OvertimeTypeID, DurationType: GlobalDataSource[i].DurationType, RegisterHours: GlobalDataSource[i].RegisterHours,
                Status: GlobalDataSource[i].Status, MethodPayment: GlobalDataSource[i].MethodPayment, ReasonOT: GlobalDataSource[i].ReasonOT, UserApproveID: GlobalDataSource[i].UserApproveID,
                UserApproveID2: GlobalDataSource[i].UserApproveID2, ShiftID: GlobalDataSource[i].ShiftID
            });
        }
        IsFirstEvenDataBound = true;
    };

    //Hàm xử lý lưu lại giữ liệu trên lưới khi read lại lưới
    function ReloadGridOvertimeAnalysis() {
        debugger;
        if (IsFirstEvenDataBound) {
            debugger;
            var Grid = $('#gridAtt_OvertimeAnalysis').data('kendoGrid');
            debugger;
            var DataSource = Grid.dataSource.data();
            for (var i = 0; i < DataSource.length; i++) {
                GlobalDataSource.push(DataSource[i]);
            }
            MappingDataSourceToGlobalData();
        }

        var grid = $('#gridAtt_OvertimeAnalysis').data("kendoGrid");
        grid.tbody.find('>tr').each(function () {
            debugger;
            var dataItem = grid.dataItem(this);

            var valueField = dataItem['Status'];

            //Xử Lý đổi màu cột
            if (valueField != '' && valueField != undefined) {
                debugger;
                if (valueField == "Yêu Cầu" || valueField == "E_SUBMIT") {
                    $(this.cells[7]).attr('style', 'color:#FF9900');
                }
                if (valueField == "Yêu Cầu" || valueField == "E_APPROVED") {
                    $(this.cells[7]).attr('style', 'color:#00CC00');
                } if (valueField == "Yêu Cầu" || valueField == "E_REJECTED") {
                    $(this.cells[7]).attr('style', 'color:#FF0000');
                }
            }
        });
    };


    //update lại số giờ đăng ký
    function UpdateRegisterHours() {
        var RegisterHours = $('#SRegisterHours').data("kendoNumericTextBox");
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hre_Service' + 'Att_GetData/UpdateRegisterHours',
            data: { timeStart: $("#WorkDateIn").val(), timeEnd: $("#WorkDateOut").val() },
            dataType: 'json',
            success: function (data) {
                RegisterHours.value(data);
            }
        });

    };

    function ShowPaymentMethod() {
        debugger;
        var pro = '@ProfileId'
        var _dateTime = $('#@Html.FieldIdFor(model => model.WorkDate)').val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $('#@Html.FieldIdFor(model => model.WorkDate)').val()) : null;
        if (pro != null) {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + "Att_GetData/GetPaymentMethodByProfileID",
                data: { ProfileID: pro, WorkDate: _dateTime },
                dataType: 'json',
                success: function (data) {
                    debugger;
                    if (data != "") {
                        var _methodPayment = $('#SMethodPayment').data("kendoDropDownList");
                        _methodPayment.value(data);
                    }
                }
            });
        }
    }

</script>

@*<div>
        @ViewBag.MsgInsert
    </div>*@


<form action="#" method="POST" id="form-update-create">
    <div class="container">

        <div class="row">
            <ul class="breadcrumb hidden-xs" style="margin-bottom:auto">
                <li><a href="/Portal/Home">Trang Chủ</a></li>
                <li><a href="#">Yêu Cầu</a></li>
                <li><a href="/Att_Overtime/Submit">Tăng Ca</a></li>
                <li class="active">Tạo Mới Tăng Ca</li>
            </ul>
        </div>
    </div>
    <div class="form-tile">@*Tạo Mới Tăng Ca (@Html.ActionLink("Danh sách", "Approve"))*@</div>
    <div class="form-create-update">
        <div id="toolbarEditOvertime"></div>
        <div class="form-content">
            <div class="col-lg-4 col-md-5 col-sm-12 col-xs-12">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.ProfileID)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var profileName = Session["ProfileName"];
                            var profileId = Session["ProfileID"];
                            var valueProfile = new[] { new { ProfileName = profileName, ID = profileId } };
                            var mtsProfile = new MultiSelectBuilderInfo()
                            {
                                DataTextField = "ProfileName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "HrMultiSelect/GetMultiProfile",
                                Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                Width = 180,
                                Value = valueProfile,
                                //EventChange="text001"
                            };

                            if (Model != null)
                            {
                                if (Model.ID != Guid.Empty)
                                {
                                    mtsProfile.MaxSelectedItems = 1;
                                }
                            }
                        }
                        <div class="">
                            <div style="float:left">
                                @(Html.VnrMultiSelectFor(mode => mode.ProfileID, mtsProfile))
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @*@Html.VnrLabel(ConstantDisplay.HRM_Attendance_Overtime_StartOT.TranslateString())*@
                    Ngày Công
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div style="float:left">
                        @{
                            var _WorkDate = new DatePickerBuilderInfo()
                            {
                                Value = @Html.DisplayFor(mode => mode.WorkDate).ToString(),
                                StyleCss = "width:180px",
                                EventSelect="ShowPaymentMethod"
                            };
                        }
                        <div style="float:left">
                            @Html.VnrDatePickerFor(model => model.WorkDate, _WorkDate)
                        </div>
                        <div style="float:left">
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                    </div>
                </div>

                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                  @Html.Raw(ConstantDisplay.HRM_Attendance_InOut_InTime.TranslateString())/
                    @Html.Raw(ConstantDisplay.HRM_Attendance_InOut_OutTime.TranslateString())
                </div>

                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div style="float:left">
                        @{
                            var _WorkDateIn = new TimePickerBuilderInfo()
                            {
                                Name = "WorkDateIn",
                                StyleCss = "width:90px",
                                EventChange = "UpdateRegisterHours",
                            };
                        }
                        <div style="float:left">
                            @Html.VnrTimePicker(_WorkDateIn)
                        </div>
                    </div>
                    <div>
                        @{
                            var _WorkDateOut = new TimePickerBuilderInfo()
                            {
                                Name = "WorkDateOut",
                                StyleCss = "width:90px",
                                EventChange = "UpdateRegisterHours",
                            };
                        }
                        <div style="float:left">
                            @Html.VnrTimePicker(_WorkDateOut)
                        </div>
                    </div>

                </div>


                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.ShiftID)
                </div>

                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var dropdownShiftID = new DropDownListBuilderInfo()
                            {
                                DataTextField = "ShiftName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiShift",
                                OptionLabel = @ConstantDisplay.HRM_Attendance_SelectShift.TranslateString(),
                                StyleCss = "width:180px"
                            };
                        }
                        <div style="float:left">
                            @(Html.VnrDropDownListFor(mode => mode.ShiftID, dropdownShiftID))
                        </div>
                        <div>
                            <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                        </div>
                    </div>
                </div>


                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.RegisterHours)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var numericTextBoxRegisterHours = new NumericTextBoxBuilderInfo<double>()
                            {
                                Name = "SRegisterHours",
                                StyleCss = "width:180px",
                                Format = ConstantFormat.HRM_Format_Number_Double
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @Html.VnrNumericTextBoxFor(model => model.RegisterHours, numericTextBoxRegisterHours)
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.DurationType)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var dropdownOvertimeDurationType = new DropDownListBuilderInfo()
                            {
                                DataTextField = "Text",
                                DataValueField = "Value",
                                BindTo = listOTDurationType,
                                OptionLabel = ConstantDisplay.HRM_Attendance_SelectType.TranslateString(),
                                StyleCss = "width:180px"
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @(Html.VnrDropDownListFor(mode => mode.DurationType, dropdownOvertimeDurationType))
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.OvertimeTypeID)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var dropdownOvertimeTypeID = new DropDownListBuilderInfo()
                            {
                                Name = "SOvertimeTypeID",
                                DataTextField = "OvertimeTypeName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiOvertimeType",
                                Value = @Html.DisplayFor(mode => mode.OvertimeTypeID).ToString(),
                                OptionLabel = @ConstantDisplay.HRM_Attendance_SelectOvertimeType.TranslateString(),
                                StyleCss = "width:180px"
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @(Html.VnrDropDownListFor(mode => mode.OvertimeTypeID, dropdownOvertimeTypeID))
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-lg-4 col-md-5 col-sm-12 col-xs-12">
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.MethodPayment)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var dropdownMethodPayment = new DropDownListBuilderInfo()
                            {
                                Name = "SMethodPayment",
                                DataTextField = "Text",
                                DataValueField = "Value",
                                BindTo = listMethodPayment,
                                OptionLabel = ConstantDisplay.HRM_Attendance_SelectMethodPayment.TranslateString(),
                             //   Value = EnumDropDown.MethodPayment.E_CASHOUT.ToString(),
                                StyleCss = "width:180px"
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @(Html.VnrDropDownListFor(mode => mode.MethodPayment, dropdownMethodPayment))
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.UserApproveID)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        <script>
                            function userApproved1Data() {
                                return {
                                    text: $("#UserApproveID_1").data("kendoComboBox").text() + "|" + '@orgID'
                                };
                            }
                            function userApproved2Data() {
                                return {
                                    text: $("#UserApproveID_2").data("kendoComboBox").text() + "|" + '@orgID'
                                };
                            }
                        </script>
                        @{
                            var multiSelectUserApproveID1 = new ComboBoxBuilderInfo()
                            {
                                Name = "UserApproveID_1",
                                DataTextField = "UserInfoName",
                                DataValueField = "ID",
                                ServerFilter = true,
                                Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_E_OVERTIME",
                                Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                                EventChange = "onSelectUserApprovedOvertime",
                                //Data = "userApproved1Data",
                                StyleCss = "width:180px"
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @Html.VnrComboBoxFor(mode => mode.UserApproveID, multiSelectUserApproveID1)
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="idUserApproveID3" hidden="hidden">
                    <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                        @Html.VnrLabelFor(mode => mode.UserApproveID3)
                    </div>
                    <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                        <div>
                            @{
                                var _UserApproveID3 = new ComboBoxBuilderInfo()
                                {
                                    Name = "UserApproveID_3",
                                    DataTextField = "UserInfoName",
                                    DataValueField = "ID",
                                    Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_E_OVERTIME",
                                    Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                                    StyleCss = "width:180px"
                                };
                            }
                            <div class="">
                                <div style="float:left">
                                    @Html.VnrComboBoxFor(mode => mode.UserApproveID3, _UserApproveID3)
                                </div>
                                <div>
                                    <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.UserApproveID2)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var multiSelectUserApproveID2 = new ComboBoxBuilderInfo()
                            {
                                Name = "UserApproveID_2",
                                DataTextField = "UserInfoName",
                                DataValueField = "ID",
                                ServerFilter = true,
                                Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_E_OVERTIME",
                                //Data = "userApproved2Data",
                                Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                                StyleCss = "width:180px",
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @Html.VnrComboBoxFor(mode => mode.UserApproveID2, multiSelectUserApproveID2)
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                    <script>
                        function onSelectUserApprovedOvertime(e) {
                            debugger;
                            var user1 = $("#UserApproveID_1").data("kendoComboBox");
                            var user2 = $("#UserApproveID_2").data("kendoComboBox");
                            var user3 = $("#UserApproveID_3").data("kendoComboBox");
                            user2.value(user1.value());
                            user2.text(user1.text());
                            user3.value(user1.value());
                            user3.text(user1.text());
                        }
                    </script>
                </div>
                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.ReasonOT)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @*@Html.VnrTextAreaFor(model => model.ReasonOT, "width:250px")*@
                        @{
                            var _area = new TextAreaBuilderInfo()
                            {
                                Name = "SReasonOT",
                                CssStyle = "width:180px"
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @Html.VnrTextAreaFor(model => model.ReasonOT, _area)
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                    @Html.VnrLabelFor(mode => mode.Status)
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    <div>
                        @{
                            var Status = new DropDownListBuilderInfo()
                            {
                                BindTo = listStatus,
                                DataTextField = "Text",
                                DataValueField = "Value",
                                Value = AttendanceDataStatus.E_SUBMIT.ToString(),
                                StyleCss = "Width:180px"
                            };
                        }
                        <div class="">
                            <div style="float:left">
                                @Html.VnrDropDownListFor(mode => mode.Status, Status)
                            </div>
                            <div>
                                <label style="color: red; margin-top: 8px; font-size: 16px; padding-left: 2px;">*</label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-5 col-md-5 col-sm-5 col-xs-12 lable">
                </div>
                <div class="col-lg-7 col-md-7 col-sm-7 col-xs-12 value">
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnAnalysis", Content = ConstantDisplay.HRM_Common_AnalysisAndSaveTemp.TranslateString(), ImageUrl = ConstantPath.IconComputePath })
                </div>
            </div>
            <div class="col-lg-4 col-md-2 col-sm-12 col-xs-12">

            </div>
        </div>
    </div>
</form>
<div>
    <div id="toolbarSubmitOvertime"></div>
    <script>
        $(document).ready(function () {
            $("#toolbarSubmitOvertime").kendoToolBar({
                items: [
                    { type: "button", id: "btnSaveChange", text: "Lưu", imageUrl: '@ConstantPath.IconSavePath' },
                    { type: "button", id: "btnDelete", text: "Xóa", imageUrl: '@ConstantPath.IconDeletePath' },
                ],
                click: function (e) {
                    var id = e.id;
                    switch (id) {
                        case "btnSaveChange":
                            var dataResut = false;
                            debugger;
                            $.ajax({
                                type: 'POST',
                                url: '@_hrm_Hre_Service' + 'Att_GetData/AnalysisOvertimeListValidate',
                                data: eventParaData(),
                                dataType: 'json',
                                async: false,
                                success: function (data) {
                                    debugger;
                                    if (data[0] == "error") {
                                        ShowNotificationProcessor(data[1]);
                                        dataResut = true;
                                    }
                                    else if (data[0] == "errorRegisterHours") {
                                        ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Số Giờ ĐK Vượt Mức Số Giờ ĐK Quy Định", "k-block k-info-colored");
                                        dataResut = true;
                                    }

                                }
                            });
                            if (dataResut) {
                                return;
                            }
                            debugger;
                            var grid = $("#gridAtt_OvertimeAnalysis").data("kendoGrid");
                            parameterMap = grid.dataSource.transport.parameterMap;
                            var data = {};
                            var dataTemp = {};

                            var currentData = grid.dataSource.data();
                            if (currentData.length <= 0) {
                                $.ajax({
                                    url: '@_hrm_Hre_Service' + "Att_GetData/GetConfig_AllowSplit",
                                    type: "POST",
                                    async: false,
                                    error: function () {
                                        //Handle the server errors using the approach from the previous example
                                    },
                                    success: function (result) {
                                        debugger;
                                        if (result.configMaxOT ==false) {
                                            ShowNotificationProcessor("Chưa Có Dữ Liệu !");
                                            dataResut = true;
                                        } else {
                                            dataTemp = paramSave();
                                        }
                                    }
                                });
                            }
                            if (dataResut) {
                                return;
                            }

                            var updatedRecords = [];
                            var newRecords = [];
                            debugger;
                            //get all record

                            for (var i = 0; i < currentData.length; i++) {
                                updatedRecords.push(currentData[i].toJSON());
                            }

                            if ($.isEmptyObject(dataTemp)) {
                                $.extend(data, parameterMap({ models: updatedRecords, params: [] }));
                            }
                            else {
                                $.extend(data, parameterMap({ models: [], params: dataTemp }));
                            }

                            //check duplicate
                            $.ajax({
                                url: '@_hrm_Hre_Service' + "Att_GetData/AnalysisOvertime_Duplicate",
                                data: data,
                                type: "POST",
                                async: false,
                                error: function () {
                                    //Handle the server errors using the approach from the previous example
                                },
                                success: function (dataResult1) {
                                    debugger;
                                    if (dataResult1.ActionStatus == 'Error') {
                                        ShowNotificationProcessor("Dữ Liệu Tăng Ca Đã Tồn Tại");
                                        return false;
                                    } else {
                                        //Map record
                                        $.ajax({
                                            url: '@_Hrm_EmpPortal_Web' + "Att_Overtime/CreateAnalysis",
                                            data: data,
                                            type: "POST",
                                            error: function () {
                                                //Handle the server errors using the approach from the previous example
                                            },
                                            success: function (dataResult2) {
                                                debugger;
                                                if (dataResult2.ActionStatus == 'Success') {
                                                    ShowNotificationProcessor("Thêm Mới Thành Công");

                                                    window.location.replace('@_Hrm_EmpPortal_Web' + "Att_Overtime/OvertimeList");
                                                }
                                                else if (dataResult2.ActionStatus == 'Locked') {
                                                    ShowNotificationProcessor("Đối tượng đã bị khóa");
                                                }
                                                else {
                                                    ShowNotificationProcessor("Thêm Mới Thất Bại");
                                                }
                                            }
                                        });
                                    }
                                }
                            });
                            break;
                        case "btnDelete":
                            var grid = $("#gridAtt_OvertimeAnalysis").data("kendoGrid");
                            var currentDataItem = grid.dataItem(grid.select());
                            var dataRow = grid.dataSource.getByUid(currentDataItem.uid);
                            for (var i = 0; i < GlobalDataSource.length; i++) {
                                //xoa trong list tong
                                if (GlobalDataSource[i].WorkDate.getUTCMonth() == dataRow.WorkDate.getUTCMonth() && GlobalDataSource[i].WorkDate.getUTCDate() == dataRow.WorkDate.getUTCDate() &&
                                    GlobalDataSource[i].WorkDate.getUTCFullYear() == dataRow.WorkDate.getUTCFullYear()) {
                                    GlobalDataSource.splice(i, 1);
                                    break;
                                }
                            }
                            MappingDataSourceToGlobalData();
                            break;
                    }
                }

            });
        });
    </script>
</div>
<div>
    @{
        Dictionary<object, object[]> foreignKey = new Dictionary<object, object[]>()
        {

            {Att_OvertimeModel.FieldNames.Status,new object[]
               { "Value", "Text", listStatus, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},

               {Att_OvertimeModel.FieldNames.DurationType,new object[]
               { "Value", "Text", listOTDurationType, ConstantDisplay.HRM_Category_OvertimeType_TypeTemp,""}},

                  {Att_OvertimeModel.FieldNames.OvertimeTypeID,new object[]
               { "ID", "OvertimeTypeName",   ViewBag.Cat_OvertimeType, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},

               {Att_OvertimeModel.FieldNames.MethodPayment,new object[]
               { "Value", "Text", listMethodPayment, ConstantDisplay.HRM_Attendance_Overtime_MethodPayment,""}},

               {Att_OvertimeModel.FieldNames.UserApproveID,new object[]
               { "ID", "UserInfoName",  ViewBag.Sys_User , ConstantDisplay.HRM_Attendance_Overtime_UserApproveID,""}},

               {Att_OvertimeModel.FieldNames.UserApproveID2,new object[]
               { "ID", "UserInfoName",  ViewBag.Sys_User , ConstantDisplay.HRM_Attendance_Overtime_UserApproveID2,""}},


        };
        string[] valueFields = new string[]
                        {
                            // Att_OvertimeModel.FieldNames.ProfileID,
                            Att_OvertimeModel.FieldNames.CodeEmp,
                            Att_OvertimeModel.FieldNames.ProfileName,
                            Att_OvertimeModel.FieldNames.WorkDate,
                            Att_OvertimeModel.FieldNames.ShiftName,
                            Att_OvertimeModel.FieldNames.OvertimeTypeID,
                            Att_OvertimeModel.FieldNames.DurationType,
                            Att_OvertimeModel.FieldNames.RegisterHours,
                            Att_OvertimeModel.FieldNames.Status,
                            Att_OvertimeModel.FieldNames.MethodPayment,
                            Att_OvertimeModel.FieldNames.ReasonOT,
                            Att_OvertimeModel.FieldNames.UserApproveID,
                            Att_OvertimeModel.FieldNames.UserApproveID2
                        };
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                        {
                            {Att_OvertimeModel.FieldNames.ProfileName, 140},
                            {Att_OvertimeModel.FieldNames.CodeEmp, 120},
                            {Att_OvertimeModel.FieldNames.WorkDate, 110},
                            {Att_OvertimeModel.FieldNames.ShiftName, 120},
                            {Att_OvertimeModel.FieldNames.OvertimeTypeID, 115},
                            {Att_OvertimeModel.FieldNames.DurationType, 100},
                            {Att_OvertimeModel.FieldNames.RegisterHours, 120},
                            {Att_OvertimeModel.FieldNames.Status, 90},
                            {Att_OvertimeModel.FieldNames.MethodPayment, 130},
                            {Att_OvertimeModel.FieldNames.ReasonOT, 150},
                            {Att_OvertimeModel.FieldNames.UserApproveID, 150},
                            {Att_OvertimeModel.FieldNames.UserApproveID2, 145}
                        };

        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                        {
                            {Att_OvertimeModel.FieldNames.ProfileName, ConstantDisplay.HRM_Attendance_Overtime_ProfileName},
                            {Att_OvertimeModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Attendance_Overtime_ProfileID},
                            {Att_OvertimeModel.FieldNames.WorkDate, ConstantDisplay.HRM_Attendance_Overtime_WorkDate},
                            {Att_OvertimeModel.FieldNames.ShiftName, ConstantDisplay.HRM_Attendance_Overtime_ShiftID},
                            {Att_OvertimeModel.FieldNames.OvertimeTypeID, ConstantDisplay.HRM_Attendance_Overtime_OvertimeTypeID},
                            {Att_OvertimeModel.FieldNames.DurationType, ConstantDisplay.HRM_Category_OvertimeType_TypeTemp},
                            {Att_OvertimeModel.FieldNames.RegisterHours, ConstantDisplay.HRM_Attendance_Overtime_RegisterHours},
                            {Att_OvertimeModel.FieldNames.Status, ConstantDisplay.HRM_Attendance_Overtime_Status},
                            {Att_OvertimeModel.FieldNames.MethodPayment, ConstantDisplay.HRM_Attendance_Overtime_MethodPayment},
                            {Att_OvertimeModel.FieldNames.ReasonOT, ConstantDisplay.HRM_Attendance_Overtime_ReasonOT},
                            {Att_OvertimeModel.FieldNames.UserApproveID, ConstantDisplay.HRM_Attendance_Overtime_UserApproveID},
                            {Att_OvertimeModel.FieldNames.UserApproveID2, ConstantDisplay.HRM_Attendance_Overtime_UserApproveID2}
                        };
        string[] disableFields = new string[]
                    {
                            Att_OvertimeModel.FieldNames.ProfileID,
                            Att_OvertimeModel.FieldNames.ProfileName,
                            Att_OvertimeModel.FieldNames.CodeEmp,
                            Att_OvertimeModel.FieldNames.ShiftName,
                            Att_OvertimeModel.FieldNames.DurationType,
                            //Att_OvertimeModel.FieldNames.OvertimeTypeName,
                            Att_OvertimeModel.FieldNames.WorkDate,
                            Att_OvertimeModel.FieldNames.Status,
                            //Att_OvertimeModel.FieldNames.ReasonOT,
                           // Att_OvertimeModel.FieldNames.UserApproveName1,
                            //Att_OvertimeModel.FieldNames.UserApproveName2,
                        };

        var grid = new GridBuilderInfo
        {
            Name = "gridAtt_OvertimeAnalysis",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            DisableFields = disableFields,
            ReadActionUrl = _hrm_Hre_Service + "Att_GetData/AnalysisOvertimeList",
            //ShowSaveButton = true,
            Batch = true,
            EditMode = GridEditMode.InCell,

            EvenEdit = "onEdit",
            ReadData = "eventParaData",
            CreateActionUrl = _hrm_Main_Web + "Att_ComputeOvertime/Create",
            EditActionUrl = _Hrm_EmpPortal_Web + "Att_Overtime/CreateAnalysis",
            ShowEditIcon = false,
            ServerOperation = false,
            EventDataBound = "ReloadGridOvertimeAnalysis",
            Navigatable = true,
            ForeignKey = foreignKey,
            ShowCheckbox = false,
            GridHeight = 453,
            PageSize = 10

        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Att_OvertimeModel>(grid))
</div>
@Html.HiddenFor(mode => mode.ID)
<script>
    $(document).ready(function () {
        var multiProfile = $("#ProfileID").data("kendoMultiSelect");
        multiProfile.value('@ProfileId');
        multiProfile.readonly();
        var dropdownlist = $("#Status").data("kendoDropDownList");
        dropdownlist.readonly(true);
        dropdownlist.value('@AttendanceDataStatus.E_SUBMIT.ToString()');
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hre_Service' + 'Hre_GetData/GetHighSupervisor',
            data: { ProfileID: '@ProfileId' },
            datatype: 'JSON',
            success: function (result) {
                debugger;
                var multiUA1 = $("#UserApproveID_1").data("kendoComboBox");
                var multiUA2 = $("#UserApproveID_2").data("kendoComboBox");

                if (result.SupervisorID != null) {
                    multiUA1.dataSource.add({ UserInfoName: result.SupervisorName, ID: result.SupervisorID });
                    multiUA1.refresh();

                    multiUA1.value(result.SupervisorID);
                } else {
                    multiUA1.refresh();
                    multiUA1.value(null);
                }

                if (result.HighSupervisorID != null) {
                    multiUA2.dataSource.add({ UserInfoName: result.HighSupervisorName, ID: result.HighSupervisorID });
                    multiUA2.refresh();

                    multiUA2.value(result.HighSupervisorID);
                } else {
                    multiUA2.refresh();
                    multiUA2.value(null);
                }
            }
        });
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hre_Service' + 'Att_GetData/GetConfigAproveOverTime',
            data: {},
            dataType: 'json',
            success: function (data) {
                debugger;
                if (data != '' && data > 2) {
                    $("#idUserApproveID3").show();
                }
                else {
                    $("#idUserApproveID3").hide();
                }
            }
        });


    });
</script>

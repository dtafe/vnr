@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.Hr.Models

@using HRM.Infrastructure.Utilities
@using System.Collections;
@model HRM.Presentation.Hr.Models.Hre_RewardModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
@{
    IList<SelectListItem> list = Enum.GetValues(typeof(EnumDropDown.RewardType))
        .Cast<EnumDropDown.RewardType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();

    SelectList data = new SelectList(list, "Value", "Text");
}

<script>
    SetFieldRequired();


    function onSave() {
        onSaveAndContinue($('#form_RewardInfo'), '@_hrm_Hr_Service', 'api/Hre_Reward/', '@ConstantControlName.HRM_gridHre_Reward_Grid_Name', '@ConstantControlName.HRM_gridHre_Reward_PopUp_Name');
        return false;
    }

    function onSaveClose() {
        onSaveAndClose($('#form_RewardInfo'), '@_hrm_Hr_Service', 'api/Hre_Reward/', '@ConstantControlName.HRM_gridHre_Reward_Grid_Name', '@ConstantControlName.HRM_gridHre_Reward_PopUp_Name');
        return false;
    }

    function onSaveDataPopUp() {

        onlySave($('#form_RewardInfo'), '@_hrm_Hr_Service', 'api/Hre_Reward/', '@ConstantControlName.HRM_gridHre_Reward_Grid_Name');
        return false;
    }
</script>
<style>
    label {
        min-width: 100px;
    }
</style>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_RewardInfo" }))
{

<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>            
                <td valign="top">
                    <div class="hrm_box">
                        <div id="div1">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ProfileName)
                                @Html.HiddenFor(mode => mode.ID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    IEnumerable valueProfile = new string[] { };
                                    if (Model != null)
                                    {
                                        valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
                                    }
                                }
                                @{
                                    var Profile = new MultiSelectBuilderInfo()
                                     {
                                         Width=300,
                                         Name = "Reward_ProfileID",
                                         DataTextField = Hre_RewardModel.FieldNames.ProfileName,
                                         DataValueField = Hre_RewardModel.FieldNames.ID,
                                         Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
                                         Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                         MaxSelectedItems = 1,
                                         Value = valueProfile
                                     };
                                }
                                @(Html.VnrMultiSelectFor(mode => mode.ProfileID, Profile))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateOfIssuance)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _dateOfIssuance = new DatePickerBuilderInfo()
                                    {
                                      //  Name = "Reward_DateOfIssuance",
                                        StyleCss = "width:120px",
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateOfIssuance, _dateOfIssuance)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateOfEffective)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _dateOfEffective = new DatePickerBuilderInfo()
                                    {
                                       // Name = "Reward_DateOfEffective",
                                        StyleCss = "width:120px",
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateOfEffective, _dateOfEffective)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div5">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.RewardedTypeID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var RewardedTypeName = new ComboBoxBuilderInfo()
                                     {
                                         Name = "Reward_RewardedTypeID",
                                         DataTextField = "RewardedTypeName",
                                         DataValueField = "ID",
                                         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRewardedType",
                                         StyleCss = "width:300px;",
                                         Value = Model == null ? string.Empty : Model.RewardedTypeName,
                                     };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.RewardedTypeID, RewardedTypeName))
                            </div>
                            <div style="clear: both;"></div>
                        </div>

                        <div id="div7">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.RewardValue)
                            </div>
                            <div class="FieldValue">
                                @{
                                    
    var RewardValue = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px;",
        Name = "Reward_RewardValue",
                                    };
                                }
                                @Html.VnrNumericTextBoxFor(model => model.RewardValue, RewardValue)
                                @Html.ValidationMessageFor(model => model.RewardValue)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div8">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.NoOfReward)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.NoOfReward,"Width: 300px")
                                @Html.ValidationMessageFor(model => model.NoOfReward,"Width: 300px")
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </div>
                    <div class="hrm_box">
                        <div id="div10">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.RequesterID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    IEnumerable Requester = new string[] { };
                                    if (Model != null)
                                    {
                                        Requester = new[] { new { UserLogin = Model.RequesterName, ID = Model.RequesterID } };
                                    }
                                }
                                @{
                                    var requesterID = new MultiSelectBuilderInfo()
                                     {
                                         Width=300,
                                         Name = "Reward_RequesterID",
                                         DataTextField = "UserLogin",
                                         DataValueField = "ID",
                                         Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUser",
                                         Placeholder = ConstantDisplay.HRM_System_SelectUser.TranslateString(),
                                         MaxSelectedItems = 1,
                                         Value = Requester
                                     };
                                }
                                @(Html.VnrMultiSelectFor(mode => mode.RequesterID, requesterID))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div6">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.UserApproveID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    IEnumerable UserApproveName = new string[] { };
                                    if (Model != null)
                                    {
                                        UserApproveName = new[] { new { UserLogin = Model.UserApproveName, ID = Model.UserApproveID } };
                                    }
                                }
                                @{
                                    var userApproveID = new MultiSelectBuilderInfo()
                                     {
                                         Width=300,
                                         Name = "Reward_UserApproveID",
                                         DataTextField = "UserLogin",
                                         DataValueField = "ID",
                                         Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_E_REWARD",
                                         Placeholder = ConstantDisplay.HRM_System_SelectUser.TranslateString(),
                                         MaxSelectedItems = 1,
                                         Value = UserApproveName
                                     };
                                }
                                @(Html.VnrMultiSelectFor(mode => mode.UserApproveID, userApproveID))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Reason)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextAreaFor(model => model.Reason, "width:300px;height:100px;")
                                @Html.ValidationMessageFor(model => model.Reason, "width:300px;height:100px;")
                            </div>
                            <div style="clear: both;"></div>
                        </div>

                        <div id="div3">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Description)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextAreaFor(model => model.Description, "width:300px;height:100px;")
                                @Html.ValidationMessageFor(model => model.Description,"width:300px;height:100px;")
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle150">

                        </div>
                        <div class="FieldValue">
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-RecruitmentCampaign", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-RecruitmentCampaign", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-RecruitmentCampaign", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        </div>

                    </div>
                </td>
            </tr>

        </tbody>
    </table>
</div>
}
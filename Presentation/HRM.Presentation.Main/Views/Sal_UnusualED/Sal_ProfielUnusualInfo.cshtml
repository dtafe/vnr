@using System.Collections
@using HRM.Infrastructure.Utilities

@using HRM.Presentation.UI.Controls.Kendo
@model HRM.Presentation.Payroll.Models.Sal_UnusualAllowanceModel

@{
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    Layout = null;
    IList<SelectListItem> listEDType = Enum.GetValues(typeof(EnumDropDown.EDType))
    .Cast<EnumDropDown.EDType>()
    .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
    .ToList();
    Guid ProfileID = Guid.Empty;
    var ProfileName = string.Empty;

    string aaa = ViewBag.profileID;
    if (!string.IsNullOrEmpty(aaa))
    {
        ProfileID = Common.ConvertToGuid(aaa.ToString());

        //Model.ProfileID = ProfileID;


    }
}
<script>
    //var data = SetCharacteFieldRequired();
    $(document).ready(function () {
        $("#ProfileUnusualIEDInfo_ProfileName").val($("#profileNameView").text());
        $("#UnusualED_ProfileID").val(SelectID);
    });


    //$(document).ready(function () {
    //    alert(SelectID);


    //});

    SetFieldRequiredByScreenName('Sal_UnusualED_Tab');
    function onSave() {
        onSaveAndContinue($('#form_Profiel_Sal_UnusualEDModel'), '@_hrm_Hr_Service', 'api/Sal_UnusualED/', 'grid_ProfileUnusualED', 'windowProfileUnusual');
        return false;
    }
    function onSaveClose() {
        onSaveAndClose($('#form_Profiel_Sal_UnusualEDModel'), '@_hrm_Hr_Service', 'api/Sal_UnusualED/', 'grid_ProfileUnusualED', 'windowProfileUnusual');
        return false;
    }
    function onSaveDataPopUp() {
        onlySave($('#form_Profiel_Sal_UnusualEDModel'), '@_hrm_Hr_Service', 'api/Sal_UnusualED/', 'grid_ProfileUnusualED');
        return false;
    }
    function filterUnusual() {
        var Type = $("#ProfileUnusualIEDInfo_Type").data("kendoDropDownList");
        var ProfileUnusual = $("#ProfileUnusualIEDInfo_UnusualEDTypeID").data("kendoComboBox");

        var Type_value = Type.value();
        var Text = ProfileUnusual.text();
        return {
            type: Type_value,
            text: Text,
        };
    };
    function ChangeUnusualType() {
        var Type = $("#ProfileUnusualIEDInfo_UnusualEDTypeID").data("kendoComboBox");
        Type.dataSource.read();
    };
</script>

@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Profiel_Sal_UnusualEDModel" }))
{
    @Html.HiddenFor(m => m.IsGeneralProfile, new { @Value = true })
    @Html.HiddenFor(model => model.UnusualED_ID)
    @Html.HiddenFor(m => m.ProfileID, new { @id = "UnusualED_ProfileID" })
    <table>
        <tr>
            <td>
                <div id="div4" class="DivContentTitleValue">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProfileName)
                    </div>
                    <div class="FieldValue">
                        @{
    var _ProfileName = new TextBoxBuilderInfo()
    {
        Name = "ProfileUnusualIEDInfo_ProfileName",
        CssStyle = "Width: 300px",
        Disabled = true
    };
    if (Model != null)
    {
        _ProfileName.Value = Model == null ? string.Empty : Model.ProfileName;
    }
                        }
                        @Html.VnrTextBoxFor(model => model.ProfileName, _ProfileName)
                    </div>

                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Type)
                    </div>
                    <div class="FieldValue">
                        @{
    var ddlType = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        Name = "ProfileUnusualIEDInfo_Type",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listEDType,
        Autobind = true,
        EventChange = "ChangeUnusualType",
        //OptionLabel = ConstantDisplay.HRM_Payroll_UnusualED_Type.TranslateString(),
    };
                        }
                        @Html.VnrDropDownListFor(model => model.Type, ddlType)
                        @Html.VnrCheckBoxFor(model => model.AddToHourlyRate)
                        @Html.VnrLabelFor(mode => mode.AddToHourlyRate)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.UnusualEDTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
    var
        ddlUnusualEDType = new ComboBoxBuilderInfo()
        {
            StyleCss = "width:300px",
            Name = "ProfileUnusualIEDInfo_UnusualEDTypeID",
            DataTextField = "UnusualAllowanceCfgName",
            DataValueField = "ID",
            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUnusualAllowanceUnCfg",

            ServerFilter = true,
            Data = "filterUnusual",
            Value = (Model == null || Model.UnusualEDTypeID == null) ? string.Empty : Model.UnusualEDTypeID.ToString(),
            Autobind = true,
        };
                        }
                        @(Html.VnrComboBoxFor(model => model.UnusualEDTypeID, ddlUnusualEDType).Text(Model == null ? string.Empty : Model.UnusualAllowanceCfgName))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.ChargePIT)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(model => model.ChargePIT)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.Amount)
                    </div>
                    <div class="FieldValue">
                        @{
    NumericTextBoxBuilderInfo<double> number = new NumericTextBoxBuilderInfo<double>()
    {
        Name = "ProfileUnusualIEDInfo_Amount",
        StyleCss = "width:150px;",
        Format = ConstantFormat.HRM_Format_Int
    };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Amount, number)
                        @{
    var ddlCurrency = new ComboBoxBuilderInfo()
    {
        Name = "ProfileUnusualIEDInfo_CurrencyID",
        StyleCss = "width:135px;",
        DataTextField = "CurrencyName",
        DataValueField = "ID",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
        Autobind = true,
        Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
        // OptionLabel =string.Empty,
        //  OptionLabel = ConstantDisplay.HRM_Category_Currency.TranslateString(),
    };
                        }
                        @(Html.VnrComboBoxFor(model => model.CurrencyID, ddlCurrency).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.BudgetId)
                    </div>
                    <div class="FieldValue">
                        @{
    var ddlBudget = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        Name = "ProfileUnusualIEDInfo_BudgetId",
        DataTextField = "BudgetName",
        DataValueField = "ID",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiBudget",
        Autobind = true,
        //OptionLabel = ConstantDisplay.HRM_Category_Budget_BudgetName.TranslateString(),
    };
                        }
                        @Html.VnrDropDownListFor(model => model.BudgetId, ddlBudget)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.MonthStart)
                    </div>
                    <div class="FieldValue">
                        @{
    var MonthStart = new DatePickerBuilderInfo()
    {
        Name = "ProfileUnusualIEDInfo_MonthStart",
        StyleCss = "width:120px;",
        Placeholder = ConstantDisplay.HRM_Payroll_UnusualED_MonthStart.TranslateString(),
    };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthStart, MonthStart)
                        @{
    var MonthEnd = new DatePickerBuilderInfo()
    {
        Name = "ProfileUnusualIEDInfo_MonthEnd",
        StyleCss = "width:120px;",
        Placeholder = ConstantDisplay.HRM_Payroll_UnusualED_MonthEnd.TranslateString(),
    };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthEnd, MonthEnd)
                        @Html.VnrCheckBoxFor(model => model.IsFollowDay)
                        @Html.VnrLabelFor(mode => mode.IsFollowDay)
                    </div>

                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Notes)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Notes, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="FieldTitle150">
                </div>
                <div class="FieldValue">
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-ProfileUnusualIED", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-ProfileUnusualIED", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-ProfileUnusualIED", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                </div>
            </td>
        </tr>
    </table>


}

<!-- Gán giá trị cho cây phòng ban khi edit -->
@*@if (Model != null)
    {
                <script type="text/javascript">
                    $(document).ready(function () {
                        $("#TreeViewDropDownInput").val('@Model.OrgStructureName');
                        $("#OrgStructureID").val('@Model.OrgStructureID');
                    });
                </script>
    }*@

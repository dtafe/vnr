@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models
@using HRM.Presentation.UI.Controls.Kendo
@using System.Collections;

@model HRM.Presentation.Payroll.Models.Sal_UnusualAllowanceModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    Guid ProfileID = Guid.Empty;
    string aaa = ViewBag.profileID;
    if (!string.IsNullOrEmpty(aaa))
    {
        ProfileID = Common.ConvertToGuid(aaa.ToString());
    }
}

<script>
    //SetFieldRequired();

    SetFieldRequiredByScreenName("SalHre_UnusualAllowanceinfo")
    document.getElementById("HreUnusualAllowance_RelativeTypeName").readOnly = true;
    document.getElementById("Hre_Amount").readOnly = true;
    function onSave() {
        debugger;
        $("#HreUnusualAllowance_TypeUnusual_new").val("E_ExcludePayslip");
        $("#HreUnusualAllowance_Type_new").val("E_ ExcludePayslip");
        onSaveAndContinue($('#form_sal_Hre_UnusualAllowance'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', "grid_Hre_UnusualAllowance", 'window_Hre_UnusualAllowance');
        return false;
    }

    function onSaveClose() {
        debugger;
        $("#HreUnusualAllowance_TypeUnusual_new").val("E_ExcludePayslip");
        $("#HreUnusualAllowance_Type_new").val("E_ ExcludePayslip");
        onSaveAndClose($('#form_sal_Hre_UnusualAllowance'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', "grid_Hre_UnusualAllowance", 'window_Hre_UnusualAllowance');
        return false;
    }
    function onSaveDataPopUp() {
        debugger;
        $("#HreUnusualAllowance_TypeUnusual_new").val("E_ExcludePayslip");
        $("#HreUnusualAllowance_Type_new").val("E_ ExcludePayslip");
        onlySave($('#form_sal_Hre_UnusualAllowance'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', "grid_Hre_UnusualAllowance"); return false;
    }


    function showPrice() {
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetMultiAmountByUnusualAllowanceCfgid',
            data: { unusualedtypeid: $("#HreUnusualAllowance_UnusualEDTypeID").val(), amountFilter: "" },
            dataType: 'json',
            async: false,
            success: function (data) {
                debugger;
                var numerictextbox = $("#Hre_Amount").data("kendoNumericTextBox");
                numerictextbox.value(data[0].Amount);
            }
        });
    }
    function showRelativeType(e) {
        var relativeidchange = e.sender._old;

        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeTypeByRelativeId',
            data: { relativeid: relativeidchange, relativetypeFilter: "" },
            dataType: 'json',
            async: false,
            success: function (data) {

                $("#HreUnusualAllowance_RelativeTypeName").val(data[0].RelativeTypeName);
                $("#HreUnusualAllowance_RelativeTypeID").val(data[0].ID);

            }
        });
    }
 

</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_sal_Hre_UnusualAllowance" }))
{
    <div>
        @{
            if (Model != null)
            {
                @Html.HiddenFor(m => m.ProfileID)
                @Html.HiddenFor(m=>m.ID)
            }
            else
            {
                @Html.Hidden("ProfileID", ProfileID)
            }

        }
     
    </div>
    @*@Html.HiddenFor(model => model.ID)*@
    @Html.HiddenFor(model => model.TypeUnusual, new { id = "HreUnusualAllowance_TypeUnusual_new" })
    @Html.HiddenFor(model => model.Type, new { id = "HreUnusualAllowance_Type_new" })
    @Html.HiddenFor(model => model.RelativeTypeID, new { id = "HreUnusualAllowance_RelativeTypeID" })
    @*@Html.HiddenFor(model => model.Amount, new { id = "Amount" })*@
    <table>
        <tr>
            <td>

                <div id="div1">
                    <div class="FieldTitle150">
                        @*@Html.HiddenFor(mode => mode.ID)*@
                    </div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.RelativeID)
                    </div>
                    <div class="FieldValue">
                        @{
                                var _relativeName = new ComboBoxBuilderInfo()
                                   {
                                       Name = "HreUnusualAllowance_RelativeID",
                                       StyleCss = "Width: 300px",
                                       DataTextField = "RelativeName",
                                       DataValueField = "ID",
                                       ServerFilter = true,
                                       FilterType = FilterType.Contains,
                                       EventChange = "showRelativeType",

                                       // Url = @_hrm_Hr_Service + "HreGetData/GetMultiRelatives",
                                       Value = Model == null ? string.Empty : Model.RelativeID.ToString()
                                   };
                        }
                        @Html.VnrComboBoxFor(model => model.RelativeID, _relativeName).Text(Model == null ? string.Empty : Model.RelativeName)

                    </div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.RelativeTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _UsRelativeTypeName = new TextBoxBuilderInfo()
                            {
                                Width = 300,
                                Name = "HreUnusualAllowance_RelativeTypeName",
                                CssStyle = "background-color:WhiteSmoke"
                            };
                            if (Model != null)
                            {
                                _UsRelativeTypeName.Value = Model.RelativeTypeName != null ? Model.RelativeTypeName.ToString() : string.Empty;
                            }
                                                }
                        @Html.VnrTextBoxFor(model => model.RelativeTypeName, _UsRelativeTypeName)
                    </div>
                </div>

                <div id="div5">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.UnusualEDTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _UnusualEDTypeName = new ComboBoxBuilderInfo()
                         {
                             Name = "HreUnusualAllowance_UnusualEDTypeID",
                             DataTextField = "UnusualAllowanceCfgName",
                             DataValueField = "ID",
                             Url = _hrm_Hr_Service + "Sal_GetData/GetMultiUnusualEDType",
                             StyleCss = "width:300px;",
                             Value = Model == null ? string.Empty : Model.UnusualEDTypeID.ToString(),
                             EventChange = "showPrice"
                         };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.UnusualEDTypeID, _UnusualEDTypeName).Text(Model == null ? string.Empty : Model.UnusualAllowanceCfgName))

                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.Amount)

                    </div>

                    <div class="FieldValue">
                        @{
                        var text = new NumericTextBoxBuilderInfo<double>()
                        {
                            Name = "Hre_Amount",
                            StyleCss = "Width:300px;background-color:WhiteSmoke",

                        };
                        if (Model != null)
                        {
                           // text.Value = Model != null ? Model.Amount : 0;
                        }
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Amount, text)

                        @{
                    var _UnusuaCurrencyName = new ComboBoxBuilderInfo()
                     {
                         Name = "HreUnusualAllowance_CurrencyID",
                         DataTextField = "CurrencyName",
                         DataValueField = "ID",
                         Index = 0,
                         Url = _hrm_Hr_Service + "Sal_GetData/GetMultiCurrency",
                         StyleCss = "width:300px;",
                         Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
                     };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID, _UnusuaCurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.DateOccur)
                    </div>

                    <div class="FieldValue">
                        @{
    var _datepickerDateOccur = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px"
    };
                        }
                        @Html.VnrDatePickerFor(model => model.DateOccur, _datepickerDateOccur)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.MonthStart)
                    </div>

                    <div class="FieldValue">
                        @{
    var _datepickerMonthStart = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px",
        Value = DateTime.Now.ToString("dd/MM/yyyy"),
    };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthStart, _datepickerMonthStart)
                    </div>
                </div>

                

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Notes)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Notes, "width:500px;height:100px;")
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-salHre_UnusualAllowances", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-salHre_UnusualAllowance", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-salHre_UnusualAllowance", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
    </table>
}

<script>
    $(document).ready(function () {
        debugger;
       $.ajax({
        type: 'POST',
        url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeByProfileId',
        data: { profileid: SelectID },
        dataType: 'json',
        async: false,
        success: function (data) {
            debugger;
            var relativeCombo = $("#HreUnusualAllowance_RelativeID").data("kendoComboBox");
            relativeCombo.setDataSource(data);
            relativeCombo.refresh();
        }
    });
    });

</script>
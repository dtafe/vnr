@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models


@model HRM.Presentation.Hr.Models.Hre_RelativesModel

@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ProfileID = Guid.Empty;
    string aaa = ViewBag.profileID;
    if (!string.IsNullOrEmpty(aaa))
    {
        ProfileID = Common.ConvertToGuid(aaa.ToString());
    }

}
@{
    IList<SelectListItem> list = Enum.GetValues(typeof(EnumDropDown.Gender))
         .Cast<EnumDropDown.Gender>()
         .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
         .ToList();

    SelectList data = new SelectList(list, "Value", "Text");
}
@*@Html.ValidationSummary(false)
@Html.AntiForgeryToken()*@

<script>

    SetFieldRequiredByScreenName('Hre_Relatives_Tab');
    function onSaveCloseRelative() {
        
        onSaveAndClose($('#form_SalUnusuaAllowanceRelativeInfo'), '@_hrm_Hr_Service', 'api/Hre_Relatives/', '@ConstantControlName.HRM_HR_Relative_Grid_Name', '@ConstantControlName.HRM_HR_Relative_PopUp_Name'); return false;
    }
    function onSaveDataPopUpRelative() {
        onlySave($('#form_SalUnusuaAllowanceRelativeInfo'), '@_hrm_Hr_Service', 'api/Hre_Relatives/', '@ConstantControlName.HRM_HR_Relative_Grid_Name'); return false;
    }
</script>
<!--Form dùng cho edit và update-->

@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_SalUnusuaAllowanceRelativeInfo" }))
{
    @*@Html.HiddenFor(model => model.Relative_ID)*@


    <div>
        @{
    if (Model != null)
    {
        @Html.HiddenFor(m => m.ProfileID)
    }
    else
    {
        @Html.Hidden("ProfileID", ProfileID)
    }
        }
    </div>

    <table>
        <tr>
            <td>
                <div class="hrm_box" style="width:550px">
                    <div id="div1">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.ProfileID)
                        </div>
                        <div class="FieldValue">
                            @{
                            var _ProfileID = new TextBoxBuilderInfo()
                            {
                                Name = "SalUnusualAllowanceRelativeInfo_ProfileID",
                                CssStyle = "background-color:WhiteSmoke",
                                Readonly=true,
                            };
                            }
                            @Html.VnrTextBoxFor(model=>model.ProfileID,_ProfileID)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    @*<div class="Dependant">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.MonthOfEffect)
                        </div>
                        <div class="FieldValue">
                            @{
    var MonthOfEffect = new DatePickerBuilderInfo()
    {
        Name = "SalUnusualAllowanceRelativeInfo_MonthOfEffect",
        Format = ConstantFormat.HRM_Format_DayMonthYear
    };

                            }
                            @Html.VnrDatePickerFor(model => model.MonthOfEffect, MonthOfEffect)
                        </div>
                    </div>*@
                    @*<div class="Dependant">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.MonthOfExpiry)
                        </div>
                        <div class="FieldValue">
                            @{
    var MonthOfExpiry = new DatePickerBuilderInfo()
    {
        Name = "SalUnusualAllowanceRelativeInfo_MonthOfExpiry",
        Format = ConstantFormat.HRM_Format_DayMonthYear
    };

                            }
                            @Html.VnrDatePickerFor(model => model.MonthOfExpiry, MonthOfExpiry)
                        </div>
                    </div>*@
                    <div id="div2">
                        <div class="FieldTitle170">
                         
                            @Html.VnrLabelFor(mode => mode.RelativeName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(mode => mode.RelativeName)
                            <div id="idSuccessRelatives" style="display: none"><img src="Content\images\icons\accept.png" /></div>
                            <div id="idFailRelatives" style="display: none; padding-top: 4px; padding-left: 5px; padding-right: 5px; "><img src="Content\images\icons\reject.png" /></div>

                        </div>
                        <div style="clear: both;"></div>
                    </div>

                    <div>
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.IDNo)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.IDNo, "width:200px")
                        </div>
                    </div>
                    <div id="div3">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.Career)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.Career, "Width:200px;")
                            @Html.ValidationMessageFor(model => model.Career)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.Gender)
                        </div>
                        <div class="FieldValue">

                            @{
    var gender = new DropDownListBuilderInfo()
    {
        Name = "SalUnusualAllowanceRelativeInfo_Gender",
        BindTo = list,
        DataTextField = "Text",
        DataValueField = "Value",
        StyleCss = "Width: 100px",
        OptionLabel = " "
    };
                            }
                            @Html.VnrDropDownListFor(model => model.Gender, gender)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.YearOfBirth)
                        </div>
                        <div class="FieldValue">

                            @Html.Kendo().MaskedTextBoxFor(model => model.YearOfBirth).Mask("00/00/0000").HtmlAttributes(new { style = "width:100px" })
                        </div>
                        <div style="clear: both;"></div>
                    </div>

                    <div id="div2">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.NationalityID)
                        </div>
                        <div class="FieldValue">
                            @{
    IEnumerable ValueNationalityID = new string[] { };
    if (Model != null)
    {
        ValueNationalityID = new[] { new { CountryName = Model.CountryName, ID = Model.NationalityID } };
    }
                            }
                            @{
    var mtsCountry = new MultiSelectBuilderInfo()
    {
        Name = "SalUnusualAllowanceRelativeInfo_NationalityID",
         Autobind = true,
         DataTextField = Hre_RelativesModel.FieldNames.CountryName,
         DataValueField = Hre_RelativesModel.FieldNames.ID,
         Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiCountry",
         Placeholder = ConstantDisplay.HRM_Category_SelectCountry.TranslateString(),
         MaxSelectedItems = 1,
         Width = 200,
         Value = ValueNationalityID
     };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.NationalityID, mtsCountry))
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div1">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.RelativeTypeName)
                        </div>
                        <div class="FieldValue">
                            @{
    IEnumerable ValueRelativeType = new string[] { };
    if (Model != null)
    {
        ValueRelativeType = new[] { new { RelativeTypeName = Model.RelativeTypeName, ID = Model.RelativeTypeID } };
    }
                            }
                            @{
    var _RelativeType = new MultiSelectBuilderInfo()
    {
        Name = "SalUnusualAllowanceRelativeInfo_RelativeTypeID",
        DataValueField = "ID",
        DataTextField = "RelativeTypeName",
        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiRelativeType",
        Placeholder = ConstantDisplay.HRM_HR_SelectRelativeType.TranslateString(),
        MaxSelectedItems = 1,
        Width = 200,
        Value = ValueRelativeType
    };
                            }
                            @(Html.VnrMultiSelectFor(model => model.RelativeTypeID, _RelativeType))
                        </div>
                        <div style="clear: both;"></div>
                    </div>

                    <div id="div3">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.Notes)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextAreaFor(model => model.Notes)
                            @Html.ValidationMessageFor(model => model.Notes, "min-width:200px")
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle170">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUpRelative", Name = "save-Relative", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-Relative", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveCloseRelative", Name = "save-close-Relative", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
   
    </table>
}
<div>
    @{
        if (ProfileID != Guid.Empty)
        {
            <script>
                $(document).ready(function(){
                    debugger;
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + 'Sal_GetData/GetProfileNameByProfileId',
                        data: { profileid: profileID},
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                            debugger;
                            $("#SalUnusualAllowanceRelativeInfo_ProfileID").val(data.ProfileName);
                        }
                    });

                });
            </script>
        }
    }
</div>
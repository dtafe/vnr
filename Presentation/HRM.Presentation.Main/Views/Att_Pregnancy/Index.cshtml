@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.Attendance.Models
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Attendance.Models.Att_PregnancySearchModel

@{
    ViewBag.Title = HRM.Infrastructure.Utilities.ConstantDisplay.HRM_Attendance_Pregnancy.TranslateString();
    Layout = null;
    //string[] valueFields = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    IList<SelectListItem> list = Enum.GetValues(typeof(EnumDropDown.PregnancyType))
     .Cast<EnumDropDown.PregnancyType>()
     .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
     .ToList();
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
}
@Html.Hidden("Screen", screen)
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantDisplay.HRM_Attendance_Pregnancy_AddNew,
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Att_Pregnancy/CreateOrUpdate/",
    };
}
@(Html.VnrWindow(window))
<script type="text/javascript">
    var titleCreate = '@Html.Raw(ConstantDisplay.HRM_Attendance_Pregnancy_AddNew.TranslateString())';
    var checkedNodes = [];

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        return {
            ProfileName: $('#@Html.FieldIdFor(model => model.ProfileName)').val(),
            CodeEmp: $('#@Html.FieldIdFor(model => model.CodeEmp)').val(),
            OrgStructureID: checkedNodes.join(','),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            Type: $('#@Html.FieldIdFor(model => model.Type)').val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);

            var grid = $('#gridAtt_Pregnancy').data("kendoGrid");
            grid.dataSource.read();
            checkedNodes = [];
        });
        //Xử lý nút Edit
        EditGridNewPage("gridAtt_Pregnancy", '#Hrm_Att_Web/Att_Pregnancy/Edit/', 'Hrm_Main_Web', '@_hrm_Main_Web');
    });
     //Xử lý nút Create
    $("#btnCreate").click(function () {
        @*KendoRouteMapping('#Hrm_Main_Web/Hre_StopWorking/Create/', 'Hrm_Main_Web', '@_hrm_Main_Web');*@
        PopUpCreate('@ConstantDisplay.HRM_Attendance_Pregnancy_AddNew', titleCreate, '@ConstantPermission.Cat_Unit');
    });


    //Xử Lý Grid
    GridCheckbox("gridAtt_Pregnancy");

    //Xử lý nút Delete
    $('#btnDelete').click(function (e) {
        if (selectedIds.length == 0) {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelectedConfirm("gridAtt_Pregnancy", '@_hrm_Main_Web' + "Att_Pregnancy/RemoveSelected/", selectedIds, '@ConstantPermission.Att_Pregnancy');
        return false;
    });


    $(document).ready(function () {
        //Xử lý show hide form tìm kiếm
        ShowHidePanel();
    });

    $("#btnExportAll").click(function () {
        var grid = $('#gridAtt_Pregnancy').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Att_GetData/ExportPregnancyList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Att_Pregnancy');
    });

    $("#btnExportSelected").click(function () {

        if (selectedIds.length == 0) {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Att_GetData/ExportPregnancySelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds;
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Att_Pregnancy');
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->

            <div class="contendSearchWidge">
                <form action="#" method="POST" id="form-search">
                    <div>
                        <div style="float:left; width:500px">
                            <div id="div2">
                                <div class="FieldTitle">
                                    @Html.VnrLabelFor(model => model.ProfileName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.ProfileName)
                                </div>
                            </div>

                            <div id="div3">
                                <div class="FieldTitle">
                                    @Html.VnrLabelFor(model => model.CodeEmp)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.CodeEmp)
                                </div>
                            </div>

                            <div id="div4">
                                <div class="FieldTitle">
                                    @Html.VnrLabelFor(mode => mode.OrgStructureID)
                                </div>
                                <div class="FieldValue">
                                    @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                                </div>
                            </div>


                        </div>
                        <div style="width:550px; display:block; float:left">
                            <div id="div5">
                                <div class="FieldTitle">
                                    @Html.VnrLabel(@ConstantDisplay.HRM_Common_Search_Duration.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var DateStart = new DatePickerBuilderInfo()
                                        {
                                            Placeholder = ConstantDisplay.HRM_Attendance_DateFrom.TranslateString(),
                                            StyleCss = "width:100px"
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.DateFrom, DateStart)
                                    @{
                                        var DateEnd = new DatePickerBuilderInfo()
                                        {
                                            Placeholder = ConstantDisplay.HRM_Attendance_DateTo.TranslateString(),
                                            StyleCss = "width:100px"
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.DateTo, DateEnd)
                                </div>
                            </div>

                            <div id="div7">
                                <div class="FieldTitle">
                                    @Html.VnrLabelFor(mode => mode.Type)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var ddlType = new DropDownListBuilderInfo()
                                        {
                                            BindTo = list,
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            OptionLabel = ConstantDisplay.HRM_Category_SelectType.TranslateString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @Html.VnrDropDownListFor(model => model.Type, ddlType)
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div>
                            </div>
                            <br />
                        </div>
                    </div>
                </form>
            </div>

        </div>
    </div>

    <div class="commandToolBarWidge">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
        <div style="float: right">
            <div class="btn-group">
                <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                    <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                    @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu pull-right" role="menu">
                    <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                    <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                </ul>
            </div>
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangePregnancy", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
    </div>
</div>
<script>
    function clickProfile(id) {
        KendoRouteMapping('#Hrm_Hre_Web/GeneralProfile/Index/' + id, 'Hrm_Hre_Web', '@_hrm_Main_Web');
    }
</script>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridAtt_Pregnancy_Grid_Name + "__Att_PregnancyIndex";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridAtt_Pregnancy_Grid_Name,
            ReadActionUrl = _hrm_Hr_Service + "Att_GetData/GetPregnancyList",
            ReadData = "filterFieldInfo",
            EventDataBound = "changePageGird",
            AutoBind = false,
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ForeignKey = new Dictionary<object, object[]>()
            {

                {Att_PregnancyModel.FieldNames.Type,new object[]
                   { "Value", "Text", list, ConstantDisplay.HRM_Attendance_Pregnancy_Type,""}},
            };

            grid.ValueFields = new string[]
            {
                Att_PregnancyModel.FieldNames.CodeEmp,
                Att_PregnancyModel.FieldNames.ProfileName,

                Att_PregnancyModel.FieldNames.OrgStructureName,
                Att_PregnancyModel.FieldNames.JobTitleName,
                Att_PregnancyModel.FieldNames.PositionName,
                Att_PregnancyModel.FieldNames.ChildBirthday,
                Att_PregnancyModel.FieldNames.Type,
                Att_PregnancyModel.FieldNames.DateStart,
                Att_PregnancyModel.FieldNames.DateEnd,
                 Att_PregnancyModel.FieldNames.ChildName,
                Att_PregnancyModel.FieldNames.Comment,

            };
            grid.SizeFields = new Dictionary<string, int>()
            {
                  {Att_PregnancyModel.FieldNames.CodeEmp, 75},
                {Att_PregnancyModel.FieldNames.ProfileName, 135},

                {Att_PregnancyModel.FieldNames.OrgStructureName, 85},
                {Att_PregnancyModel.FieldNames.JobTitleName, 100},
                {Att_PregnancyModel.FieldNames.PositionName,100},
                {Att_PregnancyModel.FieldNames.ChildBirthday,82},
                {Att_PregnancyModel.FieldNames.Type, 100},
                {Att_PregnancyModel.FieldNames.DateStart, 120},
                {Att_PregnancyModel.FieldNames.DateEnd, 125},
                  {Att_PregnancyModel.FieldNames.ChildName,110},
                {Att_PregnancyModel.FieldNames.Comment, 150},

            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Att_PregnancyModel.FieldNames.CodeEmp, ConstantDisplay.HRM_HR_Profile_CodeEmp},
                {Att_PregnancyModel.FieldNames.ProfileName, ConstantDisplay.HRM_HR_Profile_ProfileName},

                {Att_PregnancyModel.FieldNames.OrgStructureName, ConstantDisplay.HRM_Category_OrgStructure_OrgStructureName},
                {Att_PregnancyModel.FieldNames.JobTitleName, ConstantDisplay.HRM_Category_JobTitle_JobTitleName},
                {Att_PregnancyModel.FieldNames.PositionName, ConstantDisplay.HRM_Category_Position_PositionName},
                {Att_PregnancyModel.FieldNames.ChildBirthday, ConstantDisplay.HRM_Attendance_Pregnancy_DateOfBirth},
                {Att_PregnancyModel.FieldNames.Type, ConstantDisplay.HRM_Attendance_Pregnancy_Type},
                {Att_PregnancyModel.FieldNames.DateStart, ConstantDisplay.HRM_Attendance_Pregnancy_DateStart},
                {Att_PregnancyModel.FieldNames.DateEnd, ConstantDisplay.HRM_Attendance_Pregnancy_DateEnd},
                 {Att_PregnancyModel.FieldNames.ChildName, ConstantDisplay.HRM_Attendance_Pregnancy_ChildName},
                {Att_PregnancyModel.FieldNames.Comment, ConstantDisplay.HRM_Attendance_Pregnancy_Comment},

            };

            grid.FormatFields = new Dictionary<string, string>()
            {
                {Att_PregnancyModel.FieldNames.ChildBirthday, ConstantFormat.HRM_Format_DayMonthYear},
                {Att_PregnancyModel.FieldNames.DateStart, ConstantFormat.HRM_Format_DayMonthYear},
                {Att_PregnancyModel.FieldNames.DateEnd, ConstantFormat.HRM_Format_DayMonthYear}
            };

            grid.HyperlinkFields = new Dictionary<string, string>()
            {
                {Att_PregnancyModel.FieldNames.ProfileName,"clickProfile,ProfileID"},
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = "gridAtt_Pregnancy",
        //    ValueFields = valueFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    FormatFields = formatFields,
        //    AutoBind = false,
        //    ReadActionUrl = _hrm_Hr_Service + "Att_GetData/GetPregnancyList",
        //    ReadData = "filterFieldInfo",
        //    EventDataBound = "changePageGird",
        //    ForeignKey = foreignKey,
        //    HyperlinkFields = hyperlinkFields
        //};

    }

    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Att_PregnancyModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangePregnancy", "Att_PregnancyModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>

@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)



@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.UI.Controls.Kendo

@model Hre_ProfileAllSearchModel

@{
    ViewBag.Title = "Profiles All Index";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    Layout = null;
    //string[] valueFields = null;
    IList<SelectListItem> listGender = Enum.GetValues(typeof(EnumDropDown.Gender))
    .Cast<EnumDropDown.Gender>()
    .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p=>p.Text)
    .ToList();

    IList<SelectListItem> listStatusSynz = Enum.GetValues(typeof(ProfileStatusSyn))
   .Cast<ProfileStatusSyn>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p=>p.Text)
   .ToList();
}
@Html.Hidden("Screen", screen)
@{
    var window = new WindowBuilderInfo
    {
        Name = "PopUpCreateTemplate",
        Visible = false,

        LoadContentFrom = _hrm_Main_Web + "Hre_ReportHCGender/CreateTemplate"
    };
}
@(Html.VnrWindow(window))
<script>
    var checkedNodes = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        var jobTitleID = $('#@Html.FieldIdFor(model => model.JobTitleID)').val();
        var positionID = $('#@Html.FieldIdFor(model => model.PositionID)').val();
        var dataParameter = {
            ProfileName: $('#@Html.FieldIdFor(model => model.ProfileName)').val(),
            CodeEmp: $('#@Html.FieldIdFor(model => model.CodeEmp)').val(),
            OrgStructureID: checkedNodes.join(','),
            JobTitleID: jobTitleID ? jobTitleID[0] : null,
            PositionID: positionID ? positionID[0] : null,
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            IDNo: $('#@Html.FieldIdFor(model => model.IDNo)').val(),
            Gender: $('#@Html.FieldIdFor(model => model.Gender)').val(),
            EmpTypeID: $('#@Html.FieldIdFor(model => model.EmpTypeID)').val(),
            StatusSynz: $('#@Html.FieldIdFor(model => model.StatusSynz)').val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
        };
        if (isExport == true) {
            dataParameter["ExportId"] = $('#ddlScreenName').val();
        }
        return dataParameter;
    }

    function filterFieldInfo_ExcelPersional(isExport, selectid) {
        var dataParameter = {
            id: selectid,
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
        };
        if (isExport == true) {
            dataParameter["ExportId"] = $('#ddlScreenName').val();
        }
        return dataParameter;
    }

    $(document).ready(function () {
        //Xử lý sự kiện click button tìm kiếm
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes)
            var grid = $('#gridHre_Profile').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
            checkedNodes = [];
        });

        //Xử lý show hide form tìm kiếm
        ShowHidePanel();
        //Xử lý nút Edit
        EditGridNewPage("gridHre_Profile", '#Hrm_Hre_Web/Hre_Profile/Edit/', 'Hrm_Hre_Web', '@_hrm_Main_Web');
    });

    GridCheckbox("gridHre_Profile");
    $('#btnDelete').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();

        DeleteSelected("gridHre_Profile", '@_hrm_Main_Web' + "Hre_Profile/RemoveSelected/", selectedIds, '@ConstantPermission.Hre_ProfileAll');
        return false;
    });

    $("#btnExportAll").click(function () {
        var grid = $('#gridHre_Profile').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@hrm_Hr_Service' + "Hre_GetData/ExportProfileAllList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Hre_ProfileAll');
    });

    $("#btnExportPersonal").click(function () {
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }

        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();

        var urlGetData = '@hrm_Hr_Service' + "Hre_GetData/ExportPersionalInformation/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo_ExcelPersional(true, listIds);

        ShowHre_ProgressBar();
        $.ajax({
            type: 'POST',
            url: urlGetData,
            data: dataParameter,
            dataType: 'json',
            success: function (returnValue) {

                var n = returnValue.indexOf(","), status = '', fullPath = '';
                if (n > 0) {
                    status = returnValue.substring(0, n);
                    if (status == "Success") {
                        fullPath = returnValue.substring(n + 1, returnValue.length);
                        window.location = urlDownload + fullPath;
                        ShowNotificationProcessor(status);
                        CloseHre_ProgressBar();
                    }
                }
                else if (returnValue == "-1") {
                    ShowNotificationProcessor("Không tìm thấy template");
                    CloseHre_ProgressBar();
                }
                else {
                    ShowNotificationProcessor(returnValue);
                    CloseHre_ProgressBar();
                }
                CloseHre_ProgressBar();
            },
            error: function (data) {
                ShowNotificationProcessor(data.responseText);
                CloseHre_ProgressBar();
            }
        });
        //ShowHre_ProgressBar();
        //$.ajax({
        //    traditional: true,
        //    type: 'POST',
        //    url: urlGetData,
        //    data: { id: listIds, valueFields: listFields },
        //    dataType: 'json',
        //    success: function (returnValue) {
        //        if (returnValue == "Error") {
        //            CloseHre_ProgressBar();
        //            ShowNotificationProcessor("Bạn Chưa Cấu Hình Template");
        //            return;
        //        }
        //        else if (returnValue == "NotTemplate") {
        //            CloseHre_ProgressBar();
        //            ShowNotificationProcessor("Không Có Template.");
        //            return;
        //        }
        //        var n = returnValue.indexOf(","), status = '', fullPath = '';
        //        if (n > 0) {
        //            status = returnValue.substring(0, n);
        //            if (status == "Success") {
        //                fullPath = returnValue.substring(n + 1, returnValue.length);
        //                window.location = urlDownload + fullPath;
        //                ShowNotificationProcessor(status);
        //            }
        //        }
        //        else if (returnValue == "-1") {
        //            ShowNotificationProcessor("Không tìm thấy template");
        //        }
        //        else {
        //            ShowNotificationProcessor(returnValue);
        //        }
        //        CloseHre_ProgressBar();
        //    },
        //    error: function (data) {
        //        ShowNotificationProcessor(data.responseText);
        //        CloseHre_ProgressBar();
        //    }
        //});
    });


    //Xử lý nút Create
    $("#btnCreate").click(function () {
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Hre_Profile');
        if (!isAccess) {
            return;
        }
        KendoRouteMapping('#Hrm_Hre_Web/Hre_ProfileAll/Create/', 'Hrm_Hre_Web', '@_hrm_Main_Web');
    });

    $("#btnExportSelected").click(function () {
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@hrm_Hr_Service' + "Hre_GetData/ExportSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Hre_ProfileAll');
    });

    $("#btnExportExcelByTemplate").click(function () {
        var grid = $('#gridHre_Profile').data("kendoGrid");
        var count = grid.dataSource._data.toJSON().length;
        if (count == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@hrm_Hr_Service' + "Hre_GetData/ExportProfileAllListByTemplate/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Hre_ProfileAll');
    });

    $("#btnCreateTemplate").click(function () {
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = false;
        CreateTemplate('@hrm_Hr_Service' + '/Hre_GetData/ExportProfileAllListByTemplate', filterFieldInfo(true));
        @*var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_ProfileAll');
        if (!isAccess) {
            return;
        }
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = false;
        var window12 = window;
        $.ajax({
            type: 'POST',
            url: '@hrm_Hr_Service' + "Hre_GetData/ExportProfileAllListByTemplate",
            data: filterFieldInfo(true),
            dataType: 'json',
            success: function (returnValue) {

                var index = returnValue.indexOf(',');
                var status = "";
                var fullPath = "";
                if (index > 0) {
                    status = returnValue.substring(0, index);
                    if (status == "Success") {
                        fullPath = returnValue.substring(index + 1, returnValue.length);
                        window12.location = '@_hrm_Main_Web' + fullPath;
                        ShowNotificationProcessor(status);
                        $.when(kendo.ui.ExtOkCancelDialog.show({
                            title: "Thông Báo",
                            message: "Bạn có muốn tải template vừa tạo lên không?",
                            icon: "k-ext-warning"
                        })
                        ).done(function (response) {
                            if (response.button == "OK") {
                                var window2 = $("#PopUpCreateTemplate").data("kendoWindow");
                                window2.center().open().title("Tạo mới mẫu template");
                            }
                        });
                    }
                } else {
                    ShowNotificationProcessor(returnValue);
                }
            }
        });*@
    });


</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <form action="#" method="POST" id="form-search">
                    <div class="hrm_box">
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.ProfileName)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.ProfileName)
                            </div>
                        </div>
                        <div id="dropdownlist"></div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.CodeEmp)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.CodeEmp)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.OrgStructureID)
                            </div>
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabel(ConstantDisplay.HRM_HR_Profile_StatusSyn.TranslateString())
                            </div>
                            <div class="FieldValue">
                                @{
                                    var StatusSynz = new DropDownListBuilderInfo()
                                    {
                                        DataTextField = "Text",
                                        DataValueField = "Value",
                                        BindTo = listStatusSynz
                                    };
                                }
                                @Html.VnrDropDownListFor(model => model.StatusSynz, StatusSynz)
                            </div>
                        </div>
                    </div>
                    <div class="hrm_box">
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.JobTitleID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var JobTitleName = new MultiSelectBuilderInfo
                                    {
                                        DataTextField = "JobTitleName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiJobTitle",
                                        MaxSelectedItems = 1,
                                        Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
                                    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.JobTitleID, JobTitleName)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.PositionID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var PositionName = new MultiSelectBuilderInfo
                                    {
                                        DataTextField = "PositionName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
                                        MaxSelectedItems = 1,
                                        Placeholder = ConstantDisplay.HRM_Category_SelectPosition.TranslateString(),
                                    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.PositionID, PositionName)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.EmpTypeID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var empTypeID = new DropDownListBuilderInfo()
                                    {
                                        DataTextField = "EmployeeTypeName",
                                        DataValueField = "ID",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiEmployeeType",
                                        OptionLabel = ConstantDisplay.HRM_Category_SelectEmployeeType.TranslateString(),
                                        Autobind = false
                                    };
                                }
                                @(Html.VnrDropDownListFor(mode => mode.EmpTypeID, empTypeID))
                            </div>
                        </div>          
                    </div>
                    <div class="hrm_box">
                        <div>
                            <div class="FieldTitle150">
                                <b>
                                    @ConstantDisplay.HRM_HR_Profile_DateHire.TranslateString()
                                </b>
                            </div>
                            <div class="FieldValue">
                                @{
                                    var dateFrom = new DatePickerBuilderInfo()
                                    {
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateFrom, dateFrom)
                                @{
                                    var dateTo = new DatePickerBuilderInfo()
                                    {
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateTo, dateTo)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.IDNo)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.IDNo)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Gender)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var gender = new DropDownListBuilderInfo()
                                    {
                                        DataTextField = "Text",
                                        DataValueField = "Value",
                                        BindTo = listGender,
                                        OptionLabel = ConstantDisplay.HRM_Category_SelectGender.TranslateString(),
                                    };
                                }
                                @Html.VnrDropDownListFor(model => model.Gender, gender)
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="commandToolBarWidge">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div style="float:right">
        <script>
                function GetScreenName() {
                    return {
                        screenName: '@screen'
                    };
                }
        </script>
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
               
                 @*<li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportPersonal", Content = ConstantAction.HRM_Common_Excel_PersonalInformation.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>*@
            
            </ul>
        </div>
        @{
            var screenName = new DropDownListBuilderInfo()
            {
                Name = "ddlScreenName",
                DataTextField = "ExportName",
                DataValueField = "ID",
                Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                StyleCss = "width:200px;",
                Data = "GetScreenName",
            };
        }
        @Html.VnrDropDownList(screenName)
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportExcelByTemplate", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeProfileAll", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>
<script>
    function clickProfile(id) {
        KendoRouteMapping('#Hrm_Hre_Web/Hre_Profile/Edit/'+id, 'Hrm_Hre_Web', '@_hrm_Main_Web');
    }
</script>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridHre_Profile_Grid_Name + "__Hre_ProfileAllIndex";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridHre_Profile_Grid_Name,
            ReadActionUrl = hrm_Hr_Service + "Hre_GetData/GetProfileAllList/",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new[]
                {
                    Hre_ProfileModel.FieldNames.CodeEmp,
                    Hre_ProfileModel.FieldNames.ProfileName,
                      Hre_ProfileModel.FieldNames.E_UNIT,
                       Hre_ProfileModel.FieldNames.E_DIVISION,
                Hre_ProfileModel.FieldNames.E_DEPARTMENT,
                 Hre_ProfileModel.FieldNames.E_TEAM,
                Hre_ProfileModel.FieldNames.E_SECTION,


                    Hre_ProfileModel.FieldNames.JobTitleName,
                    Hre_ProfileModel.FieldNames.PositionName,
                    Hre_ProfileModel.FieldNames.DateHire,
                    Hre_ProfileModel.FieldNames.IDNo,
                    Hre_ProfileModel.FieldNames.Gender,
                    Hre_ProfileModel.FieldNames.EmployeeTypeName,
                    Hre_ProfileModel.FieldNames.DateQuit,
                    Hre_ProfileModel.FieldNames.StatusSynView,
                    Hre_ProfileModel.FieldNames.DateUpdate,
                };

            grid.SizeFields = new Dictionary<string, int>()
            {
                {Hre_ProfileModel.FieldNames.CodeEmp,80},
                {Hre_ProfileModel.FieldNames.ProfileName,140},
                  {Hre_ProfileModel.FieldNames.E_UNIT,135},
                {Hre_ProfileModel.FieldNames.E_DIVISION,135},

                {Hre_ProfileModel.FieldNames.E_TEAM,135},
                {Hre_ProfileModel.FieldNames.E_DEPARTMENT,135},
                {Hre_ProfileModel.FieldNames.E_SECTION,135},


                {Hre_ProfileModel.FieldNames.JobTitleName,110},
                {Hre_ProfileModel.FieldNames.PositionName,110},
                {Hre_ProfileModel.FieldNames.DateHire,100},
                {Hre_ProfileModel.FieldNames.IDNo,100},
                {Hre_ProfileModel.FieldNames.Gender,70},
                {Hre_ProfileModel.FieldNames.EmployeeTypeName,140},
                {Hre_ProfileModel.FieldNames.DateQuit,105},
                {Hre_ProfileModel.FieldNames.StatusSynView,140},
                {Hre_ProfileModel.FieldNames.DateUpdate,100},
            };

            grid.Filterable = new Dictionary<string, bool>()
            {
                {Hre_ProfileModel.FieldNames.CodeEmp,true},
                {Hre_ProfileModel.FieldNames.ProfileName,true},
                {Hre_ProfileModel.FieldNames.E_DEPARTMENT,true},
                {Hre_ProfileModel.FieldNames.E_DIVISION,true},
                {Hre_ProfileModel.FieldNames.E_SECTION,true},
                {Hre_ProfileModel.FieldNames.E_TEAM,true},
                {Hre_ProfileModel.FieldNames.E_UNIT,true},
                {Hre_ProfileModel.FieldNames.JobTitleName,true},
                {Hre_ProfileModel.FieldNames.PositionName,true},
                {Hre_ProfileModel.FieldNames.DateHire,false},
                {Hre_ProfileModel.FieldNames.IDNo,false},
                {Hre_ProfileModel.FieldNames.Gender,false},
                {Hre_ProfileModel.FieldNames.EmployeeTypeName,false},
                {Hre_ProfileModel.FieldNames.DateQuit,false},
                {Hre_ProfileModel.FieldNames.StatusSynView,false},
                {Hre_ProfileModel.FieldNames.DateUpdate,false},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Hre_ProfileModel.FieldNames.CodeEmp,ConstantDisplay.HRM_HR_Profile_CodeEmp},
                {Hre_ProfileModel.FieldNames.ProfileName,ConstantDisplay.HRM_HR_Profile_ProfileName},
                     {Hre_ProfileModel.FieldNames.E_UNIT, ConstantDisplay.HRM_Hre_Report_E_UNIT},
                {Hre_ProfileModel.FieldNames.E_DIVISION, ConstantDisplay.HRM_Hre_Report_E_DIVISION},
                {Hre_ProfileModel.FieldNames.E_DEPARTMENT, ConstantDisplay.HRM_Hre_Report_E_DEPARTMENT},
                {Hre_ProfileModel.FieldNames.E_SECTION, ConstantDisplay.HRM_Hre_Report_E_SECTION},
                {Hre_ProfileModel.FieldNames.E_TEAM, ConstantDisplay.HRM_Hre_Report_E_TEAM},


                {Hre_ProfileModel.FieldNames.JobTitleName,ConstantDisplay.HRM_HR_Profile_JobTitleName},
                {Hre_ProfileModel.FieldNames.PositionName,ConstantDisplay.HRM_HR_Profile_PositionName},
                {Hre_ProfileModel.FieldNames.DateHire,ConstantDisplay.HRM_HR_Profile_DateHire},
                {Hre_ProfileModel.FieldNames.IDNo,ConstantDisplay.HRM_HR_Profile_IDNo},
                {Hre_ProfileModel.FieldNames.Gender,ConstantDisplay.HRM_HR_Profile_Gender},
                {Hre_ProfileModel.FieldNames.EmployeeTypeName,ConstantDisplay.HRM_HR_Profile_EmployeeTypeName},
                {Hre_ProfileModel.FieldNames.DateQuit,ConstantDisplay.HRM_HR_Profile_DateQuit},
                {Hre_ProfileModel.FieldNames.StatusSynView,ConstantDisplay.HRM_HR_Profile_StatusSyn},
                {Hre_ProfileModel.FieldNames.DateUpdate,ConstantDisplay.HRM_HR_Profile_DateUpdate},
            };
            grid.HyperlinkFields = new Dictionary<string, string>()
            {
                {Hre_ProfileModel.FieldNames.ProfileName,"clickProfile"},
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = "gridHre_Profile",
        //    ValueFields = valueFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    Filterable = filterable,
        //    ReadActionUrl = hrm_Hr_Service + "Hre_GetData/GetProfileAllList/",
        //    ReadData = "filterFieldInfo",
        //    HyperlinkFields = hyperlinkFields
        //};
    }
    @(Html.VnrGrid<Hre_ProfileModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeProfileAll", "Hre_ProfileModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)



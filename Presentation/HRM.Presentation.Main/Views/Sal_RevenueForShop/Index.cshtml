@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models
@using HRM.Infrastructure.Security

@model Sal_RevenueForShopSearchModel
@{
    //ViewBag.Title = "Salary CostCentre Index";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Layout = null;
    IList<SelectListItem> listSaleTypes = Enum.GetValues(typeof(EnumDropDown.SalesType))
    .Cast<EnumDropDown.SalesType>()
    .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
    .ToList();
}
@{
    var window = new WindowBuilderInfo 
    {
        Name = "windowSal_RevenueForShop",
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Sal_RevenueForShop/Sal_RevenueForShopInfo/",
    };
}
@(Html.VnrWindow(window))

@{
    var window1 = new WindowBuilderInfo
    {
        Name = "windowCatKPIBonus",
        Visible = false,
        LoadContentFrom = @_hrm_Main_Web + "Cat_KPIBonus/CatKPIBonusInfo/",
    };
}
@(Html.VnrWindow(window1))

<script>
    var gridName = '@ConstantControlName.HRM_Sal_RevenueForShop_Grid_Name';
    var popUpName = '@ConstantControlName.HRM_Sal_RevenueForShop_PopUp_Name';
    var titleEditPopUpRevenueForShop = '@Html.Raw(ConstantDisplay.HRM_Sal_RevenueForShop_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUpRevenueForShop = '@Html.Raw(ConstantDisplay.HRM_Sal_RevenueForShop_PopUp_Create_Title.TranslateString())';

    //Tìm kiếm
    function filterFieldInfo(isExport) {
        return {
            ShopID: $('#SShopID').val(),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#SDateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#SDateTo").val()),
            KPIBonusID: $('#SKPIBonusID').val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        jumpAnchor("anchor");
        $("#btnSearch").click(function () {
            ReadGrid('grid_Sal_RevenueForShop');
        });

        //Show Hide Panel
        ShowHidePanel();

        //Xử lý Edit
        var url = '@_hrm_Main_Web' + "Sal_RevenueForShop/Sal_RevenueForShopInfo/";
        EditGridPopUp("grid_Sal_RevenueForShop", "windowSal_RevenueForShop", url, '@ConstantPermission.Sal_RevenueForShop', titleEditPopUpRevenueForShop);
    });

    //Xử lý tạo mới
    $("#btnCreateCostCentre").click(function () {
        PopUpCreate("windowSal_RevenueForShop", titleCreatePopUpRevenueForShop, '@ConstantPermission.Sal_RevenueForShop');
    });

    //Xử Lý grid
    GridCheckbox(gridName);

    //Xử lý delete
    $('#btnDelete').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        DeleteSelected('grid_Sal_RevenueForShop', '@_hrm_Main_Web' + "Sal_RevenueForShop/RemoveSelected/", selectedIds, '@ConstantPermission.Sal_RevenueForShop');
        return false;
    });

    $("#btnExportAll").click(function () {
        @*var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Hre_ProfileQuit');
        if (!isAccess) {
            return;
        }*@
        @*var grid = $('#@ConstantControlName.HRM_Category_CostCentre_Grid_Name').data("kendoGrid");*@
        var grid = $('#grid_Sal_RevenueForShop').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportAllSal_RevenueForShopList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Sal_RevenueForShop');
    });


    $("#btnExportSelected").click(function () {
       @*var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_SoftSkill');
        if (!isAccess) {
            return;
        }*@
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportSal_RevenueForShopSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Sal_RevenueForShop');
    });


    function PopupCreateKPIBonus(e) {
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Cat_KPIBonus');
        if (!isAccess) {
            return;
        }
        PopUpCreate("windowCatKPIBonus", "create KPI", '@ConstantPermission.Cat_KPIBonus');
        //tttttt('windowCatKPIBonus', e);

    };

    function tttttt(e,n) {
        $("#" + e).kendoWindow({
            //close: function (e) {
            //    $("#" + n).data("kendoDropDownList").dataSource.read();
            //}
        });
    };

</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(model => model.ShopID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _ShopID = new ComboBoxBuilderInfo()
                            {
                                StyleCss = "width:200px;",
                                Name = "SShopID",
                                DataTextField = "ShopName",
                                DataValueField = "ID",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiShop",
                                ServerFilter = true
                            };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.ShopID, _ShopID))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(model => model.KPIBonusID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _KPIBonusID = new DropDownListBuilderInfo()
                            {
                                StyleCss = "width:200px;",
                                Name = "SKPIBonusID",
                                DataTextField = "KPIBonusName",
                                DataValueField = "ID",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiKPIBonus",
                                ShowButtonCreate=true,
                                EvenClickButtonCreate="PopupCreateKPIBonus",
                            };
                        }
                        @(Html.VnrDropDownListFor(mode => mode.KPIBonusID, _KPIBonusID))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.DateFrom)
                    </div>
                    <div class="FieldValue">
                        @{
                            var dateFrom = new DatePickerBuilderInfo()
                            {
                                Name = "SDateFrom",
                                StyleCss = "width:100px;",
                                Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateFrom, dateFrom)
                        @{
                            var dateTo = new DatePickerBuilderInfo()
                            {
                                Name = "SDateTo",
                                StyleCss = "width:100px;",
                                Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateTo, dateTo)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateCostCentre", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div style="float:right">
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>

<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        Dictionary<object, object[]> foreignKey = new Dictionary<object, object[]>()
        {
           {Sal_RevenueForShopModel.FieldNames.Type,new object[] { "Value", "Text",listSaleTypes, ConstantDisplay.HRM_Sal_RevenueForShop_Type,""}},
          
        };
        
        var valueFields = new[]
        {
            Sal_RevenueForShopModel.FieldNames.ShopName,
            Sal_RevenueForShopModel.FieldNames.KPIBonusName,
            Sal_RevenueForShopModel.FieldNames.Target,
            Sal_RevenueForShopModel.FieldNames.Actual,
            Sal_RevenueForShopModel.FieldNames.DateFrom,
            Sal_RevenueForShopModel.FieldNames.DateTo
        };
        var groupFields = new[]
        {
            Sal_RevenueForShopModel.FieldNames.ShopName,
        };
        var sizeFields = new Dictionary<string, int>()
        {
            {Sal_RevenueForShopModel.FieldNames.ShopName,100},
            {Sal_RevenueForShopModel.FieldNames.KPIBonusName,100},
            {Sal_RevenueForShopModel.FieldNames.Target,140},
            {Sal_RevenueForShopModel.FieldNames.Actual,120},
            {Sal_RevenueForShopModel.FieldNames.DateFrom,100},
            {Sal_RevenueForShopModel.FieldNames.DateTo,100},
        };

        var displayFields = new Dictionary<string, string>()
        {
            {Sal_RevenueForShopModel.FieldNames.ShopName,ConstantDisplay.HRM_Sal_RevenueForShop_ShopID},
            {Sal_RevenueForShopModel.FieldNames.KPIBonusName,ConstantDisplay.HRM_Sal_RevenueForShop_KPIBonusID},
            {Sal_RevenueForShopModel.FieldNames.Target,ConstantDisplay.HRM_Sal_RevenueForShop_Target},
            {Sal_RevenueForShopModel.FieldNames.Actual,ConstantDisplay.HRM_Sal_RevenueForShop_Actual},
            {Sal_RevenueForShopModel.FieldNames.DateFrom,ConstantDisplay.HRM_Sal_RevenueForShop_DateFrom},
            {Sal_RevenueForShopModel.FieldNames.DateTo,ConstantDisplay.HRM_Sal_RevenueForShop_DateTo},
        };

        var grid = new GridBuilderInfo
        {
            Name = "grid_Sal_RevenueForShop",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            ForeignKey = foreignKey,
            ReadActionUrl = _hrm_Hr_Service + "Sal_GetData/GetSal_RevenueForShopList/",
            ReadData = "filterFieldInfo",
            GroupFields = groupFields
        };
    }

    @(Html.VnrGrid<Sal_RevenueForShopModel>(grid))
</div>
@{
    var valueFields1 = string.Empty;
    for (int i = 0; i < valueFields.Count(); i++)
    {
        valueFields1 += "," + valueFields[i];
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
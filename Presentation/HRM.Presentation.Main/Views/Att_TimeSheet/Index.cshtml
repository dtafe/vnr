@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Infrastructure.Security;
@using HRM.Presentation.Attendance.Models;
@model Att_TimeSheetSearchModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Attendance_TimeSheet_Title.TranslateString();
    var hrm_Cat_Web = ConstantPathWeb.Hrm_Cat_Web;
    var hrm_Att_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    Layout = null;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_Att_TimeSheet_PopUp_Name,
        Visible = false,
        Width = 700,
        LoadContentFrom = @hrm_Att_Web + "Att_TimeSheet/Att_TimeSheetInfo/",
    };
}
@(Html.VnrWindow(window))
<script src="~/Scripts/knockout-3.2.0.js"></script>
<script>
    //Biến để lưu id của các dòng đã check chọn
    var gridName = '@ConstantControlName.HRM_Att_TimeSheet_Grid_Name';
    var popUpName = '@ConstantControlName.HRM_Att_TimeSheet_PopUp_Name';
    var titleEditPopUpTimeSheet = '@Html.Raw(ConstantDisplay.HRM_Attendance_TimeSheet_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUpTimeSheet = '@Html.Raw(ConstantDisplay.HRM_Attendance_TimeSheet_PopUp_Create_Title.TranslateString())';

    $(document).ready(function () {
        //Ẩn hiện div chứa các input tìm kiếm
        ShowHidePanel();
        //Xử lý sự kiện click button tìm kiếm
        $("#btnSearch").click(function () {
            ReadGrid(gridName);
            selectedIds = [];
        });
        EditGridPopUp(gridName, popUpName, '@hrm_Att_Web' + "Att_TimeSheet/Att_TimeSheetInfo/", '@ConstantPermission.Att_TimeSheet', titleEditPopUpTimeSheet);
    });

    //Lấy dữ liệu khi tìm kiếm
    function filterFieldInfo() {
        return {
            ProfileName: $('#SProfileName').val(),
            RoleID: $('#SRoleID').val(),
            JobTypeID: $('#SJobTypeID').val(),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            IsExport: false,
            CodeEmp: $('#SCodeEmp').val(),
        };
    }

    //Xử lý khi check chọn các dòng trên lưới thì lưu id của các dòng đó cào biến selectedIds ở trên
    GridCheckbox(gridName);
    //Tạo mới ngân hàng
    $("#btnCreateAtt_TimeSheet").click(function () {
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Att_TimeSheet');
        if (!isAccess) {
            return;
        }
        PopUpCreate(popUpName, titleCreatePopUpTimeSheet);
    });

    $('#btnDelete').click(function (e) {
        if (selectedIds.length == 0) {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelectedConfirm(gridName, '@hrm_Att_Web' + "Att_TimeSheet/RemoveSelected/", selectedIds, '@ConstantPermission.Att_TimeSheet');
    });

</script>
<div id="idControl" class="k-content"></div>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div class="hrm_box">
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.CodeEmp)
                        </div>
                        <div class="FieldValue">
                            @{
                                var txtCodeEmp = new TextBoxBuilderInfo()
                                {
                                    Name = "SCodeEmp"
                                };
                            }
                            @Html.VnrTextBox(txtCodeEmp)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.ProfileName)
                        </div>
                        <div class="FieldValue">
                            @{
                                var txtProfileName = new TextBoxBuilderInfo()
                                {
                                    Name = "SProfileName"
                                };
                            }
                            @Html.VnrTextBox(txtProfileName)
                        </div>
                    </div>
                        <div style="clear: both;"></div>
                    </div>
                <div class="hrm_box">
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.RoleID)
                        </div>
                        <div class="FieldValue" id="aaa">
                            @{
                                var _RoleID = new DropDownListBuilderInfo()
                                {
                                    Name = "SRoleID",
                                    DataTextField = "RoleName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRole"
                                };
                            }
                            @(Html.VnrDropDownListFor(mode => mode.RoleID, _RoleID))
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.JobTypeID)
                        </div>
                        <div class="FieldValue" id="aaa">
                            @{
                                var _JobTypeID = new DropDownListBuilderInfo()
                                 {
                                     Name = "SJobTypeID",
                                     DataTextField = "JobTypeName",
                                     DataValueField = "ID",
                                     Url = _hrm_Hr_Service + "Cat_GetData/GetMultiJobType"
                                 };
                            }
                            @(Html.VnrDropDownListFor(mode => mode.JobTypeID, _JobTypeID))
                        </div>
                    </div>
                    
                </div>
                <div class="hrm_box">
                    <div id="div3">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.DateFrom)
                        </div>
                        <div class="FieldValue">
                            @{
                                var dateFrom = new DatePickerBuilderInfo()
                                {
                                    StyleCss = "width:100px;",
                                    Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                };
                            }
                            @Html.VnrDatePickerFor(mode => mode.DateFrom, dateFrom)
                            @{
                                var dateTo = new DatePickerBuilderInfo()
                                {
                                    StyleCss = "width:100px;",
                                    Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                };
                            }
                            @Html.VnrDatePickerFor(mode => mode.DateTo, dateTo)
                        </div>
                        <div style="clear: both;"></div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateAtt_TimeSheet", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div style="float:right">
        <div class="HideExportCate">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeTimeSheet", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>
<script>
    function clickProfile(id) {

        KendoRouteMapping('#Hrm_Hre_Web/GeneralProfile/Index/' + id,'Hrm_Hre_Web', '@_hrm_Main_Web');
    }
</script>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_Att_TimeSheet_Grid_Name + "__Att_TimeSheetIndex";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_Att_TimeSheet_Grid_Name,
            ReadActionUrl = @_hrm_Hr_Service + "Att_GetData/GetTimeSheetList/",
            ReadData = "filterFieldInfo",
            ShowCommand = false,
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new[]
            {
                Att_TimeSheetModel.FieldNames.CodeEmp,
                Att_TimeSheetModel.FieldNames.ProfileName,
                Att_TimeSheetModel.FieldNames.RoleName,
                Att_TimeSheetModel.FieldNames.JobTypeName,
                Att_TimeSheetModel.FieldNames.NoHour,
                Att_TimeSheetModel.FieldNames.Sector,
                Att_TimeSheetModel.FieldNames.Date
            };

            grid.SizeFields = new Dictionary<string, int>()
            {
                {Att_TimeSheetModel.FieldNames.CodeEmp,130},
                {Att_TimeSheetModel.FieldNames.ProfileName,130},
                {Att_TimeSheetModel.FieldNames.RoleName,130},
                {Att_TimeSheetModel.FieldNames.JobTypeName,130},
                {Att_TimeSheetModel.FieldNames.NoHour,80},
                {Att_TimeSheetModel.FieldNames.Sector,100},
                {Att_TimeSheetModel.FieldNames.Date,100}
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Att_TimeSheetModel.FieldNames.CodeEmp,ConstantDisplay.HRM_HR_Profile_CodeEmp},
                {Att_TimeSheetModel.FieldNames.ProfileName,ConstantDisplay.HRM_Attendance_TimeSheet_ProfileID},
                {Att_TimeSheetModel.FieldNames.RoleName,ConstantDisplay.HRM_Attendance_TimeSheet_RoleID},
                {Att_TimeSheetModel.FieldNames.JobTypeName,ConstantDisplay.HRM_Attendance_TimeSheet_JobTypeID},
                {Att_TimeSheetModel.FieldNames.NoHour,ConstantDisplay.HRM_Attendance_TimeSheet_NoHour},
                {Att_TimeSheetModel.FieldNames.Sector,ConstantDisplay.HRM_Attendance_TimeSheet_Sector},
                {Att_TimeSheetModel.FieldNames.Date,ConstantDisplay.HRM_Attendance_TimeSheet_Date}
            };

            grid.HyperlinkFields = new Dictionary<string, string>()
            {
                {Att_TimeSheetModel.FieldNames.ProfileName,"clickProfile,ProfileID"},
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = ConstantControlName.HRM_Att_TimeSheet_Grid_Name,
        //    ValueFields = valueFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    ShowCommand = false,
        //    ReadActionUrl = @_hrm_Hr_Service + "Att_GetData/GetTimeSheetList/",
        //    ReadData = "filterFieldInfo",
        //    HyperlinkFields = hyperlinkFields
        //};
    }

    @(Html.VnrGrid<Att_TimeSheetModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeTimeSheet", "Att_TimeSheetModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>

@using HRM.Infrastructure.Utilities;
@using HRM.Infrastructure.Security;
@using HRM.Presentation.Payroll.Models
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Payroll.Models.Sal_ProductCapacitySearchModel
@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    ViewBag.Title = "Index";
    Layout = null;

}
@{
    var window = new WindowBuilderInfo
    {
        Name = "windowSal_ProductCapacity",
        Visible = false,
        Width = 1000,
        LoadContentFrom = @_hrm_Main_Web + "Sal_ProductCapacity/Sal_ProductCapacityInfo",
    };
}

@(Html.VnrWindow(window))
<script type="text/javascript">
    var checkedNodes = [];
    var titleCreatePopUpBasicSalary = '@Html.Raw(ConstantDisplay.HRM_Payroll_ProductCapacity_Create_Title.TranslateString())';
    var titleUpdatePopUpBasicSalary = '@Html.Raw(ConstantDisplay.HRM_Payroll_ProductCapacity_Update_Title.TranslateString())';
    function filterFieldInfo() {
        checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        var _ProductID = $('#@Html.FieldIdFor(model=>model.ProductID)').val();
        var _ProductItemID = $('#@Html.FieldIdFor(model=>model.ProductItemID)').val();
        return {
            OrgStructureID: checkedNodes.join(','),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            ProductID:_ProductID,
            ProductItemID:_ProductItemID,
            IsExport: false,
            ValueFields: $('#valueFieldsGrid').val()
        }
    };

    $(document).ready(function () {
        $("#btnSearch").click(function () {
            ReadGrid('gridSal_ProductCapacity');
        });

        //Xử Lý Grid
        GridCheckbox("gridSal_ProductCapacity");

        //Xử lý nút Delete
        $('#btnDelete').click(function (e) {

            if (selectedIds.length == 0) {
                DeleteFail();
                return;
            }
            e.preventDefault();
            DeleteSelected("gridSal_ProductCapacity", '@_hrm_Main_Web' + "Sal_ProductCapacity/RemoveSelected/", selectedIds, '@ConstantPermission.Sal_ProductCapacity');
            //selectedIds = [];
        });

        //Xử lý nút Tao Moi
        $("#btnCreate").click(function () {
            PopUpCreate("windowSal_ProductCapacity", titleCreatePopUpBasicSalary, '@ConstantPermission.Sal_ProductCapacity');

        });
        //Xử lý nút Edit
        EditGridPopUp("gridSal_ProductCapacity", "windowSal_ProductCapacity", '@_hrm_Main_Web' + "Sal_ProductCapacity/Sal_ProductCapacityInfo/", '@ConstantPermission.Sal_ProductCapacity', titleUpdatePopUpBasicSalary);
    });

    // Hàm xử lý dữ liệu được chọn trên lưới và xử lý bên dưới
 
    $("#btnExportSelected").click(function () {

        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportProductCapacitySelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, selectedIds, listFields, urlDownload, '@ConstantPermission.Sal_ProductCapacity');
    });

    $("#btnExportAll").click(function () {
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportAllProductCapacityList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Sal_ProductCapacity');
    });
</script>

<script>
    function clickProfile(id) {

        KendoRouteMapping('#Hrm_Main_Web/GeneralProfile/Index/' + id, 'Hrm_Main_Web', '@_hrm_Main_Web');
    }
</script>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")

                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->

            <div class="contendSearchWidge">
                <form id="form-search">
                    <div class="hrm_box">
                        <div id="div1">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.OrgStructureID)
                            </div>
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            </div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.DateFrom)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _DateFrom = new DatePickerBuilderInfo()
                                    {
                                        Placeholder = ConstantDisplay.HRM_Common_FromDate.TranslateString(),
                                        StyleCss = "width:100px"
                                    };
                                }
                                @Html.VnrDatePickerFor(mode => mode.DateFrom, _DateFrom)
                                @{
                                    var _DateTo = new DatePickerBuilderInfo()
                                    {
                                        Placeholder = ConstantDisplay.HRM_Common_ToDate.TranslateString(),
                                        StyleCss = "width:100px"
                                    };
                                }
                                @Html.VnrDatePickerFor(mode => mode.DateTo, _DateTo)
                            </div>
                        </div>
                    </div>
                    <div class="hrm_box">
                        <div id="div3">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.ProductID)
                                @*@Html.HiddenFor(model => model.Id)*@
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _ProductID = new ComboBoxBuilderInfo()
                                    {
                                       
                                        DataTextField = "ProductName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiProduct",
                                        Placeholder = ConstantDisplay.HRM_Category_Product_SelectProductType.TranslateString(),
                                        //Autobind = true,
                                        Value = (Model != null && Model.ProductID != null) ? Model.ProductID.ToString() : "",
                                        StyleCss="width:200px"
                                    };
                                }
                                @Html.VnrComboBoxFor(model => model.ProductID, _ProductID)
                            </div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.ProductItemID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var ProductItemID = new ComboBoxBuilderInfo()
                                    {
                                        DataTextField = "ProductItemName",
                                        DataValueField = "ID",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetFieldterProductITemMulti",
                                        ServerFilter = true,
                                        Value = (Model != null && Model.ProductItemID != null) ? Model.ProductItemID.ToString() : "",
                                        StyleCss = "width:200px"
                                    };
                                }
                                @Html.VnrComboBoxFor(m => m.ProductItemID, ProductItemID)
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="commandToolBarWidge">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div style="float:right">
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnProductCapacity", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>


<!-- Grid View -->
<div>
    @using HRM.Presentation.Payroll.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridSal_ProductCapacity_Name + "__Sal_ProductCapacity_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridSal_ProductCapacity_Name,
            ShowCommand = false,
            ReadActionUrl = @_hrm_Hr_Service + "Sal_GetData/GetProductCapacityList/",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
            {
                

                Sal_ProductCapacityModel.FieldNames.OrgStructureName,
                Sal_ProductCapacityModel.FieldNames.ProductName,
                Sal_ProductCapacityModel.FieldNames.ProductItemName,
                Sal_ProductCapacityModel.FieldNames.DateFrom,
                Sal_ProductCapacityModel.FieldNames.DateTo,
                Sal_ProductCapacityModel.FieldNames.MinCapacity,
                Sal_ProductCapacityModel.FieldNames.MaxCapacity,
                Sal_ProductCapacityModel.FieldNames.Rate,
                Sal_ProductCapacityModel.FieldNames.Formula,
                Sal_ProductCapacityModel.FieldNames.Notes,
            };
    
            grid.SizeFields = new Dictionary<string, int>()
            {
               

                {Sal_ProductCapacityModel.FieldNames.OrgStructureName, 110},
                {Sal_ProductCapacityModel.FieldNames.ProductName, 110},
                {Sal_ProductCapacityModel.FieldNames.ProductItemName, 125},
                {Sal_ProductCapacityModel.FieldNames.DateFrom, 110},
                {Sal_ProductCapacityModel.FieldNames.DateTo,100},
                {Sal_ProductCapacityModel.FieldNames.MinCapacity,102},
                {Sal_ProductCapacityModel.FieldNames.MaxCapacity,150},
                {Sal_ProductCapacityModel.FieldNames.Rate,110},
                {Sal_ProductCapacityModel.FieldNames.Formula,100},
                {Sal_ProductCapacityModel.FieldNames.Notes,100},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Sal_ProductCapacityModel.FieldNames.OrgStructureName, ConstantDisplay.HRM_Payroll_ProductCapacity_OrgStructureName},
                {Sal_ProductCapacityModel.FieldNames.ProductName, ConstantDisplay.HRM_Payroll_ProductCapacity_ProductName},
                {Sal_ProductCapacityModel.FieldNames.ProductItemName, ConstantDisplay.HRM_Payroll_ProductCapacity_ProductItemName},
                {Sal_ProductCapacityModel.FieldNames.DateFrom, ConstantDisplay.HRM_Payroll_ProductCapacity_DateFrom},
                {Sal_ProductCapacityModel.FieldNames.DateTo,ConstantDisplay.HRM_Payroll_ProductCapacity_DateTo},
                {Sal_ProductCapacityModel.FieldNames.MinCapacity,ConstantDisplay.HRM_Payroll_ProductCapacity_MinCapacity},
                {Sal_ProductCapacityModel.FieldNames.MaxCapacity,ConstantDisplay.HRM_Payroll_ProductCapacity_MaxCapacity},
                {Sal_ProductCapacityModel.FieldNames.Rate,ConstantDisplay.HRM_Payroll_ProductCapacity_Rate},
                {Sal_ProductCapacityModel.FieldNames.Formula,ConstantDisplay.HRM_Payroll_ProductCapacity_Formula},
                {Sal_ProductCapacityModel.FieldNames.Notes,ConstantDisplay.HRM_Payroll_ProductCapacity_Notes},
            };

            grid.FormatFields = new Dictionary<string, string>()
            {
                ////{Sal_BasicSalaryModel.FieldNames.GrossAmount, ConstantFormat.HRM_Format_Int},
                //{Sal_ProductCapacityModel.FieldNames.InsuranceAmount, ConstantFormat.HRM_Format_Int},
                //{Sal_ProductCapacityModel.FieldNames.AllowanceAmount1, ConstantFormat.HRM_Format_Int},
                //{Sal_ProductCapacityModel.FieldNames.AllowanceAmount2, ConstantFormat.HRM_Format_Int},
                //{Sal_ProductCapacityModel.FieldNames.AllowanceAmount3, ConstantFormat.HRM_Format_Int},
                //{Sal_ProductCapacityModel.FieldNames.AmountTotal, ConstantFormat.HRM_Format_Int}
            };
       
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }

        <!--Khởi tạo Grid-->
        @(Html.VnrGrid<Sal_ProductCapacityModel>(grid))
        <script>
            ClickButtonChangeColum("btnChangeColumnProductCapacity", "Sal_ProductCapacityModel");
            $(document).ready(function () {
                $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
                $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
                $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
                $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
            });
        </script>
    }
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
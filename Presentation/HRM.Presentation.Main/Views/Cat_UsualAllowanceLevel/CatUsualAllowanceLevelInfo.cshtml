@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models;
@model Cat_UsualAllowanceLevelModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid AllowanceID = Guid.Empty;

    string aaa = ViewBag.AllowanceID;
    if (!string.IsNullOrEmpty(aaa))
    {
        AllowanceID = Common.ConvertToGuid(aaa.ToString());

        //Model.ProfileID = ProfileID;


    }
}
<script>
    SetFieldRequiredByScreenName('Cat_UsualAllowanceLevel');
    
    var gridName1 = '@ConstantControlName.HRM_Category_UsualAllowanceLevel_Grid_Name';
    @*function Read()
    {
        $.ajax({
            url: '@_hrm_Hr_Service' + 'Cat_GetData/GetUsualAllowanceLevelByAllowanceID',
            data: { AllowanceID: '@AllowanceID' },
            type: 'POST',
            success: function (data) {
                ReadGrid(gridName1);
            },
            error: function (data) {
                ShowNotificationProcessor("error,Thêm Mới Thất Bại");
            }
        });

    }*@
    function onSaveNew() {
       
        //if (!checkDuplicationCode()) {
        onSaveAndContinue($('#form_Cat_UsualAllowanceLevelInfo'), '@_hrm_Hre_Service', 'api/Cat_UsualAllowanceLevel/', '@ConstantControlName.HRM_Category_UsualAllowanceLevel_Grid_Name', '@ConstantControlName.HRM_Category_UsualAllowanceLevel_PopUp_Name');
           // Read();
            return false;
        //}
    }

    function onSaveClose() {
       // if (!checkDuplicationCode()) {
        onSaveAndClose($('#form_Cat_UsualAllowanceLevelInfo'), '@_hrm_Hre_Service', 'api/Cat_UsualAllowanceLevel/', '@ConstantControlName.HRM_Category_UsualAllowanceLevel_Grid_Name', '@ConstantControlName.HRM_Category_UsualAllowanceLevel_PopUp_Name');
           // Read();
            return false;
       // }
    }
    function onSaveDataPopUp() {
       // if (!checkDuplicationCode()) {
        onlySave($('#form_Cat_UsualAllowanceLevelInfo'), '@_hrm_Hre_Service', 'api/Cat_UsualAllowanceLevel/', '@ConstantControlName.HRM_Category_UsualAllowanceLevel_Grid_Name');
           // Read();
            return false;
        //}
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_UsualAllowanceLevelInfo" }))
{
    @Html.HiddenFor(model => model.ID)
       
    <div>
       
            @{
    if (Model != null)
    {
        @Html.HiddenFor(m => m.AllowanceID)
    }
    else
    {
        @Html.Hidden("AllowanceID", AllowanceID)
    }


            }
            
     
        
    </div>
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.UsualAllowanceLevelName)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextBoxFor(mode => mode.UsualAllowanceLevelName, "width:250px")
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.Code)
                        </div>
                        <div class="FieldValue">

                            @{
    var Code = new TextBoxBuilderInfo()
    {
        Name = "CatUsualAllowanceLeveInfo_Code"
    };
    if (Model != null)
    {
        Code.Value = Model == null ? string.Empty : Model.Code;
    }
                            }

                            @Html.VnrTextBoxFor(mode => mode.Code, Code)
                        </div>
                    </div>
                </div>
                

                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Amount)
                    </div>
                    <div class="FieldValue">
                        @{
    var Amount = new NumericTextBoxBuilderInfo<double>()
    {
        Name = "CatUsualAllowanceLevelInfo_Amount"
        //Value=Model!=null&&Model.Amount!=null?Model.Amount:0
    };

                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.Amount, Amount)

                        @{

    var CurrencyID = new ComboBoxBuilderInfo()
 {
     Name = "CatUsualAllowanceLevelInfo_CurrencyID",
     DataTextField = "CurrencyName",
     DataValueField = "ID",
     Url = _hrm_Hre_Service + "Cat_GetData/GetMultiCurrency",
     StyleCss = "width:60px;",
 };
                        }

                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID, CurrencyID).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.MonthApply)
                    </div>
                    <div class="FieldValue">

                        @{
    var MonthApply = new DatePickerBuilderInfo()
    {
        Format = "MM/yyyy",
    };


                        }
                        @Html.VnrDatePickerFor(mode => mode.MonthApply, MonthApply)
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Cat_UsualAllowanceLevel", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-Cat_UsualAllowanceLevel", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-Cat_UsualAllowanceLevel", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
    
    
}

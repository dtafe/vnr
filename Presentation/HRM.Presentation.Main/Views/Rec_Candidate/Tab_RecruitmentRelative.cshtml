@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models

@model Rec_CandidateModel

@{
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var CandidateID = Guid.Empty;

    string Rec_RelativeModels = "";
    if (Model != null)
    {
        CandidateID = Model.ID;
        Rec_RelativeModels = Model.ApproveHistory;
    }
}
@{
    var windowRelativeSupplier = new WindowBuilderInfo
    {
        Name = "windowRelativeSupplier",
        Visible = false,
        Width=700,
        LoadContentFrom = _hrm_Main_Web + "Rec_Relative/RelativeSupplierInfo?CandidateID=" + CandidateID,
    };
}
@(Html.VnrWindow(windowRelativeSupplier))
@{
    var windowRelativeBranch = new WindowBuilderInfo
    {
        Name = "windowRelativeBranch",
        Visible = false,
        Width = 700,
        
        LoadContentFrom = _hrm_Main_Web + "Rec_Relative/RelativeBranchInfo?CandidateID=" + CandidateID,
    };
}
@(Html.VnrWindow(windowRelativeBranch))
@{
    var windowRelativeOpponent = new WindowBuilderInfo
    {
        Name = "windowRelativeOpponent",
        Visible = false,
        Width = 700,
        LoadContentFrom = _hrm_Main_Web + "Rec_Relative/RelativeOpponentInfo?CandidateID=" + CandidateID,
    };
}
@(Html.VnrWindow(windowRelativeOpponent))
@{
    var windowCandidateBusiness = new WindowBuilderInfo
    {
        Name = "windowCandidateBusiness",
        Visible = false,
        Width = 700,  
        LoadContentFrom = _hrm_Main_Web + "Rec_CandidateBusiness/CandidateBusinessInfo?CandidateID=" + CandidateID,
    };
}
@(Html.VnrWindow(windowCandidateBusiness))
<script>
    $(document).ready(function () {
        ShowHidePanel();
        EditGridPopUp('gridRelativeSupplier', 'windowRelativeSupplier', '@_hrm_Main_Web' + "Rec_Relative/RelativeSupplierInfo/", '@ConstantPermission.Rec_Relative', '@ConstantDisplay.HRM_Rec_Relative_PopUp_Edit_Title.TranslateString()');
        EditGridPopUp('gridRelativeBranch', 'windowRelativeBranch', '@_hrm_Main_Web' + "Rec_Relative/RelativeBranchInfo/", '@ConstantPermission.Rec_Relative', '@ConstantDisplay.HRM_Rec_Relative_PopUp_Edit_Title.TranslateString()');
        EditGridPopUp('gridRelativeOpponent', 'windowRelativeOpponent', '@_hrm_Main_Web' + "Rec_Relative/RelativeOpponentInfo/", '@ConstantPermission.Rec_Relative', '@ConstantDisplay.HRM_Rec_RelativeOpponent_PopUp_Edit_Title.TranslateString()');
        EditGridPopUp('gridCandidateBusiness', 'windowCandidateBusiness', '@_hrm_Main_Web' + "Rec_CandidateBusiness/CandidateBusinessInfo/", '@ConstantPermission.Rec_CandidateBusiness', '@ConstantDisplay.HRM_Rec_Relative_PopUp_Edit_Title.TranslateString()');
    });
    function filterFieldInfoRelativeSupplier(isExport) {
        return {
            CandidateID: '@CandidateID',
            Type: '@RelativeType.E_SUPPLIER.ToString()',
            IsExport: isExport,
            ValueFields: $('#valueFieldsGridRelativeSupplier').val()
        };
    }
    function filterFieldInfoRelativeBranch(isExport) {
        return {
            CandidateID: '@CandidateID',
            Type: '@RelativeType.E_BRANCH.ToString()',
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    function filterFieldInfoRelativeOpponent(isExport) {
        return {
            CandidateID: '@CandidateID',
            Type: '@RelativeType.E_OPPONENT.ToString()',
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    function filterFieldInfoCandidateBusiness(isExport) {
        return {
            CandidateID: '@CandidateID',
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    $("#btnCreate-RelativeSupplier").click(function () {

        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Rec_Relative');
        if (!isAccess) {
            return;
        }
        PopUpCreate('windowRelativeSupplier', '@ConstantDisplay.HRM_Rec_Relative_PopUp_Create_Title.TranslateString()', '@ConstantPermission.Rec_Relative');
    });
    $('#btnDelete-RelativeSupplier').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelected('gridRelativeSupplier', '@_hrm_Main_Web' + "Rec_Relative/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Rec_Relative');
        return false;
    });
    $("#btnExportAll-RelativeSupplier").click(function () {


        var grid = $('#gridRelativeSupplier').data("kendoGrid");
        var count = grid.dataSource._data.toJSON().length;
        if (count == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Rec_GetData/ExportRelativeByCandidateList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = {
            CandidateID: '@CandidateID',
            Type: '@RelativeType.E_SUPPLIER.ToString()',
            IsExport: true,
            ValueFields: $('#valueFieldsGridRelativeSupplier').val()
        };
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Rec_Relative');
    });
    $("#btnCreate-CandidateBusiness").click(function () {

        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Rec_CandidateBusiness');
        if (!isAccess) {
            return;
        }
        PopUpCreate('windowCandidateBusiness', '@Html.Raw(@ConstantDisplay.HRM_Rec_CandidateBusiness_PopUp_Create_Title.TranslateString())', '@ConstantPermission.Rec_CandidateBusiness');
    });
    $('#btnDelete-CandidateBusiness').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelected('gridCandidateBusiness', '@_hrm_Main_Web' + "Rec_Relative/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Rec_CandidateBusiness');
        return false;
    });
    $("#btnExportAll-CandidateBusiness").click(function () {


        var grid = $('#gridCandidateBusiness').data("kendoGrid");
        var count = grid.dataSource._data.toJSON().length;
        if (count == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Rec_GetData/ExportCandidateBusinessByCandidateList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = {
            CandidateID: '@CandidateID',
            IsExport: true,
            ValueFields: $('#valueFieldsGridCandidateBusiness').val()
        };
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Rec_CandidateBusiness');
    });

    $("#btnCreate-RelativeBranch").click(function () {

        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Rec_Relative');
        if (!isAccess) {
            return;
        }
        PopUpCreate('windowRelativeBranch', '@Html.Raw(ConstantDisplay.HRM_Rec_Relative_PopUp_Create_Title.TranslateString())', '@ConstantPermission.Rec_Relative');
    });
    $('#btnDelete-RelativeBranch').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelected('gridRelativeBranch', '@_hrm_Main_Web' + "Rec_Relative/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Rec_Relative');
        return false;
    });
    $("#btnExportAll-RelativeBranch").click(function () {


        var grid = $('#gridRelativeBranch').data("kendoGrid");
        var count = grid.dataSource._data.toJSON().length;
        if (count == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Rec_GetData/ExportRelativeByCandidateList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = {
            CandidateID: '@CandidateID',
            Type: '@RelativeType.E_BRANCH.ToString()',
            IsExport: true,
            ValueFields: $('#valueFieldsGridRelativeBranch').val()
        };
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Rec_Relative');
    });
    $("#btnCreate-RelativeOpponent").click(function () {

        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Rec_Relative');
        if (!isAccess) {
            return;
        }
        PopUpCreate('windowRelativeOpponent', '@Html.Raw(@ConstantDisplay.HRM_Rec_RelativeOpponent_PopUp_Create_Title.TranslateString())', '@ConstantPermission.Rec_Relative');
    });
    $('#btnDelete-RelativeOpponent').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelected('gridRelativeOpponent', '@_hrm_Main_Web' + "Rec_Relative/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Rec_Relative');
        return false;
    });
    $("#btnExportAll-RelativeOpponent").click(function () {


        var grid = $('#gridRelativeOpponent').data("kendoGrid");
        var count = grid.dataSource._data.toJSON().length;
        if (count == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Rec_GetData/ExportRelativeByCandidateList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = {
            CandidateID: '@CandidateID',
            Type: '@RelativeType.E_OPPONENT.ToString()',
            IsExport: true,
            ValueFields: $('#valueFieldsGridRelativeOpponent').val()
        };
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Rec_Relative');
    });
</script>

<div>
    <div class="commandToolBarWidge" style="margin-top:3px">
        <div class="GridTitle">
            @Html.VnrLabel(ConstantDisplay.HRM_Rec_Relative_WithSupplier.TranslateString())
        </div>
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate-RelativeSupplier", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll-RelativeSupplier", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete-RelativeSupplier", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
        <div class="clear"></div>
    </div>
    <div style="overflow:hidden">
        <!--Khai báo các thông tin cho Grid-->
        @{
                                string[] valueFieldsRelativeSupplier = new string[]
                            {
                                Rec_RelativeModel.FieldNames.CompanyName,
                                Rec_RelativeModel.FieldNames.RelativeName,
                                Rec_RelativeModel.FieldNames.DateUpdate,
                                Rec_RelativeModel.FieldNames.UserUpdate,
                            };
                                Dictionary<string, int> sizeFieldsRelativeSupplier = new Dictionary<string, int>()
                            {
                                {Rec_RelativeModel.FieldNames.CompanyName,100},
                                {Rec_RelativeModel.FieldNames.RelativeName,120},
                                {Rec_RelativeModel.FieldNames.DateUpdate,120},
                                {Rec_RelativeModel.FieldNames.UserUpdate,120},
                            };

                                Dictionary<string, string> displayFieldsRelativeSupplier = new Dictionary<string, string>()
                            {
                                {Rec_RelativeModel.FieldNames.CompanyName, ConstantDisplay.HRM_Rec_Relative_CompanyName},
                                {Rec_RelativeModel.FieldNames.RelativeName, ConstantDisplay.HRM_Rec_Relative_RelativeName},
                                {Rec_RelativeModel.FieldNames.DateUpdate, ConstantDisplay.HRM_Common_DateUpdate},
                                {Rec_RelativeModel.FieldNames.UserUpdate, ConstantDisplay.HRM_Common_UserUpdate},
                            };
                                var filterableRelativeSupplier = new Dictionary<string, bool>()
                            {
                               {Rec_RelativeModel.FieldNames.CompanyName,true},
                               {Rec_RelativeModel.FieldNames.RelativeName,true},
                                {Rec_RelativeModel.FieldNames.DateUpdate,true},
                                {Rec_RelativeModel.FieldNames.UserUpdate,true},
                            };

                                var gridRelativeSupplier = new GridBuilderInfo
                                {
                                    ReadData = "filterFieldInfoRelativeSupplier",
                                    Name = "gridRelativeSupplier",
                                    ReadActionUrl = _hrm_Hre_Service + "Rec_GetData/GetRelativeByCandidateList",
                                    ValueFields = valueFieldsRelativeSupplier,
                                    SizeFields = sizeFieldsRelativeSupplier,
                                    DisplayFields = displayFieldsRelativeSupplier,
                                    PageSize = 10,
                                    GridHeight = 200,
                                    ShowCheckAll = false,
                                    AutoBind = true
                                };
        }

        <!--Khởi tạo Grid-->
        @(Html.VnrGrid<Rec_RelativeModel>(gridRelativeSupplier))
    </div>
</div>
<div>
    <div class="commandToolBarWidge" style="margin-top:3px">
        <div class="GridTitle">
            @Html.VnrLabel(ConstantDisplay.HRM_Rec_CandidateBusiness_Question.TranslateString())
        </div>
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate-CandidateBusiness", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll-CandidateBusiness", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete-CandidateBusiness", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
        <div class="clear"></div>

    </div>
    <div style="overflow:hidden">
        <!--Khai báo các thông tin cho Grid-->
        @{
                                string[] valueFieldsCandidateBusiness = new string[]
                            {
                                Rec_CandidateBusinessModel.FieldNames.BusinessArea,
                                Rec_CandidateBusinessModel.FieldNames.BusinessType,
                                Rec_CandidateBusinessModel.FieldNames.DateUpdate,
                                Rec_CandidateBusinessModel.FieldNames.UserUpdate,
                            };
                                Dictionary<string, int> sizeCandidateBusiness = new Dictionary<string, int>()
                            {
                                {Rec_CandidateBusinessModel.FieldNames.BusinessArea,100},
                                {Rec_CandidateBusinessModel.FieldNames.BusinessType,120},
                                {Rec_CandidateBusinessModel.FieldNames.DateUpdate,120},
                                {Rec_CandidateBusinessModel.FieldNames.UserUpdate,120},
                            };

                                Dictionary<string, string> displayFieldsCandidateBusiness = new Dictionary<string, string>()
                            {
                                {Rec_CandidateBusinessModel.FieldNames.BusinessArea, ConstantDisplay.HRM_Rec_CandidateBusiness_BusinessArea},
                                {Rec_CandidateBusinessModel.FieldNames.BusinessType, ConstantDisplay.HRM_Rec_CandidateBusiness_BusinessType},
                                {Rec_CandidateBusinessModel.FieldNames.DateUpdate, ConstantDisplay.HRM_Common_DateUpdate},
                                {Rec_CandidateBusinessModel.FieldNames.UserUpdate, ConstantDisplay.HRM_Common_UserUpdate},
                            };
                                var filterableCandidateBusiness = new Dictionary<string, bool>()
                            {
                               {Rec_CandidateBusinessModel.FieldNames.BusinessArea,true},
                               {Rec_CandidateBusinessModel.FieldNames.BusinessType,true},
                                {Rec_CandidateBusinessModel.FieldNames.DateUpdate,true},
                                {Rec_CandidateBusinessModel.FieldNames.UserUpdate,true},
                            };

                                var gridCandidateBusiness = new GridBuilderInfo
                                {
                                    ReadData = "filterFieldInfoCandidateBusiness",
                                    Name = "gridCandidateBusiness",
                                    ReadActionUrl = _hrm_Hre_Service + "Rec_GetData/GetCandidateBusinessByCandidateList",
                                    ValueFields = valueFieldsCandidateBusiness,
                                    SizeFields = sizeCandidateBusiness,
                                    DisplayFields = displayFieldsCandidateBusiness,
                                    PageSize = 10,
                                    GridHeight = 200,
                                    ShowCheckAll = false,
                                    AutoBind = true
                                };
        }

        <!--Khởi tạo Grid-->
        @(Html.VnrGrid<Rec_CandidateBusinessModel>(gridCandidateBusiness))
    </div>
</div>
<div>

    <div class="commandToolBarWidge" style="margin-top:3px">
        <div class="GridTitle">
            @Html.VnrLabel(ConstantDisplay.HRM_Rec_Relative_WithBranch.TranslateString())
        </div>
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate-RelativeBranch", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll-RelativeBranch", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete-RelativeBranch", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
        <div class="clear"></div>
    </div>
    <div style="overflow:hidden">
        <!--Khai báo các thông tin cho Grid-->
        @{
                                string[] valueFieldsRelativeBranch = new string[]
                            {
                                Rec_RelativeModel.FieldNames.CompanyName,
                                Rec_RelativeModel.FieldNames.RelativeName,
                                Rec_RelativeModel.FieldNames.DateUpdate,
                                Rec_RelativeModel.FieldNames.UserUpdate,
                            };
                                Dictionary<string, int> sizeFieldsRelativeBranch = new Dictionary<string, int>()
                            {
                                {Rec_RelativeModel.FieldNames.CompanyName,100},
                                {Rec_RelativeModel.FieldNames.RelativeName,120},
                                {Rec_RelativeModel.FieldNames.DateUpdate,120},
                                {Rec_RelativeModel.FieldNames.UserUpdate,120},
                            };

                                Dictionary<string, string> displayFieldsRelativeBranch = new Dictionary<string, string>()
                            {
                                {Rec_RelativeModel.FieldNames.CompanyName, ConstantDisplay.HRM_Rec_Relative_CompanyName},
                                {Rec_RelativeModel.FieldNames.RelativeName, ConstantDisplay.HRM_Rec_Relative_RelativeName},
                                {Rec_RelativeModel.FieldNames.DateUpdate, ConstantDisplay.HRM_Common_DateUpdate},
                                {Rec_RelativeModel.FieldNames.UserUpdate, ConstantDisplay.HRM_Common_UserUpdate},
                            };
                                var filterableRelativeBranch = new Dictionary<string, bool>()
                            {
                               {Rec_RelativeModel.FieldNames.CompanyName,true},
                               {Rec_RelativeModel.FieldNames.RelativeName,true},
                                {Rec_RelativeModel.FieldNames.DateUpdate,true},
                                {Rec_RelativeModel.FieldNames.UserUpdate,true},
                            };

                                var gridRelativeBranch = new GridBuilderInfo
                                {
                                    ReadData = "filterFieldInfoRelativeBranch",
                                    Name = "gridRelativeBranch",
                                    ReadActionUrl = _hrm_Hre_Service + "Rec_GetData/GetRelativeByCandidateList",
                                    ValueFields = valueFieldsRelativeBranch,
                                    SizeFields = sizeFieldsRelativeBranch,
                                    DisplayFields = displayFieldsRelativeBranch,
                                    PageSize = 10,
                                    GridHeight = 200,
                                    ShowCheckAll = false,
                                    AutoBind = true
                                };
        }

        <!--Khởi tạo Grid-->
        @(Html.VnrGrid<Rec_RelativeModel>(gridRelativeBranch))
    </div>
</div>
<div>
    <div class="commandToolBarWidge" style="margin-top:3px">
        <div class="GridTitle">
            @Html.VnrLabel(ConstantDisplay.HRM_Rec_Relative_WithOpponent.TranslateString())
        </div>
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate-RelativeOpponent", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll-RelativeOpponent", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete-RelativeOpponent", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
        <div class="clear"></div>
    </div>
    <div style="overflow:hidden">
        <!--Khai báo các thông tin cho Grid-->
        @{
                                string[] valueFieldsRelativeOpponent = new string[]
                            {
                                Rec_RelativeModel.FieldNames.CompanyName,
                                Rec_RelativeModel.FieldNames.RelativeName,
                                Rec_RelativeModel.FieldNames.DateUpdate,
                                Rec_RelativeModel.FieldNames.UserUpdate,
                            };
                                Dictionary<string, int> sizeFieldsRelativeOpponent = new Dictionary<string, int>()
                            {
                                {Rec_RelativeModel.FieldNames.CompanyName,100},
                                {Rec_RelativeModel.FieldNames.RelativeName,120},
                                {Rec_RelativeModel.FieldNames.DateUpdate,120},
                                {Rec_RelativeModel.FieldNames.UserUpdate,120},
                            };

                                Dictionary<string, string> displayFieldsRelativeOpponent = new Dictionary<string, string>()
                            {
                                {Rec_RelativeModel.FieldNames.CompanyName, ConstantDisplay.HRM_Rec_Relative_CompanyName},
                                {Rec_RelativeModel.FieldNames.RelativeName, ConstantDisplay.HRM_Rec_Relative_RelativeName},
                                {Rec_RelativeModel.FieldNames.DateUpdate, ConstantDisplay.HRM_Common_DateUpdate},
                                {Rec_RelativeModel.FieldNames.UserUpdate, ConstantDisplay.HRM_Common_UserUpdate},
                            };
                                var filterableRelativeOpponent = new Dictionary<string, bool>()
                            {
                               {Rec_RelativeModel.FieldNames.CompanyName,true},
                               {Rec_RelativeModel.FieldNames.RelativeName,true},
                                {Rec_RelativeModel.FieldNames.DateUpdate,true},
                                {Rec_RelativeModel.FieldNames.UserUpdate,true},
                            };

                                var gridRelativeOpponent = new GridBuilderInfo
                                {
                                    ReadData = "filterFieldInfoRelativeOpponent",
                                    Name = "gridRelativeOpponent",
                                    ReadActionUrl = _hrm_Hre_Service + "Rec_GetData/GetRelativeByCandidateList",
                                    ValueFields = valueFieldsRelativeOpponent,
                                    SizeFields = sizeFieldsRelativeOpponent,
                                    DisplayFields = displayFieldsRelativeOpponent,
                                    PageSize = 10,
                                    GridHeight = 200,
                                    ShowCheckAll = false,
                                    AutoBind = true
                                };
        }

        <!--Khởi tạo Grid-->
        @(Html.VnrGrid<Rec_RelativeModel>(gridRelativeOpponent))
    </div>
</div>

@{
    var valueFieldsRelativeSupplier1 = string.Empty;
    for (int i = 0; i < valueFieldsRelativeSupplier.Count(); i++)
    {
        valueFieldsRelativeSupplier1 += "," + valueFieldsRelativeSupplier[i];
    }

}
@Html.Hidden("valueFieldsGridRelativeSupplier", valueFieldsRelativeSupplier1)
@{
    var valueFieldsCandidateBusiness1 = string.Empty;
    for (int i = 0; i < valueFieldsCandidateBusiness.Count(); i++)
    {
        valueFieldsCandidateBusiness1 += "," + valueFieldsCandidateBusiness[i];
    }

}
@Html.Hidden("valueFieldsGridCandidateBusiness", valueFieldsCandidateBusiness1)
@{
    var valueFieldsRelativeBranch1 = string.Empty;
    for (int i = 0; i < valueFieldsRelativeBranch.Count(); i++)
    {
        valueFieldsRelativeBranch1 += "," + valueFieldsRelativeBranch[i];
    }

}
@Html.Hidden("valueFieldsGridRelativeBranch", valueFieldsRelativeBranch1)
@{
    var valueFieldsRelativeOpponent1 = string.Empty;
    for (int i = 0; i < valueFieldsRelativeOpponent.Count(); i++)
    {
        valueFieldsRelativeOpponent1 += "," + valueFieldsRelativeOpponent[i];
    }

}
@Html.Hidden("valueFieldsGridRelativeOpponent", valueFieldsRelativeOpponent1)
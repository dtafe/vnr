@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models
@using HRM.Infrastructure.Security

@model Rec_CandidateModel
@{
    Layout = null;
    ViewBag.Title = "Tab_DetailInfo";
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
}
<div style="margin-top:3px">
    <div style="width:100%">
        <fieldset>
            <legend>
                @ConstantDisplay.CandidateDetail.TranslateString()
            </legend>
            <div style="float:left">
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.IdentifyNumber)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.IdentifyNumber)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.IDDateOfIssue)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _IDDateOfIssue = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:100px;",
                                // Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.IDDateOfIssue, _IDDateOfIssue)

                    </div>
                </div>
                @*<div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.PlaceOfIssueID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _PlaceOfIssueID = new DropDownListBuilderInfo
                            {
                                DataTextField = "ProvinceName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiProvince",
                                //   OptionLabel = ConstantDisplay.HRM_Category_SelectProvince.TranslateString(),
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.PlaceOfIssueID, _PlaceOfIssueID)
                    </div>
                </div>*@


                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.PlaceOfIssueID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var iDPlaceOfIssue = new ComboBoxBuilderInfo()
                            {
                                DataTextField = "ProvinceName",
                                DataValueField = "ProvinceName",
                                FilterType = FilterType.Contains,
                                Url = _hrm_Hre_Service + "Cat_GetData/GetMultiProvince",
                                Value = Model == null ? string.Empty : Model.IDPlaceOfIssue
                            };
                        }
                        @Html.VnrComboBoxFor(model => model.IDPlaceOfIssue, iDPlaceOfIssue).Text(Model == null ? string.Empty : Model.IDPlaceOfIssue)
                    </div>
                </div>



                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Height)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Height = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Height, _Height)@Html.VnrLabel("(Cm)")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Weight)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Weight = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Weight, _Weight)@Html.VnrLabel("(Kg)")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.PassportNo)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.PassportNo)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.DateIssuePassport)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _DateIssuePassport = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:100px;",
                                // Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateIssuePassport, _DateIssuePassport)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.DateExpiresPassport)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _DateExpiresPassport = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:100px;",
                                //  Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateExpiresPassport, _DateExpiresPassport)

                    </div>
                </div>
            </div>
            <div style="float:left">
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.LevelEye)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _LevelEye = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:100px;",
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.LevelEye, _LevelEye)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.LevelEyeRight)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _LevelEyeRight = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:100px;",
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.LevelEyeRight, _LevelEyeRight)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Musculoskeletal)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Musculoskeletal = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:100px;",
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Musculoskeletal, _Musculoskeletal)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.BloodPressure)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _BloodPressure = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:100px;",
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.BloodPressure, _BloodPressure)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.HeartBeat)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _HeartBeat = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:100px;",
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.HeartBeat, _HeartBeat)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.GenaralHealth)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _GenaralHealth = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.GenaralHealth, _GenaralHealth)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.DiseaseListIDs)
                    </div>
                    <div class="FieldValue">
                        @{
                            var DiseaseListIDs = new MultiSelectBuilderInfo()
                            {
                                Name = "DiseaseListIDs1",
                                DataTextField = "NameEntityName",
                                DataValueField = "Code",
                                Url = _hrm_Hre_Service + "Cat_GetData/GetMultiCatNameEntityByType?Type=" + HRM.Infrastructure.Utilities.EnumDropDown.EntityType.E_SICK_REC.ToString(),
                                Placeholder = ConstantDisplay.HRM_Rec_JobCondition_SelectDiseases.TranslateString(),
                                Autobind = true,
                                Value = (Model != null && Model.DiseaseListIDs != null) ? Model.DiseaseListIDs.Split(',').ToList() : new List<string>(),
                            };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.DiseaseListIDs, DiseaseListIDs)
                        @Html.HiddenFor(m => m.DiseaseListIDs)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.WriteTest)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _WriteTest = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.WriteTest, _WriteTest)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Interview)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Interview = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Interview, _Interview)
                    </div>
                </div>
            </div>
            <div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.OrientationCareer)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.OrientationCareer, "width:730px")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.PersonalTarget)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.PersonalTarget, "width:730px")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.PersonalPlan)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.PersonalPlan, "width:730px")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.SpecialSkill)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.SpecialSkill, "width:730px")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.MemberOfAssociation)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.MemberOfAssociation, "width:730px")
                    </div>
                </div>
            </div>
        </fieldset>
    </div>
</div>


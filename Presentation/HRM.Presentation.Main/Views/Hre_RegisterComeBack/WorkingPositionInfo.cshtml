@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models

@model Hre_WorkHistoryModel

@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ProfileID = Guid.Empty;
    IList<SelectListItem> listLaborType = Enum.GetValues(typeof(EnumDropDown.LaborType))
   .Cast<EnumDropDown.LaborType>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();
    IList<SelectListItem> listJRType = Enum.GetValues(typeof(EnumDropDown.JRType))
 .Cast<EnumDropDown.JRType>()
 .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
 .ToList();

    IList<SelectListItem> listStatus = Enum.GetValues(typeof(WorkHistoryStatus))
   .Cast<WorkHistoryStatus>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();

    IList<SelectListItem> listFormType = Enum.GetValues(typeof(EnumDropDown.FormType))
.Cast<EnumDropDown.FormType>()
.Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
.ToList();
}
<script>
    SetFieldRequiredByScreenName('Hre_WorkingPosition_ComeBack');
    function SetValueHighSupervisor() {
        var _HighSupervisorCode = $("#WorkingPositionInfo_HighSupervisorCode").data("kendoMultiSelect").value();
        if (_HighSupervisorCode != "" && _HighSupervisorCode != null) {
            $('#@Html.FieldIdFor(model => model.HighSupervisor)').val(_HighSupervisorCode.join(','));
        }
        else {
            $('#@Html.FieldIdFor(model => model.HighSupervisor)').val(null);
        }
    }
    function onSaveClose() {
        debugger;
        $("#ProfileID").val($("#ProfileIDTemp").val());
        SetValueHighSupervisor();
        debugger;
        $("#WorkingPositionInfo_ID").val("00000000000000000000000000000000");
        onSaveAndClose($('#form_RegistComeback_WorkHistory'), '@_hrm_Hr_Service', 'api/Hre_WorkHistory/', '@ConstantControlName.HRM_gridHre_RegisterComeBack_Grid_Name', 'windowHre_RegisterComeBack_WorkingHistory'); return false;
    }
    function onSaveDataPopUp() {
        $("#ProfileID").val($("#ProfileIDTemp").val());
        SetValueHighSupervisor();
        $("#WorkingPositionInfo_ID").val("00000000000000000000000000000000");
        onlySave($('#form_RegistComeback_WorkHistory'), '@_hrm_Hr_Service', 'api/Hre_WorkHistory/', '@ConstantControlName.HRM_gridHre_RegisterComeBack_Grid_Name'); return false;
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_RegistComeback_WorkHistory" }))
{
    @Html.HiddenFor(mode => mode.WorkingPositionInfo_ID)
    @Html.HiddenFor(model => model.WorkHistory_ID)
    @Html.HiddenFor(m => m.ProfileID)
    <table>
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td valign="top">
                    <div class="hrm_box">
                        <div style="display: block; float: left; width: 500px">
                            <div id="div2">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ProfileName)

                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.ProfileName)
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(model => model.OrganizationStructureID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _OrganizationStructureID = new TreeViewDropdDownBuilderInfo()
                                        {
                                            Value=Model==null?string.Empty:Model.OrgStructureName,
                                            SetFieldID = "OrganizationStructureID",
                                            SetFieldName = "OrganizationStructureID",
                                            IsShowCheckBox=false,
                                            Width="195px"
                                        };
                                    }
                                    @Html.Partial("EditorTemplates/OrgTreeViewDropDown", _OrganizationStructureID)
                                    @Html.HiddenFor(model => model.OrganizationStructureID)
                                    @Html.HiddenFor(model => model.OrgStructureName)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle150">

                                    @Html.VnrLabelForNoneIcon(mode => mode.JobTitleID)
                                </div>
                                <div class="FieldValue">
                                    <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                                    @{
    IEnumerable valueJobTitle = new string[] { };
    if (Model != null)
    {
        valueJobTitle = new[] { new { JobTitleName = Model.JobTitleName, ID = Model.JobTitleID } };
    }
                                    }
                                    @{
    var _JobTitleID = new MultiSelectBuilderInfo()
    {
        Name = "WorkingPositionInfo_JobTitleID",
        DataTextField = "JobTitleName",
        DataValueField = "ID",
        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiJobTitle",
        Placeholder = ConstantDisplay.HRM_HR_SelectJobTitle.TranslateString(),
        MaxSelectedItems = 1,
        Value = valueJobTitle
    };
                                    }
                                    @Html.VnrMultiSelectFor(model => model.JobTitleID, _JobTitleID)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle150">

                                    @Html.VnrLabelForNoneIcon(mode => mode.PositionID)
                                </div>
                                <div class="FieldValue">
                                    <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                                    @{
    IEnumerable valuePosition = new string[] { };
    if (Model != null)
    {
        valuePosition = new[] { new { PositionName = Model.PositionName, ID = Model.PositionID } };
    }
                                    }
                                    @{
    var _PositionID = new MultiSelectBuilderInfo()
    {
        Name = "WorkingPositionInfo_PositionID",
        DataTextField = "PositionName",
        DataValueField = "ID",
        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
        Placeholder = ConstantDisplay.HRM_HR_SelectPostion.TranslateString(),
        MaxSelectedItems = 1,
        Value = valuePosition
    };
                                    }
                                    @Html.VnrMultiSelectFor(model => model.PositionID, _PositionID)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.DateEffective)
                                </div>

                                <div class="FieldValue">
                                    @{

    var _DateEffective = new DatePickerBuilderInfo()
        {
            Name = "WorkingPositionInfo_DateEffective",
            StyleCss = "Width: 100px",

        };
    if (Model != null)
    {
        _DateEffective.Value = Model != null ? Model.DateEffective.ToShortDateString() : string.Empty;
    }
                                    }
                                    @Html.VnrDatePickerFor(model => model.DateEffective, _DateEffective)
                                </div>
                            </div>
                            <div id="div13">
                                <div class="FieldTitle" style="width:150px;">
                                    @Html.VnrLabelForNoneIcon(model => model.TypeOfTransferID)
                                </div>
                                <div class="FieldValue">
                                    @{
    var _TypeOfTransferID = new ComboBoxBuilderInfo()
    {
        Name = "WorkingPositionInfo_TypeOfTransferID",
         DataTextField = "NameEntityName",
         StyleCss = "Width: 200px",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiTypeOfTransfer",
         Value = Model == null ? string.Empty : Model.TypeOfTransferName,
     };
                                    }
                                    @Html.VnrComboBoxFor(model => model.TypeOfTransferID, _TypeOfTransferID).Text(Model == null ? string.Empty : Model.TypeOfTransferName)
                                </div>
                            </div>
                            <div id="div6">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.DateNotice)
                                </div>
                                <div class="FieldValue">
                                    @{
    var DateNotice = new DatePickerBuilderInfo()
    {
        StyleCss = "width:100px",
        Name = "WorkingPositionInfo_DateNotice"
    };
                                    }
                                    @Html.VnrDatePickerFor(model => model.DateNotice, DateNotice)
                                </div>
                            </div>
                            <div id="div6">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.DateComeBack)
                                </div>
                                <div class="FieldValue">
                                    @{
    var DateComeBack = new DatePickerBuilderInfo()
    {
        StyleCss = "width:100px",
        Name = "WorkingPositionInfo_DateComeBack"
    };
                                    }
                                    @Html.VnrDatePickerFor(model => model.DateComeBack, DateComeBack)
                                </div>
                            </div>
                            <div id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.RequirCondit)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.RequirCondit)
                                </div>
                            </div>
                            <div id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Description)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.Description)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="hrm_box">
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.Status)
                            </div>
                            <div class="FieldValue">
                              @{
    var ddlStatus = new DropDownListBuilderInfo()
    {
        Name = "WorkingPositionInfo_Status",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listStatus,
        Value =  WorkHistoryStatus.E_WAITAPPROVE.ToString()

    };
}
@Html.VnrDropDownListFor(model => model.Status, ddlStatus)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.CostCentreID)
                            </div>
                            <div class="FieldValue">
                                @{
    var _CostCentreID = new ComboBoxBuilderInfo()
    {
        DataValueField = "ID",
        DataTextField = "CostCentreName",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCostCentre",
        Placeholder = ConstantDisplay.HRM_Category_SelectCostCentre.TranslateString()
    };
                                }
                                @Html.VnrComboBoxFor(model => model.CostCentreID, _CostCentreID).Text(Model != null ? Model.CostCentreName != null ? Model.CostCentreName.ToString() : string.Empty : string.Empty)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.FormType)
                            </div>
                            <div class="FieldValue">
                                @{
    var ddlFormType = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listFormType
    };
                                }
                                @Html.VnrDropDownListFor(model => model.FormType, ddlFormType)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.EmployeeTypeName)
                            </div>
                            <div class="FieldValue">
                                @{
    var _EmployeeType = new ComboBoxBuilderInfo()
     {
         DataTextField = "EmployeeTypeName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiEmployeeType",
         StyleCss = "width:200px;",
         Value = Model == null ? string.Empty : Model.EmployeeTypeID.ToString(),
     };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.EmployeeTypeID, _EmployeeType).Text(Model == null ? string.Empty : Model.EmployeeTypeName))
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.WorkLocation)
                            </div>
                            <div class="FieldValue">
                                @{
    var _WorkLocation = new ComboBoxBuilderInfo()
   {
       DataTextField = "WorkPlaceName",
       DataValueField = "WorkPlaceName",
       Url = _hrm_Hr_Service + "Cat_GetData/GetMultiWorkPlace",
       StyleCss = "Width:200px"
   };
                                }
                                @Html.VnrComboBoxFor(model => model.WorkLocation, _WorkLocation)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.Supervisor)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Supervisor = new ComboBoxBuilderInfo()
     {
         DataTextField = "ProfileName",
         StyleCss = "Width: 200px",
         DataValueField = "ProfileName",
         FilterType = FilterType.Contains,
         Url = _hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
         Value = Model == null ? string.Empty : Model.Supervisor
     };
                                }
                                @Html.VnrComboBoxFor(model => model.Supervisor, _Supervisor).Text(Model == null ? string.Empty : Model.Supervisor)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.HighSupervisor)
                            </div>
                            <div class="FieldValue">
                                @{
    var _HighSupervisorCode = new MultiSelectBuilderInfo()
    {
        Name = "WorkingPositionInfo_HighSupervisorCode",
        DataTextField = "ProfileName",
        DataValueField = "CodeEmp",
        MaxSelectedItems = 1,
        Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
        Value = (Model != null && Model.HighSupervisor != null) ? Model.HighSupervisor.Split(',').ToList() : new List<string>(),

    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.HighSupervisorCode, _HighSupervisorCode)
                                @Html.HiddenFor(model => model.HighSupervisor)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.SalaryClassID)
                            </div>
                            <div class="FieldValue">
                                @{
    var _SalaryClassName = new ComboBoxBuilderInfo()
     {
         DataTextField = "SalaryClassName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiSalaryClass",
         StyleCss = "width:200px",
         Value = Model == null ? string.Empty : Model.SalaryClassID.ToString(),
     };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.SalaryClassID, _SalaryClassName).Text(Model == null ? string.Empty : Model.SalaryClassName))
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.LaborType)
                            </div>
                            <div class="FieldValue">
                                @{
    var ddlLaborType = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listLaborType
    };
                                }
                                @Html.VnrDropDownListFor(model => model.LaborType, ddlLaborType)
                            </div>
                        </div>
                        <div id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Role)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.Role)
                                </div>
                            </div>
                        <div id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Rromotion)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.Rromotion)
                                </div>
                            </div>
                        </div>
                </td>
            </tr>
            <tr>
                <td valign="top"></td>
            </tr>
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle150">
                        </div>
                        <div class="FieldValue">
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-WorkingPositionInfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-WorkHistory", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-WorkingPositionInfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        </div>
                    </div>
                </td>
            </tr>
    </table>
}
<script>
    $(document).ready(function () {
    var statusInfo = $('#WorkingPositionInfo_Status').data("kendoDropDownList");
    statusInfo.readonly();
    });

</script>

<div>
    @{
        if (Model != null && Model.HighSupervisor != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var _codeEmps='@Model.HighSupervisor';
                    if(_codeEmps !='')
                    {
                        $.ajax({
                            type: 'POST',
                            url: '@_hrm_Hr_Service' + 'Hre_GetData/GetProfileByCodeEmps',
                            data: { codeemps: _codeEmps },
                            dataType: 'json',
                            async: false,
                            success: function(data)
                            {
                                debugger;
                                var multiselectHighSupervisor = $("#WorkingPositionInfo_HighSupervisorCode").data("kendoMultiSelect");
                                multiselectHighSupervisor.setDataSource(data);
                                multiselectHighSupervisor.refresh();
                            }
                        });
                    }
                });

            </script>
        }
    }
</div>

<div>
    @{
        if(Model == null)
        {
            <script>
                $(document).ready(function () {
                    document.getElementById("ProfileName").readOnly = true;
                    debugger;
                    $("#ProfileName").val($("#ProfileNameTemp").val());
                });
            </script>
        }
    }
</div>
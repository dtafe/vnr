@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.Hr.Models
@using HRM.Infrastructure.Security

@using HRM.Infrastructure.Utilities
@using System.Collections;
@model HRM.Presentation.Recruitment.Models.Rec_RecruitmentCampaignModel
@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _Hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    IList<SelectListItem> lstStatus = Enum.GetValues(typeof(RecruitmentCampaignStatus))
    .Cast<RecruitmentCampaignStatus>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p => p.Text)
    .ToList();

    var RecruitmentCampaignID = Guid.Empty;
    if (Model != null)
    {
        RecruitmentCampaignID = Model.ID;
    }
}


<script>
    SetFieldRequired();
    function onDataBoundGrid() {
        debugger;
        var grid = $("#grid_Rec_RecCostDetail").data("kendoGrid");
      
        if (grid._data[0] != undefined)
        {
            var total = grid._data[0].TotalAmount;
            var sumQuantityNumberTextBox = $("#Budget").data("kendoNumericTextBox");
            sumQuantityNumberTextBox.value(total);
        }
      
       

    }
</script>
<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <fieldset>
                        <legend>
                            @ConstantDisplay.HRM_Rec_RecruitmentCampaign.TranslateString()
                        </legend>
                        @Html.HiddenFor(mode => mode.ID)
                        @Html.HiddenFor(mode => mode.RecruitmentCampaign_ID)
                        <div class="hrm_box">
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.Code)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.Code)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.RecruitmentCampaignName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.RecruitmentCampaignName, "width: 300px")
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.DateStart)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var txtDateStart = new DatePickerBuilderInfo()
                                        {
                                            StyleCss = "width:120px",
                                            Format = ConstantFormat.HRM_Format_DayMonthYear,
                                        };
                                    }
                                    @Html.VnrDatePickerFor(mode => mode.DateStart, txtDateStart)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.DateEnd)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var txtDateEnd = new DatePickerBuilderInfo()
                                        {
                                            StyleCss = "width:120px",
                                            Format = ConstantFormat.HRM_Format_DayMonthYear,
                                        };
                                    }
                                    @Html.VnrDatePickerFor(mode => mode.DateEnd, txtDateEnd)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.Budget)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var Budget = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            StyleCss = "width:150px",
                                            Format = ConstantFormat.HRM_Format_Money

                                        };

                                    }
                                    @Html.VnrNumericTextBoxFor(mode => mode.Budget, Budget)
                                </div>
                            </div>

                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.CurrencyID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        string valueCurr = string.Empty;
                                        if (Model == null || Model.CurrencyID == null)
                                        {
                                            valueCurr = "VND";
                                        }
                                    }
                                    @{
                                        var CurrencyName = new ComboBoxBuilderInfo()
                                        {
                                            DataTextField = "CurrencyName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                            StyleCss = "width:60px;",
                                            Autobind = true,
                                            Value = valueCurr
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.CurrencyID, CurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName))
                                </div>
                            </div>
                        </div>
                        <div class="hrm_box">
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.SalaryCampaignBudget)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var SalaryCampaignBudget = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            StyleCss = "width:150px",
                                            Format = ConstantFormat.HRM_Format_Money

                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(mode => mode.SalaryCampaignBudget, SalaryCampaignBudget)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.SalaryCurrentBudget)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var SalaryCurrentBudget = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            StyleCss = "width:150px",
                                            Format = ConstantFormat.HRM_Format_Money

                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(mode => mode.SalaryCurrentBudget, SalaryCurrentBudget)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.SalaryMinBudget)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var SalaryMinBudget = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            StyleCss = "width:150px",
                                            Format = ConstantFormat.HRM_Format_Money

                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(mode => mode.SalaryMinBudget, SalaryMinBudget)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.SalaryMaxBudget)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var SalaryMaxBudget = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            StyleCss = "width:150px",
                                            Format = ConstantFormat.HRM_Format_Money

                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(mode => mode.SalaryMaxBudget, SalaryMaxBudget)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.Status)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var Status = new DropDownListBuilderInfo()
                                        {
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            StyleCss = "width:300px",
                                            BindTo = lstStatus,
                                            OptionLabel = ConstantDisplay.HRM_Category_SelectStatus.TranslateString(),
                                        };
                                    }
                                    @Html.VnrDropDownListFor(mode => mode.Status, Status).Value(Model != null && !string.IsNullOrEmpty(Model.Status) ? Model.Status : null)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.Source)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.Source, "width: 300px")
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle170 ">
                                    @Html.VnrLabelFor(mode => mode.Description)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(model => model.Description, "width: 300px; height:50px;")
                                </div>
                            </div>
                        </div>

                    </fieldset>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>
        </tbody>
    </table>
</div>
@{
    var window = new WindowBuilderInfo
    {
        Name = "window_Rec_RecCostDetail",
        Visible = false,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),
        Width = 610,
        LoadContentFrom = _Hrm_Main_Web + "Rec_RecruitmentCampaign/CostDetailInfo/",
    };
}
@(Html.VnrWindow(window))

@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = ConstantDisplay.MessageError.TranslateString(),
        Content = ConstantDisplay.YouMustSavePlanFirst.TranslateString()
    };
}
@(Html.VnrWindow(windowError))

<script type="text/javascript">
    var selectedIds = [];
    var gridRec_RecCostDetail = '@ConstantControlName.HRM_Rec_RecCostDetail_Grid_Name';
    var popUpRec_RecCostDetail = '@ConstantControlName.HRM_Rec_RecCostDetail_PopUp_Name';
    var titleEditPopUpRecCostDetail = '@Html.Raw(ConstantDisplay.HRM_Rec_RecCostDetail_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUpRecCostDetail = '@Html.Raw(ConstantDisplay.HRM_Rec_RecCostDetail_PopUp_Create_Title.TranslateString())';

    $(document).ready(function () {
        var url = '@_Hrm_Main_Web' + "Rec_RecruitmentCampaign/CostDetailInfo/";
        EditGridPopUp("grid_Rec_RecCostDetail", "window_Rec_RecCostDetail", url, '@HRM.Infrastructure.Security.ConstantPermission.Rec_RecCostDetail', titleEditPopUpRecCostDetail);
    });

    function filterFieldInfo() {
        return {
            RecruitmentCampaignID: $("#RecruitmentCampaign_ID").val()
        };
    }

    $("#btnCreate_RecCostDetail").click(function () {
        debugger;
        var x = $('#@Html.FieldIdFor(model => model.RecruitmentCampaign_ID)').val();

        if (x == '') {
            PopUpCreate("windowError");
        }
        else
        {
            setTimeout(function () {
                PopUpCreate("window_Rec_RecCostDetail", titleCreatePopUpRecCostDetail, '@HRM.Infrastructure.Security.ConstantPermission.Rec_RecCostDetail')
            }, 1000)

            $("#RecruitmentCampaign_ID").val($('#@Html.FieldIdFor(model => model.RecruitmentCampaign_ID)').val());
        }
    });

    $('#btnDelete_RecCostDetail').click(function (e) {
        DeleteSelected(gridRec_RecCostDetail, '@_Hrm_Main_Web' + "Rec_RecCostDetail/RemoveSelected/", selectedIds, '@ConstantPermission.Rec_RecCostDetail');
        return false;
    });
</script>

<div style="padding-top:3px">
    <div class="commandToolBarWidge">
        <div class="GridTitle">
            @Html.VnrLabel(ConstantDisplay.HRM_HR_Discipline_ViolationExplain.TranslateString())
        </div>
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate_RecCostDetail", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete_RecCostDetail", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
        <div class="clear"></div>
    </div>
    <div>
        <!--Khai báo các thông tin cho Grid-->
        @using HRM.Presentation.Recruitment.Models
        @using HRM.Presentation.UI.Controls.Kendo
        @{
            //Thông tin hiển column hiển thị
            string[] valueFields = new string[]
                                {
                                    Rec_RecCostDetailModel.FieldNames.CostName,
                                    Rec_RecCostDetailModel.FieldNames.Amount,
                                    Rec_RecCostDetailModel.FieldNames.Description,
                                    Rec_RecCostDetailModel.FieldNames.TotalAmount,
                                    
                                };

            //Set độ rộng cho từng column
            Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                                {
                                    {Rec_RecCostDetailModel.FieldNames.CostName, 150},
                                    {Rec_RecCostDetailModel.FieldNames.Amount, 150},
                                    {Rec_RecCostDetailModel.FieldNames.Description, 150},
                                    {Rec_RecCostDetailModel.FieldNames.TotalAmount, 150},
                                };

            //Thông tin hiển thị được dịch
            Dictionary<string, string> displayFields = new Dictionary<string, string>()
                                {
                                    {Rec_RecCostDetailModel.FieldNames.CostName, ConstantDisplay.HRM_Rec_RecCostDetail_CostName},
                                    {Rec_RecCostDetailModel.FieldNames.Amount, ConstantDisplay.HRM_Rec_RecCostDetail_Amount},
                                    {Rec_RecCostDetailModel.FieldNames.Description, ConstantDisplay.HRM_Rec_RecCostDetail_Description},
                                    {Rec_RecCostDetailModel.FieldNames.TotalAmount, ConstantDisplay.HRM_Rec_RecCostDetail_Description},
                                };
                                //Thông tin hiển column hiển thị
            string[] hiddenFields = new string[]
                                {
                                 
                                    Rec_RecCostDetailModel.FieldNames.TotalAmount,
                                    
                                };
                                
            var grid = new GridBuilderInfo
            {
                Name = "grid_Rec_RecCostDetail",
                ValueFields = valueFields,
                SizeFields = sizeFields,
                DisplayFields = displayFields,
                ShowCommand = false,
                GridHeight = 200,
                AutoBind = true,
                ReadActionUrl = _hrm_Hr_Service + "Rec_GetData/GetRecCostDetailByRecruitmentCampaign?RecruitmentCampaignID=" + RecruitmentCampaignID,
                ReadData = "filterFieldInfo",
                EventDataBound = "onDataBoundGrid",
                HiddenFields = hiddenFields
                
            };
        }
        @(Html.VnrGrid<Rec_RecCostDetailModel>(grid))
    </div>
    @{
        var valueFields1 = string.Empty;
        for (int i = 0; i < valueFields.Count(); i++)
        {
            valueFields1 += "," + valueFields[i];
        }
    }
    @Html.Hidden("valueFieldsGrid", valueFields1)
</div>
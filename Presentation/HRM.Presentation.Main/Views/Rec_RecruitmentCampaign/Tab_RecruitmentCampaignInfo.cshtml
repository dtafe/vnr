@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models
@using HRM.Infrastructure.Security
@using System.Collections

@model Rec_RecruitmentCampaignModel
@{
    Layout = null;
    ViewBag.Title = "Tab_RecruitmentHistoryInfo";
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

}
<script type="text/javascript">
    SetFieldRequired();
</script>

<style>
    .tableLeft {
        float: left;
        width: 500px;
        display: block;
    }

        .tableLeft .FieldTitle {
            width: 170px;
        }
</style>
<div style="margin-top:3px">
    <div style="width:100%">
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Rec_RecruitmentCampaign.TranslateString()
            </legend>

            <div style="float:left; width:50%">
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.RecruitmentCampaignName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.RecruitmentCampaignName, "width: 300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.DateStart)
                    </div>
                    <div class="FieldValue">
                        @{
                            var txtDateStart = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:120px",
                                Format = ConstantFormat.HRM_Format_DayMonthYear,
                            };
                        }
                        @Html.VnrDatePickerFor(mode => mode.DateStart, txtDateStart)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.DateEnd)
                    </div>
                    <div class="FieldValue">
                        @{
                            var txtDateEnd = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:120px",
                                Format = ConstantFormat.HRM_Format_DayMonthYear,
                            };
                        }
                        @Html.VnrDatePickerFor(mode => mode.DateEnd, txtDateEnd)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.Budget)
                    </div>
                    <div class="FieldValue">
                        @{
                            var Budget = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Format = ConstantFormat.HRM_Format_Money

                            };

                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.Budget, Budget).Value(Model != null && Model.Budget.HasValue ? Model.Budget.Value : 0)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.SalaryMinBudget)
                    </div>
                    <div class="FieldValue">
                        @{
                            var SalaryMinBudget = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Format = ConstantFormat.HRM_Format_Money

                            };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.SalaryMinBudget, SalaryMinBudget).Value(Model != null && Model.SalaryMinBudget.HasValue ? Model.SalaryMinBudget.Value : 0)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.SalaryMaxBudget)
                    </div>
                    <div class="FieldValue">
                        @{
                            var SalaryMaxBudget = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Format = ConstantFormat.HRM_Format_Money

                            };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.SalaryMaxBudget, SalaryMaxBudget).Value(Model != null && Model.SalaryMaxBudget.HasValue ? Model.SalaryMaxBudget.Value : 0)
                    </div>
                </div>

            </div>

            <div style="float:left; width:50%">
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.SalaryCampaignBudget)
                    </div>
                    <div class="FieldValue">
                        @{
                            var SalaryCampaignBudget = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Format = ConstantFormat.HRM_Format_Money

                            };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.SalaryCampaignBudget, SalaryCampaignBudget).Value(Model != null && Model.SalaryCampaignBudget.HasValue ? Model.SalaryCampaignBudget.Value : 0)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.SalaryCurrentBudget)
                    </div>
                    <div class="FieldValue">
                        @{
                            var SalaryCurrentBudget = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Format = ConstantFormat.HRM_Format_Money

                            };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.SalaryCurrentBudget, SalaryCurrentBudget).Value(Model != null && Model.SalaryCurrentBudget.HasValue ? Model.SalaryCurrentBudget.Value : 0)
                    </div>
                </div>

                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.Status)
                    </div>
                    <div class="FieldValue">
                        @{
                            var Status = new DropDownListBuilderInfo()
                            {
                                DataTextField = "Text",
                                DataValueField = "Value",
                                StyleCss = "width:300px",
                                BindTo = lstStatus,
                                OptionLabel = ConstantDisplay.HRM_Category_SelectStatus.TranslateString(),
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.Status, Status).Value(Model != null && !string.IsNullOrEmpty(Model.Status) ? Model.Status : null)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.Source)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.Source, "width: 300px")
                    </div>
                    <div style="clear: both;"></div>
                </div>
            </div>
            <div>
                <div class="FieldTitle150 ">
                    @Html.VnrLabelFor(mode => mode.Description)
                </div>
                <div class="FieldValue">
                    @Html.VnrTextAreaFor(model => model.Description, "width: 780px; height:100px;")
                </div>
            </div>
        </fieldset>
    </div>
</div>
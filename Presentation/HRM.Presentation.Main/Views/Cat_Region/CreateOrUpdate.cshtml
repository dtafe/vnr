@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Category.Models.CatRegionModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Category_Region.TranslateString();
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
<script>
    SetFieldRequired();
    function checkDuplicationCode() {
        
        var _code = $("#Region_Code").val();
        var _ID = '@lineID';
        var param = {
            tableName: 'Cat_Region',
            columnName: 'Code',
            keyword: _code,
            ID: _ID
        };

        var isduplicate = checkDuplicate('@_hrm_Sys_Service', 'Sys_GetData', 'CheckDuplicate', param, "Code");
        
        return isduplicate;
    }
    function onSave() {
        //if (CheckValidate(data)) {
          //  if(!checkDuplicationCode()){
                onSaveAndContinue($('#form_Cat_Region'), '@_hrm_Hre_Service', 'api/CatRegion/', 'grid_Cat_Region', 'windowCatRegion'); return false;
           // }

       // }
        return false;
    }

    function onSaveClose() {
       // if (CheckValidate(data)) {
       //     if (!checkDuplicationCode()) {
                onSaveAndClose($('#form_Cat_Region'), '@_hrm_Hre_Service', 'api/CatRegion/', 'grid_Cat_Region', 'windowCatRegion');
         //   }

       // }
        return false;
    }
    function onSaveDataPopUp() {
        
      //  if (CheckValidate(data)) {
       //     if (!checkDuplicationCode()) {
                onlySave($('#form_Cat_Region'), '@_hrm_Hre_Service', 'api/CatRegion/', 'grid_Cat_Region'); return false;
        //    }
       // }
    }
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_Region" }))
{
    @Html.HiddenFor(model => model.ID)


     <table>
        <tr>
            <td>

              
                <div id="div2">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
    var _RegionCode = new TextBoxBuilderInfo()
    {
        Name = "CatRegion_Code",
        CssStyle = "width:300px"
    };
             if(Model != null){
                 _RegionCode.Value = Model!= null ? Model.Code:null;
             }               
                        }
                        @(Html.VnrTextBoxFor(model => model.Code, _RegionCode))
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.RegionName)
                    </div>
                    <div class="FieldValue">
                        @(Html.VnrTextBoxFor(model => model.RegionName, "width:300px"))
                    </div>
                    <div style="clear: both;"></div>
                </div>

                <div id="div4">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Notes)
                    </div>
                    <div class="FieldValue">
                        @(Html.VnrTextAreaFor(model => model.Notes, "width:500px;height:100px;"))
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.MinSalary)
                    </div>
                    <div class="FieldValue">
                        @{
                                var _MinSalary = new NumericTextBoxBuilderInfo<double>
                            {
                            
                                StyleCss = "width:150px;",
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                                                }
                        @Html.VnrNumericTextBoxFor(model => model.MinSalary, _MinSalary)
                      
                    </div>

                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.MaxSalary)
                    </div>
                    <div class="FieldValue">
                        @{
                        var _MaxSalary = new NumericTextBoxBuilderInfo<double>
                            {
                                //Name = "UnuEDChildInfo_AmountofOffset",
                                StyleCss = "width:150px;",
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.MaxSalary, _MaxSalary)
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>      
         <tr>
             <td>
                 <div>
                     <div class="FieldTitle150">

                     </div>
                     <div class="FieldValue">
                         @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Region", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                         @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catRegion", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                         @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catRegion", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                     </div>
                 </div>
             </td>
         </tr>
 </table>
}


@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models;
@model Cat_ValueEntityModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    IList<SelectListItem> ilValueEntityType = Enum.GetValues(typeof(ValueEntityType))
        .Cast<ValueEntityType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
        .ToList();
}
<script>
    SetFieldRequiredByScreenName('Cat_ValueEntity');
 
    function onSaveNew() {
            onSaveAndContinue($('#form_Cat_ValueEntity'), '@_hrm_Hre_Service', 'api/Cat_ValueEntity/', '@ConstantControlName.HRM_Category_ValueEntity_Grid_Name', '@ConstantControlName.HRM_Category_ValueEntity_PopUp_Name'); return false;
    }

    function onSaveClose() {
            onSaveAndClose($('#form_Cat_ValueEntity'), '@_hrm_Hre_Service', 'api/Cat_ValueEntity/', '@ConstantControlName.HRM_Category_ValueEntity_Grid_Name', '@ConstantControlName.HRM_Category_ValueEntity_PopUp_Name'); return false;
    }
    function onSaveDataPopUp() {
            onlySave($('#form_Cat_ValueEntity'), '@_hrm_Hre_Service', 'api/Cat_ValueEntity/', '@ConstantControlName.HRM_Category_ValueEntity_Grid_Name'); return false;
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_ValueEntity" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div style="display:block; padding-top:10px;">
                    <fieldset>
                        <legend>
                            @ConstantDisplay.HRM_Category_ValueEntity.TranslateString()
                        </legend>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ValueEntityName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.ValueEntityName, "width: 300px")
                                </div>
                            </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Type)
                            </div>
                            <div class="FieldValue">
                                @{
                                        var Type = new ComboBoxBuilderInfo()
                                    {
                                        StyleCss = "width:300px",
                                        DataTextField = "Text",
                                        DataValueField = "Value",
                                        Autobind = true,
                                        BindTo = ilValueEntityType
                                    };
                                }
                                @Html.VnrComboBoxFor(mode => mode.Type, Type)
                            </div>
                        </div>

                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Value)
                                </div>
                                <div class="FieldValue">
                                    @{
                                    var Value = new NumericTextBoxBuilderInfo<double>()
                                    {
                                        StyleCss = "width:150px",
                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(mode => mode.Value, Value)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Value2)
                                </div>
                                <div class="FieldValue">
                                    @{
                                var Value2 = new NumericTextBoxBuilderInfo<double>()
                                    {
                                        StyleCss = "width:150px",

                                    };
                                    }
                                    @Html.VnrNumericTextBoxFor(mode => mode.Value2, Value2)
                                </div>
                            </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Value3)
                            </div>
                            <div class="FieldValue">
                                @{
                                var Value3 = new NumericTextBoxBuilderInfo<double>()
                                    {
                                        StyleCss = "width:150px",

                                    };
                                }
                                @Html.VnrNumericTextBoxFor(mode => mode.Value3, Value3)
                            </div>
                        </div>

                          
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.DateOfEffect)
                                </div>
                                <div class="FieldValue">
                                    @{
                                    var DateOfEffect = new DatePickerBuilderInfo()
                                    {
                                        Format = ConstantFormat.HRM_Format_DayMonthYear,
                                        StyleCss="width:120px;"
                                    };
 
                                    }
                                    @Html.VnrDatePickerFor(mode => mode.DateOfEffect, DateOfEffect)
                                </div>
                            </div>
                            

            </fieldset>
                </div>
               
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-ValueEntity", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-ValueEntity", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-ValueEntity", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
   
    
}

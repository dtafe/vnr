@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Security;
@using System.Collections
@using HRM.Presentation.Category.Models

@model Cat_ValueEntityModel

@{
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    Layout = null;
}
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_Category_ValueEntity_PopUp_Name,
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Cat_ValueEntity/CatValueEntityInfo/",
    };
}
@(Html.VnrWindow(window))

<script>
    //Biến để lưu id của các dòng đã check chọn

    var gridName = '@ConstantControlName.HRM_Category_ValueEntity_Grid_Name';
    var popUpName = '@ConstantControlName.HRM_Category_ValueEntity_PopUp_Name';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Category_ValueEntity_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Category_ValueEntity_PopUp_Create_Title.TranslateString())';

    $(document).ready(function () {
        //Ẩn hiện div chứa các input tìm kiếm
        ShowHidePanel();
        //Xử lý sự kiện click button tìm kiếm
        $("#btnSearch").click(function () {

            ReadGrid(gridName);
        });

        EditGridPopUp(gridName, popUpName, '@_hrm_Main_Web' + "Cat_ValueEntity/CatValueEntityInfo/", '@ConstantPermission.Cat_ValueEntity', titleEditPopUp);
    });
    //Lấy dữ liệu khi tìm kiếm
    function filterFieldInfo(isExport) {
        return {
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    //Xử lý khi check chọn các dòng trên lưới thì lưu id của các dòng đó cào biến selectedIds ở trên
    GridCheckbox(gridName);
    //Tạo mới Sản phẩm
    $("#btnCreate").click(function () {
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Cat_ValueEntity');
        if (!isAccess) {
            return;
        }
        PopUpCreate(popUpName, titleCreatePopUp);
    });
    //Chỉnh sửa Sản phẩm

    //Xóa Sản phẩm
    $('#btnDelete').click(function (e) {
        var isAccess = checkPermission(PrivilegeType.Delete, '@ConstantPermission.Cat_ValueEntity');
        if (!isAccess) {
            return;
        }

        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        DeleteSelected(gridName, '@_hrm_Main_Web' + "Cat_ValueEntity/RemoveSelected/", selectedIds.join(","));
    });
    $("#btnExportSelected").click(function () {
        @*var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Hre_ProfileQuit');
        if (!isAccess) {
            return;
        }*@
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Cat_GetData/ExportValueEntitySelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Cat_ValueEntity');
    });

    $("#btnExportAll").click(function () {
        @*var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Hre_ProfileQuit');
        if (!isAccess) {
            return;
        }*@
        var grid = $('#@ConstantControlName.HRM_Category_ValueEntity_Grid_Name').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Cat_GetData/ExportAllValueEntityList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Cat_ValueEntity');
    });

</script>
<div style="display:block; padding-top:10px;">
    <fieldset>
        <legend>
            @ConstantDisplay.HRM_Category_ValueEntity.TranslateString()
        </legend>
        <div class="commandToolBarWidge" id="anchor">
            <div style="float:left">
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
            </div>
            <div style="float:right">
                <div class="btn-group">
                    <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                        <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                        @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu pull-right" role="menu">
                        <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                        <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                    </ul>
                </div>
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeValueEntity", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
            </div>

            <div class="clear"></div>
        </div>
        <div>
            <!--Khai báo các thông tin cho Grid-->
            @{
            var columnMode = string.Empty;
            var defaultColumnMode = string.Empty;
            var userId = Session[SessionObjects.UserId];
            //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
            var gridControlName = ConstantControlName.HRM_Category_ValueEntity_Grid_Name + "__Cat_ValueEntity_Index";
            HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
            //Get thông tin cấu hình trong database
            GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

            var grid = new GridBuilderInfo
            {
                Name = ConstantControlName.HRM_Category_ValueEntity_Grid_Name,
                ReadActionUrl = @_hrm_Hre_Service + "Cat_GetData/GetValueEntityList/",
                ReadData = "filterFieldInfo",
                ShowCommand = false,
            };

            if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
            {
                grid.ValueFields = gridInfo.ValueFields;
                grid.SizeFields = gridInfo.SizeFields;
                grid.Filterable = gridInfo.FilterFields;
                grid.DisplayFields = gridInfo.DisplayFields;
                grid.LockedFields = gridInfo.LockedFields;
                grid.GroupFields = gridInfo.GroupFields;
                if (gridInfo.PageSize > 0)
                {
                    grid.PageSize = gridInfo.PageSize;
                }
                columnMode = gridInfo.StringXml;
            }
            else
            {
                grid.ValueFields = new[]
                {
                    Cat_ValueEntityModel.FieldNames.ValueEntityName,
                    Cat_ValueEntityModel.FieldNames.Value,
                    Cat_ValueEntityModel.FieldNames.DateOfEffect,
                };

                grid.SizeFields = new Dictionary<string, int>()
                {
                    {Cat_ValueEntityModel.FieldNames.ValueEntityName,120},
                    {Cat_ValueEntityModel.FieldNames.Value,120},
                    {Cat_ValueEntityModel.FieldNames.DateOfEffect,120},
                };

                grid.Filterable = new Dictionary<string, bool>()
                {
                   {Cat_ValueEntityModel.FieldNames.ValueEntityName,true},
                    {Cat_ValueEntityModel.FieldNames.Value,true},
                    {Cat_ValueEntityModel.FieldNames.DateOfEffect,true},
                };

                grid.DisplayFields = new Dictionary<string, string>()
                {
                    {Cat_ValueEntityModel.FieldNames.ValueEntityName,ConstantDisplay.HRM_Category_ValueEntity_ValueEntityName},
                    {Cat_ValueEntityModel.FieldNames.Value,ConstantDisplay.HRM_Category_ValueEntity_Value},
                    {Cat_ValueEntityModel.FieldNames.DateOfEffect,ConstantDisplay.HRM_Category_ValueEntity_DateOfEffect},
                };
                defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
            }
        //var grid = new GridBuilderInfo
        //{
        //    Name = ConstantControlName.HRM_Category_ValueEntity_Grid_Name,
        //    ValueFields = valueFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    Filterable = filterable,
        //    ShowCommand = false,
        //    ReadActionUrl = @_hrm_Hre_Service + "Cat_GetData/GetValueEntityList/",
        //    ReadData = "filterFieldInfo",
        //};
            }

        @(Html.VnrGrid<Cat_ValueEntityModel>(grid))
        <script>
            ClickButtonChangeColum("btnChangeValueEntity", "Cat_ValueEntityModel");
            $(document).ready(function () {
                $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
                $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
                $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
                $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
            });
       </script>
        </div>
        </fieldset>
    </div>

        @{
            var listValueField = grid.ValueFields;
            var valueFields1 = string.Empty;
            if (listValueField != null)
            {
                for (int i = 0; i < listValueField.Count(); i++)
                {
                    valueFields1 += "," + listValueField[i];
                }
            }
        }
        @Html.Hidden("valueFieldsGrid", valueFields1)

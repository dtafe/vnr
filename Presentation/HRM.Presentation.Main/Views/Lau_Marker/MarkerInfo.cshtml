@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Laundry.Models.Lau_MarkerModel
@{
    ViewBag.Title = "LauMarker";
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var userId = Model == null ? Guid.Empty : Model.ID;
}

<script>
    var data = SetCharacteFieldRequired();

    function checkDuplicationLauMarker() {
        
        var _code = $("#MarkerInfo_Code").val();
        var isduplicate = false;
        var _ID = '@userId';
        var paramLM = {
            tableName: 'LMS_Marker',
            columnName: 'Code',
            keyword: _code,
            ID: _ID
        };
        
        var isduplicate = checkDuplicate('@_hrm_Sys_Service', 'Sys_GetData', 'CheckDuplicate', paramLM, "Code");
        return isduplicate;
    }

    function onlySavePopUp() {
        if (CheckValidate(data) && !checkDuplicationLauMarker()) {
            onlySave($('#form_Lau_Marker'), '@_hrm_Hre_Service', 'api/Lau_Marker/', 'grid_Lau_Marker', 'windowLauMarker');
        }
        return false;
    }


    function onSave() {
        if (CheckValidate(data) && !checkDuplicationLauMarker()) {
            onSaveAndContinue($('#form_Lau_Marker'), '@_hrm_Hre_Service', 'api/Lau_Marker/', 'grid_Lau_Marker', 'windowLauMarker');
        }
        return false;
    }

    function onSaveClose() {
        
        if (CheckValidate(data) && !checkDuplicationLauMarker()) {
            onSaveAndClose($('#form_Lau_Marker'), '@_hrm_Hre_Service', 'api/Lau_Marker/', 'grid_Lau_Marker', 'windowLauMarker');
        }
        return false;
    }
</script>

<!--Form dùng cho edit và update-->
@*@using (Ajax.BeginForm("MarkerInfo", "Lau_Marker", FormMethod.Post, null))*@
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Lau_Marker" }))
{
    @Html.HiddenFor(model => model.ID)

    
     <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.MarkerName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.MarkerName, "width:300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                      
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
                        var txtCode = new TextBoxBuilderInfo()
                        {
                            Name = "MarkerInfo_Code",
                            CssStyle = "width:300px",
                         
                        };
                        if(Model != null){
                            txtCode.Value = Model == null ? string.Empty : Model.Code;
                        }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code,txtCode)
                    </div>
                </div>
               
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Note)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Note, "width:500px;height:100px;")
                    </div>
                </div>


            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onlySavePopUp", Name = "only-save-lauMarker", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-lauMarker", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-lauMarker", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })


                    </div>
                </div>
            </td>
        </tr>
 </table>

}


@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Infrastructure.Security
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Evaluation.Models;
@model Eva_PerformanceEvaModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var PerformanceID = Model == null ? Guid.Empty : Model.PerformanceID.Value;
    string Order = Model != null && Model.OrderEva != null ? Model.OrderEva.Value.ToString() : "0";

    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    string Formula = Model != null ? Model.FormulaOfPerformanceTemplate : "";
    //IList<SelectListItem> IlEDType = Enum.GetValues(typeof(EDType)).Cast<EDType>().Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();
    //IList<SelectListItem> IlFormula = Enum.GetValues(typeof(EFormula)).Cast<EFormula>().Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();
    string attatchFile = (Model != null && !string.IsNullOrEmpty(Model.AttachFile)) ? Model.AttachFile : "";

}
<style>
    #gridPerformanceEvaDetail td {
        white-space: normal !important;
    }
    #gridPerformanceEvaDetailHisory td {
        white-space: normal !important;
    }
</style>
<script>


    var gridName = 'gridPerformanceEvaDetail';
    var popUpName = 'PopUpPerformanceEvaDetail';

    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Evaluation_PerformanceEvaWaitingEva.TranslateString())';

    
    SetFieldRequired();
    function LoadAuto() {
        var performanceEvaID = '@ID';
        //var bound = "function () {"
        //    + "var field1 = ['KPIColor', '', 'white', 'black', '='];"
        //        +" var field = [field1];"
        //        +" SetRowColorNoCondition(gridName, field);"
        //        +"$('#mastercheckbox').prop('checked', false);"
        //        +"var result = $('input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]');"
        //        +"for (var i = 0; i < result.length; i++) {"
        //        + "if (SelectedGuid.indexOf(result[i].parentNode.parentNode.attributes['data-uid'].value) != -1) {"
        //        +"result[i].checked = true;"
        //        + "} } };";
        var grid = VnrGridDynamic;

        $.ajax({
            url: '@_hrm_Hre_Service' + "Eva_GetData/GetPerformanceEvaDynamicByPerformanceEvaID/",
            data: { PerformanceID: '@PerformanceID', PerformanceEvaID: performanceEvaID, OrderEva: '@Order' },
            type: 'POST',
            asyn: false,
            datatype: 'json',
            success: function (data) {
                
                debugger;
                grid.GridName = 'gridPerformanceEvaDetailHisory';
                grid.DataBound = 'changePageGird_History';
                grid.DataSource = data.Data;
                VnrGridDynamicControl(grid);

                //var gridC = $("#gridPerformanceEvaDetailHisory").data("kendoGrid");
                //gridC.bind("dataBound", function (e) { changePageGird_History(); });
                //grid.dataSource.fetch();
            }
        });

    }
    $(document).ready(function () {
       $("#gridPerformanceEvaDetailHisory").width($(window).width() * 99 / 100);
        $('#TotalMark').attr('disabled', true);
        $("#TotalMark").val("0");
        
        ShowHidePanel();
        LoadAuto();
        editAction();



    });

   function editAction() {
       
       $("#gridPerformanceEvaActiveDetail").on("click", ".gridEditImgButton", function (e) {
           var grid = $("#gridPerformanceEvaActiveDetail").data("kendoGrid");
           e.preventDefault();
           var row = $(this).closest("tr");
           var dataItem = grid.dataItem(row);
           KendoRouteMapping("#Hrm_Main_Web/Eva_PerformanceEvaDetail/PerformanceEvaDetail?id=" + dataItem.ID + "&EvaluatorID=" + '@Model.EvaluatorID' + "&IsActive=1", 'Hrm_Main_Web', '@_hrm_Main_Web');
  
       });
   }

    function getData() {
        var id = $("#ID").val();
        var status = $("#Status1").val();
        var strengths = $("#Strengths").val();
        var weaknesses = $("#Weaknesses").val();
        var resultNote = $("#ResultNote").val();
        var levelID = $("#LevelID").val();
        var proportion = $("#Proportion").val();
        //  var attachFile = $("#AttachFile").val();
        var attachFiles = $("#AttachFile").val().split(",");
        var totalMark = $("#TotalMark").val();


        return {
            ID: id,
            Status: status,
            Proportion: proportion,
            Strengths: strengths,
            Weaknesses: weaknesses,
            ResultNote: resultNote,
            LevelID: levelID,
            //   AttachFile: attachFile,
            AttachFiles: attachFiles,
            TotalMark: totalMark
        };
    }
    var doSave = function () {
        
        var check = CheckMark();
        if (check === false) {
            return;
        }
        else {

            var performamceEvaData = getData();

            //lay data cua luoi post len
            var grid = $("#gridPerformanceEvaDetail").data("kendoGrid");
            parameterMap = grid.dataSource.transport.parameterMap;
            var currentData = grid.dataSource.view();
            var PevadetailData = [];
            for (var i = 0; i < currentData.length; i++) {
                PevadetailData.push(currentData[i].toJSON());
            }
            var lstModel = {};
            $.extend(lstModel, parameterMap({ models: PevadetailData, performanceEvaModel: performamceEvaData }));
            if ($("#TotalMark").val() == 0)
            {
                ShowNotificationProcessor("Mời Bạn Tính Toán.");
                return;
            }
            else
            {
                //save
                $.ajax({
                    traditional: true,
                    url: '@_hrm_Main_Web' + 'Eva_PerformanceEvaWaitingEva/Save',
                    data: lstModel,
                    type: 'POST',
                    success: function (data) {
                        ReadGrid(gridName);
                        if (data.ActionStatus != undefined) {
                            ShowNotificationProcessor(data.ActionStatus);
                            return;
                        }
                        ShowNotificationProcessor("Cập Nhật Thành Công");

                    },
                    error: function (data) { }
                });
            }
        }

    };
    function CheckMark() {
        
        var list = $("#gridPerformanceEvaDetail").data("kendoGrid").dataSource.data();
        for (var i = 0; i < list.length; i++) {
            if (list[i].Mark == null) {
                ShowNotificationProcessor("Bạn Chưa Nhập " + '@ConstantDisplay.HRM_Evaluation_PerformanceDetail_Mark.TranslateString()' + " Ở Tiêu Chí " + (i + 1).toString() + " Trong Bản Đánh Giá.");
                return false;
            }
            if (list[i].Mark > list[i].MaximumRating || list[i].Mark < list[i].MinimumRating) {
                ShowNotificationProcessor("Nhập " + '@ConstantDisplay.HRM_Evaluation_PerformanceDetail_Mark.TranslateString()' + " Ở Tiêu Chí " + (i + 1).toString() + " Nằm Trong Khoảng Giữa Của " + '@ConstantDisplay.HRM_Evaluation_MinimumRating.TranslateString()' + " Và " + '@ConstantDisplay.HRM_Evaluation_MaximumRating.TranslateString()');
                return false;
            }


        }
        return true;
    }
    function calculate() {
        
        var check = CheckMark();
        if (check === false) {
            return;
        }
        else {
            var list = $("#gridPerformanceEvaDetail").data("kendoGrid").dataSource.data();
            var TotalMark = 0;
            var TotalRate = 0;
            var TotalKPI = list.length;
            var Formula = '@Formula';
            for (var i = 0; i < list.length; i++) {
                TotalMark += list[i].Mark;
                TotalRate += list[i].Rate;

            }
            //Todo: tam thoi hot fix cong thuc.Sau nay xoa di
            //var result = (TotalMark * TotalRate) / TotalKPI;
            //$("#TotalMark").val(result);
            
            //Todo: tam thoi khoa lai vi chua publish duoc
            $.ajax({
                url: '@_hrm_Hre_Service' + "Eva_GetData/GetTotalMarkByFormula",
                data: { Formula: Formula, TOTALMARK: TotalMark, TOTALRATE: TotalRate, TOTALKPI: TotalKPI },
                async: false,
                datatype:'json',
                type: 'POST',
                success:function(data)
                {
                    $("#TotalMark").val(data);
                }
            });

            $.ajax({
                url: '@_hrm_Hre_Service' + "Eva_GetData/GetTotalMark",
                data: { TotalMark: TotalMark },
                async: false,
                datatype: 'json',
                type: 'POST',
                success: function (data) {
                    
                    var datas = [{ LevelName: data.LevelName, ID: data.ID }];

                    var ddl = $("#LevelID").data("kendoDropDownList")
                    ddl.value(data.ID);

                    

                }
            });

        }

    }


    function changePageGird() {
        // Lấy mã màu khi vượt mức
        debugger;
        var field1 = ["KPIColor", "", '', 'black', "="];
        var field = [field1];
        SetRowColorNoCondition(gridName, field);

        $('#mastercheckbox').prop('checked', false);
        var result = $("input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]");
        for (var i = 0; i < result.length; i++) {
            if (SelectedGuid.indexOf(result[i].parentNode.parentNode.attributes["data-uid"].value) != -1) {
                result[i].checked = true;
            }
        }
    };

    function changePageGird_History() {
        // Lấy mã màu khi vượt mức
        debugger;
        var field1 = ["KPIColor", "", 'white', 'black', "="];
        var field = [field1];
        SetRowColorNoCondition(gridName, field);

        $('#mastercheckbox').prop('checked', false);
        var result = $("input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]");
        for (var i = 0; i < result.length; i++) {
            if (SelectedGuid.indexOf(result[i].parentNode.parentNode.attributes["data-uid"].value) != -1) {
                result[i].checked = true;
            }
        }
    };
</script>
<!--Form dùng cho edit và update-->
<form action="#" method="POST" >
    <div class="panel-wrap">
        <div id="main-content">
            <div class="widget">
                <div class="section-header">
                    <div class="title">
                        <img src="@ConstantPath.Eva_PerformanceIconPath" alt="" width="20" height="20" />
                        @ConstantDisplay.HRM_Evaluation_PerformanceEvaActive.TranslateString()
                        @Html.ActionLink("(" + ConstantDisplay.HRM_Evaluation_Back_To_PerformanceEvaActive.TranslateString() + ")", "/Index")
                    </div>
                </div>
@if (Model != null && Model.IsSuperiorHasPerformance.HasValue && Model.IsSuperiorHasPerformance == false && Model.IsEvaluator.HasValue && Model.IsEvaluator == true)
{
                <div class="commandToolBarWidge">
                    <div class="options">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "doSave", Name = "save", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
}
            </div>
        </div>
    </div>
</form>

@*cap sau chua danh gia*@
@if (Model != null && Model.IsSuperiorHasPerformance.HasValue && Model.IsSuperiorHasPerformance == false && Model.IsEvaluator.HasValue && Model.IsEvaluator == true)
{
    <div>
    @Html.HiddenFor(model => model.ID)

        <div style="display:block; padding-top:10px;">
            @*bang danh gia nhan vien*@ 
            <fieldset>
                <legend>
                    @ConstantDisplay.HRM_Evaluation_PerformanceTemplateProfile.TranslateString()
                </legend>
                <div style="float:left;">
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.PerformancePlanName)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">
                            @Html.DisplayFor(mode => mode.PerformancePlanName)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.DatePerformOfProfile)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">
                            @Html.DisplayFor(mode => mode.DatePerformOfProfile)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.TemplateName)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">

                            @Html.DisplayFor(mode => mode.TemplateName)
                        </div>
                    </div>

                </div>
                <div style="float:left;">
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.ProfileName)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">
                            @Html.DisplayFor(mode => mode.ProfileName)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.JobTitleNameOfProfile)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">
                            @Html.DisplayFor(mode => mode.JobTitleNameOfProfile)
                        </div>

                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OrgStructureNameOfProfile)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">
                            @Html.DisplayFor(mode => mode.OrgStructureNameOfProfile)

                        </div>

                    </div>

                </div>
                <div style="float:left;">
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.EvaluatorName)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">

                            @Html.DisplayFor(mode => mode.EvaluatorName)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.JobTitleNameOfEvaluator)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">

                            @Html.DisplayFor(mode => mode.JobTitleNameOfEvaluator)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OrgStructureNameOfEvaluator)
                        </div>
                        <div class="FieldValueView" style="min-height:24px">

                            @Html.DisplayFor(mode => mode.OrgStructureNameOfEvaluator)


                        </div>
                    </div>
              
                </div>
            </fieldset>
            
            @*đánh giá*@
            <div style=" display: block; padding-top: 10px;">
                <fieldset>
                    <legend>
                        @ConstantDisplay.HRM_Evaluation.TranslateString()
                    </legend>
                    <div>
                        <!--Khai báo các thông tin cho Grid-->
                        @{
                            string[] valueFields1 = new string[]
                            {
                                Eva_PerformanceEvaModel.FieldNames.EvaluatorName,
                                Eva_PerformanceEvaModel.FieldNames.OrderEva,
                                Eva_PerformanceEvaModel.FieldNames.PerformanceTime,
                                Eva_PerformanceEvaModel.FieldNames.TotalMark,
                                Eva_PerformanceEvaModel.FieldNames.LevelName,
                                Eva_PerformanceEvaModel.FieldNames.AttachFile,
                                Eva_PerformanceEvaModel.FieldNames.Strengths,
                                Eva_PerformanceEvaModel.FieldNames.Weaknesses,
                                Eva_PerformanceEvaModel.FieldNames.ResultNote,
                            };

                            var sizeFields1 = new Dictionary<string, int>()
                            {
                                {Eva_PerformanceEvaModel.FieldNames.EvaluatorName, 120},
                                {Eva_PerformanceEvaModel.FieldNames.OrderEva, 120},
                                {Eva_PerformanceEvaModel.FieldNames.PerformanceTime, 180},
                                {Eva_PerformanceEvaModel.FieldNames.TotalMark, 90},
                                {Eva_PerformanceEvaModel.FieldNames.LevelName,120},
                                {Eva_PerformanceEvaModel.FieldNames.AttachFile, 180},
                                {Eva_PerformanceEvaModel.FieldNames.Strengths, 180},
                                {Eva_PerformanceEvaModel.FieldNames.Weaknesses, 180},
                                {Eva_PerformanceEvaModel.FieldNames.ResultNote, 180},
                            };
                            var filterable1 = new Dictionary<string, bool>()
                            {
                                {Eva_PerformanceEvaModel.FieldNames.EvaluatorName,true},
                                {Eva_PerformanceEvaModel.FieldNames.OrderEva,true},
                                {Eva_PerformanceEvaModel.FieldNames.PerformanceTime,true},
                                {Eva_PerformanceEvaModel.FieldNames.TotalMark,true},
                                {Eva_PerformanceEvaModel.FieldNames.LevelName,true},
                                {Eva_PerformanceEvaModel.FieldNames.AttachFile,true},
                                {Eva_PerformanceEvaModel.FieldNames.Strengths,true},
                                {Eva_PerformanceEvaModel.FieldNames.Weaknesses,true},
                                {Eva_PerformanceEvaModel.FieldNames.ResultNote,true},

                            };
                            var displayFields1 = new Dictionary<string, string>()
                            {

                                {Eva_PerformanceEvaModel.FieldNames.EvaluatorName, ConstantDisplay.HRM_Evaluation_Evaluator_EvaluatorName},
                                {Eva_PerformanceEvaModel.FieldNames.OrderEva, ConstantDisplay.HRM_Evaluation_PerformanceEva_OrderEva},
                                {Eva_PerformanceEvaModel.FieldNames.PerformanceTime, ConstantDisplay.HRM_Evaluation_Performance_PerformanceTime},
                                {Eva_PerformanceEvaModel.FieldNames.TotalMark, ConstantDisplay.HRM_Evaluation_Performance_TotalMark},
                                {Eva_PerformanceEvaModel.FieldNames.LevelName, ConstantDisplay.HRM_Evaluation_Level},
                                {Eva_PerformanceEvaModel.FieldNames.AttachFile, ConstantDisplay.HRM_Evaluation_Performance_AttachFile},
                                {Eva_PerformanceEvaModel.FieldNames.Strengths, ConstantDisplay.HRM_Evaluation_Performance_Strengths},
                                {Eva_PerformanceEvaModel.FieldNames.Weaknesses, ConstantDisplay.HRM_Evaluation_Performance_Weaknesses},
                                {Eva_PerformanceEvaModel.FieldNames.ResultNote, ConstantDisplay.HRM_Evaluation_Performance_ResultNote},

                            };


                            var grid1 = new GridBuilderInfo
                            {

                                Name = "gridPerformanceEvaActiveDetail",
                                ReadActionUrl = _hrm_Hre_Service + "Eva_GetData/GetPerformanceEvaByPerformance?PerformanceID="+PerformanceID,
                                ValueFields = valueFields1,
                                SizeFields = sizeFields1,
                                DisplayFields = displayFields1,
                                Filterable = filterable1,
                                PageSize = 10,
                                GridHeight = 220,
                                AutoBind = true
                            };
                        }
                        @*@(Html.VnrGrid<Eva_PerformanceEvaModel>(grid1))*@
                    </div>

                    <div>
                        <!--Khai báo các thông tin cho Grid-->
                        @{
                            string[] valueFields = new string[]
                            {
                                Eva_PerformanceEvaDetailModel.FieldNames.KPIName,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,
                            Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Scale,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Rate,
                            Eva_PerformanceEvaDetailModel.FieldNames.Mark ,
                            Eva_PerformanceEvaDetailModel.FieldNames.KPIColor,

                            };

                            string[] hiddenFields = new string[]
                            {
                                Eva_PerformanceEvaDetailModel.FieldNames.KPIColor,
                            };
                            
                            Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {Eva_PerformanceEvaDetailModel.FieldNames.KPIName,180},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,250},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,250},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,120},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,120},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Scale,120},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,150},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,150},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Mark,80},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Rate,60},

                            };
                            string[] disabledFields = new[]
                            {
                                Eva_PerformanceEvaDetailModel.FieldNames.KPIName,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Scale,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Rate,
                            };

                            Dictionary<string, string> displayFields = new Dictionary<string, string>()
                            {
                               {Eva_PerformanceEvaDetailModel.FieldNames.KPIName, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_KPIName},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_DescriptionKPIFix},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_DescriptionKP},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_Evaluation},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_MinimumRating},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_MaximumRating},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Scale, ConstantDisplay.HRM_Evaluation_KPI_Scale},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource, ConstantDisplay.HRM_Evaluation_KPI_MeasuredSource},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Mark, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_Mark},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Rate, ConstantDisplay.HRM_Evaluation_Rate},
                            {Eva_PerformanceEvaDetailModel.FieldNames.KPIColor, ConstantDisplay.HRM_Evaluation_KPI_KPIColor},
                            };
                            var filterable = new Dictionary<string, bool>()
                            {
                               {Eva_PerformanceEvaDetailModel.FieldNames.KPIName,true},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,true},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,true},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Scale,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,true},
                               
                            {Eva_PerformanceEvaDetailModel.FieldNames.Mark,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Rate,true},

                            };

                            var grid = new GridBuilderInfo
                            {

                                Name = "gridPerformanceEvaDetail",
                                ReadActionUrl = _hrm_Hre_Service + "Eva_GetData/GetPerformanceEvaDetailByPerformanceEvaID?PerfomanceEvaID=" + ID,
                                ReadData = "filterFieldInfo",
                                DisableFields=disabledFields,
                                ValueFields = valueFields,
                                SizeFields = sizeFields,
                                DisplayFields = displayFields,
                                EditMode = GridEditMode.InCell,
                                PageSize = 10,
                                GridHeight =220,
                                AutoBind = true,
                                Navigatable=true,
                                ShowDeleteButton = true,
                                ShowEditIcon = false

                            };
                        }

                        <!--Khởi tạo Grid-->
                        @(Html.VnrGrid<Eva_PerformanceEvaDetailModel>(grid))
                    </div>
                
                    <div style="float: right; text-align: right; padding-top:10px;" >
                        @{
                            var TotalMark = new TextBoxBuilderInfo()
                            {
                                Width=80                            
                            };
                        }
                        @Html.VnrTextBoxFor(mode => mode.TotalMark, TotalMark)
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "calculate", Name = "Calculate", Content = ConstantAction.HRM_Common_Calculate.TranslateString(), ImageUrl = ConstantPath.IconComputePath })
                    </div>
                </fieldset>
            </div>
                
            @if (Model != null && Model.OrderEva > 1)
            {
                //lich su danh gia
                <div style=" display: block; padding-top: 10px;">
                    <fieldset>
                        <legend>
                            @ConstantDisplay.HRM_Evaluation_HistoryPerformance.TranslateString()
                        </legend>
                        <div id="gridPerformanceEvaDetailHisory" style="overflow-x:scroll; width:1200px"></div>
                    </fieldset>
                </div>
            }

        </div>
        
        @*danh gia chung : diem manh , diem yeu , danh gia chung , dinh kem file*@
        <div style="display:none; padding-top:10px;">
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Evaluation_GeneralPerformance.TranslateString()
            </legend>
            <div style="float:left; padding-right:100px">
                <div>
                    <div class="FieldTitle">
                        @Html.HiddenFor(mode => mode.ID)
                        @Html.HiddenFor(model => model.Status, new { id = "Status1" })
                        @Html.VnrLabelFor(mode => mode.Strengths)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Strengths)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Weaknesses)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Weaknesses)
                    </div>
                </div>
            </div>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ResultNote)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.ResultNote)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.LevelName)
                    </div>
                    <div class="FieldValue">

                        @{
                                var LevelID = new DropDownListBuilderInfo()
                                {
                                    DataTextField = "LevelName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hre_Service + "Eva_GetData/GetMultiLevel",
                                    OptionLabel = ConstantDisplay.HRM_Evaluation_SelectLevel.TranslateString(),
                                    Value = Model != null && !string.IsNullOrEmpty(Model.LevelName) ? Model.LevelName : null

                                };
                        }
                        @Html.VnrDropDownListFor(mode => mode.LevelID, LevelID)

                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Proportion)
                    </div>
                    <div class="FieldValue">
                        @{
                                var Proportion = new NumericTextBoxBuilderInfo<double>()
                                {
                                    StyleCss = "Width:70px"
                                };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.Proportion, Proportion)
                    </div>
                </div>
                <div id="dvAttachFile">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.AttachFile)
                    </div>
                    <div class="FieldValue">
                        @Html.HiddenFor(model => model.AttachFile)
                        <input type="file" name="files" id="UploadAttachFilePerformEvaActive" />
                        <script>
                            var vnrUploadPerformEvaActive = VnrUploadBuilder;
                            vnrUploadPerformEvaActive.Id = "UploadAttachFilePerformEvaActive";
                            vnrUploadPerformEvaActive.Host = '@_hrm_Main_Web';
                            vnrUploadPerformEvaActive.Multiple = true,
                            vnrUploadPerformEvaActive.Field = "AttachFile",
                            vnrUploadPerformEvaActive.FileType = "*.xls*.xlsx*.txt*.pdf*.doc*.docx*.jpg",
                            vnrUploadPerformEvaActive.Files = '@Html.DisplayFor(model => model.AttachFile)';
                            vnrUploadPerformEvaActive.AutoUpload = true;
                            vnrUploadPerformEvaActive.AutoReNameFile = true;
                            vnrUploadPerformEvaActive.Enable = true;
                            VnrUpload(vnrUploadPerformEvaActive);
                        </script>
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </div>
                </fieldset>
            </div>
            <hr style="padding:5px;" />
        </div> 
}
else
{ 
<div>
    @Html.HiddenFor(model => model.ID)

    <div style="display:block; padding-top:10px;">
        @*bang danh gia nhan vien*@
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Evaluation_PerformanceTemplateProfile.TranslateString()
            </legend>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.PerformancePlanName)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">
                        @Html.DisplayFor(mode => mode.PerformancePlanName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.DatePerformOfProfile)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">
                        @Html.DisplayFor(mode => mode.DatePerformOfProfile)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.TemplateName)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">

                        @Html.DisplayFor(mode => mode.TemplateName)
                    </div>
                </div>
            </div>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ProfileName)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">
                        @Html.DisplayFor(mode => mode.ProfileName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.JobTitleNameOfProfile)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">
                        @Html.DisplayFor(mode => mode.JobTitleNameOfProfile)
                    </div>

                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.OrgStructureNameOfProfile)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">
                        @Html.DisplayFor(mode => mode.OrgStructureNameOfProfile)

                    </div>

                </div>
            </div>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.EvaluatorName)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">

                        @Html.DisplayFor(mode => mode.EvaluatorName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.JobTitleNameOfEvaluator)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">

                        @Html.DisplayFor(mode => mode.JobTitleNameOfEvaluator)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.OrgStructureNameOfEvaluator)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">
                        @Html.DisplayFor(mode => mode.OrgStructureNameOfEvaluator)
                    </div>
                </div>                  
            </div>
        </fieldset>
        
        @*đánh giá*@
        <div style=" display: block; padding-top: 10px;">
            <fieldset>
                <legend>
                    @ConstantDisplay.HRM_Evaluation.TranslateString()
                </legend>
                <div>
                    <!--Khai báo các thông tin cho Grid-->
                    @{
                        string[] valueFields = new string[]
                        {
                            Eva_PerformanceEvaDetailModel.FieldNames.KPIName,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,
                            Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Scale,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Rate,
                            Eva_PerformanceEvaDetailModel.FieldNames.Mark ,
                            Eva_PerformanceEvaDetailModel.FieldNames.KPIColor,
                        };


                        string[] hiddenFields = new string[]
                        {
                            Eva_PerformanceEvaDetailModel.FieldNames.KPIColor,
                        };
                            
                        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                        {
                            {Eva_PerformanceEvaDetailModel.FieldNames.KPIName,180},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,250},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,250},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,120},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,120},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Scale,120},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,150},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,150},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Mark,80},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Rate,60},

                        };
                        string[] disabledFields = new[]
                        {
                            Eva_PerformanceEvaDetailModel.FieldNames.KPIName,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,
                            Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Scale,
                            //Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,
                            //Eva_PerformanceEvaDetailModel.FieldNames.Rate,
                        };

                        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                        {
                            {Eva_PerformanceEvaDetailModel.FieldNames.KPIName, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_KPIName},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_DescriptionKPIFix},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_DescriptionKP},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_Evaluation},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_MinimumRating},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_MaximumRating},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Scale, ConstantDisplay.HRM_Evaluation_KPI_Scale},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource, ConstantDisplay.HRM_Evaluation_KPI_MeasuredSource},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Mark, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_Mark},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Rate, ConstantDisplay.HRM_Evaluation_Rate},
                            {Eva_PerformanceEvaDetailModel.FieldNames.KPIColor, ConstantDisplay.HRM_Evaluation_KPI_KPIColor},
                        };
                        var filterable = new Dictionary<string, bool>()
                        {
                            {Eva_PerformanceEvaDetailModel.FieldNames.KPIName,true},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,true},
                            {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,true},
                            {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Scale,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.MeasuredSource,true},
                               
                            {Eva_PerformanceEvaDetailModel.FieldNames.Mark,true},
                            //{Eva_PerformanceEvaDetailModel.FieldNames.Rate,true},

                        };

                        var grid = new GridBuilderInfo 
                        {
                            Name = "gridPerformanceEvaDetail",
                            ReadActionUrl = _hrm_Hre_Service + "Eva_GetData/GetPerformanceEvaDetailByPerformanceEvaID?PerfomanceEvaID=" + ID,
                            ReadData = "filterFieldInfo",
                            ValueFields = valueFields,
                            SizeFields = sizeFields,
                            DisplayFields = displayFields,
                            HiddenFields = hiddenFields,
                            PageSize = 15,
                            // GridHeight =220,
                            AutoBind = true,
                            Navigatable=true,
                            ShowEditIcon = false,
                            ShowDeleteButton = true,
                            EventDataBound = "changePageGird"
                        };
                    }

                    <!--Khởi tạo Grid-->
                    @(Html.VnrGrid<Eva_PerformanceEvaDetailModel>(grid))
                </div>
                
                    
            </fieldset>
        </div>

        @if (Model != null && Model.OrderEva > 1)
        {
            //lich su danh gia
            <div style=" display: block; padding-top: 10px;">
                <fieldset>
                    <legend>
                        @ConstantDisplay.HRM_Evaluation_HistoryPerformance.TranslateString()
                    </legend>
                    <div id="gridPerformanceEvaDetailHisory" style="overflow-x:scroll; width:1200px"></div>
                </fieldset>
            </div>
        }
    </div>
    <div style="display:none; padding-top:10px;">
        @*danh gia chung : diem manh , diem yeu , danh gia chung , dinh kem file*@
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Evaluation_GeneralPerformance.TranslateString()
            </legend>
            <div style="float:left; padding-right:100px">
                <div>
                    <div class="FieldTitle">
                        @Html.HiddenFor(mode => mode.ID)
                        @Html.HiddenFor(model => model.Status, new { id = "Status1" })
                        @Html.VnrLabelFor(mode => mode.Strengths)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">

                        @Html.VnrDisplayFor(mode => mode.Strengths)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Weaknesses)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">

                        @Html.VnrDisplayFor(mode => mode.Weaknesses)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ResultNote)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">
                        @Html.VnrDisplayFor(mode => mode.ResultNote)
                    </div>
                </div>
            </div>
            <div style="float:left;">
                
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.LevelName)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">


                        @Html.VnrDisplayFor(mode => mode.LevelName)

                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Proportion)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">

                        @Html.VnrDisplayFor(mode => mode.Proportion)
                    </div>
                </div>
                <div id="dvAttachFile">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.TotalMark)
                    </div>
                    <div class="FieldValueView" style="min-height:24px">


                        @Html.VnrDisplayFor(mode => mode.TotalMark)
                    </div>
                    <div style="clear: both;"></div>
                </div>
               
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.AttachFile)
                    </div>
                    <div class="FieldValue" >


                        @Html.HiddenFor(model => model.AttachFile)
                        <input type="file" name="files2" id="UploadAttachFile2" />
                        <script>
                                
                            var vnrUpload2 = VnrUploadBuilder;
                            vnrUpload2.Id = "UploadAttachFile2";
                            vnrUpload2.Host = '@_hrm_Main_Web';
                            vnrUpload2.Multiple = true,
                            vnrUpload2.Field = "AttachFile",
                            vnrUpload2.FileType = "*.xls*.xlsx*.doc*.docx",
                            vnrUpload2.Files = '@Html.DisplayFor(model => model.AttachFile)';
                            vnrUpload2.AutoUpload = false;
                            vnrUpload2.AutoReNameFile = false;
                            vnrUpload2.Enable = false;
                            VnrUpload(vnrUpload2);
                        </script>


                    </div>
                    <div style="clear: both;"></div>
                </div>
                
                       
            </div>
        </fieldset>
    </div>
    <hr style="padding:5px;" />
</div>
}
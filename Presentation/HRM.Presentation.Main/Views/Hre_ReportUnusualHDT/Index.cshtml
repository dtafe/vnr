@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Security


@model HRM.Presentation.Hr.Models.Hre_ReportUnusualHDTModel

@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
}

@Html.Hidden("Screen", screen)
<script>
    var checkedNodes = [];
    SetFieldRequired();
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        var elementPara = {
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            OrgStructureIDs: $("#OrgStructureIDs").val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }

    $(document).ready(function () {
        ShowHidePanel();
        $("#btnCreateTemplate").click(function () {
            var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_ReportHCSales');
            if (!isAccess) {
                return;
            }
            isCreateTemplate = true;
            isCreateTemplateForDynamicGrid = true;
            var window1 = window;
            CreateTemplate('@_hrm_Hre_Service' + '/Hre_GetData/GetReportUnusualHDT', filterFieldInfo(true));
        });
    });

    $("#btnSearch").click(function () {
        ShowHre_ProgressBar();
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hre_Service' + 'Hre_GetData/GetReportUnusualHDTValidate',
            data: filterFieldInfo(),
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data[0] == "error") {
                    CloseHre_ProgressBar();
                    ShowNotificationProcessor(data[1]);
                }
                else {
                    $.ajax({
                        url: '@_hrm_Hre_Service' + "Hre_GetData/GetReportUnusualHDT",
                        data: filterFieldInfo(false),
                        type: 'POST',
                        datatype: 'json',
                        success: function (data) {
                            CloseHre_ProgressBar();
                            var grid = VnrGridDynamic;
                            grid.GridName = "grid_ReportUnusualHDT";
                            grid.DataSource = data.Data;
                            VnrGridDynamicControl(grid);
                        }
                    });
                    checkedNodes = [];
                }
            }
        });

    });

    $("#btnExport").click(function () {
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = true;

        var isAccess = checkPermission(PrivilegeType.Export, '@HRM.Infrastructure.Security.ConstantPermission.Hre_ReportUnusualHDT');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hre_Service' + '/Hre_GetData/GetReportUnusualHDT',
            data: filterFieldInfo(true),
            dataType: 'json',
            success: function (returnValue) {
                var strSplit = returnValue.indexOf(',');
                var status = "";
                var fullPath = "";
                if (strSplit > 0) {
                    status = returnValue.substring(0, strSplit);
                    if (status == "Success") {
                        fullPath = returnValue.substring(strSplit + 1, returnValue.length);
                        window.location = '@_hrm_Main_Web' + fullPath;
                        ShowNotificationProcessor(status);
                    }
                } else {
                    ShowNotificationProcessor(returnValue);
                }
            }
        });
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div id="div2">
                    <div id="div2">
                        <div class="FieldTitle150">
                            @Html.Label(@ConstantDisplay.HRM_HR_Reward_DateOfEffective.TranslateString())
                        </div>
                        <div class="FieldValue">
                            @{
                                var DateStart = new DatePickerBuilderInfo()
                                {
                                    Placeholder = ConstantDisplay.HRM_Attendance_DateFrom.TranslateString(),
                                    StyleCss = "width:100px"
                                };
                            }
                            @Html.VnrDatePickerFor(model => model.DateFrom, DateStart)
                            @{
                                var DateEnd = new DatePickerBuilderInfo()
                                {
                                    Placeholder = ConstantDisplay.HRM_Attendance_DateTo.TranslateString(),
                                    StyleCss = "width:100px"
                                };
                            }
                            @Html.VnrDatePickerFor(model => model.DateTo, DateEnd)
                        </div>
                    </div>
                    <div>
                        <div id="div14">
                            <div class="FieldTitle150">
                                @Html.VnrLabel(ConstantDisplay.HRM_Attendance_OrgStructureID.TranslateString())
                            </div>
                            <div class="FieldValue">
                                <div class="FieldValue">
                                    @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdownForCreate")
                                    @Html.HiddenFor(mode => mode.OrgStructureIDs)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="commandToolBarWidge">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl= ConstantPath.IconSearchPath })
        <div style="float:right">
            <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
            </script>
            <div class="FieldValue" style="margin-top: 0;">
                @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                    StyleCss = "width:200px;",
                    Data = "GetScreenName",
                };
                }
                @Html.VnrDropDownList(screenName)

                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            </div>
        </div>
    </div>
    <div id="grid_ReportUnusualHDT"></div>
</div>



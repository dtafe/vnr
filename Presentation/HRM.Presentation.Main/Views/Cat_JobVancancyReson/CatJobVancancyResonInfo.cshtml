@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models;
@model Cat_NameEntityModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    IList<SelectListItem> ilType = Enum.GetValues(typeof(EnumDropDown.EntityType))
        .Cast<EnumDropDown.EntityType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();
}
<script>
    SetFieldRequired();
    function Setvalue()
    {
        $("#NameEntityType11").val("E_REASONSFORREPLACEMENT");
        $("#EnumType11").val("E_REASONSFORREPLACEMENT");
        $("#Order_11").val($("#Order11").val());
    }
    function onSaveNew() {
        
        Setvalue();
        onSaveAndContinue($('#form_Cat_JobVancancyReson'), '@_hrm_Hr_Service', 'api/Cat_LevelGeneral/', '@ConstantControlName.HRM_Category_JobVancancyReson_Grid_Name', '@ConstantControlName.HRM_Category_JobVancancyReson_PopUp_Name'); return false;

    }

    function onSaveClose() {
        Setvalue();
        // if (!checkDuplicationCode()) {
        onSaveAndClose($('#form_Cat_JobVancancyReson'), '@_hrm_Hr_Service', 'api/Cat_LevelGeneral/', '@ConstantControlName.HRM_Category_JobVancancyReson_Grid_Name', '@ConstantControlName.HRM_Category_JobVancancyReson_PopUp_Name'); return false;
        // }
    }
    function onSaveDataPopUp() {
        Setvalue();
        // if (!checkDuplicationCode()) {
        onlySave($('#form_Cat_JobVancancyReson'), '@_hrm_Hr_Service', 'api/Cat_LevelGeneral/', '@ConstantControlName.HRM_Category_JobVancancyReson_Grid_Name'); return false;
        // }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_JobVancancyReson" }))
{
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.NameEntityType, new { id = "NameEntityType11" })
    @Html.HiddenFor(model => model.EnumType, new { id = "EnumType11" })
    @Html.HiddenFor(model => model.Order, new { id = "Order_11" })

    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">

                        @{
                            var Code = new TextBoxBuilderInfo()
                            {
                                Width = 300,
                                Name = "JobVancancyResonInfo_Code"
                            };
                            if (Model != null)
                            {
                                Code.Value = Model == null ? string.Empty : Model.Code;
                            }
                        }

                        @Html.VnrTextBoxFor(mode => mode.Code, Code)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150 ">
                        <label>
                        @ConstantDisplay.HRM_Category_JobVancancyReson.TranslateString()
                        </Label>         
                    </div>
                    <div class="FieldValue">
                        @{
                              var _NameEntityName = new TextBoxBuilderInfo()
                            {
                                Width = 300,
                                Name = "JobVancancyReson_NameEntityName"
                            };
                            if (Model != null)
                            {
                                _NameEntityName.Value = Model.NameEntityName == null ? string.Empty : Model.NameEntityName;
                            }
                        }
                        @Html.VnrTextBoxFor(mode => mode.NameEntityName, _NameEntityName)

                        @*@Html.VnrTextBoxFor(mode => mode.NameEntityName)*@
                    </div>
                </div>
                @*<div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.Order)
                    </div>
                    <div class="FieldValue">
                        @{
    var Order = new NumericTextBoxBuilderInfo<int>()
    {
        Name = "Order11",
        Value = Model != null && Model.Order.HasValue ? Model.Order.Value : 0
    };

                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.Order, Order)
                    </div>
                </div>*@
                <div>
                    <div class="FieldTitle150 ">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Description, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-JobVancancyReson", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-JobVancancyReson", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-JobVancancyReson", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

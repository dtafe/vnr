@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models
@model CatOrgStructureModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Category_OrgStructure.TranslateString();
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid OrgStructureID = Guid.Empty;
}
<script>

    $(document).ready(function () {
        var tv = $('#treeviewOrg_SumProfiles').data('kendoTreeView');
        var selected = tv.select();
        var item = tv.dataItem(selected);
        debugger;
        if (selected != undefined && item != undefined) {
            $("#ParentID").val(item.id);
            $("#OrgTreeViewDropDowninput").val(item.Name);
        }
    });


    //var data = SetCharacteFieldRequired();
    SetFieldRequiredByScreenName('Cat_OrgStructure_Tab');
    //if ($("#OrgID").val() != "") {
    //    $("#ParentID").val($("#OrgID").val());
    //}


    function onSave() {

        var _orderNumber = document.getElementById("ProfileOrgStructureInfo_OrderNumber");
        if (!_orderNumber.value == "") {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + 'api/CatOrgStructure',
                data: queryStringToJSON(slpitQueryEntity($("#form_Hre_Cat_OrgStructure").serialize())),
                dataType: 'json',
                async: false,
                success: function (data) {

                    if (data.ActionStatus == "Success") {
                        ReloadParentTreeViewDropdown();
                        ShowNotificationProcessor(data.ActionStatus);
                        var window = $("#windowOrgStructureDetail").data("kendoWindow");
                        window.refresh();
                        return;
                    }
                    else {

                        ShowNotificationProcessor(data.ActionStatus);
                        var window = $("#windowOrgStructureDetail").data("kendoWindow");
                        window.refresh();
                    }
                }
            });
            @*onSaveAndContinue($('#form_Hre_Cat_OrgStructure'), '@_hrm_Hre_Service', 'api/CatOrgStructure/', 'grid_Cat_OrgStructure', 'windowOrgStructure');
            return;*@
            ReloadParentTreeViewDropdown();
            return;
        }
        ShowNotification('Thông Báo', '[@ConstantDisplay.OrderNumber.TranslateString()] ' + '@Html.Raw(ConstantMessages.Required.TranslateString())', "k-block k-info-colored");
        return false;
    }

    function onSaveClose() {


        var _orderNumber = document.getElementById("ProfileOrgStructureInfo_OrderNumber");
        if (!_orderNumber.value == "") {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + 'api/CatOrgStructure',
                data: queryStringToJSON(slpitQueryEntity($("#form_Hre_Cat_OrgStructure").serialize())),
                dataType: 'json',
                async: false,
                success: function (data) {

                    if (data.ActionStatus == "Success") {
                        ReloadParentTreeViewDropdown();
                        ShowNotificationProcessor(data.ActionStatus);
                        var window = $("#windowOrgStructureDetail").data("kendoWindow");
                        window.refresh().close();
                        return;
                    } else {

                        ShowNotificationProcessor(data.ActionStatus);
                        var window = $("#windowOrgStructureDetail").data("kendoWindow");
                        window.refresh().close();
                    }
                }
            });
            @*var rs = onSaveAndClose($('#form_Hre_Cat_OrgStructure'), '@_hrm_Hre_Service', 'api/CatOrgStructure/', 'grid_Cat_OrgStructure', 'windowOrgStructure');
            if(rs == true){
                ShowNotificationProcessor("Thông Báo", "Thao Tác Thành Công", "k-block k-success-colored");
            }
            return;*@
            return;
        }
        ShowNotification('Thông Báo', '[@ConstantDisplay.OrderNumber.TranslateString()] ' + '@Html.Raw(ConstantMessages.Required.TranslateString())', "k-block k-info-colored");


        return false;
    }
    function onSaveDataPopUp() {

        var _orderNumber = document.getElementById("ProfileOrgStructureInfo_OrderNumber");
        if (!_orderNumber.value == "") {

            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + 'api/CatOrgStructure',
                data: queryStringToJSON(slpitQueryEntity($("#form_Hre_Cat_OrgStructure").serialize())),
                dataType: 'json',
                async: false,
                success: function (data) {

                    if (data.ActionStatus == "Success") {
                        ShowNotificationProcessor(data.ActionStatus);
                        ReloadParentTreeViewDropdown();
                        return;
                    } else {
                        ShowNotificationProcessor(data.ActionStatus);
                    }
                }
            });
            @*onlySave($('#form_Hre_Cat_OrgStructure'), '@_hrm_Hre_Service', 'api/CatOrgStructure/', 'grid_Cat_OrgStructure');
            if (rs == true) {
                ShowNotificationProcessor("Thông Báo", "Thao Tác Thành Công", "k-block k-success-colored");
            }
            return false;*@
            return;
        }
        ShowNotification('Thông Báo', '[@ConstantDisplay.OrderNumber.TranslateString()] ' + '@Html.Raw(ConstantMessages.Required.TranslateString())', "k-block k-info-colored");


        //   if (!checkDuplicationCode()) {
        return false;
        // }
    }
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Hre_Cat_OrgStructure" }))
{
    @Html.HiddenFor(model => model.ID)

    <table>
        <tr>
            <td>
                <div class="hrm_box">
                    <div id="div6">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.Code)
                        </div>
                        <div class="FieldValue">
                            @{
    var _OrgstructureCode = new TextBoxBuilderInfo()
    {
        Name = "ProfileOrgtructureInfo_Code",
    };
    if (Model != null)
    {
        _OrgstructureCode.Value = Model.Code == null ? string.Empty : Model.Code;
    }
                            }
                            @(Html.VnrTextBoxFor(model => model.Code, _OrgstructureCode))
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.OrgStructureName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.OrgStructureName)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.OrgStructureNameEN)
                        </div>
                        <div class="FieldValue">
                            @(Html.VnrTextBoxFor(model => model.OrgStructureNameEN))
                        </div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.OrgStructureTypeID)
                        </div>
                        <div class="FieldValue">
                            @{
    var mts1 = new MultiSelectBuilderInfo()
    {
        Name = "ProfileOrgtructureInfo_OrgStructureTypeID",
        DataTextField = CatOrgStructureModel.FieldNames.OrgStructureTypeName,
        DataValueField = CatOrgStructureModel.FieldNames.ID,
        Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiOrgStructureType",
        Placeholder = ConstantDisplay.HRM_Category_SelectOrgStructureType.TranslateString(),
        MaxSelectedItems = 1,
        Autobind = true,
        Value = new string[] { @Html.DisplayFor(mode => mode.OrgStructureTypeID).ToString() }
    };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.OrgStructureTypeID, mts1))
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div7">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.IsRoot)
                        </div>
                        <div class="FieldValue">
                            @(Html.EditorFor(model => model.IsRoot))
                        </div>
                    </div>
                    <div id="div6">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.ParentID)
                        </div>
                        <div class="FieldValue">
                            @*@Html.Partial("EditorTemplates/OrgStructureTreeViewDropdownForCreate")*@
                            @{
    var org = new TreeViewDropdDownBuilderInfo()
    {
        Name = "OrgStructure_Parent",
        Value = Model == null ? string.Empty : Model.OrgStructureParentName,
        SetFieldID = "ParentID",
        SetFieldName = "ParentID",
        IsShowCheckBox = false,
    };
                            }

                            @*@Html.Partial("EditorTemplates/OrgStructureTreeViewNoCheckbox")*@
                            @Html.Partial("EditorTemplates/OrgTreeViewDropDown", org)
                            @Html.HiddenFor(model => model.ParentID)
                            @Html.HiddenFor(model => model.OrgStructureID)
                            @Html.HiddenFor(model => model.OrgStructureName)

                        </div>
                    </div>
                    @*<div id="div4">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.OrderNumber)
                        </div>
                        <div class="FieldValue">
                            @{
    var OrderNumber = new NumericTextBoxBuilderInfo<int>()
    {
        Name = "ProfileOrgStructureInfo_OrderNumber",
        Format = "n0"
    };
                            }
                            @(Html.VnrNumericTextBoxFor(model => model.OrderNumber, OrderNumber))
                        </div>
                        <div style="clear: both;"></div>
                    </div>*@
                    
                    <div id="div4">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.GroupCostCentreID)
                        </div>
                        <div class="FieldValue">
                            @{
    var CostCentreName = new ComboBoxBuilderInfo()
     {
         DataTextField = "CostCentreName",
         DataValueField = "ID",
         Url = _hrm_Hre_Service + "Cat_GetData/GetMultiCostCentre",
         StyleCss = "width:200px;",
     };
    if (Model != null)
    {
        CostCentreName.Value = Model == null ? string.Empty : Model.GroupCostCentreID.ToString();
    }
                            }
                            @(Html.VnrComboBoxFor(mode => mode.GroupCostCentreID, CostCentreName).Text(Model == null ? string.Empty : Model.CostCentreName))
                        </div>
                    </div>
                </div>

                <div class="hrm_box">
                    <div id="div13">
                        <div class="FieldTitle170">
                            @Html.VnrLabelForNoneIcon(model => model.Phone)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.Phone)
                        </div>
                    </div>
                    <div id="div13">
                        <div class="FieldTitle170">
                            @Html.VnrLabelForNoneIcon(model => model.Fax)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.Fax)
                        </div>
                    </div>
                    <div id="div13">
                        <div class="FieldTitle170">
                            @Html.VnrLabelForNoneIcon(model => model.Website)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.Website)
                        </div>
                    </div>
                    <div id="div13">
                        <div class="FieldTitle170">
                            @Html.VnrLabelForNoneIcon(model => model.Email)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.Email)
                        </div>
                    </div>
                    <div id="div8">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.Description)
                        </div>
                        <div class="FieldValue" style="height:77px;">
                            @(Html.VnrTextAreaFor(model => model.Description))
                        </div>
                    </div>
                </div>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle170">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-ProfileOrgStructure", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-ProfileOrgStructure", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-ProfileOrgStructure", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>

                </div>
            </td>
        </tr>
    </table>
}

<!-- Gán giá trị cho cây phòng ban khi edit -->
@if (Model != null)
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#TreeViewDropDownInput").val('@Model.OrgStructureParentName');
            $("#OrgStructureID").val('@Model.OrgStructureID');
            @*$("#ParentID").val('@Model.ParentID');*@
            if ($("#OrgID").val() == "00000000-0000-0000-0000-000000000000") {
                $("#ParentID").val($("#OrgID").val());
            } else {

                $("#ParentID").val('@Model.ParentID');
            }

            @*var treeview = $("#treeviewOrg").data("kendoTreeView");
            var getitem = treeview.dataSource.get('@Model.OrgStructureID');
            treeview.findByUid(getitem.uid);
            var selectitem = treeview.findByUid(getitem.uid);
            treeview.select(selectitem);*@
        });
        $('#@ConstantDisplay.HRM_HR_GeneralProfile_H_IdProfile').val('@Model.ID');

    </script>
}

@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Category.Models.Cat_UnitPriceModel

@{
    Layout = null;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

}
<script>
    SetFieldRequired();

    function onSaveNew() {
        onSaveAndContinue($('#form_cat_UnitPrice'), '@_hrm_Hr_Service', 'api/Cat_UnitPrice/', '@ConstantControlName.HRM_Category_UnitPrice_Grid_Name', '@ConstantControlName.HRM_Category_UnitPrice_PopUp_Name'); return false;
    }

    function onSaveClose() {
        onSaveAndClose($('#form_cat_UnitPrice'), '@_hrm_Hr_Service', 'api/Cat_UnitPrice/', '@ConstantControlName.HRM_Category_UnitPrice_Grid_Name', '@ConstantControlName.HRM_Category_UnitPrice_PopUp_Name'); return false;
    }
    function onSaveDataPopUp() {
        onlySave($('#form_cat_UnitPrice'), '@_hrm_Hr_Service', 'api/Cat_UnitPrice/', '@ConstantControlName.HRM_Category_UnitPrice_Grid_Name'); return false;
    }

    @*function showJobType(e) {
        var _roleID = e.sender._old;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Cat_GetData/GetJobTypeNameByRoleID",
            data: { roleid: _roleID },
            dataType: 'json',
            asyns: false,
            success: function (data) {
                debugger;
                var jobtypenamemulti = $("#UnitPriceInfo_JobTypeID").data("kendoComboBox");
                jobtypenamemulti.setDataSource(data);
                jobtypenamemulti.refresh();
            }
        });

    }*@
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_UnitPrice" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150" style="width: 110px;">
                        @Html.VnrLabelFor(mode => mode.RoleID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _RoleID = new ComboBoxBuilderInfo()
    {
        StyleCss = "width:300px",
        Name = "UnitPriceInfo_RoleID",
        DataTextField = "RoleName",
        DataValueField = "ID",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRole",
        //EventChange = "showJobType"
    };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.RoleID, _RoleID).Text(Model != null && Model.RoleName != null?Model.RoleName.ToString():string.Empty))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150" style="width: 110px;">
                        @Html.VnrLabelFor(mode => mode.JobTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _JobTypeID = new ComboBoxBuilderInfo()
     {
         StyleCss = "width:300px",
         Name = "UnitPriceInfo_JobTypeID",
         DataTextField = "JobTypeName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiJobType"
     };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.JobTypeID, _JobTypeID).Text(Model != null && Model.JobTypeName != null?Model.JobTypeName.ToString():string.Empty))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150" style="width: 110px;">
                        @Html.VnrLabelFor(mode => mode.Amount)
                    </div>
                    <div class="FieldValue">
                        @{
    var _Amount = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
                                Name = "UnitPriceInfo_Amount",
                                Format = ConstantFormat.HRM_Format_Int,
                            };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.Amount, _Amount))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150" style="width: 110px;">
                        @Html.VnrLabelFor(mode => mode.Date)
                    </div>
                    <div class="FieldValue">
                        @{
    var _Date = new DatePickerBuilderInfo()
    {
        Name = "UnitPriceInfo_Date",
        StyleCss="width:120px"
    };
                        }
                        @Html.VnrDatePickerFor(model => model.Date, _Date)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150" style="width: 110px;">
                        @Html.VnrLabelFor(mode => mode.Note)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Note, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150" style="width: 110px;"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-UnitPrice", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-Cat_UnitPrice", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-Cat_UnitPrice", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}
@*<div>
    @{
        if (Model != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var _roleid = $("#UnitPriceInfo_RoleID").val();
                        $.ajax({
                            type: 'POST',
                            url: '@_hrm_Hr_Service' + "Cat_GetData/GetJobTypeNameByRoleID",
                            data: { roleid: _roleid },
                            dataType: 'json',
                            asyns: false,
                            success: function (data) {
                                var jobtypenamemulti = $("#UnitPriceInfo_JobTypeID").data("kendoComboBox");
                                jobtypenamemulti.setDataSource(data);
                                jobtypenamemulti.refresh();
                            }
                        });
                });
            </script>
        }

    }
</div>*@
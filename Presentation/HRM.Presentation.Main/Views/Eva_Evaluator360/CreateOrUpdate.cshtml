@using System.Collections
@using HRM.Infrastructure.Security
@using HRM.Presentation.Evaluation.Models
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Infrastructure.Utilities

@model Eva_EvaluatorModel
@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    string gridName = "gridEva_Evaluator";
    var profileID = Guid.Empty;
    string valuePerformanceTemplateName = string.Empty;
    var valuePerfromanceTemplateId = string.Empty;
    var performanceTypeID = Guid.Empty;
    if (Model != null)
    {
        profileID = Model.ProfileID ?? Guid.Empty;
        performanceTypeID = Model.PerformanceTypeID ?? Guid.Empty;
        valuePerformanceTemplateName = Model.PerformanceTemplateName;
        valuePerfromanceTemplateId = Model.PerformanceTemplateID.ToString();
    }

    IEnumerable profileEntity = new string[] { };
    IEnumerable performanceTypeEntity = new string[] { };
    IEnumerable evaluatorEntity = new string[] { };
    if (Model != null)
    {
        profileEntity = new[] { new { ID = Model.ProfileID, ProfileName = Model.ProfileName } };
        performanceTypeEntity = new[] { new { ID = Model.PerformanceTypeID, PerformanceTypeName = Model.PerformanceTypeName } };
        evaluatorEntity = new[] { new { ID = Model.EvaluatorID, ProfileName = Model.EvaluatorName } };
    }

}

<script language="javascript">
    var performanceTemplateID1 = "#PerformanceTemplateID1";
    var gridName = '@gridName';
    var selectedIds = [];
    SetFieldRequired();
    function PerformanceType_Changing() {
        var performanceTypeID = $("#PerformanceTypeID").val();
        $(performanceTemplateID1).data("kendoComboBox").value(null); //clear selected value
        $.ajax({
            url: '@_hrm_Hr_Service' + "Eva_GetData/GetMultiPerformanceTemplate?performanceTypeID=" + performanceTypeID,
            type: 'Get',
            success: function (data) {
                $(performanceTemplateID1).kendoComboBox({
                    dataTextField: "TemplateName",
                    dataValueField: "ID",
                    change: template_Changing,
                    dataSource: data
                });
            }
        });

        ReadGrid(gridName);
    }

    function template_Changing() {
        var performanceTemplateID = $("#PerformanceTemplateID1").data("kendoComboBox");
        var performanceTemplateValue = performanceTemplateID.value();
        $("#PerformanceTemplateID").val(performanceTemplateValue);

    }


    $(document).ready(function () {
        var dataTemplate = [{ TemplateName: '@Html.Raw(valuePerformanceTemplateName)', ID: '@valuePerfromanceTemplateId' }];
        var cmbPerformanceTemplate = $(performanceTemplateID1).kendoComboBox({
            dataTextField: "TemplateName",
            dataValueField: "ID",
            change: template_Changing,
            value: '@Html.Raw(valuePerformanceTemplateName)',
            dataSource: dataTemplate
        });

    });

    function Empty() {
        $("#"+gridName).data("kendoGrid").dataSource.data([]);
        $("#EvaluatorIDs").data("kendoMultiSelect").value('@Guid.Empty');
        $("#PerformanceTypeID").data("kendoMultiSelect").value('@Guid.Empty');
        $("#ProfileID").data("kendoMultiSelect").value('@Guid.Empty');
        $("#OrderNo").data("kendoNumericTextBox").value(null);

    }
    function evaluator_changing() {

        var displayedData = $("#" + gridName).data("kendoGrid").dataSource.data();
        var orderNo = 0;
        for (var i = 0; i < displayedData.length; i++) {
            if (displayedData[i].OrderNo > orderNo) {
                orderNo = displayedData[i].OrderNo;
            }
        }
        orderNo = orderNo + 1;
        var numOrderNo = $("#OrderNo").data("kendoNumericTextBox");
        if (numOrderNo != undefined) {
            numOrderNo.value(orderNo);
        }
    }
    function CheckDulicateOrderNo(obj)
    {

        var listdata = $("#"+gridName).data("kendoGrid").dataSource.data();
        for (var i = 0; i < listdata.length; i++)
        {
            if (listdata[i].OrderNo == obj)
            {
                return false;
            }
        }
        return true;
    }



    //Thêm
    $('#btnCreateEvaEvaluator1').click(function (e) {   
      $.ajax({
          url: '@hrm_Main_Web' + 'Eva_Evaluator360/Create',
          data: $("form").serialize(),
          type: 'POST',
          traditional:true,
          success: function (data) {
              $('#ID').val(data);
              if (data.ActionStatus == "" || data.ActionStatus==null) {
                  $("#EvaluatorIDs").data("kendoMultiSelect").value('@Guid.Empty');                  
                  ShowNotificationProcessor("Thêm Mới Thành Công");
                  ReadGrid(gridName);
                  return;
              }
              else {
                  ShowNotificationProcessor(data.ActionStatus);
                  return;
              }
          },
          error: function (data) {
                ShowNotificationProcessor("error,Thêm Mới Thất Bại");
          }
      });
        
    });


    //Lấy dữ liệu khi tìm kiếm
    function filterFieldInfo() {
        return {
            ProfileID: $('#@Html.FieldIdFor(model => model.ProfileID)').val() == null ? null : $('#@Html.FieldIdFor(model => model.ProfileID)').val().join(','),
            PerformanceTypeID: $("#PerformanceTypeID").val() == null ? null : $("#PerformanceTypeID").val().join(',')
        };
    }

    //Xóa
    $('#btnDelete1').click(function (e) {
        var isAccess = checkPermission(PrivilegeType.Delete, '@ConstantPermission.Eva_Evaluator360');
        if (!isAccess) {
            return;
        }

        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        DeleteSelected(gridName, '@hrm_Main_Web' + "Eva_Evaluator360/RemoveSelected/", selectedIds.join(","));
    });

    function onSaveEvaluator(e) {
       //goi tu edit tren luoi
    }


</script>




<div>
    <div>
        <table style="width:100%">
            <tbody>
                <tr>
                    <td valign="top">
                        <div style="display: block; padding-top: 10px;">
                            <div style="float: left; padding-right: 10px">
                                <div id="dvProfileID">
                                    <div class="FieldTitle">
                                        @Html.HiddenFor(m => m.PerformanceTemplateID)
                                        @Html.VnrLabelFor(mode => mode.ProfileID)
                                        @*@Html.HiddenFor(mode => mode.ID)*@
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var multiSelectProfileID = new MultiSelectBuilderInfo()
                                            {
                                                Name = "ProfileID",
                                                DataTextField = "ProfileName",
                                                DataValueField = "ID",
                                                MaxSelectedItems = 1,
                                                Url = _hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                                                Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                                //EventChange = "profile_Changing",
                                                Value = profileEntity,
                                                Width = 250
                                            };
                                        }
                                        @Html.VnrMultiSelectFor(mode => mode.ProfileID, multiSelectProfileID)
                                    </div>
                                </div>

                            </div>
                            <div style="float: left;">
                                <div>
                                    <div class="FieldTitle">
                                        @ConstantDisplay.HRM_Evaluation_Tag.TranslateString()
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var multiSelectTagID = new MultiSelectBuilderInfo()
                                            {
                                                Name = "PerformanceTypeID",
                                                DataTextField = "PerformanceTypeName",
                                                DataValueField = "ID",
                                                MaxSelectedItems = 1,
                                                EventChange = "PerformanceType_Changing",
                                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiPerformanceType",
                                                Placeholder = ConstantDisplay.HRM_Evaluation_SelectTagEva.TranslateString(),
                                                Width = 300,
                                                Value = performanceTypeEntity
                                            };
                                        }
                                        @Html.VnrMultiSelectFor(p => p.PerformanceTypeID, multiSelectTagID)
                                    </div>
                                </div>

                                <div id="dvPerformanceTemplateID">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.PerformanceTemplateID)
                                    </div>
                                    <div class="FieldValue">
                                        <input id="PerformanceTemplateID1" style="width: 300px;"></input>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </td>
                    <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div style=" display: block; padding-top: 10px; ">
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Evaluation_Evaluator.TranslateString()
            </legend>


            <div class="commandToolBarWidge" id="anchor">
                <div style="float:left">
                    <div style="float:left;" id="dvPerformanceTypeID">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.EvaluatorID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var multiSelectEvaluatorID = new MultiSelectBuilderInfo()
                                {
                                    Name = "EvaluatorIDs",
                                    DataTextField = "ProfileName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                                    Placeholder = ConstantDisplay.HRM_Evaluation_SelectEvaluator.TranslateString(),
                                    MaxSelectedItems = 10,
                                    EventChange = "evaluator_changing",
                                    //Value = evaluatorEntity,
                                    Width = 250
                                };
                            }
                            @Html.VnrMultiSelectFor(mode => mode.EvaluatorIDs, multiSelectEvaluatorID)
                        </div>
                    </div>
                    <div style="float:left;padding-left:5px;" id="dvPerformanceTypeID">
                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateEvaEvaluator1", Content = ConstantAction.HRM_Common_Add.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
                    </div>

                </div>

                <div style="float:right">
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete1", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
                </div>
                <div class="clear"></div>
            </div>

            <div>
                <!--Khai báo các thông tin cho Grid-->
                @{
                    string[] valueFields = new[]
                    {
                        Eva_EvaluatorModel.FieldNames.ProfileName,
                        Eva_EvaluatorModel.FieldNames.PerformanceTypeName,
                        Eva_EvaluatorModel.FieldNames.EvaluatorName,
                        Eva_EvaluatorModel.FieldNames.Rate,
                    };

                    var sizeFields = new Dictionary<string, int>()
                    {
                        {Eva_EvaluatorModel.FieldNames.ProfileName,200},
                        {Eva_EvaluatorModel.FieldNames.PerformanceTypeName,180},
                        {Eva_EvaluatorModel.FieldNames.EvaluatorName,150},
                        {Eva_EvaluatorModel.FieldNames.Rate,100},
                    };

                    var filterable = new Dictionary<string, bool>()
                    {
                        {Eva_EvaluatorModel.FieldNames.ProfileName,true},
                        {Eva_EvaluatorModel.FieldNames.PerformanceTypeName,true},
                        {Eva_EvaluatorModel.FieldNames.EvaluatorName,true},
                        {Eva_EvaluatorModel.FieldNames.Rate,true},
                    };

                    var displayFields = new Dictionary<string, string>()
                    {
                        {Eva_EvaluatorModel.FieldNames.ProfileName,ConstantDisplay.HRM_Evaluation_Evaluator_ProfileName},
                        {Eva_EvaluatorModel.FieldNames.PerformanceTypeName,ConstantDisplay.HRM_Evaluation_Tag},
                        {Eva_EvaluatorModel.FieldNames.EvaluatorName,ConstantDisplay.HRM_Evaluation_Evaluator_EvaluatorName},
                        {Eva_EvaluatorModel.FieldNames.Rate,ConstantDisplay.HRM_Evaluation_Evaluator_Rate},
                    };

                    var grid = new GridBuilderInfo
                    {
                        Name = gridName,
                        ValueFields = valueFields,
                        DisplayFields = displayFields,
                        SizeFields = sizeFields,
                        ShowCommand = true,
                        ShowEditButton = true,
                        ShowEditIcon = false,
                        EditActionUrl = hrm_Main_Web + "/Eva_Evaluator360/Create/",
                        AutoBind = true,
                        EditMode = GridEditMode.InLine,
                        ReadActionUrl = _hrm_Hr_Service + "Eva_GetData/GetEvaluatorOfProfileList/",
                        ReadData = "filterFieldInfo",
                    };
                }

                @(Html.VnrGrid<Eva_EvaluatorModel>(grid).Events(e => e.Save("onSaveEvaluator"))
                                  .HtmlAttributes(new { style = "height:400px" })
                                  .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .Model(model => model.Field(o => o.ProfileName).Editable(false))
                                  .Model(model => model.Field(o => o.PerformanceTypeName).Editable(false))
                                  .Model(model => model.Field(o => o.EvaluatorName).Editable(false))
                                  )
                )
            </div>
        </fieldset>
    </div>
</div>

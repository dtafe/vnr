@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models
@using HRM.Presentation.Training.Models
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Category.Models.Cat_TopicModel
@{
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
}

<script>
    $("input[name=IsComplex]").on('change', function () {
        var radioItem = $("input[name=IsComplex]");
        for (var i = 0; i < radioItem.length; i++) {
            if (radioItem[i].checked) {
                $("#contentTopic").show();
                $("#contentFormula").show();
                $("#contentGrid").show();
                radioItem[i].value = true;
            }
            else {
                $("#contentTopic").hide();
                $("#contentFormula").hide();
                $("#contentGrid").hide();
                radioItem[i].value = false;
            }
        }
    });
    //var Validator = CheckValidate();
    SetFieldRequired();

    function onSave() {
        //  if (CheckValidate(data)) {
        onSaveAndContinue($('#form_Cat_Topic'), '@_hrm_Hre_Service', 'api/Cat_Topic/', '@ConstantControlName.HRM_Cat_Topic_Grid_Name', '@ConstantControlName.HRM_Cat_Topic_PopUp_Name');
        // }
        return false;
    }

    function onSaveClose() {
        //  if (CheckValidate(data)) {
        onSaveAndClose($('#form_Cat_Topic'), '@_hrm_Hre_Service', 'api/Cat_Topic/', '@ConstantControlName.HRM_Cat_Topic_Grid_Name', '@ConstantControlName.HRM_Cat_Topic_PopUp_Name');
        // }
        return false;
    }
    function onSaveDataPopUp() {

        //    if (CheckValidate(data)) {
        //   if (!checkDuplicationCode()) {
        onlySave($('#form_Cat_Topic'), '@_hrm_Hre_Service', 'api/Cat_Topic/', '@ConstantControlName.HRM_Cat_Topic_Grid_Name'); return false;
        //    }
        // }
    }

</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_Topic" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.Code)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.TopicName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.TopicName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.CertificateID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _CertificateID = new ComboBoxBuilderInfo()
    {
        Name = "TopicInfo_CertificateID",
        DataTextField = "CertificateName",
        DataValueField = "ID",
        Url = _hrm_Hre_Service + "Tra_GetData/GetMultiCertificate"
    };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CertificateID, _CertificateID).Text(Model != null && Model.CertificateName != null ? Model.CertificateName.ToString() : string.Empty))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.MinimumScore)
                    </div>
                    <div class="FieldValue">
                        @{
    var MinimumScore = new NumericTextBoxBuilderInfo<double>()
    {
        Name = "TopicInfo_MinimumScore"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.MinimumScore, MinimumScore))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.MaximumScore)
                    </div>
                    <div class="FieldValue">
                        @{
    var MaximumScore = new NumericTextBoxBuilderInfo<double>()
    {
        Name = "TopicInfo_MaximumScore"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.MaximumScore, MaximumScore))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Description)
                    </div>
                </div>
                <div id="div2">
                    <div class="FieldTitle170">
                        @Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_Training_Title.TranslateString())
                    </div>
                    <div class="FieldValue">
                        @Html.VnrRadioButtonFor(mode => mode.IsNormal, "IsComplex")
                        @Html.VnrLabelFor(mode => mode.IsNormal)

                        @Html.VnrRadioButtonFor(mode => mode.IsComplex, "IsComplex")
                        @Html.VnrLabelFor(mode => mode.IsComplex)
                    </div>
                    <div id="contentTopic" hidden="hidden">
                        <div id="div2">
                            <div class="FieldTitle170">
                                @Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_Training_AddFormula.TranslateString())
                            </div>
                            <div class="FieldValue">
                                @Html.VnrRadioButtonFor(mode => mode.IsTypeHandleFomular, "IsTypeHandleFomularAuto")
                                @Html.VnrLabelFor(mode => mode.IsTypeHandleFomular)

                                <div>
                                    @Html.VnrRadioButtonFor(mode => mode.IsTypeHandleFomularAuto, "IsTypeHandleFomularAuto")
                                    @Html.VnrLabelFor(mode => mode.IsTypeHandleFomularAuto)
                                </div>

                                @Html.HiddenFor(mode => mode.TypeHandleFomular)
                            </div>
                        </div>
                        <div id=" div1">
                            <div class="FieldTitle170">
                                @Html.VnrLabelFor(mode => mode.ScoreTypeID)
                            </div>
                            <div class="FieldValue">
                                @{
    var _TopicID = new ComboBoxBuilderInfo()
    {
        DataTextField = "ScoreTypeName",
        DataValueField = "ID",
        Url = _hrm_Hre_Service + "Cat_GetData/GetMultiScoreType",
        ServerFilter = true,
        StyleCss = "width:200px"
    };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.ScoreTypeID, _TopicID))
                                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate_TraCourseScoreType", Content = ConstantAction.HRM_Common_Add_Topic.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
                            </div>
                        </div>
                    </div>
                    <div id="contentFormula" hidden="hidden">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.Formula)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextAreaFor(mode => mode.Formula)
                        </div>
                    </div>
                </div>
                <div id="contentGrid1" hidden="hidden" style="width: 690px">
                    <div class="commandToolBarWidge">
                        <div class="GridTitle">
                            @Html.VnrLabel(ConstantDisplay.HRM_Training_TopicList.TranslateString())
                        </div>
                    </div>
                    <div>
                        <!--Khai báo các thông tin cho Grid-->
                        @{
    var valueFieldsClass = new[]
                        {

                            Tra_ScoreTypeModel.FieldNames.Code,
                            Tra_ScoreTypeModel.FieldNames.ScoreTypeName,
                        };

    var sizeFieldsClass = new Dictionary<string, int>()
                        {

                            {Tra_ScoreTypeModel.FieldNames.Code, 100},
                            {Tra_ScoreTypeModel.FieldNames.ScoreTypeName, 130},

                        };

    var filterableClass = new Dictionary<string, bool>()
    {
    };

    var displayFieldsClass = new Dictionary<string, string>()
                        {
                            {Tra_ScoreTypeModel.FieldNames.Code, ConstantDisplay.HRM_Tra_ScoreType_Code},
                            {Tra_ScoreTypeModel.FieldNames.ScoreTypeName, ConstantDisplay.HRM_Tra_ScoreType_ScoreTypeName},
                        };

    var grid_CourseTopic = new GridBuilderInfo
    {

        Name = "grid_CourseTopic_info",
        ValueFields = valueFieldsClass,
        SizeFields = sizeFieldsClass,
        DisplayFields = displayFieldsClass,
        ReadActionUrl = _hrm_Hre_Service + "Tra_GetData/GetScoreTypeByCourseIDList",
        AutoBind = true,
        ShowDeleteButton = true,
        GridHeight = 220,
        ShowCheckAll = false,
        // ForeignKey = foreignKey,
        ShowEditIcon = false,
        ReadData = "filterFieldInfo"
    };
                        }
                        @(Html.VnrGrid<Tra_ScoreTypeModel>(grid_CourseTopic))
                    </div>
                </div>

                <div>
                    @{
    if (Model != null)
    {
        <script>
            $(document).ready(function () {
                debugger;
                var _outValue = '@Model.IsComplex';
                var _inValue = '@Model.IsNormal';
                var _IsTypeHandleFomularValue = '@Model.IsTypeHandleFomular';
                var _IsTypeHandleFomularAutoValue = '@Model.IsTypeHandleFomularAuto';
                var _IsTypeHandleFomular = document.getElementById("IsTypeHandleFomular");
                var _IsTypeHandleFomularAuto = document.getElementById("IsTypeHandleFomularAuto");
                var _out = document.getElementById("IsComplex");
                var _in = document.getElementById("IsNormal");
                if (_outValue == "False") {
                    _out.checked = false;
                } else {
                    $("#contentTopic").show();
                    $("#contentFormula").show();
                    $("#contentGrid").show();
                    _out.checked = true;
                }
                if (_inValue == "True") {
                    $("#contentTopic").hide();
                    $("#contentFormula").hide();
                    $("#contentGrid").hide();
                    _in.checked = true;
                } else {
                    _in.checked = false;
                }
                if (_IsTypeHandleFomularValue == "False") {
                    _IsTypeHandleFomular.checked = false;
                } else {
                    _IsTypeHandleFomular.checked = true;
                }
                if (_IsTypeHandleFomularAutoValue == "True") {
                    _IsTypeHandleFomularAuto.checked = true;
                } else {
                    _IsTypeHandleFomularAuto.checked = false;
                }

            });
        </script>
    }
                    }
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle170">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-CatTopic", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-CatTopic", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-CatTopic", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}


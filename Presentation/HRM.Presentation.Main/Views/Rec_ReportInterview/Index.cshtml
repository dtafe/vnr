@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.Recruitment.Models
@using HRM.Presentation.Main.Controllers
@using HRM.Presentation.UI.Controls.Kendo
@model Rec_ReportInterviewSearchModel

@{
    ViewBag.Title = "ReportInterview Index";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    Layout = null;
    IList<SelectListItem> listGender = Enum.GetValues(typeof(EnumDropDown.Gender))
   .Cast<EnumDropDown.Gender>()
   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(P => P.Text)
   .ToList();

}
@Html.Hidden("Screen", screen)

<style>
    .k-state-selected {
        color: #fff !important;
        background-color: #5A83B1 !important;
        border-color: #5A83B1 !important;
    }
</style>
<script>
    var checkedNodes = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        debugger;

        var _DateFrom = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val());
        var _DateTo = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val());
        var orgStructureID = checkedNodes.join(',');
        var dataParameter = {
            OrgStructureID: orgStructureID,
            Gender: $('#@Html.FieldIdFor(model => model.Gender)').val(),
            JobVacancyID: $("#SJobVacancyID").val(),
            CodeCandidate: $('#@Html.FieldIdFor(model => model.CodeCandidate)').val(),
            RankID: $("#SRankID").val(),
            DateFrom: _DateFrom,
            DateTo: _DateTo,
            LevelInterview: $('#@Html.FieldIdFor(model => model.LevelInterview)').val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
        };
        debugger;
        if (isExport == true) {
            dataParameter["ExportId"] = $('#ddlScreenName').val();
        }

        return dataParameter;
    }
    $(document).ready(function () {
        //Xử lý sự kiện click button tìm kiếm
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
            isCreateTemplate = false;
            isCreateTemplateForDynamicGrid = false;
            var grid = $('#gridRec_ReportInterview').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
            checkedNodes = [];
        });
        ShowHidePanel();
    });

    $("#btnCreateTemplate").click(function () {
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = false;
        CreateTemplate('@_hrm_Hr_Service' + "Rec_GetData/GetExportReportInterviewListByTemplate", filterFieldInfo(true));


    });
    $("#btnExport").click(function () {
        //showAjaxLoading()
        var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Rec_ReportInterview');
        if (!isAccess) {
            return;
        }
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = true;
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Rec_GetData/GetExportReportInterviewListByTemplate/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload);
        checkedNodes = [];
        //hideAjaxLoading()
    });




</script>
<div id="grid_Demo"></div>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <form action="#" method="POST" id="form-search">
                    <div>
                        <div class="hrm_box">
                            <div id="div3">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.CodeCandidate)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.CodeCandidate, "width:204px")
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div id="div5">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Gender)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var gender = new DropDownListBuilderInfo()
                                        {
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = listGender,
                                            OptionLabel = ConstantDisplay.HRM_Category_SelectGender.TranslateString(),
                                        };
                                    }
                                    @Html.VnrDropDownListFor(model => model.Gender, gender)
                                </div>
                            </div>
                            <div id="div4">
                                <div class="FieldTitle150">
                                    <label>
                                        @Html.VnrLabel(ConstantDisplay.HRM_Rec_Candidate_JobVacancyIDs.TranslateString())
                                    </label>
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _JobVacancyID = new DropDownListBuilderInfo
    {
        Name = "SJobVacancyID",
        DataTextField = "JobVacancyName",
        DataValueField = "ID",
        Url = @_hrm_Hre_Service + "Rec_GetData/GetMultiJobVacancy",
    };
                                    }
                                    @Html.VnrDropDownListFor(mode => mode.JobVacancyID, _JobVacancyID)
                                </div>
                            </div>
                        </div>
                        <div class="hrm_box">

                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.RankID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _RankID = new DropDownListBuilderInfo()
                                        {
                                            Name = "SRankID",
                                            DataValueField = "ID",
                                            DataTextField = "NameEntityName",
                                            Url = _hrm_Hre_Service + "Cat_GetData/GetMultiRank",
                                            OptionLabel = ConstantDisplay.HRM_Rec_JobCondition_SelectRank.TranslateString(),
                                        };
                                    }
                                    @Html.VnrDropDownListFor(model => model.RankID, _RankID)
                                </div>
                            </div>
                            <div id="div14">
                                <div class="FieldTitle150">
                                    <b>
                                        @ConstantDisplay.HRM_Rec_Candidate_DateExam.TranslateString()
                                    </b>
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var dateFrom = new DatePickerBuilderInfo()
                                        {
                                            StyleCss = "width:100px;",
                                            Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.DateFrom, dateFrom)
                                    @{
                                        var dateTo = new DatePickerBuilderInfo()
                                        {
                                            StyleCss = "width:100px;",
                                            Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.DateTo, dateTo)
                                </div>
                            </div>

                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(model => model.LevelInterview)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _LevelInterview = new NumericTextBoxBuilderInfo<int>()
                                        {
                                            StyleCss = "Width:100px"
                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(model => model.LevelInterview, _LevelInterview)
                                </div>
                            </div>

                        </div>
                        <div class="hrm_box">
                            <div id="div14">
                                <div class="FieldTitle150">
                                    @Html.VnrLabel(ConstantDisplay.HRM_HR_Profile_OrgStructureID.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    <div class="FieldValue">
                                        @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_ExportReport.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantAction.HRM_Common_CreateTemplate.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{

        var foreignkey = new Dictionary<object, object[]>()
        {
            {Rec_ReportInterviewModel.FieldNames.Gender,new object[]
                   { "Value", "Text", listGender, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},

        };


        var valueFields = new[]
            {
                Rec_ReportInterviewModel.FieldNames.CodeCandidate,
                Rec_ReportInterviewModel.FieldNames.CandidateName,
                Rec_ReportInterviewModel.FieldNames.Gender,
                Rec_ReportInterviewModel.FieldNames.IdentifyNumber,
                Rec_ReportInterviewModel.FieldNames.DateOfBirth,
                Rec_ReportInterviewModel.FieldNames.Mobile,
                Rec_ReportInterviewModel.FieldNames.Email,
                Rec_ReportInterviewModel.FieldNames.Phone,
                Rec_ReportInterviewModel.FieldNames.TAddress,
                Rec_ReportInterviewModel.FieldNames.YearGraduation,
                Rec_ReportInterviewModel.FieldNames.GraduateSchool,
                Rec_ReportInterviewModel.FieldNames.Specialisation,
                Rec_ReportInterviewModel.FieldNames.DateExam,
                Rec_ReportInterviewModel.FieldNames.Score1,
                Rec_ReportInterviewModel.FieldNames.Score3,
                Rec_ReportInterviewModel.FieldNames.Description,


            };

        var sizeFields = new Dictionary<string, int>()
            {
                {Rec_ReportInterviewModel.FieldNames.CodeCandidate,100},
                {Rec_ReportInterviewModel.FieldNames.CandidateName,140},
                {Rec_ReportInterviewModel.FieldNames.Gender,90},
                {Rec_ReportInterviewModel.FieldNames.IdentifyNumber,120},
                {Rec_ReportInterviewModel.FieldNames.DateOfBirth,80},
                {Rec_ReportInterviewModel.FieldNames.Mobile,108},
                {Rec_ReportInterviewModel.FieldNames.Email,90},
                {Rec_ReportInterviewModel.FieldNames.Phone,90},
                {Rec_ReportInterviewModel.FieldNames.TAddress,140},
                {Rec_ReportInterviewModel.FieldNames.YearGraduation,110},
                {Rec_ReportInterviewModel.FieldNames.GraduateSchool,130},
                {Rec_ReportInterviewModel.FieldNames.Specialisation,100},
                {Rec_ReportInterviewModel.FieldNames.DateExam,90},
                {Rec_ReportInterviewModel.FieldNames.Score1,80},
                {Rec_ReportInterviewModel.FieldNames.Score3,100},
                {Rec_ReportInterviewModel.FieldNames.Description,100},
            };


        var displayFields = new Dictionary<string, string>()
            {
                {Rec_ReportInterviewModel.FieldNames.CodeCandidate,ConstantDisplay.HRM_Rec_Candidate_CodeCandidate},
                {Rec_ReportInterviewModel.FieldNames.CandidateName,ConstantDisplay.HRM_Rec_Candidate_CandidateName},
                {Rec_ReportInterviewModel.FieldNames.Gender,ConstantDisplay.HRM_HR_Profile_Gender},
                {Rec_ReportInterviewModel.FieldNames.IdentifyNumber,ConstantDisplay.HRM_HR_Profile_IDNo},
                {Rec_ReportInterviewModel.FieldNames.DateOfBirth,ConstantDisplay.HRM_HR_Profile_DayOfBirth},
                {Rec_ReportInterviewModel.FieldNames.Mobile,ConstantDisplay.HRM_HR_Profile_HomePhone},
                {Rec_ReportInterviewModel.FieldNames.Email,ConstantDisplay.HRM_HR_Profile_Email},
                {Rec_ReportInterviewModel.FieldNames.Phone,ConstantDisplay.HRM_HR_Profile_CellPhone},
                {Rec_ReportInterviewModel.FieldNames.TAddress,ConstantDisplay.HRM_HR_Profile_PAddressID},
                {Rec_ReportInterviewModel.FieldNames.YearGraduation,ConstantDisplay.HRM_Rec_Candidate_YearGraduation},
                {Rec_ReportInterviewModel.FieldNames.GraduateSchool,ConstantDisplay.HRM_Rec_Candidate_GraduateSchool},
                {Rec_ReportInterviewModel.FieldNames.Specialisation,ConstantDisplay.HRM_Rec_Candidate_Specialisation},
                {Rec_ReportInterviewModel.FieldNames.DateExam,ConstantDisplay.HRM_Rec_Candidate_DateExam},
                {Rec_ReportInterviewModel.FieldNames.Score1,ConstantDisplay.HRM_Rec_Interview_Score1},
                {Rec_ReportInterviewModel.FieldNames.Score3,ConstantDisplay.HRM_Rec_Interview_Score3},
                {Rec_ReportInterviewModel.FieldNames.Description,ConstantDisplay.HRM_System_UserApprove_Notes},
            };

        var grid = new GridBuilderInfo
        {
            Name = "gridRec_ReportInterview",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            ReadActionUrl = hrm_Hr_Service + "Rec_GetData/GetReportInterviewList/",
            ReadData = "filterFieldInfo",
            ForeignKey = foreignkey,
            ShowCheckAll = false,
            ShowCheckbox = false,
            ShowEditIcon = false
        };
    }
    @(Html.VnrGrid<Rec_ReportInterviewModel>(grid))
</div>
@{
    var valueFields1 = string.Empty;
    for (int i = 0; i < valueFields.Count(); i++)
    {
        valueFields1 += "," + valueFields[i];
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
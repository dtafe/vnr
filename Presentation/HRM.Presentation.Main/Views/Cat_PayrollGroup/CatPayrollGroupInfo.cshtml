@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Category.Models.Cat_PayrollGroupModel
@{
    Layout = null;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

}

<script>
    //var Validator = CheckValidate();
    SetFieldRequired();

    function onSave() {
        //  if (CheckValidate(data)) {
        onSaveAndContinue($('#form_cat_CatPayrollGroup'), '@_hrm_Hr_Service', 'api/Cat_PayrollGroup/', '@ConstantControlName.HRM_Category_PayrollGroup_Grid_Name', '@ConstantControlName.HRM_Category_PayrollGroup_PopUp_Name');
        // }
        return false;
    }

    function onSaveClose() {
        //  if (CheckValidate(data)) {
        onSaveAndClose($('#form_cat_CatPayrollGroup'), '@_hrm_Hr_Service', 'api/Cat_PayrollGroup/', '@ConstantControlName.HRM_Category_PayrollGroup_Grid_Name', '@ConstantControlName.HRM_Category_PayrollGroup_PopUp_Name');
        // }
        return false;
    }
    function onSaveDataPopUp() {

        //    if (CheckValidate(data)) {
        //   if (!checkDuplicationCode()) {
        onlySave($('#form_cat_CatPayrollGroup'), '@_hrm_Hr_Service', 'api/Cat_PayrollGroup/', '@ConstantControlName.HRM_Category_PayrollGroup_Grid_Name'); return false;
        //    }
        // }
    }

</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_CatPayrollGroup" }))
{
    @Html.HiddenFor(model => model.ID)



    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
    var _Code = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "CatPayrollGroupInfo_Code"
    };
    if (Model != null)
    {
        _Code.Value = Model == null ? string.Empty : Model.Code;
    }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code, _Code)

                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.PayrollGroupName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.PayrollGroupName, "width: 300px")
                    </div>
                </div>


                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.SalaryDateStart)
                    </div>
                    <div class="FieldValue">
                        @{var salaryDateStart = new NumericTextBoxBuilderInfo<int>()
                          {
                              StyleCss = "width:150px",
                          };}
                        @(Html.VnrNumericTextBoxFor(model => model.SalaryDateStart, salaryDateStart))
                    </div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.SalaryMonthStart)
                    </div>
                    <div class="FieldValue">
                        @{var salaryMonthStart = new NumericTextBoxBuilderInfo<int>()
                          {
                              StyleCss = "width:150px",
                          };}
                        @(Html.VnrNumericTextBoxFor(model => model.SalaryMonthStart, salaryMonthStart))
                    </div>
                </div>

                <div id="dvReportMappingID">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.ReportMappingID)
                    </div>
                    <div class="FieldValue">
                        @{
    var mtsExport = new MultiSelectBuilderInfo()
{
    DataTextField = CatExportItemModel.FieldNames.ExportName,
    DataValueField = CatExportItemModel.FieldNames.ID,
    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiReportMapping",
    Placeholder = ConstantDisplay.HRM_Category_SelectExport.TranslateString(),
    MaxSelectedItems = 1,
    Autobind = true,
    Value = new string[] { Html.DisplayFor(mode => mode.ReportMappingID).ToString() },
    Width = 300
};

                        }
                        @(Html.VnrMultiSelectFor(model => model.ReportMappingID, mtsExport))
                    </div>
                </div>

                <div id="dvReportMappingID">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.ReportMappingID1)
                    </div>
                    <div class="FieldValue">
                        @{
    var mtsExport1 = new MultiSelectBuilderInfo()
{
    DataTextField = CatExportItemModel.FieldNames.ExportName,
    DataValueField = CatExportItemModel.FieldNames.ID,
    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiReportMapping",
    Placeholder = ConstantDisplay.HRM_Category_SelectExport.TranslateString(),
    MaxSelectedItems = 1,
    Width = 300,
    Autobind = true,
    Value = new string[] { Html.DisplayFor(mode => mode.ReportMappingID1).ToString() }
};

                        }
                        @(Html.VnrMultiSelectFor(model => model.ReportMappingID1, mtsExport1))
                    </div>
                </div>

                <div id="div4">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.OrderNumber)
                    </div>
                    <div class="FieldValue">
                        @{
    var OrderNumber = new NumericTextBoxBuilderInfo<int>()
    {
        StyleCss = "width:150px",
        //  Name = "OrgStructureInfo_OrderNumber",
        Format = "n0"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.OrderNumber, OrderNumber))
                    </div>
                   
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Description, "width:500px;height:100px;")
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-catPayrollGroup", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catPayrollGroup", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catPayrollGroup", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
    </table>
}


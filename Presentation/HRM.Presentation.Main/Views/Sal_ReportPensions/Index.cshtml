@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models
@model HRM.Presentation.Payroll.Models.Sal_ReportBasicSalaryMonthlyModel
@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;

    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;

    IList<SelectListItem> listTransfer = Enum.GetValues(typeof(EnumDropDown.Transfer))
  .Cast<EnumDropDown.Transfer>()
  .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
  .ToList();
    IList<SelectListItem> lstStatus = Enum.GetValues(typeof(EnumDropDown.StatusEmployee))
.Cast<EnumDropDown.StatusEmployee>()
.Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
.ToList();

}
@Html.Hidden("Screen", screen)

<script type="text/javascript">
    SetFieldRequired();
    var selectedIds = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        var multiselectProfileIDs = $("#ProfileIDs").data("kendoMultiSelect");
        var ProfileIDsValue = multiselectProfileIDs.value();

        var checkedNodes = [];
        var treeView = $("#OrgTreeView").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);

        var elementPara = {
            OrgStructureID: checkedNodes.join(','),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
           // DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            ProfileIDs: ProfileIDsValue.join(','),
            //ElementType: ElementTypeValue.join(','),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
            UserID: '@Session[SessionObjects.ProfileID]',
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }

    $("#btnSearch").click(function () {
        ShowHre_ProgressBar();
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        $.ajax({
            url: '@_hrm_Hr_Service' + "Sal_GetData/ReportPensions",
            type: 'POST',
            data: filterFieldInfo(false),
            datatype: 'json',
            success: function (data) {
                CloseHre_ProgressBar();
                if (data[0] != undefined && data[0] == 'error')
                {
                    Notification(data[1], '@NotificationType.Warning.ToString()');
                    return;
                }
                debugger;
                var grid = VnrGridDynamic;
                grid.GridName = "grid_ReportPensions";
                grid.ShowCheckbox = false;
                grid.DataSource = data.Data;
                VnrGridDynamicControl(grid);
            }
        });
    });

    $("#btnExport").click(function () {
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = true;
        var isAccess = checkPermission(PrivilegeType.Export, '@HRM.Infrastructure.Security.ConstantPermission.Hre_ReportHCSeniority');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + '/Sal_GetData/ReportPensions',
            data: filterFieldInfo(true),
            dataType: 'json',
            success: function (returnValue) {

                var strSplit = returnValue.indexOf(',');
                var status = "";
                var fullPath = "";
                if (strSplit > 0) {
                    status = returnValue.substring(0, strSplit);
                    if (status == "Success") {
                        fullPath = returnValue.substring(strSplit + 1, returnValue.length);
                        window.location = '@_hrm_Main_Web' + fullPath;
                        ShowNotificationProcessor(status);
                    }
                } else {
                    ShowNotificationProcessor(returnValue);
                }
                @*var url = '@_hrm_Main_Web' + returnValue;
                window.location = url;*@
            }
        });
    });

    $("#btnCreateTemplate").click(function () {

        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = true;
        CreateTemplate('@_hrm_Hr_Service' + '/Sal_GetData/ReportPensions', filterFieldInfo(true));
    });



    function DoActionData(gridName, actionURL, parameter) {

        $.ajax({
            url: actionURL,
            data: { selectedIds: parameter },
            type: 'POST',
            success: function (data) {
                selectedIds = [];
                ReadGrid(gridName);
                ShowNotificationProcessor('@Html.Raw(@ConstantDisplay.Hrm_Succeed.TranslateString())');
            },
            error: function (data) {
                alert('Lỗi hàm DoActionData trong hrm-8.0.js');
            }
        });
    }

</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div style="float:left;width:500px">
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.Label(ConstantDisplay.HRM_Category_UsualAllowanceLevel_MonthApply.TranslateString())
                        </div>
                        <div class="FieldValue">
                            @{
                                var datepickerMonthStart = new DatePickerBuilderInfo()
                                {
                                    StyleCss = "width:100px;",
                                    Placeholder = ConstantDisplay.HRM_HR_Profile_MonthFrom.TranslateString(),
                                    Format = ConstantFormat.HRM_Format_MonthYear,

                                };
                            }
                            @Html.VnrDatePickerFor(model => model.DateFrom, datepickerMonthStart)
                        </div>
                        <br />
                    </div>
                    <div id="div4">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OrgStructureID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var org = new TreeViewDropdDownBuilderInfo()
                                {
                                    Name = "OrgTreeView"
                                };
                            }
                            @Html.Partial("EditorTemplates/OrgTreeViewDropDown", org)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.ProfileIDs)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _ProfileIDs = new MultiSelectBuilderInfo
                                {
                                    DataTextField = "ProfileName",
                                    DataValueField = "ID",
                                    Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
                                    //  MaxSelectedItems = 1,
                                    Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                    Width = 300
                                };
                            }
                            @Html.VnrMultiSelectFor(mode => mode.ProfileIDs, _ProfileIDs)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Cat_Service + "Cat_GetData/GetScreenName",
                    StyleCss = "width:200px;",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)

            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
    </div>
</div>

<div id="grid_ReportPensions">

</div>





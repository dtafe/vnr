@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Attendance.Models
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Payroll.Models
@using HRM.Infrastructure.Security

@model Att_ReportAnnualDetailModel
@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    var gridN = "grid_" + controller;
    string urlGetData = _hrm_Hre_Service + "Att_GetData/ReportAnnualDetail";

    IList<SelectListItem> lstStatusEmployee = Enum.GetValues(typeof(EnumDropDown.StatusEmployee))
    .Cast<EnumDropDown.StatusEmployee>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();
    
}
@Html.Hidden("Screen", screen)

<script type="text/javascript">
    SetFieldRequired();
    var selectedIds = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        debugger;
        var ProfileIDsValue = $('#@Html.FieldIdFor(model => model.ProfileIDs)').val();

        var checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);

        var SE = $("#StatusSyn").val() != null ? $("#StatusSyn").val().join(',') : null;
        var WP = $("#WorkPlace").val() != null ? $("#WorkPlace").val().join(',') : null;
        var Year = $("#Year").val() ;

        var elementPara = {
            OrgStructureID: checkedNodes.join(','),
            @*DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),*@
            ProfileIDs: ProfileIDsValue != null ? ProfileIDsValue.join(',') : null,
            Year: Year,
            ReportName: '@controller',
            StatusSyn: SE,
            WorkPlace: WP,
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }

    $("#btnSearch").click(function () {
        ShowHre_ProgressBar();
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        $.ajax({
            url: '@urlGetData',
            type: 'POST',
            data: filterFieldInfo(false),
            datatype: 'json',
            success: function (data) {
                CloseHre_ProgressBar();
                debugger;
                if (data[0] == 'error' && data[1] != "") {
                    ShowNotificationProcessor(data[1]);
                } else {
                    var grid = VnrGridDynamic;
                    grid.GridName = '@gridN';
                    grid.ShowCheckbox = false;
                    grid.DataSource = data.Data;
                    VnrGridDynamicControl(grid);
                }
            },
            error: function () {
                CloseHre_ProgressBar();
            }
        });
    });

    $("#btnExport").click(function () {
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        var isAccess = checkPermission(PrivilegeType.Export, '@controller');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll('@urlGetData', dataParameter, urlDownload);
        checkedNodes = [];

    });

    $("#btnCreateTemplate").click(function () {
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = true;
        CreateTemplate('@urlGetData', filterFieldInfo(true));
    });

    function DoActionData(gridName, actionURL, parameter) {
        $.ajax({
            url: actionURL,
            data: { selectedIds: parameter },
            type: 'POST',
            success: function (data) {
                selectedIds = [];
                ReadGrid(gridName);
                ShowNotificationProcessor('@Html.Raw(@ConstantDisplay.Hrm_Succeed.TranslateString())');
            },
            error: function (data) {
                alert('Lỗi hàm DoActionData trong hrm-8.0.js');
            }
        });
    }
</script>

@Html.Hidden("ValueKey")
@Html.Hidden("ValueConfig")
@Html.Hidden("ConfigID")
@Html.Hidden("valueFields")
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div class="hrm_box">
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.Year)
                        </div>
                        <div class="FieldValue">
                            @{
                                var year = new NumericTextBoxBuilderInfo<int>
                                {
                                    Value = DateTime.Today.Year,
                                    Format = ConstantFormat.HRM_Format_Number_Integer.ToString()
                                };
                            }
                            @(Html.VnrNumericTextBoxFor(mode => mode.Year, year))
                            @*@{
                                var _DFrom = new DatePickerBuilderInfo()
                                {
                                    Format = ConstantFormat.HRM_Format_Int,
                                    StyleCss = "width:100px",
                                    Placeholder = ConstantDisplay.HRM_HR_Profile_MonthFrom.TranslateString()
                                };
                            }
                            @(Html.VnrDatePickerFor(mode => mode.DateFrom, _DFrom))
                                        
                            @{
                                var _DTo = new DatePickerBuilderInfo()
                                {
                                    Format = ConstantFormat.HRM_Format_MonthYear,
                                    StyleCss = "width:100px",
                                    Placeholder = ConstantDisplay.HRM_HR_Profile_MonthFrom.TranslateString()
                                };
                            }
                            @(Html.VnrDatePickerFor(mode => mode.DateTo, _DTo))*@
                        </div>
                    </div>
                    
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.ProfileIDs)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _ProfileIDs = new MultiSelectBuilderInfo
                                {
                                    DataTextField = "ProfileName",
                                    DataValueField = "ID",
                                    Url = @_hrm_Hre_Service + "Hre_GetData/GetMultiProfile",
                                    Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                };
                            }
                            @Html.VnrMultiSelectFor(mode => mode.ProfileIDs, _ProfileIDs)
                        </div>
                    </div>
                    <div id="div4">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OrgStructureID)
                        </div>
                        <div class="FieldValue">
                            @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                        </div>
                    </div>
                </div>
                <div class="hrm_box">
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.StatusSyn)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _StatusEmployees = new MultiSelectBuilderInfo()
                                {
                                    DataTextField = "Text",
                                    DataValueField = "Value",
                                    BindTo = lstStatusEmployee,
                                    Value = @Html.DisplayFor(mode => mode.StatusSyn).ToString(),
                                    Enable = true,
                                    Placeholder = @ConstantDisplay.HRM_Category_SelectStatus.TranslateString(),
                                };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.StatusSyn, _StatusEmployees))
                        </div>

                    </div>
                    <div id="div4">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.WorkPlace)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _WorkPlace = new MultiSelectBuilderInfo()
                                {
                                    DataTextField = "WorkPlaceName",
                                    DataValueField = "ID",
                                    Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiWorkPlace",
                                    Placeholder = ConstantDisplay.HRM_Category_SelectPayrollGroup.TranslateString(),
                                };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.WorkPlace, _WorkPlace))
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hre_Service + "Cat_GetData/GetScreenName",
                    StyleCss = "width:200px;",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)

            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
    </div>
</div>

<div id="@gridN.ToString()">

</div>





@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models
@using HRM.Infrastructure.Security
@using System.Collections

@model Rec_RecruitmentHistoryModel
@{
    Layout = null;
    ViewBag.Title = "Tab_RecruitmentHistoryInfo";
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    IList<SelectListItem> listWorkingType = Enum.GetValues(typeof(EnumDropDown.LaborType))
  .Cast<EnumDropDown.LaborType>()
  .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
  .ToList();
    IList<SelectListItem> listStatusHealth = Enum.GetValues(typeof(EnumDropDown.StatusHealth))
.Cast<EnumDropDown.StatusHealth>()
.Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
.ToList();
    IList<SelectListItem> listCandidateStatus = Enum.GetValues(typeof(EnumDropDown.CandidateStatus))
.Cast<EnumDropDown.CandidateStatus>()
.Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
.ToList();
}
<script type="text/javascript">
    document.getElementById("RecruitmentHistoryInfo_Status").readOnly = true;
    var _PassFilterResume = document.getElementById("PassFilterResume");
    $(document).ready(function () {
        $("#PassFilterResume").click(function () {
            debugger;
            return false;
        });

    });
    $('input[type=checkbox]').change(function () {
        if ($(this).is(':checked')) {
            $(this).val('true');
        } else {
            $(this).val('false');
        }
    });

    function changeSalarySuggestMoney(e) {
        $("#RecruitmentHistoryInfo_SalarySuggest").val(e.sender._value);
    };
    function changeSalaryCurrentMoney(e) {
        $("#RecruitmentHistoryInfo_SalaryCurrent").val(e.sender._value);
    };
    function changeSalaryApproveMoney(e) {
        $("#RecruitmentHistoryInfo_SalaryApprove").val(e.sender._value);
    };
</script>

<style>
    .tableLeft {
        float: left;
        width: 500px;
        display: block;
    }

        .tableLeft .FieldTitle {
            width: 170px;
        }
</style>
<div style="margin-top:3px">
    <div style="width:100%">
        <fieldset>
            <legend>
                @ConstantDisplay.CandidateInformation.TranslateString()
            </legend>
            <div style="float:left">
                <div id="div4">
                    <div class="FieldTitle170">
                        @Html.HiddenFor(m => m.ID)
                        @Html.HiddenFor(m => m.CodeCandidate)
                        @Html.HiddenFor(m => m.Gender)
                        @Html.HiddenFor(m => m.Email)
                        @Html.HiddenFor(m => m.Phone)
                        @Html.HiddenFor(m => m.DateOfBirth)
                        @Html.HiddenFor(m => m.CodeCandidate)
                        @Html.HiddenFor(m => m.Mobile)
                        @Html.HiddenFor(m => m.PAddress)
                        @Html.HiddenFor(m => m.TAddress)
                        @Html.VnrLabelFor(mode => mode.CandidateName)
                    </div>
                    <div class="FieldValue">
                        @{
                            IEnumerable valueCandidate = new string[] { };
                            if (Model != null)
                            {
                                valueCandidate = new[] { new { CandidateName = Model.CandidateName, ID = Model.CandidateID } };
                            }
                        }
                        @{
                            var CandidateID = new MultiSelectBuilderInfo()
                            {
                                Name = "RecruitmentHistoryInfo_CandidateID",
                                DataTextField = "CandidateName",
                                DataValueField = "ID",
                                Width = 200,
                                Url = _hrm_Hre_Service + "Rec_GetData/GetMultiCandidate",
                                MaxSelectedItems = 1,
                                Value = valueCandidate

                            };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.CandidateID, CandidateID)
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div id="div5">

                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.OrgStructureName)
                    </div>
                    <div class="FieldValue">
                        @{
                            var org = new TreeViewDropdDownBuilderInfo()
                            {
                                Value = Model == null ? string.Empty : Model.OrgStructureName,
                                SetFieldID = "OrgStructureID",
                                SetFieldName = "OrgStructureID",
                                IsShowCheckBox = false,
                                Width = "200px"
                            };
                        }

                        @*@Html.Partial("EditorTemplates/OrgStructureTreeViewNoCheckbox")*@
                        @Html.Partial("EditorTemplates/OrgTreeViewDropDown", org)
                        @Html.HiddenFor(model => model.OrgStructureID)
                        @Html.HiddenFor(model => model.OrgStructureName)
                    </div>

                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.JobTitleID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var jobTitleID = new DropDownListBuilderInfo()
                            {
                                DataTextField = "JobTitleName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiJobTitle",
                                OptionLabel = ConstantDisplay.HRM_HR_SelectJobTitle.TranslateString(),
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.JobTitleID, jobTitleID)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.YearOfExperience)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _YearOfExperience = new NumericTextBoxBuilderInfo<double>
                            {
                            };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.YearOfExperience, _YearOfExperience)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.WorkingType)
                    </div>
                    <div class="FieldValue">

                        @{
                            var _WorkingType = new DropDownListBuilderInfo()
                            {
                                Name = "RecruitmentHistoryInfo_WorkingType",
                                DataTextField = "Text",
                                DataValueField = "Value",
                                BindTo = listWorkingType,
                                // OptionLabel = @ConstantDisplay.HRM_Category_SelectStatus.TranslateString(),
                                StyleCss = "width:200px"
                            };
                        }
                        @(Html.VnrDropDownListFor(mode => mode.WorkingType, _WorkingType))
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.SalarySuggest)
                    </div>
                    <div class="FieldValue">
                        @{
                            var SalarySuggest = new NumericTextBoxBuilderInfo<double>()
                            {
                                Name = "RecruitmentHistoryInfo_SalarySuggestMoney",
                                Value = Model != null && Model.SalarySuggest != null ? double.Parse(Model.SalarySuggest) : 0,
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(m => m.SalarySuggestMoney, SalarySuggest).Events(m => m.Change("changeSalarySuggestMoney"))
                        @Html.HiddenFor(m => m.SalarySuggest, new { id = "RecruitmentHistoryInfo_SalarySuggest" })
                        @*@Html.VnrTextBoxFor(model => model.SalarySuggest)*@
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.SalaryCurrent)
                    </div>
                    <div class="FieldValue">
                        @{
                            var SalaryCurrent = new NumericTextBoxBuilderInfo<double>()
                            {
                                Name = "RecruitmentHistoryInfo_SalaryCurrentMoney",
                                Value = Model != null && Model.SalaryCurrent != null ? double.Parse(Model.SalaryCurrent) : 0,
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(m => m.SalaryCurrentMoney, SalaryCurrent).Events(m => m.Change("changeSalaryCurrentMoney"))
                        @Html.HiddenFor(m => m.SalaryCurrent, new { id = "RecruitmentHistoryInfo_SalaryCurrent" })

                        @*@Html.VnrTextBoxFor(model => model.SalaryCurrent)*@
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.SalaryApprove)
                    </div>
                    <div class="FieldValue">
                        @{
                            var SalaryApprove = new NumericTextBoxBuilderInfo<double>()
                            {
                                Name = "RecruitmentHistoryInfo_SalaryApproveMoney",
                                Value = Model != null && Model.SalaryApprove != null ? double.Parse(Model.SalaryApprove) : 0,
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(m => m.SalaryApproveMoney, SalaryApprove).Events(m => m.Change("changeSalaryApproveMoney"))
                        @Html.HiddenFor(m => m.SalaryApprove, new { id = "RecruitmentHistoryInfo_SalaryApprove" })

                        @*@Html.VnrTextBoxFor(model => model.SalaryApprove)*@
                    </div>
                </div>

                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.SalaryProbationary)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _SalaryProbationary = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.SalaryProbationary, _SalaryProbationary)
                    </div>
                </div>

                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.AllowanceID1)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _AllowanceID1 = new DropDownListBuilderInfo
                            {
                                DataTextField = "UsualAllowanceName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiUsualAllowance",
                                StyleCss = "width:150px;"
                                // Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.AllowanceID1, _AllowanceID1)
                        @{
                            var _Allowance1 = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:94px",
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Allowance1, _Allowance1)
                        @{
                            var CurrencyAllowance1 = new ComboBoxBuilderInfo()
                             {
                                 DataTextField = "CurrencyName",
                                 DataValueField = "ID",
                                 Url = _hrm_Hre_Service + "Cat_GetData/GetMultiCurrency",
                                 StyleCss = "width:60px;",
                                 Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID, CurrencyAllowance1).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.AllowanceID3)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _AllowanceID3 = new DropDownListBuilderInfo
                            {
                                DataTextField = "UsualAllowanceName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiUsualAllowance",
                                StyleCss = "width:150px;"
                                //  Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.AllowanceID3, _AllowanceID3)
                        @{
                            var _Allowance3 = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:94px",
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Allowance3, _Allowance3)
                        @{
                            var CurrencyAllowance3 = new ComboBoxBuilderInfo()
                             {
                                 DataTextField = "CurrencyName",
                                 DataValueField = "ID",
                                 Url = _hrm_Hre_Service + "Cat_GetData/GetMultiCurrency",
                                 StyleCss = "width:60px;",
                                 Value = Model == null ? string.Empty : Model.CurrencyID2.ToString(),
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID2, CurrencyAllowance3).Text(Model == null ? string.Empty : Model.CurrencyName2))

                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.SkillLevel)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.SkillLevel)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.TagID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _TagID = new DropDownListBuilderInfo
                            {
                                DataTextField = "TagName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Rec_GetData/GetMultiTag",

                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.TagID, _TagID)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.ScorePotential)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _ScorePotential = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.ScorePotential, _ScorePotential)
                    </div>
                </div>

                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.HealthStatus)
                    </div>
                    <div class="FieldValue">
                        @{ var _HealthStatus = new DropDownListBuilderInfo
                                           {
                                               DataTextField = "Text",
                                               DataValueField = "Value",
                                               BindTo = listStatusHealth,
                                               StyleCss = "width:250px;background-color:WhiteSmoke"
                                           };
                        }
                        @Html.VnrDropDownListFor(model => model.HealthStatus, _HealthStatus)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.PassFilterResume)
                    </div>
                    <div class="FieldValue">
                        @*@{
                                bool _valuePassFilterResume = false;
                                if (Model != null && Model.PassFilterResume.HasValue)
                                {
                                    _valuePassFilterResume = Model.PassFilterResume.Value;
                                }
                                var _PassFilterResume = new CheckBoxBuilderInfo()
                                {

                                    Value = _valuePassFilterResume,


                                };
                            }*@

                        @{
                            var _PassFilterResume = new CheckBoxBuilderInfo()
                            {

                            };
                            if (Model != null)
                            {
                                if (Model.PassFilterResume == true)
                                {
                                    _PassFilterResume.Value = true;
                                }
                                else
                                {
                                    _PassFilterResume.Value = false;
                                }
                            }
                        }


                        @Html.VnrCheckBoxFor(model => model.PassFilterResume, _PassFilterResume)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Status)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Status = new DropDownListBuilderInfo
                            {
                                Name = "RecruitmentHistoryInfo_Status",
                                DataTextField = "Text",
                                DataValueField = "Value",
                                BindTo = listCandidateStatus,
                                StyleCss = "width:250px;background-color:WhiteSmoke"
                            };
                        }

                        @Html.VnrDropDownListFor(mode => mode.Status, _Status)
                    </div>
                </div>
            </div>
            <div style="float:left;">
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.JobVacancyID)
                    </div>
                    <div class="FieldValue">
                        @*@{
                            var _JobVacancyID = new MultiSelectBuilderInfo
                            {
                                DataTextField = "JobVacancyName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Rec_GetData/GetMultiJobVacancy",
                            };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.JobVacancyID, _JobVacancyID)*@

                        @{
                            IEnumerable valueJobVacancy = new string[] { };
                            if (Model != null)
                            {
                                valueJobVacancy = new[] { new { JobVacancyName = Model.JobVacancyName, ID = Model.JobVacancyID } };
                            }
                        }
                        @{
                            var JobVacancyID = new MultiSelectBuilderInfo
                            {
                                DataTextField = "JobVacancyName",
                                DataValueField = "ID",
                                Url = _hrm_Hre_Service + "Rec_GetData/GetMultiJobVacancy",
                                MaxSelectedItems = 1,
                                Value = valueJobVacancy,
                            };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.JobVacancyID, JobVacancyID)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.PositionID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _PositionID = new DropDownListBuilderInfo
                            {
                                DataTextField = "PositionName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiPosition",
                                //  MaxSelectedItems = 1,
                                // OptionLabel = ConstantDisplay.HRM_Category_SelectPosition.TranslateString(),
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.PositionID, _PositionID)
                    </div>
                </div>


                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.DateApply)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _DateApply = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:100px;",
                                // Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateApply, _DateApply)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.IsReadyBizTrip)
                    </div>
                    <div class="FieldValue">
                        @{
                            bool _valueIsReadyBizTrip = false;
                            if (Model != null && Model.IsReadyBizTrip.HasValue)
                            {
                                _valueIsReadyBizTrip = Model.IsReadyBizTrip.Value;
                            }
                            var _IsReadyBizTrip = new CheckBoxBuilderInfo()
                            {
                                Value = _valueIsReadyBizTrip
                            };
                        }
                        @Html.VnrCheckBoxFor(model => model.IsReadyBizTrip, _IsReadyBizTrip)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.WorkingTypePeriod)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.WorkingTypePeriod)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Allowance)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Allowance = new NumericTextBoxBuilderInfo<double>() { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Allowance, _Allowance)

                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.TimeWorkType)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.TimeWorkType)
                    </div>
                </div>


                @*<div id="div3">
                        <div class="FieldTitle170">
                            @Html.VnrLabelFor(mode => mode.WorkingTime)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _WorkingTime = new DateTimePickerBuilderInfo() {
                                StyleCss="width:160px"
                                };
                            }
                            @Html.VnrDateTimePickerFor(model => model.WorkingTime, _WorkingTime)
                        </div>
                        <div style="clear: both;"></div>
                    </div>*@



                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.DateStartWorking)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _DateStartWorking = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:100px;",
                                // Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateStartWorking, _DateStartWorking)

                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.DateHire)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _DateHire = new DatePickerBuilderInfo()
                            {
                                StyleCss = "width:100px;",
                                //  Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateHire, _DateHire)

                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.AllowanceID2)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _AllowanceID2 = new DropDownListBuilderInfo
                            {
                                DataTextField = "UsualAllowanceName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiUsualAllowance",
                                StyleCss = "width:149px"
                                //  MaxSelectedItems = 1,
                                // Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.AllowanceID2, _AllowanceID2)
                        @{
                            var _Allowance2 = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:94px",
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Allowance2, _Allowance2)
                        @{
                            var CurrencyAllowance2 = new ComboBoxBuilderInfo()
                             {
                                 DataTextField = "CurrencyName",
                                 DataValueField = "ID",
                                 Url = _hrm_Hre_Service + "Cat_GetData/GetMultiCurrency",
                                 StyleCss = "width:60px;",
                                 Value = Model == null ? string.Empty : Model.CurrencyID1.ToString(),
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID1, CurrencyAllowance2).Text(Model == null ? string.Empty : Model.CurrencyName1))

                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.AllowanceID4)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _AllowanceID4 = new DropDownListBuilderInfo
                            {
                                DataTextField = "UsualAllowanceName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiUsualAllowance",
                                StyleCss = "width:149px"
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.AllowanceID4, _AllowanceID4)

                        @{
                            var _Allowance4 = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:94px",
                                Format = ConstantFormat.HRM_Format_Money,
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Allowance4, _Allowance4)
                        @{
                            var CurrencyAllowance4 = new ComboBoxBuilderInfo()
                             {
                                 DataTextField = "CurrencyName",
                                 DataValueField = "ID",
                                 Url = _hrm_Hre_Service + "Cat_GetData/GetMultiCurrency",
                                 StyleCss = "width:60px;",
                                 Value = Model == null ? string.Empty : Model.CurrencyID3.ToString(),
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID3, CurrencyAllowance4).Text(Model == null ? string.Empty : Model.CurrencyName3))
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.ProbationDay)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _ProbationDay = new NumericTextBoxBuilderInfo<int> { };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.ProbationDay, _ProbationDay)@ConstantDisplay.Day.TranslateString()
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.SalaryClassID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _SalaryClassID = new DropDownListBuilderInfo
                            {
                                DataTextField = "SalaryClassName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiSalaryClass",
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.SalaryClassID, _SalaryClassID)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.IsBlackList)
                    </div>
                    <div class="FieldValue">
                        @{
                            bool _valueIsBlackList = false;
                            if (Model != null && Model.IsBlackList.HasValue)
                            {
                                _valueIsBlackList = Model.IsBlackList.Value;
                            }

                            var _IsBlackList = new CheckBoxBuilderInfo()
                            {
                                Value = _valueIsBlackList
                            };
                        }
                        @Html.VnrCheckBoxFor(model => model.IsBlackList, _IsBlackList)
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.SourceAdsID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _SourceAdsID = new DropDownListBuilderInfo
                            {
                                DataTextField = "SourceAdsName",
                                DataValueField = "ID",
                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiSourceAds",
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.SourceAdsID, _SourceAdsID)
                    </div>
                </div>
            </div>
            <div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.WorkplaceSuggestion)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.WorkplaceSuggestion, "width:754px")

                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Strong)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Strong, "width:754px")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Weak)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Weak, "width:754px")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Description, "width:754px")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle170">
                        @Html.VnrLabelForNoneIcon(model => model.Assessment)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Assessment, "width:754px")
                    </div>
                </div>
                <div id="div9">
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.FileAttachment)
                    </div>
                    <div class="FieldValue">
                        @*<script>
                                function onSuccess(e) {

                                    var responseTxt = jQuery.parseJSON(e.XMLHttpRequest.responseText);
                                    var status = responseTxt.Status;
                                    var srcValue = responseTxt.FileUrl;
                                    if (status == true) {
                                        //value null
                                        $("#TemplateFile").val('');
                                        //set value
                                        $("#TemplateFile").val(responseTxt.FileName);
                                    } else {
                                        $("#TemplateFile").val('');
                                    }
                                }
                            </script>*@

                        @Html.HiddenFor(model => model.FileAttachment)
                        <input type="file" name="Attachmentfiles" id="UploadFileAttachment1" />
                        <script>
                            var vnrUploadFileAttachment = VnrUploadBuilder;
                            vnrUploadFileAttachment.Id = "UploadFileAttachment1";
                            vnrUploadFileAttachment.Host = '@_hrm_Main_Web';
                            vnrUploadFileAttachment.Files = '@Html.DisplayFor(model => model.FileAttachment)';
                            vnrUploadFileAttachment.Field = "FileAttachment";
                            vnrUploadFileAttachment.AutoUpload = true;
                            vnrUploadFileAttachment.Multiple = true;
                            vnrUploadFileAttachment.AutoReNameFile = true;
                            VnrUpload(vnrUploadFileAttachment);
                        </script>
                    </div>
                    <div style="clear: both;"></div>
                </div>
            </div>
        </fieldset>
    </div>
</div>
@if (Model != null)
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#TreeViewDropDownInput").val('@Model.OrgStructureName');
            $("#OrgStructureID").val('@Model.OrgStructureID');
        });
    </script>
}
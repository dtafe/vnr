@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models
@using HRM.Infrastructure.Utilities

@using System.Collections
@using HRM.Infrastructure.Security

@model Rec_GroupConditionModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    //string JobConditionIDs = "";
    //Guid? JobVacancyID = Guid.Empty;
    //if (ViewData["JobVacancyID"] != null)
    //{
    //    JobVacancyID = Common.ConvertToGuid(ViewData["JobVacancyID"].ToString());
    //}
    //if (!string.IsNullOrEmpty(ViewData["JobConditionIDs"].ToString()))
    //{
    //    JobConditionIDs = ViewData["JobConditionIDs"].ToString();
    //}
    var GroupConditionID = Guid.Empty;
    if (Model != null)
    {
        GroupConditionID = Model.ID;
    }
}

@{
    var windowConditionSelect = new WindowBuilderInfo
    {
        Name = "windowConditionSelect",
        Visible = false,
        LoadContentFrom = @_hrm_Main_Web + "Rec_GroupCondition/ConditionSelect/",
        Width = 910
    };
}
@(Html.VnrWindow(windowConditionSelect))
<script type="text/javascript">
    SetFieldRequired();
    $("#btnAddCondition").click(function () {
        debugger;
        var x = $('#@Html.FieldIdFor(model=>model.GroupCondition_ID)').val();
        if (x != '') {
            var url = '@_hrm_Main_Web' + "Rec_GroupCondition/ConditionSelect/";
            PopUpCreate('windowConditionSelect', "Test", '@ConstantPermission.Rec_GroupCondition');
        }
        else {
            ShowNotification('@ConstantMessages.Notification.TranslateString()', '@ConstantMessages.YouMustSaveFirst.TranslateString()', "k-block k-info-colored");
            return;
        }
    });
    //Xóa Sản phẩm
    $('#btnDelete_JobCondition').click(function (e) {
        var isAccess = checkPermission(PrivilegeType.Delete, '@ConstantPermission.Rec_GroupCondition');
        if (!isAccess) {
            return;
        }

        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        DeleteGroupConditionItem();
    });
    function filterFieldInfoCreateOrUpdate(isExport) {
        return {
            JobConditionIDs: $("#JobConditionIDs").val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }

    function DeleteGroupConditionItem() {
        debugger;
        var groupConditionID = $("#ID").val();
        if (selectedIds != '' && selectedIds != null) {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: '@Html.Raw(ConstantDisplay.HRM_Dashboard_Alerts.TranslateString())',
                message: '@Html.Raw(ConstantDisplay.HRM_Message_AreYouSureWantToDelete.TranslateString())',
                icon: "k-ext-warning"
            })
            ).done(function (response) {
                if (response.button == "OK") {
                    // xóa khỏi GroupCondition
                    if (groupConditionID != '@Guid.Empty') {
                        $.ajax({
                            type: 'POST',
                            url: '@_hrm_Hr_Service' + "Rec_GetData/DeleteConditionInGroupCondition/",
                            data: { GroupConditionID: groupConditionID, ConditionIDs: selectedIds.join(',') },
                            dataType: 'json',
                            success: function (data) {
                                debugger;
                                $("#JobConditionIDs").val(data);
                                selectedIds = [];
                                ReadGrid('@ConstantControlName.HRM_Rec_JobCondition_Grid_Name');
                                window.ShowNotificationProcessor("Success");
                            }

                        });
                    }
                }
            })
        }
    }
</script>
@Html.Hidden("JobConditionIDs")
<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div style="display: block; padding-top: 10px;">
                        <div style="float:left; width:100%">
                            <div style="float: left; width: 500px">
                                <div class="DivContentTitleValue" id="div13">
                                    <div class="FieldTitle150">
                                        @Html.HiddenFor(mode => mode.GroupCondition_ID)
                                        @Html.HiddenFor(mode => mode.ID)
                                        @Html.VnrLabelFor(mode => mode.Code)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.Code)
                                    </div>
                                </div>
                                <div id="div4" class="DivContentTitleValue">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.GroupName)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.GroupName)
                                    </div>
                                </div>
                                <div id="div4" class="DivContentTitleValue">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.LevelInterview)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                                var LevelInterview = new NumericTextBoxBuilderInfo<int>()
                                                {
                                                    StyleCss = "width:100px"
                                                };
                                        }
                                        @Html.VnrNumericTextBoxFor(model => model.LevelInterview, LevelInterview)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
        </tbody>
    </table>
</div>
<div style="display:block;width: 99%">
    <fieldset>
        <legend>
            @ConstantDisplay.HRM_Rec_JobVacancy_Condition.TranslateString()
        </legend>
        <div class="commandToolBarWidge" id="anchor">
            <div style="float:left">
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnAddCondition", Content = ConstantAction.HRM_Common_Add.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
            </div>
            <div style="float:right">
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete_JobCondition", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
            </div>
            <div class="clear"></div>
        </div>
        <div>
            <!--Khai báo các thông tin cho Grid-->
            @{

                IList<SelectListItem> conditionName = Enum.GetValues(typeof(ConditionName)).Cast<ConditionName>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();

                IList<SelectListItem> conditionBrand = Enum.GetValues(typeof(ConditionBrand))
       .Cast<ConditionBrand>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
       .ToList();

                IList<SelectListItem> valueType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.ValueType))
          .Cast<HRM.Infrastructure.Utilities.ValueType>()

          .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();

                Dictionary<object, object[]> foreignKey = new Dictionary<object, object[]>()
        {
            {Rec_JobConditionModel.FieldNames.ConditionName,new object[]
               { "Value", "Text", conditionName, ConstantDisplay.HRM_Rec_JobCondition_ConditionName,""}},

                  {Rec_JobConditionModel.FieldNames.ConditionBrand,new object[]
               { "Value", "Text", conditionBrand, ConstantDisplay.HRM_Rec_JobCondition_ConditionBrand,""}},

                 {Rec_JobConditionModel.FieldNames.ValueType,new object[]
               { "Value", "Text", valueType, ConstantDisplay.HRM_Rec_JobCondition_ValueType,""}},

        };
                string[] valueFields = new[]
        {

            Rec_JobConditionModel.FieldNames.Code,
            Rec_JobConditionModel.FieldNames.ConditionName,
            Rec_JobConditionModel.FieldNames.Value1,
            Rec_JobConditionModel.FieldNames.ConditionBrand,
            Rec_JobConditionModel.FieldNames.ValueType,
            Rec_JobConditionModel.FieldNames.Note,
        };

                var sizeFields = new Dictionary<string, int>()
        {

            {Rec_JobConditionModel.FieldNames.Code,120},
            {Rec_JobConditionModel.FieldNames.ConditionName,120},
            {Rec_JobConditionModel.FieldNames.Value1,120},
            {Rec_JobConditionModel.FieldNames.ConditionBrand,120},
            {Rec_JobConditionModel.FieldNames.ValueType,120},
            {Rec_JobConditionModel.FieldNames.Note,120},
        };

                var filterable = new Dictionary<string, bool>()
        {
            {Rec_JobConditionModel.FieldNames.Code,true},
           {Rec_JobConditionModel.FieldNames.ConditionName,true},
            {Rec_JobConditionModel.FieldNames.Value1,true},
            {Rec_JobConditionModel.FieldNames.ConditionBrand,true},
            {Rec_JobConditionModel.FieldNames.ValueType,true},
            {Rec_JobConditionModel.FieldNames.Note,true},
        };

                var displayFields = new Dictionary<string, string>()
        {
            {Rec_JobConditionModel.FieldNames.Code,ConstantDisplay.HRM_Rec_JobCondition_Code},
            {Rec_JobConditionModel.FieldNames.ConditionName,ConstantDisplay.HRM_Rec_JobCondition_ConditionName},
            {Rec_JobConditionModel.FieldNames.Value1,ConstantDisplay.HRM_Rec_JobCondition_Value1},
            {Rec_JobConditionModel.FieldNames.ConditionBrand,ConstantDisplay.HRM_Rec_JobCondition_ConditionBrand},
            {Rec_JobConditionModel.FieldNames.ValueType,ConstantDisplay.HRM_Rec_JobCondition_ValueType},
            {Rec_JobConditionModel.FieldNames.Note,ConstantDisplay.HRM_Rec_JobCondition_Note},
        };

                var grid = new GridBuilderInfo
                {
                    Name = ConstantControlName.HRM_Rec_JobCondition_Grid_Name,
                    ForeignKey = foreignKey,
                    ValueFields = valueFields,
                    SizeFields = sizeFields,
                    DisplayFields = displayFields,
                    Filterable = filterable,
                    AutoBind = true,
                    ShowEditIcon = false,
                    ReadData = "filterFieldInfoCreateOrUpdate",
                    ReadActionUrl = _hrm_Hr_Service + "Rec_GetData/GetJobConditionByGroupConditionId",
                };
            }

            @(Html.VnrGrid<Rec_JobConditionModel>(grid))
        </div>
    </fieldset>
</div>

<div>
    @{
        if (Model != null)
        {
            <script>
                $(document).ready(function () {
                    $("#JobConditionIDs").val('@Model.JobConditionIDs');
                });

            </script>
        }
    }
</div>
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Canteen.Models


@model HRM.Presentation.Canteen.Models.Can_LineModel
@{
    var _hrm_Can_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Lau_Service = ConstantPathWeb.Hrm_Hre_Service;
    Layout = null;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    IList<SelectListItem> list = Enum.GetValues(typeof(EnumDropDown.HDTJobType))
    .Cast<EnumDropDown.HDTJobType>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();

    SelectList data = new SelectList(list, "Value", "Text");
}
<script>
    var data = SetCharacteFieldRequired();

    function checkDuplicationLine() {
        
        var code = $("#LineCode").val();
        var id = '@lineId';
        var data = { tableName: "Can_Line", columnName: "LineCode", keyword: code, id: id };
        var isduplicate = checkDuplicate('@_hrm_Sys_Service', 'Sys_GetData', 'CheckDuplicate', data, "LineCode");
        return isduplicate;
    }

    function onSaveAndContinuePopUp() {

        if (CheckValidate(data)) {
            if (!checkDuplicationLine()) {
                onSaveAndContinue($('#form_can_Line'), '@_hrm_Can_Service', 'api/Can_Line/', '@ConstantControlName.HRM_Canteen_Line_Grid_Name', '@ConstantControlName.HRM_Canteen_Line_PopUp_Name'); return false;
            }
        }
    }

    function onSaveClosePopUp() {

        if (CheckValidate(data)) {
            if (!checkDuplicationLine()) {
                onSaveAndClose($('#form_can_Line'), '@_hrm_Can_Service', 'api/Can_Line/', '@ConstantControlName.HRM_Canteen_Line_Grid_Name', '@ConstantControlName.HRM_Canteen_Line_PopUp_Name'); return false;
            }
        }
    }
    function onSaveDataPopUp() {

        if (CheckValidate(data)) {
            if (!checkDuplicationLine()) {
                onlySave($('#form_can_Line'), '@_hrm_Can_Service', 'api/Can_Line/', '@ConstantControlName.HRM_Canteen_Line_Grid_Name'); return false;
            }
        }
    }
</script>
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_can_Line" }))
{
   <div class="VnRMain">
    <table style="width:100%">
        @Html.HiddenFor(model => model.ID)
        <tbody>
   
            <tr>
               
                <td valign="top">
                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.LineCode)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.LineCode, "width:300px")
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.LineName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.LineName, "width:300px")
                        </div>
                        <div style="clear: both;"></div>
                    </div>

                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.DateEffect)
                        </div>
                        <div class="FieldValue">
                            @{
                                var dpDateEffect = new DatePickerBuilderInfo()
                                {
                                    StyleCss = "width:150px",
                                };
                            }
                            @Html.VnrDatePickerFor(model => model.DateEffect, dpDateEffect)
                        </div>
                        <div style="clear: both;"></div>
                    </div>



                    <div id="div3">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.CanteenName)
                        </div>
                        <div class="FieldValue">
                            @*@{
                                var CanteenName = new MultiSelectBuilderInfo()
                                 {
                                     DataTextField = Can_LineModel.FieldNames.CanteenName,
                                     DataValueField = Can_LineModel.FieldNames.Id,
                                     Url = @_hrm_Can_Service + "Canteen_GetData/GetMultiCanteen",
                                     Placeholder = ConstantDisplay.HRM_Canteen_SelectCanteen.TranslateString(),
                                     MaxSelectedItems = 1,
                                   //  Autobind = true,
                                     Value = Model == null? string.Empty : Model.CanteenName
                                 };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.CanteenId, CanteenName))*@
                            @{
                                var CanteenName = new ComboBoxBuilderInfo()
                                {
                                    DataTextField = Can_CanteenModel.FieldNames.CanteenName,
                                    DataValueField = Can_CanteenModel.FieldNames.ID,
                                    Url = @_hrm_Can_Service + "Canteen_GetData/GetMultiCanteen",
                                    Placeholder = ConstantDisplay.HRM_Canteen_SelectCanteen.TranslateString(),
                                  
                                    Name = "LineInfo_CanteenID",
                                    StyleCss = "width:300px;",
                                    
                                };
                                if (Model != null)
                                {
                                    CanteenName.Value = Model.CanteenID == null ? string.Empty : Model.CanteenID.ToString();
                                    CanteenName.Autobind = true;
                                }
                            }
                            @Html.VnrComboBoxFor(mode => mode.CanteenID, CanteenName)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div3">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.CateringName)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _catering = new ComboBoxBuilderInfo()
                                    {
                                        DataTextField = "CateringName",
                                        DataValueField = "ID",
                                        Url = _hrm_Can_Service + "Canteen_GetData/GetMultiCatering",
                                        Placeholder = ConstantDisplay.HRM_Canteen_SelectCatering.TranslateString(),
                                        StyleCss = "width:300px",
                                        Name = "LineInfo_CateringID",
                                        
                                    };
                                if (Model != null)
                                {
                                    _catering.Value = Model.CateringID == null ? string.Empty : Model.CateringID.ToString();
                                    _catering.Autobind = true;
                                }
                            }
                            @Html.VnrComboBoxFor(mode => mode.CateringID, _catering)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.MachineCode)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.MachineCode, "width:300px")
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.Amount)
                        </div>
                        <div class="FieldValue">
                            @{
                                var numericTextBoxAmount = new NumericTextBoxBuilderInfo<double>()
                                {
                                    StyleCss = "width:150px;",
                                    Format = "n0",
                                    Name = "LineInfo_Amount"
                                };
                            }
                            @Html.VnrNumericTextBoxFor(model => model.Amount, numericTextBoxAmount)
                            @Html.ValidationMessageFor(model => model.Amount)
                        </div>
                        <br />
                    </div>

                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.IsHDTJOB)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrCheckBoxFor(mode => mode.IsHDTJOB)
                        </div>
                    </div>

                    @*<div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.HDTJ)
                        </div>
                        <div class="FieldValue">
                            @{
                                var comboboxHTDJOB = new ComboBoxBuilderInfo()
                                {
                                    StyleCss = "width:300px;",
                                    DataTextField = "Text",
                                    DataValueField = "Value",
                                    FilterType = FilterType.Contains,
                                    BindTo = list,
                                   
                                    Value = @Html.DisplayFor(model => model.HDTJ).ToString(),
                                    Name = "Linfo_HDTJ"
                                };
                            }
                            @Html.VnrComboBoxFor(model => model.HDTJ, comboboxHTDJOB)
                            @Html.VnrCheckBoxFor(mode => mode.LineHDTJOB)
                        </div>
                        <div style="clear: both;"></div>
                    </div>*@

                    <div id="div5">
                        @*<div class="FieldTitle150">
                             @Html.VnrLabelFor(mode => mode.Standard)
                                </div>
                                <div class="FieldValue">
                            @Html.VnrCheckBoxFor(mode => mode.Standard)
                            </div>*@
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.Note)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextAreaFor(model => model.Note, "width:500px;height:100px;")
                        </div>
                    </div>

                
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>

            </tr>
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle150">

                        </div>
                        <div class="FieldValue" style="">
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-canLine", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveAndContinuePopUp", Name = "save-continue-canLine", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClosePopUp", Name = "save-close-canLine", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        </div>
                    </div>
                </td>
            </tr>
          
        </tbody>
    </table>
</div>

}

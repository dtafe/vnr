@using System.Collections
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models
@model Cat_SyncItemModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Category_ImportItem.TranslateString();
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var windowName = "windowCatImportInImportItem";
    var gridName = "grid_Cat_ImportItem";
}
<script>
    SetCharacteFieldRequired();
    var gridName = '@gridName';
    var windowName = '@windowName';
    function onSave() {
        fnSaveData();
        return false;
    }

    function onSaveClose() {
        fnSaveData();
        var window = $("#" + windowName).data("kendoWindow");
        window.refresh();
        window.close();
        return false;
    }

    function dataParameter() {
        var param = {
            Code: $("#Code").val(),
            SyncID: $("#SyncIdCreate").val(),
            InnerField: $("#InnerField").val(),
            OuterField: $("#OuterField").val(),
            AllowNull: $("#AllowNull").is(":checked"),
            AllowDuplicate: $("#AllowDuplicate").is(":checked"),
            IsExcluded: $("#IsExcluded").is(":checked"),
            DuplicateGroup: $("#DuplicateGroup").val(),
            Description: $("#Description").val(),
        };
        return param;
    }

    $(document).ready(function () {
        @*var objectName = $("#pr_innerTable").val();
        var outerTable = $("#pr_outerTable").val();
        //var outerTable = $("#pr_outerTable").val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Cat_GetData/GetMultiChildField',
            data: {objectNameRoot :objectName, objectName: objectName },
            type: 'Get',
            asyn: false,
            success: function (data) {
                $("#InnerField1").kendoComboBox({
                    dataTextField: "Name",
                    dataValueField: "Name",
                   // change: childField1_Changing,
                    dataSource: data
                });
            }
        });

        $.ajax({
            url: '@_hrm_Hre_Service' + 'Cat_GetData/GetMultiChildField',
            data: { objectNameRoot: outerTable, objectName: outerTable },
            type: 'Get',
            asyn: false,
            success: function (data) {               
                $("#OuterField1").kendoComboBox({
                    dataTextField: "Name",
                    dataValueField: "Name",
                    dataSource: data
                });
            }
        });*@
    });
       
    function fnSaveData() {
        $.ajax({
            url: '@_hrm_Hre_Service' + 'api/Cat_SyncItem/',
            data: dataParameter(),
            type: 'Post',
            success: function (data) {
                var window = $("#" + windowName).data("kendoWindow");
                window.refresh();
                var grid = $("#"+gridName).data("kendoGrid");
                grid.dataSource.read();
            }
        });
    }


</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_SyncItem" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div id="dvInnerField">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.InnerField)
                    </div>
                    <div class="FieldValue">
                        @*<input id="InnerField1" style="width: 300px;" />*@
                        @Html.VnrTextBoxFor(m => m.InnerField)
                    </div>
                </div>
                <div id="dvOuterField">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.OuterField)
                    </div>
                    <div class="FieldValue">
                        @*<input id="OuterField1" style="width: 300px;" />*@
                        @Html.VnrTextBoxFor(m=>m.OuterField)
                    </div>
                </div>
                <div id="dvAllowNull">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.AllowNull)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(m => m.AllowNull)
                    </div>
                </div>
                <div id="dvAllowDuplicate">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.AllowDuplicate)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(m => m.AllowDuplicate)
                    </div>
                </div>
                <div id="dvIsExcluded">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.IsExcluded)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(m => m.IsExcluded)
                    </div>
                </div>
                <div id="dvDuplicateGroup">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.DuplicateGroup)
                    </div>
                    <div class="FieldValue">
                        @{
                        var displayIndex = new NumericTextBoxBuilderInfo<int>() { StyleCss = "width:150px", Min = 1 };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.DuplicateGroup, displayIndex)
                    </div>
                </div>
                <div id="dvDuplicateGroup">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.FilterValues)
                    </div>
                    <div class="FieldValue">                        
                        @Html.VnrTextBoxFor(model => model.FilterValues)
                    </div>
                </div>
                <div id="dvDescription">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Description)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catImportItem", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catImportItem", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}


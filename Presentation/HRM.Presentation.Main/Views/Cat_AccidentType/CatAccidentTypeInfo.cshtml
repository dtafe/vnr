@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo


@using HRM.Presentation.Category.Models;
@model Cat_AccidentTypeModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    IList<SelectListItem> ilType = Enum.GetValues(typeof(EnumDropDown.AccidentType))
        .Cast<EnumDropDown.AccidentType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();
}
<script>
    SetFieldRequired();
    
    function onSaveNew() {
       
            onSaveAndContinue($('#form_Cat_AccidentType'), '@_hrm_Hr_Service', 'api/Cat_AccidentType/', '@ConstantControlName.HRM_Category_AccidentType_Grid_Name', '@ConstantControlName.HRM_Category_AccidentType_PopUp_Name'); return false;
    }

    function onSaveClose() {
            onSaveAndClose($('#form_Cat_AccidentType'), '@_hrm_Hr_Service', 'api/Cat_AccidentType/', '@ConstantControlName.HRM_Category_AccidentType_Grid_Name', '@ConstantControlName.HRM_Category_AccidentType_PopUp_Name'); return false;
    }
    function onSaveDataPopUp() {
            onlySave($('#form_Cat_AccidentType'), '@_hrm_Hr_Service', 'api/Cat_AccidentType/', '@ConstantControlName.HRM_Category_AccidentType_Grid_Name'); return false;
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_AccidentType" }))
{
    @Html.HiddenFor(model => model.ID)
     <table>
        <tr>
            <td>
      <div>
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.Code)
        </div>
        <div class="FieldValue">
           
            @{
    var Code = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "AccidentType_Code"
    };
    if (Model != null)
    {
        Code.Value = Model == null ? string.Empty : Model.Code;
    }
            }

            @Html.VnrTextBoxFor(mode => mode.Code, Code)
        </div>
    </div>
    <div>
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.AccidentTypeName)
        </div>
        <div class="FieldValue">
           
            @Html.VnrTextBoxFor(mode => mode.AccidentTypeName, "width: 300px")
        </div>
    </div>
    <div>
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.Type)
        </div>
        <div class="FieldValue">
          @{
    var Type = new DropDownListBuilderInfo()
    {
        Name = "AccidentType_Type",
         BindTo = ilType,
         StyleCss = "Width: 300px",
        DataTextField = "Text",
        DataValueField = "Value",
       
    };
            }
            @Html.VnrDropDownListFor(mode => mode.Type, Type)
        </div>
    </div>
    </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
    <div>
        <div class="FieldTitle150"></div>
        <div class="FieldValue">
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-AccidentType", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-AccidentType", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-AccidentType", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
    </div>
      </td>
        </tr>
    </table>
}

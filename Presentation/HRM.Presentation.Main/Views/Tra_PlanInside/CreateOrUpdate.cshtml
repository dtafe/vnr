@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect

@using HRM.Infrastructure.Utilities
@using System.Collections;
@using HRM.Presentation.Training.Models;
@model Tra_PlanModel
@{

    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    IList<SelectListItem> lstStatus = Enum.GetValues(typeof(PlanStatus))
     .Cast<PlanStatus>()
     .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
     .ToList();
    IList<SelectListItem> lstClassStatus = Enum.GetValues(typeof(EnumDropDown.ClassStatus))
.Cast<EnumDropDown.ClassStatus>()
.Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
.ToList();
    IList<SelectListItem> lstRMTrainStatus = Enum.GetValues(typeof(RequirementTrainStatus))
     .Cast<RequirementTrainStatus>()
     .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
     .ToList();
    var PlanID = Guid.Empty;
    if (Model != null)
    {
        PlanID = Model.ID;
    }
}

<div class="VnRMain">
    <table>
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <div style="display: block; float: left ;padding-top: 10px; ">
                    <div style="float:left">
                        <div class="hrm_box">
                            @Html.HiddenFor(mode => mode.Plan_ID)
                            
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(model => model.PlanName)
                                    @Html.HiddenFor(model=>model.Outside)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _PlanName = new TextBoxBuilderInfo()
                                        {

                                        };
                                    }
                                    @Html.VnrTextBoxFor(model => model.PlanName)
                                </div>
                            </div>
                            <div id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Status)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _Status = new DropDownListBuilderInfo()
                                        {
                                            Name = "TraPlanInside_Status",
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = lstStatus,
                                            OptionLabel = @ConstantDisplay.HRM_Category_SelectStatus.TranslateString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrDropDownListFor(mode => mode.Status, _Status))
                                    @Html.ValidationMessageFor(model => model.Status)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.Label(ConstantDisplay.HRM_Tra_RequirementTrain_RequetDateFrom.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _DateFrom = new DatePickerBuilderInfo()
                                        {
                                            Name = "TraPlanInside_DateFrom",
                                            StyleCss = "width:97.5px",
                                        };

                                        @Html.VnrDatePickerFor(model => model.DateFrom, _DateFrom)

                                    }
                                    @{
                                        var _DateTo = new DatePickerBuilderInfo()
                                                                            {
                                                                                Name = "TraPlanInside_DateTo",
                                                                                StyleCss = "width:97.5px",
                                                                            };
                                                                            @Html.VnrDatePickerFor(model => model.DateTo, _DateTo)
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div style="float:left; margin-left: 50px">
                        <div class="hrm_box">

                            <div>
                                <div class="FieldTitle">
                                    @Html.VnrLabelFor(model => model.Cost)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _Cost = new NumericTextBoxBuilderInfo<double>
                                        {
                                            Name = "TraPlanInside_Cost",
                                            StyleCss = "width:150px",
                                            Format = ConstantFormat.HRM_Format_Money
                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(model => model.Cost, _Cost)@ConstantDisplay.HRM_Tra_Plan_Type_VND.TranslateString()
                                </div>
                            </div>
                            <div id="div2">
                                <div class="FieldTitle">
                                    @Html.VnrLabelFor(mode => mode.Description)

                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _Description = new TextAreaBuilderInfo()
                                        {

                                        };
                                    }
                                    @Html.VnrTextAreaFor(model => model.Description)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            @*<tr>
                    <td class="Box_Bottom_Left"></td>
                    <td class="Box_Bottom_Mid"></td>
                    <td class="Box_Bottom_Right"></td>
                </tr>*@
        </tbody>
    </table>
    @Html.HiddenFor(mode => mode.ID)
</div>


<div class="commandToolBarWidge">
    <div class="GridTitle">
        @Html.VnrLabel(ConstantDisplay.HRM_Tra_Plan_List_Class.TranslateString())
    </div>
    <div class="clear"></div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{

        var foreignKey = new Dictionary<object, object[]>()
            {
                {Tra_ClassModel.FieldNames.Status,new object[]
                   { "Value", "Text", lstClassStatus, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},
            };
        var valueFieldsClass = new[]
                        {

                            Tra_ClassModel.FieldNames.ClassName,
                            Tra_ClassModel.FieldNames.StartDate,
                            Tra_ClassModel.FieldNames.EndDate,
                            Tra_ClassModel.FieldNames.CourseName,
                            Tra_ClassModel.FieldNames.Status,
                        };

        var sizeFieldsClass = new Dictionary<string, int>()
                        {

                            {Tra_ClassModel.FieldNames.ClassName, 140},
                            {Tra_ClassModel.FieldNames.StartDate, 82},
                            {Tra_ClassModel.FieldNames.EndDate, 82},
                            {Tra_ClassModel.FieldNames.CourseName, 110},
                            {Tra_ClassModel.FieldNames.Status,100},

                        };

        var filterableClass = new Dictionary<string, bool>()
        {

        };

        var displayFieldsClass = new Dictionary<string, string>()
                        {

                            {Tra_ClassModel.FieldNames.ClassName, ConstantDisplay.HRM_Tra_Class_ClassName},
                            {Tra_ClassModel.FieldNames.StartDate, ConstantDisplay.HRM_Tra_Class_StartDate},
                            {Tra_ClassModel.FieldNames.EndDate, ConstantDisplay.HRM_Tra_Class_EndDate},
                            {Tra_ClassModel.FieldNames.CourseName, ConstantDisplay.HRM_Tra_Class_CourseName},
                            {Tra_ClassModel.FieldNames.Status, ConstantDisplay.HRM_Tra_RequirementTrain_Status},
                        };

        var grid_Class = new GridBuilderInfo
        {

            Name = "grid_Class_info",
            ValueFields = valueFieldsClass,
            SizeFields = sizeFieldsClass,
            DisplayFields = displayFieldsClass,
            ReadActionUrl = _hrm_Hr_Service + "Tra_GetData/GetClassByPlanID?planID=" + PlanID,
            AutoBind = true,
            ShowDeleteButton = true,
            GridHeight = 220,
            ShowCheckAll = false,
            ForeignKey = foreignKey,
            ShowEditIcon = false,
            ShowCheckbox = false
        };
    }
    @(Html.VnrGrid<Tra_ClassModel>(grid_Class))
</div>
<div class="commandToolBarWidge">
    <div class="GridTitle">
        @Html.VnrLabel(ConstantDisplay.HRM_Tra_Plan_RecruimentTrain.TranslateString())
    </div>
    <div class="clear"></div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var foreignKeyRMTrain = new Dictionary<object, object[]>()
            {
                {Tra_RequirementTrainModel.FieldNames.Status,new object[]
                   { "Value", "Text", lstRMTrainStatus, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},
            };

        var valueFieldsRequirementTrain = new[]
                        {

                           Tra_RequirementTrainModel.FieldNames.PlanName,
                           Tra_RequirementTrainModel.FieldNames.RequirementTrainName,
                           Tra_RequirementTrainModel.FieldNames.Status,

                             Tra_RequirementTrainModel.FieldNames.DateFrom,
                           Tra_RequirementTrainModel.FieldNames.DateTo,

                        };

        var sizeFieldsRequirementTrain = new Dictionary<string, int>()
                        {

                            {Tra_RequirementTrainModel.FieldNames.PlanName, 140},
                            {Tra_RequirementTrainModel.FieldNames.RequirementTrainName, 140},
                            {Tra_RequirementTrainModel.FieldNames.Status, 90},
                            {Tra_RequirementTrainModel.FieldNames.DateTo, 82},
                            {Tra_RequirementTrainModel.FieldNames.DateFrom, 82},
                        };

        var displayFieldsRequirementTrain = new Dictionary<string, string>()
                        {

                            {Tra_RequirementTrainModel.FieldNames.PlanName, ConstantDisplay.HRM_Tra_RequirementTrain_PlanName},
                            {Tra_RequirementTrainModel.FieldNames.RequirementTrainName, ConstantDisplay.HRM_Tra_RequirementTrain_RequirementTrainName},
                            {Tra_RequirementTrainModel.FieldNames.Status, ConstantDisplay.HRM_Tra_RequirementTrain_Status},
                            {Tra_RequirementTrainModel.FieldNames.DateTo, ConstantDisplay.HRM_Tra_RequirementTrain_DateTo},
                            {Tra_RequirementTrainModel.FieldNames.DateFrom, ConstantDisplay.HRM_Tra_RequirementTrain_DateFrom},
                        };

        var grid_RequirementTrain = new GridBuilderInfo
        {

            Name = "grid_RequirementTrain_info",
            ValueFields = valueFieldsRequirementTrain,
            SizeFields = sizeFieldsRequirementTrain,
            DisplayFields = displayFieldsRequirementTrain,
            ReadActionUrl = _hrm_Hr_Service + "Tra_GetData/GetRequirementTrainByPlanID?planID=" + PlanID,
            AutoBind = true,
            ShowDeleteButton = true,
            GridHeight = 220,
            ShowCheckAll = false,
            ForeignKey = foreignKeyRMTrain,
            ShowEditIcon = false,
            ShowCheckbox = false
        };
    }
    @(Html.VnrGrid<Tra_RequirementTrainModel>(grid_RequirementTrain))
</div>


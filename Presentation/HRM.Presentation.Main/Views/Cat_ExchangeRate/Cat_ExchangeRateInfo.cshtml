@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Category.Models.Cat_ExchangeRateModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
}

<script>
    //var Validator = CheckValidate();
    SetFieldRequired();

    function onSave() {
      //  if (CheckValidate(data)) {
        onSaveAndContinue($('#form_Cat_ExchangeRateInfo'), '@_hrm_Hr_Service', 'api/Cat_ExchangeRate/', '@ConstantControlName.HRM_Category_ExchangeRate_Grid_Name', '@ConstantControlName.HRM_Category_ExchangeRate_PopUp_Name');
       // }
        return false;
    }

    function onSaveClose() {
      //  if (CheckValidate(data)) {
        onSaveAndClose($('#form_Cat_ExchangeRateInfo'), '@_hrm_Hr_Service', 'api/Cat_ExchangeRate/', '@ConstantControlName.HRM_Category_ExchangeRate_Grid_Name', '@ConstantControlName.HRM_Category_ExchangeRate_PopUp_Name');
       // }
        return false;
    }
    function onSaveDataPopUp() {

        //    if (CheckValidate(data)) {
        //   if (!checkDuplicationCode()) {
        onlySave($('#form_Cat_ExchangeRateInfo'), '@_hrm_Hr_Service', 'api/Cat_ExchangeRate/', '@ConstantControlName.HRM_Category_ExchangeRate_Grid_Name'); return false;
        //    }
        // }
    }

</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_ExchangeRateInfo" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.CurrencyBaseID)
                    </div>
                    <div class="FieldValue">
                        @{
    string valueCurr = string.Empty;
    if (Model == null || Model.CurrencyBaseID == null)
    {
        valueCurr = "VND";
    }
                        }
                        @{
                        var _CurrencyBaseID = new ComboBoxBuilderInfo()
                         {
                             Name = "ExchangeRateInfo_CurrencyBaseID",
                             DataTextField = "CurrencyName",
                             DataValueField = "ID",
                             Url = _hrm_Hr_Service + "Sal_GetData/GetMultiCurrency",
                             StyleCss = "width:300px;",
                             Placeholder = ConstantDisplay.HRM_Common_PleaseSelect.TranslateString()
                             //Value = valueCurr,
                         };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyBaseID, _CurrencyBaseID).Text(Model == null ? string.Empty : Model.CurrencyBaseName))
                    </div>
                </div>
               
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.SellingRate)

                    </div>

                    <div class="FieldValue">
                        @{
                            var _SellingRate = new NumericTextBoxBuilderInfo<double>()
                            {
                                Name = "ExchangeRateInfo_SellingRate",
                                StyleCss = "width:150px;",
                                Format = ConstantFormat.HRM_Format_Money.ToString(),
                                //Placeholder = ConstantDisplay.HRM_Common_PleaseSelect.TranslateString()
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.SellingRate, _SellingRate)
                        </div>
                    </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.CurrencyDestID)
                    </div>
                    <div class="FieldValue">
                        @{
                            string valueCurrDest = string.Empty;
                            if (Model == null || Model.CurrencyDestID == null)
                            {
                                valueCurrDest = "VND";
                            }
                        }
                        @{
                            var _CurrencyDestID = new ComboBoxBuilderInfo()
                             {
                                 Name = "ExchangeRateInfo_CurrencyDestID",
                                 DataTextField = "CurrencyName",
                                 DataValueField = "ID",
                                 Url = _hrm_Hr_Service + "Sal_GetData/GetMultiCurrency",
                                 StyleCss = "width:300px;",
                                 //Value = valueCurrDest,
                                 Placeholder = ConstantDisplay.HRM_Common_PleaseSelect.TranslateString()
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyDestID, _CurrencyDestID).Text(Model == null ? string.Empty : Model.CurrencyDestName))
                    </div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.BuyingRate)

                    </div>

                    <div class="FieldValue">
                        @{
                        var _BuyingRate = new NumericTextBoxBuilderInfo<double>()
                        {
                            Name = "ExchangeRateInfo_BuyingRate",
                            StyleCss = "width:150px;",
                            Format = ConstantFormat.HRM_Format_Money.ToString(),
                            //Placeholder = ConstantDisplay.HRM_Common_PleaseSelect.TranslateString()
                        };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.BuyingRate, _BuyingRate)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.MonthOfEffect)
                    </div>

                    <div class="FieldValue">
                        @{
                     var _MonthOfEffect = new DatePickerBuilderInfo()
                        {
                            Name = "ExchangeRateInfo_MonthOfEffect",
                            StyleCss = "width:150px;",
                            Placeholder = ConstantDisplay.HRM_Common_PleaseSelect.TranslateString()
                        };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthOfEffect, _MonthOfEffect).Format(ConstantFormat.HRM_Format_MonthYear)
                    </div>
                </div>
            </td>

        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">

                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-CatExchangeRateInfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-CatExchangeRateInfo", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-CatExchangeRateInfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
    </table>
}
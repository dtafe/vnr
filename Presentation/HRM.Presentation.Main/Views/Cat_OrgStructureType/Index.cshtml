@model HRM.Presentation.Category.Models.CatOrgStructureTypeModel
@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security;

@{
    ViewBag.Title = ConstantDisplay.HRM_Category_OrgStructureType.TranslateString();
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    //var _hrm_Cat_Web = ConstantPathWeb.Hrm_Cat_Web;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
}
@{
    var window = new WindowBuilderInfo
    {
        Name = "windowCatOrgStructureType",
        Visible = false,
        Width = 700,
        LoadContentFrom = _hrm_Main_Web + "Cat_OrgStructureType/CreateOrUpdate/",
    };
}
@(Html.VnrWindow(window))
<script type="text/javascript">
    //Biến để lưu id của các dòng đã check chọn
    var gridName = 'grid_Cat_OrgStructureType';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Category_OrgStructureType_Update_Title.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Category_OrgStructureType_Create_Title.TranslateString())';

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        return {
            OrgStructureTypeName: $('#SOrgStructureTypeName').val(),
            OrgStructureTypeCode: $('#SCode').val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            var grid = $('#grid_Cat_OrgStructureType').data("kendoGrid");
            grid.dataSource.read();
        });
        var url = '@_hrm_Main_Web' + "Cat_OrgStructureType/CreateOrUpdate/";
        EditGridPopUp("grid_Cat_OrgStructureType", "windowCatOrgStructureType", url, '@ConstantPermission.Cat_OrgStructureType', titleEditPopUp);
    });
    $("#btnCreate").click(function () {
        PopUpCreate("windowCatOrgStructureType", titleCreatePopUp, '@ConstantPermission.Cat_OrgStructureType');
    });

    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();
        //Jump Anchor
        jumpAnchor("anchor");
    });
    //Xử Lý Grid
    GridCheckbox("grid_Cat_OrgStructureType");
    //Xử lý nút Delete
    $('#btnDelete').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        debugger
        e.preventDefault();
        DeleteSelected("grid_Cat_OrgStructureType", '@_hrm_Main_Web' + "Cat_OrgStructureType/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Cat_OrgStructureType');
        return false;
    });
    function checkedNodeIds(nodes, checkedNodes) {
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                checkedNodes.push(nodes[i].id);
            }

            if (nodes[i].hasChildren) {
                checkedNodeIds(nodes[i].children.view(), checkedNodes);
            }
        }
    }
    //Export
    $("#btnExportSelected").click(function () {
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportOrgStrucTypeSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Cat_OrgStructureType');
    });

    $("#btnExportAll").click(function () {
        
        var grid = $('#grid_Cat_OrgStructureType').data("kendoGrid");
        if (grid.dataSource._data.length == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportAllOrgStructureTypeList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Cat_OrgStructure');
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <form action="#" method="POST" id="form-search">
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.OrgStructureTypeName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBox("SOrgStructureTypeName", "width:200px")
                        </div>
                    </div>
                    <div id="div3">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.OrgStructureTypeCode)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBox("SCode", "width:200px")
                        </div>
                    </div>
                                   
                </form>
            </div>

        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        @*<div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>*@
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeOrgStructureType", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_grid_Cat_OrgStructureType_Grid_Name + "__Cat_OrgStructureType_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_grid_Cat_OrgStructureType_Grid_Name,
            ReadActionUrl = @_hrm_Hr_Service + "Cat_GetData/GetOrgStructureTypeList/",
            ReadData = "filterFieldInfo",
            ShowCommand = false,
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
            {
                CatOrgStructureTypeModel.FieldNames.OrgStructureTypeCode,
                CatOrgStructureTypeModel.FieldNames.OrgStructureTypeName,     
                CatOrgStructureTypeModel.FieldNames.Description
            };

            //Set độ rộng cho từng column
            grid.SizeFields = new Dictionary<string, int>()
            {
                {CatOrgStructureTypeModel.FieldNames.OrgStructureTypeCode, 125},
                {CatOrgStructureTypeModel.FieldNames.OrgStructureTypeName, 140},                
                {CatOrgStructureTypeModel.FieldNames.Description, 200}
            };

            //Thông tin hiển thị được dịch
            grid.DisplayFields = new Dictionary<string, string>()
            {
                {CatOrgStructureTypeModel.FieldNames.OrgStructureTypeCode , ConstantDisplay.HRM_Category_OrgStructureType_Code},   
                {CatOrgStructureTypeModel.FieldNames.OrgStructureTypeName, ConstantDisplay.HRM_Category_OrgStructureType_OrgStructureTypeName},            
                {CatOrgStructureTypeModel.FieldNames.Description, ConstantDisplay.HRM_Category_OrgStructureType_Description}
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = "grid_Cat_OrgStructureType",
        //    ValueFields = valueFields,
        //    DisplayFields = displayFields,
        //    SizeFields = sizeFields,
        //    ShowCommand = false,
        //    ReadActionUrl = @_hrm_Hr_Service + "Cat_GetData/GetOrgStructureTypeList/",
        //    ReadData = "filterFieldInfo"
        //};

    }

    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<CatOrgStructureTypeModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeOrgStructureType", "CatOrgStructureTypeModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models

@model Sal_ProductSalarySearchModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
}

<script>
    SetFieldRequired();
    function GetDataComputePeoductSalary() {
     
        var checkedNodes = [];
        var treeView = $("#OrgStructureInfo").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        var ProductID = $('#ProductTiveInfo_ProductID').data("kendoComboBox");
        var ProductItemID = $('#ProductTiveInfo_ProductItemID').data("kendoComboBox");
        var dataParameter = {
            MonthStart: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#IndexInfo_MonthStart").val()),
            ProductID: ProductID.value(),
            ProductItemID: ProductItemID.value(),
            OrgStructure: checkedNodes.join(','),
        };
        return dataParameter;
    };


    function onSaveDataPopUp_ProductSalary() {
        ShowHre_ProgressBar();
        $.ajax({
            url: '@_hrm_Hr_Service'+'Sal_Getdata/ComputeProductSalary',
            data: GetDataComputePeoductSalary(),
            type: 'POST',
            success: function (data) {
                if (data[0] == 'error') {
                    Notification(data[1], '@NotificationType.Error.ToString()');
                }
                else {
                    Notification(data[1], '@NotificationType.Success.ToString()');
                }
                CloseHre_ProgressBar();
            },
            error: function (data) {
                Notification('@Html.Raw(ConstantDisplay.HRM_Sal_ComputeProductSalary_Error.TranslateString())', '@NotificationType.Error.ToString()');
                CloseHre_ProgressBar();
            }
        });
    };

</script>

<table>
    <tr>
        <td>
            <div id="div3">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(model => model.OrgStructure)
                    @*@Html.HiddenFor(model => model.Id)*@
                </div>
                <div class="FieldValue">
                    @{
                        var _org = new TreeViewDropdDownBuilderInfo()
                        {
                            Name = "OrgStructureInfo",
                        };
                    }
                    @Html.Partial("EditorTemplates/OrgTreeViewDropDown", _org)
                </div>
            </div>
        </td>
    </tr>
    <tr>
        <td>
            <div id="div3">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(model => model.ProductID)
                    @*@Html.HiddenFor(model => model.Id)*@
                </div>
                <div class="FieldValue">
                    @{
                        var _ProductID = new ComboBoxBuilderInfo()
                        {
                            Name = "ProductTiveInfo_ProductID",
                            DataTextField = "ProductName",
                            DataValueField = "ID",
                            Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiProduct",
                            Placeholder = ConstantDisplay.HRM_Category_Product_SelectProductType.TranslateString(),
                            //Autobind = true,
                            Value = (Model != null && Model.ProductID != null) ? Model.ProductID.ToString() : "",
                        };
                    }
                    @Html.VnrComboBoxFor(model => model.ProductID, _ProductID)
                </div>
            </div>

        </td>
    </tr>
    <tr>
        <td>
            <div id="div3">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(model => model.ProductItemID)
                </div>
                <div class="FieldValue">
                    @{
                        var ProductItemID = new ComboBoxBuilderInfo()
                        {
                            Name = "ProductTiveInfo_ProductItemID",
                            DataTextField = "ProductItemName",
                            DataValueField = "ID",
                            Url = _hrm_Hr_Service + "Cat_GetData/GetFieldterProductITemMulti",
                            //CascadeFrom = "ProductTive_ProductID",
                            //Data = "filterProduct",
                            ServerFilter = true,
                            Value = (Model != null && Model.ProductItemID != null) ? Model.ProductItemID.ToString() : "",
                        };
                    }
                    @Html.VnrComboBoxFor(m => m.ProductItemID, ProductItemID)
                </div>
            </div>

        </td>
    </tr>
    <tr>
        <td>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(m => m.MonthStart)
                </div>
                <div class="FieldValue">
                    @{
                        var datepickerMonthStart = new DatePickerBuilderInfo()
                        {
                            Name = "IndexInfo_MonthStart",
                            Value = @Html.DisplayFor(mode => mode.MonthStart).ToString(),
                            StyleCss = "width:100px;",
                            Format = ConstantFormat.HRM_Format_MonthYear,
                            Placeholder = ConstantDisplay.HRM_INS_RptD02TS_FromMonth.TranslateString(),
                        };
                    }
                    @Html.VnrDatePickerFor(model => model.MonthStart, datepickerMonthStart)
                </div>
                <br />
            </div>
        </td>
    </tr>
    <tr>
        <td style="padding-top:2px; padding-bottom:10px;">
            <div class="LineFooterCommandEdit">
            </div>
        </td>
    </tr>
    <tr>
        <td>
            <div>
                <div class="FieldTitle150">

                </div>

                <div class="FieldValue">
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp_ProductSalary", Name = "save-ProductSalary", Content = ConstantDisplay.HRM_Sal_ComputeProductSalary.TranslateString(), ImageUrl = ConstantPath.IconComputePath })

                </div>
            </div>
        </td>
    </tr>
</table>
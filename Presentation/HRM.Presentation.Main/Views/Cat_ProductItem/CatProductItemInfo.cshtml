@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models;
@model Cat_ProductItemModel

@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
<script>
    SetFieldRequired();
    function onSaveNew() {
        // var dataCheck = data[''];

        // if (CheckValidate(data) && !checkDuplicationCode()) {
        onSaveAndContinue($('#form_cat_ProductItem'), '@_hrm_Hr_Service', 'api/Cat_ProductItem/', 'grid_ProductItem', 'windownCatProductItem'); return false;

        // }
    }

    function onSaveClose() {
        //  if (CheckValidate(data) && !checkDuplicationCode()) {
        onSaveAndClose($('#form_cat_ProductItem'), '@_hrm_Hr_Service', 'api/Cat_ProductItem/', 'grid_ProductItem', 'windownCatProductItem'); return false;

        // }
    }
    function onSaveDataPopUp() {

       
        onlySave($('#form_cat_ProductItem'), '@_hrm_Hr_Service', 'api/Cat_ProductItem/', 'grid_ProductItem'); return false;
      
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_ProductItem" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
                                var _Code = new TextBoxBuilderInfo()
                                {
                                    Width = 300,
                                    Name = "ProductItemInfo_Code"
                                };
                                if (Model != null)
                                {
                                    _Code.Value = Model == null ? string.Empty : Model.Code;
                                }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code, _Code)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProductItemName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.ProductItemName, "width:300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.ProductID)
                    </div>
                    <div class="FieldValue">
                        <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                        @{
                            IEnumerable valueProductType = new string[] { };
                            if (Model != null)
                            {
                                valueProductType = new[] { new { valueProductType = Model.ProductName, ID = Model.ProductID } };
                            }
                                                }
                                                @{
                            var _ProductID = new MultiSelectBuilderInfo()
                            {
                                Name = "ProductItemInfo_ProductID",
                                DataTextField = "ProductName",
                                DataValueField = "ID",
                                Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiProduct",
                                Placeholder = ConstantDisplay.HRM_Category_Product_SelectProductType.TranslateString(),
                                MaxSelectedItems = 1,
                                Autobind = true,
                                Value = valueProductType,
                                Width = 300
                            };
                        }
                        @Html.VnrMultiSelectFor(model => model.ProductID, _ProductID)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.UnitPrice)
                    </div>
                    <div class="FieldValue">
                        @{
                            var UnitPrice = new NumericTextBoxBuilderInfo<double>()
                            {
                                Name = "ProductItemInfo_UnitPrice",
                                StyleCss = "width:150px",
                                Format = ConstantFormat.HRM_Format_Money
                            };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.UnitPrice, UnitPrice)
                        @{
                            var CurrencyName = new ComboBoxBuilderInfo()
                             {
                                 Name = "ProductItemInfo_CurrencyID",
                                 DataTextField = "CurrencyName",
                                 DataValueField = "ID",
                                 Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                 StyleCss = "width:300px;",
                                 Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID, CurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                </div>
                
                @*<div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.BonusPrice)
                    </div>
                  
                    <div class="FieldValue">
                        @{
                         var BonusPrice = new NumericTextBoxBuilderInfo<double>()
                         {
                             Name = "ProductItemInfo_BonusPrice",
                             StyleCss = "width:137px",
                             Format = ConstantFormat.HRM_Format_Money

                         };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.BonusPrice, BonusPrice)

                      
                    </div>
                </div>*@
                @*<div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProductionTime)
                    </div>
                    <div class="FieldValue">
                        @{
                         var ProductionTime = new NumericTextBoxBuilderInfo<double>()
                         {
                             Name = "ProductItemInfo_ProductionTime",
                             StyleCss = "width:137px",
                             Format = ConstantFormat.HRM_Format_Money

                         };
                         }
                          @Html.VnrNumericTextBoxFor(model => model.ProductionTime, ProductionTime)
                    </div>
                </div>*@
                    
                 @*<div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.RateStage)
                    </div>
                    <div class="FieldValue">
                        @{
                         var RateStage = new NumericTextBoxBuilderInfo<double>()
                         {
                             Name = "ProductItemInfo_RateStage",
                             StyleCss = "width:137px",
                             Format = ConstantFormat.HRM_Format_Money

                         };
                         }
                          @Html.VnrNumericTextBoxFor(model => model.RateStage, RateStage)
                    </div>
                </div>*@  
                                                 
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Note1)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Note1, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-ProductItem", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-ProductItem", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-ProductItem", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
 }  
    





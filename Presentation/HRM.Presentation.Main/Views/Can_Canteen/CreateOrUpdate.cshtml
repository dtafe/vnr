@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Canteen.Models


@model HRM.Presentation.Canteen.Models.Can_CanteenModel
@{
    var _hrm_Can_Service = ConstantPathWeb.Hrm_Can_Service;
    Layout = null;
    var canteenId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
<script>
    var data = SetCharacteFieldRequired();

    function checkDuplicationCanteen() {
         
        var code = $("#CanteenCode").val();
        var id = '@canteenId';
        var data = { tableName: "Can_Canteen", columnName: "CanteenCode", keyword: code, id: id };
        var isduplicate = checkDuplicate('@_hrm_Sys_Service', 'Sys_GetData', 'CheckDuplicate', data, "CanteenCode");
        return isduplicate;
    }

    function onSaveAndContinuePopUp() {
         
        if (CheckValidate(data)) {
            if (!checkDuplicationCanteen()) {
                onSaveAndContinue($('#form_can_Canteen'), '@_hrm_Can_Service', 'api/Can_Canteen/', '@ConstantControlName.HRM_Canteen_Canteen_Grid_Name', 'windowCanTeen'); return false;
            }
        }
    }

    function onSaveClosePopUp() {
        if (CheckValidate(data)) {
            if (!checkDuplicationCanteen()) {
                onSaveAndClose($('#form_can_Canteen'), '@_hrm_Can_Service', 'api/Can_Canteen/', '@ConstantControlName.HRM_Canteen_Canteen_Grid_Name', 'windowCanTeen'); return false;
            }
        }
    }

    function onSaveDataPopUp() {
         
        if (CheckValidate(data)) {
            if (!checkDuplicationCanteen()) {
                onlySave($('#form_can_Canteen'), '@_hrm_Can_Service', 'api/Can_Canteen/', '@ConstantControlName.HRM_Canteen_Canteen_Grid_Name'); return false;
            }
        }
    }
</script>
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_can_Canteen" }))
{
    @Html.HiddenFor(model => model.ID)
     <div id="div3">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.CanteenName)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(model => model.CanteenName, "width:300px")
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div3">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.CanteenCode)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(model => model.CanteenCode, "width:300px")
        </div>
        <div style="clear: both;"></div>
    </div>
   
    <div id="div4">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.LocationID)
        </div>
        <div class="FieldValue">
            @{
    var LocationIds = new MultiSelectBuilderInfo()
    {
      Width=300,
        DataTextField = Can_CanteenModel.FieldNames.LocationName,
        DataValueField = Can_CanteenModel.FieldNames.ID,
        Url = @_hrm_Can_Service + "Canteen_GetData/GetMultiLocation",
        Placeholder = ConstantDisplay.HRM_Canteen_Canteen_SelectLocation.TranslateString(),
        MaxSelectedItems = 1,
        Autobind = true,
        Value = new string[] { @Html.DisplayFor(mode => mode.LocationID).ToString() }
    };
            }
            @(Html.VnrMultiSelectFor(mode => mode.LocationID, LocationIds))
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div5">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.Note)
        </div>
        <div class="FieldValue">
            @Html.VnrTextAreaFor(model => model.Note, "width:500px;height:100px;")
        </div>
    </div>
    <div>
        <div class="FieldTitle150"></div>
        <div class="FieldValue">
            <div style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </div>
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-canMachineOfLine", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveAndContinuePopUp", Name = "save-New-canMachineOfLine", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClosePopUp", Name = "save-close-canMachineOfLine", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
    </div>
}



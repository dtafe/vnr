@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using VnResource.Helper.Security
@*@using HRM.Presentation.HrmSystem.Models*@
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-type" content="application/json, charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    <link href="@Url.Content("~/Content/kendo/2014.1.415/kendo.common.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2014.1.415/kendo.dataviz.min.css")" rel="stylesheet" type="text/css" />

    <!--Thay đổi theme cho web-->
    <link id="pagestyle" href="" rel="stylesheet" type="text/css" />
    <!--/-->
    <link href="@Url.Content("~/Content/defaultstyle.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/hrmsite.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendowebext/kendo.ext.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/jquery-ui-1.10.4.custom.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/kendo/2014.1.415/jquery.min.js")"></script>
    <script src="@Url.Content("~/Scripts/angular.min.js")"></script>
    <script src="@Url.Content("~/Scripts/VnrJsFramework.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2014.1.415/kendo.all.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2014.1.415/kendo.aspnetmvc.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo.modernizr.custom.js")"></script>
    <script src=@Url.Content("~/Scripts/hrm-8.0.js")></script>
    <script src="@Url.Content("~/Scripts/vnr-validator.js")"></script>
    <script src="@Url.Content("~/Scripts/vnr-control.js")"></script>
    <script src=@Url.Content("~/Scripts/hrm-data.js")></script>
    <script src="@Url.Content("~/Scripts/jquery-ui-1.10.4.custom.js")"></script>
    <script src="@Url.Content("~/Scripts/kendowebext/kendo.web.ext.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2014.09.30/cultures/kendo.culture.vi-VN.min.js")"></script>
    <style>
        .k-edit-form-container {
            width: auto;
            padding-right: 10px;
        }

        .k-tabstrip .k-content {
            position: static;
            border-style: solid;
            border-width: 1px 0px 0px 0px;
            margin: 0px;
            padding: 0px 0px 0px 1px;
            zoom: 1;
        }

        .k-grid td {
            /* border-style: solid; */
            border-width: 0 0 0 0;
            padding: 0 .6em;
            overflow: hidden;
            line-height: 1.6em;
            vertical-align: middle;
            text-overflow: ellipsis;
        }

        .k-header > .k-header-column-menu {
            float: right;
            /*margin: -0.5em -0.6em -0.4em;*/
            /*padding: .0em .0em .0em;*/
            position: relative;
            z-index: 1;
        }



        .k-grid-header .k-header {
            overflow: hidden;
            border-style: solid;
            min-height: 18px;
            line-height: 18px;
            border-width: 0 0 1px 1px;
            padding: 2px 5px 0px 5px;
            font-weight: normal;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        .k-pager-wrap {
            background-color: #e3e3e3;
            color: #2e2e2e;
            padding: 0px;
        }

        .k-tabstrip .k-tabstrip-items {
            padding: 0px 5px 0px 5px;
            white-space: nowrap;
        }

        .k-tabstrip-items .k-link, .k-panelbar .k-tabstrip-items .k-link {
            display: inline-block;
            border-bottom-width: 0;
            padding: 5px 5px;
        }

        .k-tabstrip-items .k-item {
            border-radius: 0 0 0 0;
            white-space: nowrap;
        }

        .k-dropzone {
            border-style: solid;
            border-width: 0;
            padding: 0;
            background-color: transparent;
        }

        .k-upload-status {
            position: absolute;
            right: 12px;
            top: 0;
            line-height: .7em;
        }

        .k-toolbar {
            position: relative;
            display: block;
            vertical-align: middle;
            line-height: 22px;
            height: 24px;
            padding: 2px;
        }

        /*.k-icon {
            background-image: url("Content/images/arrowdown.png");
        }
        .k-i-arrow-s {
            background-position: 0px;
        }*/
        .breadcrumb {
            padding: 2px 2px;
            margin-bottom: 0px;
            list-style: none;
            /*background: #e7efef no-repeat;*/
            border-bottom: solid 0px #D5D5D5;
            background: #F8F8F8 no-repeat;
            border-radius: 0px;
            margin-left: 0px;
            margin-right: 0px;
            margin-bottom: 0px;
        }

        .navbar-collapse {
            padding-left: 0px;
        }

        .header-menu {
            padding-left: 1px;
            padding-right: 1px;
            /*min-width: 1024px;*/
        }

        input.k-textbox {
            height: 2.13em;
            text-indent: 5px;
        }

        #dropdownBookmark li {
        }

        #dropdownBookmark ul li a:link {
            text-decoration: none;
        }

        #dropdownBookmark .BookMarkData {
            list-style-image: url(/Content/images/icons/submenu/menu/Category-icon.png);
            margin-bottom: 5px;
        }

        #dropdownBookmark .Setting {
            list-style-image: url(Content/images/icons/submenu/menu/Config-icon.png);
        }

        #dropdownBookmark .ChangePassword {
            list-style-image: url(Content/images/icons/submenu/menu/Ins_Insurance.png);
        }

        #dropdownBookmark .Exit {
            list-style-image: url(Content/images/login/logout-icon.png);
        }

        #dropdownBookmark .ChangePassword a {
            color: black;
            text-decoration: none;
        }


        #dropdownBookmark .Setting a {
            color: black;
            text-decoration: none;
        }

        #dropdownBookmark .Exit a {
            color: black;
            text-decoration: none;
        }

        #dropdownBookmark {
            width: 400px;
        }

        .k-state-selected {
            color: #000 !important;
            background-color: #BEC0C2 !important;
            border-color: #5A83B1 !important;
        }

        .nav > li > a {
            position: relative;
            display: block;
            padding: 1px 8px;
        }

            .nav > li > a:hover {
                text-decoration: underline;
                color: #fff;
            }

        .k-multiselect.k-header {
            float: left;
        }

        .k-grid td {
            white-space: nowrap;
        }

        .k-dropdown .k-input, .k-selectbox .k-input {
            background: #fff;
        }

        label {
            /* display: inline-block; */
            margin-bottom: 0px;
        }

        .k-widget.k-tooltip-validation {
            display: none;
        }

        .setNotifyFieldRequired {
            color: red;
        }
    </style>

    @{
        // var loginNameObj = Session[SessionObjects.LoginUserName];
        var loginNameObj = Session[SessionObjects.UserInfoName];
        var loginName = string.Empty;
        var UserLoginID = Guid.Empty;
        if (Session[SessionObjects.UserId] != null && Session[SessionObjects.UserId].ToString().Count() == Guid.Empty.ToString().Count())
        {
            UserLoginID = (Guid)Session[SessionObjects.UserId];
        }
        if (loginNameObj != null)
        {
            loginName = ConstantDisplay.HRM_System_LoggedInAs.TranslateString() + loginNameObj.ToString();
        }
        var _hrm_Sys_Web = ConstantPathWeb.Hrm_Sys_Web;
    }

    @{
        var Hrm_Eva_Web = ConstantPathWeb.Hrm_Eva_Web;
        var hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
        var Hrm_Sys_Web = ConstantPathWeb.Hrm_Sys_Web;
        var Hrm_Cat_Web = ConstantPathWeb.Hrm_Cat_Web;
        var Hrm_Att_Web = ConstantPathWeb.Hrm_Main_Web;
        var Hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

        var Hrm_Hre_Web = ConstantPathWeb.Hrm_Main_Web;
        var Hrm_Lau_Web = ConstantPathWeb.Hrm_Lau_Web;
        var Hrm_Can_Web = ConstantPathWeb.Hrm_Can_Web;
        var Hrm_Rec_Web = ConstantPathWeb.Hrm_Rec_Web;

        var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

        var profileID = Session[SessionObjects.ProfileID];
        var userID = Session[SessionObjects.UserId];
        var userLoginName = Session[SessionObjects.LoginUserName];
        var userInfoName = string.Empty;
        if (loginNameObj != null)
        {
            userInfoName = loginNameObj.ToString();
        }

    }

    @{
        var windowHre_ReportHCGenderName = "PopUpCreateTemplate_Hre_ReportHCGender";
        var windowHre_ReportHCGender = new WindowBuilderInfo
    {
        Name = windowHre_ReportHCGenderName,
        Visible = false,
        LoadContentFrom = Hrm_Hre_Web + "Hre_ReportHCGender/CreateTemplate"
    };
    }
    @(Html.VnrWindow(windowHre_ReportHCGender))

</head>
<body>
    <!--Khai báo popup chung cho đổi cột hiển thị-->
    @{
        var windowChangeColum = new WindowBuilderInfo
        {
            Name = ConstantControlName.HRM_ChangeColum_PopUp_Name,
            Visible = false,
            LoadContentFrom = _hrm_Main_Web + "Sys_ColumnMode/Index",
        };
    }
    @(Html.VnrWindow(windowChangeColum))
    @Html.Hidden(ConstantControlName.HRM_ChangeColum_Grid_Name)
    @Html.Hidden(ConstantControlName.HRM_ChangeColum_ID_Name)
    @Html.Hidden(ConstantControlName.HRM_ChangeColum_ColumMode_Name)
    @Html.Hidden(ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name)

    <script>
        function ClickButtonChangeColum(btnName, objectName) {
            $("#" + btnName).click(function () {
                debugger;
                var columnMode = $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val();
                if (columnMode == "" || columnMode == null) {
                    columnMode = $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val();
                }
                var gridControlName = $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val();
                var idChangeColumn = $("#" + '@ConstantControlName.HRM_ChangeColum_ID_Name').val();
                var pageSize = 0;
                var window = $("#" + '@ConstantControlName.HRM_ChangeColum_PopUp_Name').data("kendoWindow");
                if (gridControlName != null && gridControlName != "") {
                    var gridName = gridControlName.split("__");
                    pageSize = $("#" + gridName).data("kendoGrid").dataSource.pageSize();
                }
                window.refresh({
                    url: '@_hrm_Main_Web' + "Sys_ColumnMode/Index",
                    data: { ID: idChangeColumn, UserID: '@userID', GridControlName: gridControlName, StringXml: columnMode, ObjectName: objectName, PageSize: pageSize }
                }).center().open().title('@ConstantDisplay.HRM_ChangeColumn.TranslateString()');
            });
        }
        function ClickButtonChangeColum2(objectName) {
            var columnMode = $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val();
            if (columnMode == "" || columnMode == null) {
                columnMode = $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val();
            }
            var gridControlName = $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val();
            var idChangeColumn = $("#" + '@ConstantControlName.HRM_ChangeColum_ID_Name').val();
            var pageSize = 0;
            var window = $("#" + '@ConstantControlName.HRM_ChangeColum_PopUp_Name').data("kendoWindow");
            if (gridControlName != null && gridControlName != "") {
                var gridName = gridControlName.split("__");
                pageSize = $("#" + gridName).data("kendoGrid").dataSource.pageSize();
            }
            window.refresh({
                url: '@_hrm_Main_Web' + "Sys_ColumnMode/Index",
                data: { ID: idChangeColumn, UserID: '@userID', GridControlName: gridControlName, StringXml: columnMode, ObjectName: objectName, PageSize: pageSize }
            }).center().open().title('@ConstantDisplay.HRM_ChangeColumn.TranslateString()');
        }
    </script>
    <!--End đổi cột hiển thị-->
    <span id="popupNotification"></span>
    <script id="template-kendo-upload-file" type="text/x-kendo-template">
        <span class='k-progress'></span>
        <div class='file-wrapper'>
            <a class='file-upload-name' href=''>#=name#</a>
            <span>@*#=parseFloat((size/1024)/1024).toFixed(2)# M*@</span>
            <button type='button' class='k-upload-action' style='position: absolute; top: 0; right: 0;'></button>
        </div>


    </script>

    <script id="notificationTemplate" type="text/x-kendo-template">
        <div class="@{<text>#= type #</text>}">
            <div class="k-header">#= title #</div>
            <p>#= message #</p>
        </div>
    </script>
    <script>
        function ShowProgressBar(id, gridName) {
            if (IsActiveProgress) {
                debugger;
                $.ajax({
                    type: 'POST',
                    url: '@hrm_Sys_Service' + 'Sys_GetData/GetPercentComplete',
                    data: { id: id },
                    dataType: 'json',
                    success: function (data) {
                        debugger;
                        if (!isNaN(data)) {
                            //UpdateValueProgress(data);
                            CreateProgress(data);
                            setTimeout(function () {
                                if (data < 100) {
                                    ShowProgressBar(id, gridName);
                                }
                                else {
                                    ReadGrid(gridName);
                                }

                            }, 1000);
                        }
                    },
                    error: function (data) {
                        window.ShowNotificationProcessor("Lỗi trong quá trình xử lý !");
                    }
                });
            }
        };

        function ShowProgressBarWithID(id) {
            if (IsActiveProgress) {
                debugger;
                $.ajax({
                    type: 'POST',
                    url: '@hrm_Sys_Service' + 'Sys_GetData/GetPercentComplete',
                    data: { id: id },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        debugger;

                        if (!isNaN(data)) {
                            //UpdateValueProgress(data);
                            CreateProgress(data);
                            setTimeout(function () {
                                if (data < 100) {
                                    ShowProgressBar(id);
                                } else {
                                    window.ShowNotificationProcessor("Xử Lý Thành Công");
                                }

                            }, 1000);
                        }
                    },
                    error: function (data) {
                        window.ShowNotificationProcessor("Error,Lỗi trong quá trình xử lý !");
                    }
                });
            }
        }

        ;

        function SaveChangeeee(e) {
            alert("Saving changes... Please wait");
            this.dataSource.one("change", function (e) {
                alerts("Update successful!");
            });
        }


        function clickBack() {
            var link = $("#CurrentLinkForClickBack").val();
            if (link != '' && link != undefined) {
                var links = link.split('|');
                if (links.length > 2) {
                    KendoRouteMapping(links[0], links[1], links[2]);
                }
            }
        }

        function GetScreenWidth() {
            $.ajax({
                url: '@Hrm_Main_Web' + "Home/SetWidth",
                data: { width: $(window).width() },
                type: 'POST',
                success: function (result) {
                }
            });
        }
        $(document).ready(function () {
            GetScreenWidth();
            $(document).ajaxSend(function (evt, request, settings) {
                if (settings.url.indexOf('KeepSessionAlive.ashx') == -1) {
                    $("#loading111").css("display", "block");
                }
            });
            $(document).ajaxStop(function () {
                $("#loading111").css("display", "none");
            });
            $(document).ajaxComplete(function () {
                $("#loading111").css("display", "none");
            });
            $(document).ajaxError(function () {
                $("#loading111").css("display", "none");
            });

        });

        function isKeyPressed(event) {

            if (event.ctrlKey == 1) {

                NavigateEvent();
            }
        }
        function NavigateEvent() {

            var strLink = document.getElementsByClassName("k-state-hover")[0].firstElementChild.hash;
            alert(strLink);
            if (strLink != '' && strLink != undefined) {
                var linkItem = strLink.split(',');
                //KendoRouteMapping(linkItem[0].substr(0, linkItem[0].length - 1), linkItem[1], linkItem[2].substr(0, linkItem[2].length - 2));
                // window.location = "http://localhost:6100/" + linkItem[0].substr(0, linkItem[0].length - 1);
                window.open('@Hrm_Main_Web' + linkItem[0].substr(0, linkItem[0].length - 1));
            }
        }

        var notification = $("#popupNotification").kendoNotification({
            button: true,
            pinned: true,
            autoHideAfter: 10000,
            templates: [{
                type: "info",
                template: $("#notificationTemplate").html()
            }]
        }).data("kendoNotification");

        function ShowNotificationValidate(listFieldValidate) {

            var strHTML = '';
            for (var item in listFieldValidate) {
                switch (item) {
                    case "Required":
                        var field = listFieldValidate[item].split(',');

                        strHTML += GetFieldAfterTranslate(field) + '@Html.Raw(ConstantMessages.Required.TranslateString())' + '<br/>';
                        break;
                }
            }
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', strHTML, "k-block k-info-colored");
        }

        function ShowNotification(strTitle, strContent, srttype) {
            if (strContent != '') {
                notification.show({
                    title: strTitle,
                    message: strContent,
                    type: srttype
                });
            }
        }

        function ShowNotificationProcessor(actionStatus) {
            var strTitle = '@Html.Raw(ConstantMessages.Notification.TranslateString())', strContent = '', srttype = '';
            if (actionStatus != null && actionStatus != '' && actionStatus.length > 0) {
                var n = actionStatus.indexOf(","), status = actionStatus, message = '';
                if (n > 0) {
                    status = actionStatus.substring(0, n);
                    message = actionStatus.substring(n + 1, actionStatus.length);
                }

                switch (status) {
                    case '@NotificationType.Success.ToString()':
                        srttype = "k-block k-success-colored";
                        if (message != '') {
                            message = '@Html.Raw(ConstantMessages.Succeed.TranslateString())' + ". " + message;
                        }
                        else {
                            message = '@Html.Raw(ConstantMessages.Succeed.TranslateString())';
                        }
                        strContent = message;
                        break;
                    case '@NotificationType.Error.ToString()':
                        srttype = "k-block k-error-colored";
                        strContent = message;
                        break;
                    case '@NotificationType.Locked.ToString()':
                        srttype = "k-block k-error-colored";
                        strContent = '@Html.Raw(ConstantMessages.Locked.TranslateString())';
                        break;
                    default:
                        srttype = "k-block k-info-colored";
                        strContent = actionStatus;
                        break;
                }
            }

            ShowNotification(strTitle, strContent, srttype);
        }


    </script>
    @{
        var windowBookmark = new WindowBuilderInfo
        {
            Name = "windowBookmark",
            Visible = false,
            Width = 550,
            Height = 130,
            Title = "Đánh Dấu Trang",
            ContentFunc = @<text>
                <form action="#" method="POST" id="form-create">
                    @Html.Hidden("KeyCode")
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabel("Name")

                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBox("txtName", "width:300px")
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabel("Url")
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBox("txtLink", "width:300px")
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabel("Phím Tắt (ctr + alt + ) ")
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBox("txtHotKey", "width:300px")
                        </div>
                    </div>
                    @Html.Hidden("txtHotCode")
                    <div>
                        <div class="FieldTitle">
                        </div>
                        <div class="FieldValue">
                            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDone", Content = "Save", ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCancel", Content = "Cancel", ImageUrl = ConstantPath.IconCancelLateEarly })
                        </div>
                    </div>
                </form>
            </text>
        };
    }
    @(Html.VnrWindow(windowBookmark))



    <div id="loading111" style="z-index: 1; color: #000; font-weight:bold; display: none; width: 70px;
                                           height: 30px; border: 1px solid #e4d67e; background-color: #fff3a5;
                                           position: absolute; top: 0; left: 50%; padding: 5px; ">
        Loading...
    </div>
    <div id="saving" style="z-index:1; color: #428bca; display:none; width: 56px; height: 20px; border: 0px solid black; position: absolute; top: 50%; left: 50%; padding: 0px;">
        <img src='Content/images/loading-image.gif' width="56" height="20" /><br>Saving...
    </div>
    <div class="master-wrapper-page k-content">
        <div class="master-wrapper-content">
            @if (IsSectionDefined("header"))
            {
                @RenderSection("header")
            }
            else
            {
                <script type="text/javascript">
                    $(document).ready(function () {

                        $("#restart-application").click(function (e) {
                            showThrobber('@Html.Raw(HttpUtility.JavaScriptStringEncode("Admin.Header.RestartApplication.Progress"))');
                        });

                    });

                </script>
                <div id="eventKey"></div>
                <div class="header">
                    <div class="logo">
                    </div>

                    <div style="float: right; padding-top: 3px; ">


                        <div style="float: left; margin-right: 25px; margin-top: 7px; color: #5B95D0; white-space: nowrap;">
                            @ConstantDisplay.HRM_System_LoggedInAs.TranslateString()  @if (Session[SessionObjects.FullName] == null)
                            {
                                Session[SessionObjects.FullName] = string.Empty;
                            }
                            @Session[SessionObjects.FullName]
                        </div>

                        <div class="btn-group btn-group-sm">
                            <button type="button" class="btn btn-default" id="btnWord" style="height:29px;padding-top:2px"><span style="max-height:10px;max-width:10px"><img src="@ConstantPath.IconHelp" /></span></button>
                            <button type="button" class="btn btn-default" id="btnBookmark" style="height:29px;padding-top:2px"><span style="max-height:10px;max-width:10px"><img src="@ConstantPath.IconBookmark" style="max-height:12px;max-width:12px" /></span></button>
                            <button type="button" class="btn btn-default" id="btnLanguage" style="height:29px;padding-top:2px">
                                <span style="max-height:10px;max-width:10px">
                                    @if (Session[SessionObjects.LanguageCode + userLoginName] != null && Session[SessionObjects.LanguageCode + userLoginName].ToString() == "VN")
                                    {
                                        <img src="@ConstantPath.IconEn" id="imgLang" style="max-height:14px;max-width:20px" />
                                    }
                                    else
                                    {
                                        <img src="@ConstantPath.IconVi" id="imgLang" style="max-height:14px;max-width:20px" />
                                    }
                                </span>
                            </button>
                            <div class="btn-group" role="group" style="height:30px">
                                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-expanded="false" style="height:29px;padding-top:2px">
                                    <img src="@ConstantPath.IconChangeTheme" style="height: 20px; max-width: 17px" />
                                    <span class="caret"></span>
                                </button>
                                <div class="dropdown-menu" role="menu" style="left: -50px; padding: 10px;">
                                    @{
                                    IList<SelectListItem> listTheme = Enum.GetValues(typeof(EnumDropDown.ETheme))
                                        .Cast<EnumDropDown.ETheme>()
                                        .Select(x => new SelectListItem { Value = EnumDropDown.GetEnumDescription(x), Text = x.ToString() })
                                        .ToList();
                                    foreach (var item in listTheme)
                                    {
                                        <div style="width:100%; height:15px;display: inline-block;float: left; margin: 2px;">
                                            <input name="theme" value="@item.Value" type="radio" onclick="ChangeTheme(this);"><span>@item.Text</span>
                                        </div>
                                    }
                                    }

                                </div>
                            </div>
                            <button type="button" title="Clear Cache" class="btn btn-default" id="btnReset" style="height:29px;padding-top:2px"><span style="max-height:20px;max-width:20px"><img src="@ConstantPath.IconChangeInOut" style="max-height:22px;max-width:22px" /></span></button>

                            <div class="btn-group" style="height:30px">

                                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" id="showBookmark" style="height:29px;padding-top:4px">
                                    <span class="glyphicon glyphicon-list" style="max-height:10px;max-width:10px"></span>&nbsp;&nbsp;<span class="caret"></span>
                                </button>
                                <div id="dropdownBookmark" class="dropdown-menu pull-right" role="menu"></div>

                            </div>
                        </div>
                    </div>
                    <div class="clear"></div>

                </div>
            }
            @if (IsSectionDefined("headermenu"))
            {
                @RenderSection("headermenu")
            }
            else
            {
                <div id="NewTab" class="header-menu">

                    @*@Html.Partial("Menu")*@
                    @{Html.RenderAction("LoadMenu", "Home");}

                    <div class="menucss">
                        <img src="~/Content/images/drop-up-icon.png" id="icon1" height="20" title="Show/Hide Sub-Menu" onclick='checkshowhide()' />
                    </div>
                    <div id="showhidesubmenu" style="border-width:1px; height:auto">
                        @Html.Partial("SubMenu")

                    </div>
                </div>

            }
            <div id="hrm_main_content" style="padding-bottom:10px;">

                @RenderBody()

            </div>
        </div>

    </div>

    @Html.Hidden("ProfileIDByUser")
    @Html.Hidden("UserInfoName")
    @Html.Hidden("UserLoginId", userID)
    @Html.Hidden("UserLoginName", userLoginName)
    @Html.Hidden("CurrentLinkForClickBack")



    @*thẻ chứa progressbar*@
    <div id="Hre_ProgressBar" style="position: absolute; display: none; left: 50%; top: 50%; margin-left: -50px; margin-top: -50px; ">
        <img src="~/Content/kendo/2014.1.415/DefaultVnR2/loading-image.gif" />
    </div>

    @*[Hien.Nguyen] Div progressbar*@
    <div style="display:none;" id="ModalsProgress">
        <div id="progressBar"></div>
    </div>

    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    <script>
        //Khởi tạo progressbar
        $("#progressBar").kendoProgressBar({
            min: 0,
            max: 100,
            value: 0,
            type: "percent",
            //change: onChange,
            complete: onCompleteProgress
        });

        //Khởi tạo Modals
        if (!$("#ModalsProgress").data("kendoWindow")) {
            $("#ModalsProgress").kendoWindow({
                width: "340px",
                title: "Đang Xử Lý...",
                actions: ["Close"],
                close: onCloseModals,
            });
            $("#ModalsProgress").data("kendoWindow").center();
        }


        //dùng kt quyền trên lưới (edit tren lưới)
        function dataBound(e) {
            //nếu là edit trên lưới thì sẽ kt quyền
            if (e.sender._editMode() == "inline") {
                //lay tên màn hình
                var url = location.hash;
                var screenItem = url.split('/');
                var screen = '';
                if (screenItem != null) {
                    screen = screenItem[1];
                }

                var isAccess = checkPermission(PrivilegeType.Modify, screen, false);
                if (!isAccess) {
                    $("#" + this.wrapper.attr('id')).data("kendoGrid").hideColumn(1);
                }
            }
        }
        function KendoRouteMapping(url, hrmWebSite, alias) {

            KendoRouteMapping(url, hrmWebSite, alias, false);
        }
        function KendoRouteMapping(url, hrmWebSite, alias, newTab) {

            var user = '@Session[SessionObjects.UserId]';

            if (user == null || user == '') {
                window.location.href = '@Hrm_Main_Web' + "Home/Login";
            }
            var screenItem = url.split('/');
            var screen = '';
            if (screenItem != null) {
                screen = screenItem[1];
            }
            if (screen == '') {
                return;
            }
            debugger;

            //Tung.Ly 20140829: kt quyền create/modify khi gọi chuyển trang
            var privilegeType = '@PrivilegeType.View';
            if (screenItem != null && screenItem.length >= 3) {
                var permissionType = screenItem[2];
                if (permissionType == "Create" || permissionType == "Analysis") {
                    privilegeType = 'Create';
                }
                else if (permissionType == "Edit") {
                    privilegeType = 'Modify';
                }

                if (privilegeType != '@PrivilegeType.View') {
                    var isAccess = checkPermission(privilegeType, screen);
                    if (!isAccess) {
                        return;
                    }
                }
            }




            // kt quyền truy cập trang
            $.ajax({
                url: '@Hrm_Main_Web' + "MainBase/CheckPermission",
                data: { userId: user, privilegeType: '@PrivilegeType.View', permission: screen },
                dataType: "json",
                type: 'POST',
                async: false,
                success: function (result) {

                    if (result == true) {



                        //[hien.pham tạm thời chưa có cách giải quyết tốt hơn nên hot fix trước
                        var lstLinkException = ["#Hrm_Hre_Web/#", "Hre_GetData", "#Hrm_Att_Web/#", "Att_GetData", "#Hrm_Cat_Web/#", "Cat_GetData", "#Hrm_Sys_Web/#",
                            "Sys_GetData", "#Hrm_Can_Web/#", "Canteen_GetData", "#Hrm_Lau_Web/#", "Lau_GetData", "#Hrm_Sal_Web/#", "Sal_GetData", "#Hrm_Eva_Web/#", "Eva_GetData", "#Hrm_Rec_Web/#", "Rec_GetData"];

                        for (var h = 0; h < lstLinkException.length; h++) {
                            if (lstLinkException[h].indexOf(url) >= 0)
                                return;
                            var keys = url.split("/");
                            for (var k = 1; k < keys.length; k++) {
                                if (keys[k] != "" && lstLinkException[h].indexOf(keys[k]) >= 0) {
                                    return;
                                }
                            }
                        }
                        if (newTab) {
                            window.open(url + "#NewTab");
                            window.focus();
                            return;
                        }


                        var re = new RegExp("#" + hrmWebSite, 'g');
                        var newUrl = url.replace(re, alias);
                        var router = new kendo.Router();
                        router.start();
                        router.navigate(url);


                        //window.open(
                        //  url+"#NewTab",
                        //  '_blank'
                        //);
                        $("#hrm_main_content").html('<div class="loading icon-refresh icon-spin" style="margin-left:10%"></div>');

                        ShowHre_ProgressBar();//show loading

                        $.ajax({
                            url: newUrl,
                            cache: false,
                            success: function (html) {

                                selectedIds = []; //clear array list id is navigation page


                                $("#hrm_main_content").html('');
                                var main = new kendo.View(html);
                                main.render($("#hrm_main_content"));
                                setTimeout(function () { CloseHre_ProgressBar(); }, 1000);//đóng loading



                                //main.destroy();
                                $("#hrm_main_content a").on('click', function (e) {

                                    e.preventDefault();
                                    var route = window.location.href;

                                    var index = route.indexOf("#");
                                    var index1 = route.indexOf("/", index);
                                    route = route.substring(index, index1);
                                    if (this.href.indexOf("http://") >= 0) {
                                        index = this.href.indexOf("/", 7);
                                        var absUrl = this.href.substring(index + 1);
                                        KendoRouteMapping(route + "/" + absUrl, route.substring(1), alias);
                                    }
                                });

                                //Refresh kendo control
                                if ($("[data-role=dropdownlist]").length > 0) {
                                    $("[data-role=dropdownlist]").data("kendoDropDownList").refresh();
                                }
                                if ($("[data-role=grid]").length > 0) {
                                    $("[data-role=grid]").data("kendoGrid").refresh();
                                }
                                if ($("[data-role=editor]").length > 0) {
                                    $("[data-role=editor]").data("kendoEditor").refresh();
                                }
                                if ($("[data-role=multiselect]").length > 0) {
                                    $("[data-role=multiselect]").data("kendoMultiSelect").refresh();
                                }


                            }
                        });

                    }
                    else {
                        ShowNotificationProcessor("Bạn không có quyền truy cập trang này.");
                    }

                },
                error: function (result) {
                    ShowNotificationProcessor(result.responseText);
                }
            });

            $('html, body').animate({
                scrollTop: $("#NewTab").offset().top
            }, 1000);
        }


        //set height
        function resize() {
            var _height = $(window).innerHeight();
            var divhrm_main_content = $('#hrm_main_content');
            divhrm_main_content.height(_height - 100);

        }

        function onMenuClick(url, hrmWebSite, alias) {

            KendoRouteMapping(url, hrmWebSite, alias);
        }

        $(document).ready(function () {
            debugger;


            var url = document.URL;
            if (url.indexOf("%23") > -1) {
                window.location.href = url.replace("%23", "#");
            }


            //Khởi tạo progress bar
            //$("#Hre_ProgressBar").kendoProgressBar({
            //    min: 0,
            //    max: 100,
            //    type: "value",
            //    value: false,
            //    animation: {
            //        duration: 400
            //    }
            //}).data("kendoProgressBar");

            //lấy Profile ID theo Tên Tài Khoản

            @*if ('@Session[SessionObjects.ProfileID]'!=null)*@
            $("#ProfileIDByUser").val('@profileID');
            $("#UserInfoName").val('@Html.Raw(userInfoName)');


            // alert($("#ProfileIDByUser").val());

            setInterval(KeepSessionAlive, 5000);


            var url = window.location.href;
            if (url.indexOf('NewTab', 0) > 0) {

                var link = url;
                if (url.indexOf("#") > -1) {
                    var linkItem = link.split("#");
                    var linkItemSplit = linkItem[1].split("/");
                    KendoRouteMapping('#' + linkItem[1], linkItemSplit[0], getUrlByAlias(linkItemSplit[0]));
                    //LoadSubMenu(linkItemSplit[0]);
                }
            }




            var user = '@Session[SessionObjects.UserId]';

            if (user == null || user == '') {
                window.location.href = '@Hrm_Main_Web' + "Home/Login";
            }
            resize();
        });

        window.onresize = function () {
            resize();
        }


        $("#icon1").click(function () {
            $('#showhidesubmenu').toggle();
        });

        function checkshowhide() {

            if ($('#showhidesubmenu').css('display') != 'none') {
                document.getElementById("icon1").src = '/Content/images/drop-down-icon.png';
            }
            else {
                document.getElementById("icon1").src = '/Content/images/drop-up-icon.png';
            }
        }

        function KeepSessionAlive() {
            var myUrl = '../../KeepSessionAlive.ashx';
            $.ajax({
                url: myUrl,
                type: 'GET',
                success: function (transport) {
                    //called when successful
                    var notice = $('result');
                    var temp = notice.innerHTML;
                    $('result').innerHTML = temp + "";
                }

            });
        }





        document.body.onkeyup = function (event) {
            event = event || window.event




            if (event.altKey && event.ctrlKey) {
                var hotKey = String.fromCharCode(event.keyCode);
                $("#txtHotKey").val("ctrl + alt + " + hotKey);
                $("#txtHotCode").val(event.keyCode);
                LoadHotKey(event.keyCode);


            }

            if (event.keyCode == 13) {
                $('#btnSearch').click();
            }

        }

    </script>

</body>

</html>
<script type="text/javascript">



    function getCookie(w) {
        cName = "";
        pCOOKIES = new Array();
        pCOOKIES = document.cookie.split('; ');
        for (bb = 0; bb < pCOOKIES.length; bb++) {
            NmeVal = new Array();
            NmeVal = pCOOKIES[bb].split('=');
            if (NmeVal[0] == w) {
                cName = unescape(NmeVal[1]);
            }
        }
        return cName;
    }

    function eraseCookie(name) {
        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }

    function setCookie(name, value, expires, path, domain, secure) {
        document.cookie = name + "=" + escape(value) + "; ";

        if (expires) {
            //expires = setExpiration(expires);
            document.cookie += "expires=" + expires + "; ";
        }
        if (path) {
            document.cookie += "path=" + path + "; ";
        }
        if (domain) {
            document.cookie += "domain=" + domain + "; ";
        }
        if (secure) {
            document.cookie += "secure; ";
        }
    }



    //////>>>> fix Theme when edit

    var fullPath = '@HttpContext.Current.Request.Url.Scheme://@HttpContext.Current.Request.Url.Authority';
    function GetPath(url) {
        return fullPath + url;
    }

    // Change Theme, set css
    if (getCookie("ts") == "") {
        setCookie("ts", "/Content/kendo/2014.1.415/kendo.defaultvnr2.min.css");
    }
    document.getElementById("pagestyle").setAttribute("href", GetPath(getCookie("ts")));
    //window.onload = initate;


    function filterFieldInfoBookmark() {


        var name = $("#txtName").val();
        var url = $("#txtLink").val();
        var HotKey = $("#txtHotCode").val()

        var userId = '@Session[SessionObjects.UserId]';

        return {
            Link: url,
            Name: name,
            UserCreate: HotKey,
            UserID: userId
        };

    }

    function doSave() {

        $.ajax({
            url: '@hrm_Sys_Service' + "api/Sys_Bookmark",
            type: "Post",
            dataType: "json",
            data: filterFieldInfoBookmark(),
            success: function (data) {

                if (data.ID == "00000000-0000-0000-0000-000000000000") {
                    ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', '@Html.Raw(ConstantMessages.Succeed.TranslateString())', "k-block k-success-colored");
                }
            },
        });
        var window = $("#windowBookmark").data("kendoWindow");
        window.close();
        //$("#bookmark").toggle();
    }
    $("#btnDone").click(function () {
        doSave();

    });



    $("#btnCancel").click(function () {

        var window = $("#windowBookmark").data("kendoWindow");
        window.close();
    });
    $("#btnBookmark").click(function () {


        var url = window.location.href;
        $("#txtName").val('');
        $("#txtLink").val(url);
        $("#txtHotKey").val('ctrl + alt + ');
        PopUpCreate("windowBookmark");
        //$("#bookmark").toggle();

    });
    $("#btnWord").click(function () {
        debugger;
        window.open("Help/UserGuide.HRMPro.htm");
        //KendoRouteMapping('#Hrm_Hre_Web/Hre_ReportBirthday/Index/', 'Hrm_Hre_Web', '@_hrm_Main_Web');
    });

    //var currentValue = '';
    function ChangeTheme(myRadio) {
        //alert('Old value: ' + currentValue);
        //alert('New value: ' + myRadio.value);
        //currentValue = myRadio.value;
        debugger;
        if (myRadio.value.length > 0) {
            document.getElementById("pagestyle").setAttribute("href", myRadio.value);
        }
        setCookie("ts", myRadio.value);
    }

    $("#btnLanguage").click(function () {

        var lang = "VN";
        var link = document.getElementById("imgLang").src.split('/');
        if (link[link.length - 1] == "en.gif") {
            lang = "EN";
        }
        else {
            lang = "VN";
        }
        $.ajax({
            url: '@ConstantPathWeb.Hrm_Sys_Web' + '/Sys_UserSetting/ChangeLanguage/',
            data: {
                LanguageValue: lang,
                UserCreateID: '@UserLoginID'
            },
            type: 'POST',
            datatype: 'json',
            success: function (result) {
                SetLanguageHRM(lang, '@ConstantPathWeb.Hrm_Main_Web', '@ConstantPathWeb.Hrm_Sys_Web', '@Session[SessionObjects.LoginUserName]');
                ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                document.location.reload(true);
            },
            error: function (e) { alert('Translate Error !'); }
        });
    });

    $("#btnReset").click(function () {
        //clear project main
        $.ajax({
            url: '@ConstantPathWeb.Hrm_Main_Web' + '/Home/ClearCache',
            type: 'POST',
            datatype: 'json',
            async: false,
            success: function (result) {

                //document.location.reload(true);
            },
            error: function (e) {

            }
        });
        //claer service Hre
        $.ajax({
            url: '@ConstantPathWeb.Hrm_Hre_Service' + '/Cat_GetData/ClearCache',
            type: 'POST',
            datatype: 'json',
            async: false,
            success: function (result) {
            },
            error: function (e) {

            }
        });

        document.location.reload(true);
    });

    var windowHre_ReportHCGenderName = '@windowHre_ReportHCGenderName';
    function LoadHotKey(_keycode) {
        $.ajax({
            url: '@hrm_Sys_Service' + "Sys_GetData/GetBookmarkHotKey",
            data: { userID: '@Session[SessionObjects.UserId]', KeyCode: _keycode },
            dataType: "Json",
            type: "POST",
            async: false,
            success: function (result) {

                //var strHTMLBookmark = "";
                for (var i = 0; i < result.length; i++) {

                    var link = result[i].Link;
                    if (link.indexOf("#") > -1) {
                        var linkItem = link.split("#");
                        var linkItemSplit = linkItem[1].split("/");
                        onMenuClick("#" + linkItem[1] + "#NewTab", linkItemSplit[0], getUrlByAlias(linkItemSplit[0]));
                        //strHTMLBookmark += "<li class='BookMarkData'><a href=\"javascript:onMenuClick('#" + linkItem[1] + "#NewTab', '" + linkItemSplit[0] + "','" + getUrlByAlias(linkItemSplit[0]) + "');\" title='" + result[i].Name + "'>" + result[i].Name + "</a></li>";
                    }
                }
                //$("#lstbookmark").html(strHTMLBookmark);
                //strHTML += "<li style='margin-right:10px;margin-left: -30px; border-top:thin solid #cccccc;padding-top:10px' class='Quit'>" + '' + "</li>";

            }
        });

    }
    $("#showBookmark").click(function () {

        var window = $("#windowBookmark").data("kendoWindow");
        window.refresh();
        loadBookmark();
    });
    function loadBookmark() {

        var strHTML = "<ul><div id='lstbookmark'></div>";

        strHTML += "<li style='margin-right:10px;padding-top:10px;padding-bottom:10px;border-top:thin solid #cccccc;' class='ChangePassword'><a href=\"javascript:onMenuClick('#Hrm_Sys_Web/Sys_UserChangePassword/SysUserChangePassword?id=@userID','Hrm_Sys_Web','@_hrm_Sys_Web')\">@ConstantDisplay.HRM_System_User_ChangePass.TranslateString()</a></li>";

        strHTML += "<li style='margin-right:10px;padding-top:10px;padding-bottom:10px;border-top:thin solid #cccccc;' class='Setting'><a href=\"javascript:onMenuClick('#Hrm_Sys_Web/Sys_UserSetting/Index','Hrm_Sys_Web','@_hrm_Sys_Web')\">@ConstantDisplay.HRM_Category_ImportAndExport.TranslateString()</a></li>";
        strHTML += "<li style='border-top: thin solid #cccccc;margin-right:10px;padding-top:10px' class='Exit'><a href='#'>" + '@Html.ActionLink(ConstantDisplay.HRM_Logout.TranslateString(), "Logout", "Home", new { area = "" }, null)' + "</a></li>";
        strHTML += "</ul>"
        var strHtmlDisplay = unescape(strHTML);
        $("#dropdownBookmark").html(strHtmlDisplay);
        $.ajax({
            url: '@hrm_Sys_Service' + "Sys_GetData/GetBookmark",
            data: { userID: '@Session[SessionObjects.UserId]' },
            dataType: "Json",
            type: "POST",
            async: false,
            success: function (result) {


                var strHTMLBookmark = "";
                for (var i = 0; i < result.length; i++) {
                    var strHotKey = "";
                    if (result[i].UserCreate != null) {
                        hotKey = String.fromCharCode(result[i].UserCreate);
                        strHotKey = " [Phím Tắt : ctrl + alt + " + hotKey + "]";
                    }
                    var link = result[i].Link;
                    if (link.indexOf("#") > -1) {
                        var linkItem = link.split("#");
                        var linkItemSplit = linkItem[1].split("/");
                        strHTMLBookmark += "<li class='BookMarkData'><a href=\"javascript:onMenuClick('#" + linkItem[1] + "#NewTab', '" + linkItemSplit[0] + "','" + getUrlByAlias(linkItemSplit[0]) + "');\" title='" + result[i].Name + "'>" + result[i].Name + strHotKey + "</a></li>";
                    }
                }
                $("#lstbookmark").html(strHTMLBookmark);
                //strHTML += "<li style='margin-right:10px;margin-left: -30px; border-top:thin solid #cccccc;padding-top:10px' class='Quit'>" + '' + "</li>";
            }
        });
    }

    function getUrlByAlias(alias) {
        var url = null;
        switch (alias) {
            case 'Hrm_Eva_Web':
                url = '@Hrm_Eva_Web';
                break;
            case 'Hrm_Sys_Web':
                url = '@Hrm_Sys_Web';
                break;
            case 'Hrm_Cat_Web':
                url = '@Hrm_Cat_Web';
                break;
            case 'Hrm_Att_Web':
                url = '@Hrm_Att_Web';
                break;
            case 'Hrm_Hre_Web':
                url = '@Hrm_Hre_Web';
                break;
            case 'Hrm_Lau_Web':
                url = '@Hrm_Lau_Web';
                break;
            case 'Hrm_Can_Web':
                url = '@Hrm_Can_Web';
                break;
            case 'Hrm_Rec_Web':
                url = '@Hrm_Rec_Web';
                break;
            default:
                url = '@Hrm_Main_Web';
                break;
        }
        return url;
    };

    //[Tung.Ly 20141226] : Tạo template động
    function CreateTemplate(url, data) {
        //get screen Name
        var pageUrl = location.hash;
        var screenItem = pageUrl.split('/');
        var screen = '';
        if (screenItem != null) {
            screen = screenItem[1];
        }
        var permissionNotAllow_Msg = '@string.Format(ConstantDisplay.HRM_Common_PermissionNotAllow.TranslateString(), ConstantDisplay.HRM_CreateTemplate_Popup_Title.TranslateString())';
        //kiểm tra quyền theo screenName
        var isAccess = checkPermission(PrivilegeType.Export, screen, false);
        if (!isAccess) {
            ShowNotificationProcessor(permissionNotAllow_Msg);
            return;
        }
        //isCreateTemplate = true;
        //isCreateTemplateForDynamicGrid = false;
        var window1 = window;
        ShowHre_ProgressBar();
        $.ajax({
            type: 'POST',
            url: url,
            data: data,
            dataType: 'json',
            async: false,
            success: function (returnValue) {
                CloseHre_ProgressBar();
                var index = returnValue.indexOf(',');
                var status = "";
                var fullPath = "";
                if (index > 0) {
                    status = returnValue.substring(0, index);
                    if (status == "Success") {
                        fullPath = returnValue.substring(index + 1, returnValue.length);
                        window1.location = '@Hrm_Main_Web' + fullPath;
                        ShowNotificationProcessor(status);
                        $.when(kendo.ui.ExtOkCancelDialog.show({
                            title: '@Html.Raw(ConstantMessages.Notification.TranslateString())',
                            message: "@ConstantDisplay.HRM_CreateTemplate_Message.TranslateString()",
                            icon: "k-ext-warning"
                        })
                        ).done(function (response) {
                            if (response.button == "OK") {
                                var window2 = $("#" + windowHre_ReportHCGenderName).data("kendoWindow");
                                window2.center().open().title("@ConstantDisplay.HRM_CreateTemplate_Popup_Title.TranslateString()");
                            }
                        });
                    }
                } else {
                    ShowNotificationProcessor(returnValue);
                }
            },
            error: function () {
                CloseHre_ProgressBar();
            }
        });
    };


    function searchKeyPress(e, btnSearch) {
        // look for window.event in case event isn't passed in
        e = e || window.event;
        if (e.keyCode == 13) {
            $('#' + btnSearch).click();
        }
    };

    @*//OverWriter lại hàm load data của lưới, add thêm 1 pagram là UserName
    function OverWriteReadDataOnGrid(functionFilter) {
        alert('asdasd');
        debugger;
        var result = functionFilter();
        result['UserID'] = '@Session[SessionObjects.UserId]';
        return result;
    };*@


    @*OverWriteReadDataOnGrid(function () {
        debugger;
        var result = functionFilter();
        result['UserID'] = '@Session[SessionObjects.UserId]';
        return result;
    });

    function OverWriteReadDataOnGrid(functionFilter) {
        return functionFilter();
    };*@

    @*function OverWriteReadDataOnGrid(refreshCallback) {
        var result = refreshCallback();
        result['UserID'] = '@Session[SessionObjects.UserId]';
        return result;
    };*@




    //move hrm-8.0.js để dịch ngôn ngữ


    //[Chuc.Nguyen] - Xuất tất cả dữ liệu ra excel, tối đa 10000 dòng.
    function ExportAll(urlGetData, dataParameter, urlDownloadFileExport, pageNamePermission) {

        debugger;
        /// <signature>
        /// <summary> Xuất tất cả dữ liệu ra excel, tối đa 10000 dòng.</summary>
        /// <param name="urlGetData" type="String">Url lấy dữ liệu</param>
        /// <param name="dataParameter" type="Json">Các tham số</param>
        /// <param name="urlDownloadFileExport" type="String">url download</param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary> Xuất tất cả dữ liệu ra excel, tối đa 10000 dòng.</summary>
        /// <param name="urlGetData" type="String">Url lấy dữ liệu</param>
        /// <param name="dataParameter" type="Json">Các tham số</param>
        /// <param name="urlDownloadFileExport" type="String">url download</param>
        /// <param name="pageNamePermission" type="String">tên trang phân quyền (có thể dùng 'ConstantPermission.')</param>
        /// <returns type="Void"></returns>
        /// </signature>

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Export, pageNamePermission);
            if (!isAccess) {
                return;
            }
        }

        ShowHre_ProgressBar();
        $.ajax({
            type: 'POST',
            url: urlGetData,
            data: dataParameter,
            dataType: 'json',
            //async: false,
            success: function (returnValue) {

                //if (returnValue.Data.length > 0) {
                //    alert(1);
                //    return;
                //}
                debugger;

                var n = returnValue.indexOf(","), status = '', fullPath = '';
                if (n > 0) {
                    status = returnValue.substring(0, n);
                    if (status == "Success") {
                        debugger;
                        fullPath = returnValue.substring(n + 1, returnValue.length);
                        ShowNotificationProcessor(status);
                        window.location.href = urlDownloadFileExport + fullPath;
                    }
                }
                else if (returnValue == "-1") {
                    ShowNotificationProcessor("@ConstantMessages.CanNotFindFileTemplate.TranslateString()");
                }
                else {
                    ShowNotificationProcessor(returnValue);
                }
                CloseHre_ProgressBar();
            },
            error: function (data) {

                ShowNotificationProcessor(data.responseText);
                CloseHre_ProgressBar();
            }
        });
    }

    //[Chuc.Nguyen] - Xuất dữ liệu ra excel theo Id đã chọn
    function ExportSelected(urlGetData, listIdSelected, listFields, urlDownloadFileExport, pageNamePermission) {
        /// <signature>
        /// <summary> Xuất dữ liệu ra excel theo Id đã chọn.</summary>
        /// <param name="urlGetData" type="String">Url lấy dữ liệu</param>
        /// <param name="listIdSelected" type="String">Danh sách Ids</param>
        /// <param name="listFields" type="String">Danh sách Các field hiển thị ra excel</param>
        /// <param name="urlDownloadFileExport" type="String">Url Download</param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary> Xuất dữ liệu ra excel theo Id đã chọn.</summary>
        /// <param name="urlGetData" type="String">Url lấy dữ liệu</param>
        /// <param name="listIdSelected" type="String">Danh sách Ids</param>
        /// <param name="listFields" type="String">Danh sách Các field hiển thị ra excel</param>
        /// <param name="urlDownloadFileExport" type="String">Url Download</param>
        /// <param name="pageNamePermission" type="String">Tên trang phân quyền</param>
        /// <returns type="Void"></returns>
        /// </signature>

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Export, pageNamePermission);
            if (!isAccess) {
                return;
            }
        }
        ShowHre_ProgressBar();
        var notify = "";
        $.ajax({
            traditional: true,
            type: 'POST',
            url: urlGetData,
            data: { selectedIds: listIdSelected, valueFields: listFields },
            dataType: 'json',
            success: function (returnValue) {
                if (returnValue == "Error") {

                    CloseHre_ProgressBar();
                    ShowNotificationProcessor("@ConstantMessages.CanNotFindFileTemplate.TranslateString()");
                    return;
                }
                else if (returnValue == "NotTemplate") {
                    CloseHre_ProgressBar();
                    ShowNotificationProcessor("@ConstantMessages.CanNotFindFileTemplate.TranslateString()");
                    return;
                }
                var n = returnValue.indexOf(","), status = '', fullPath = '';
                if (n > 0) {
                    status = returnValue.substring(0, n);
                    if (status == "Success") {
                        fullPath = returnValue.substring(n + 1, returnValue.length);
                        window.location = urlDownloadFileExport + fullPath;
                        ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                    }
                }
                else if (returnValue == "-1") {
                    ShowNotificationProcessor("@ConstantMessages.CanNotFindFileTemplate.TranslateString()");
                }
                else {
                    ShowNotificationProcessor(returnValue);
                }
                CloseHre_ProgressBar();
            },
            error: function (data) {
                ShowNotificationProcessor(data.responseText);
                CloseHre_ProgressBar();
            }
        });
    }

    function ExportWordByTemplateSelected(urlGetData, listIdSelected, listFields, urlDownloadFileExport, pageNamePermission) {

        /// <signature>
        /// <summary> Xuất dữ liệu ra excel theo Id đã chọn.</summary>
        /// <param name="urlGetData" type="String">Url lấy dữ liệu</param>
        /// <param name="listIdSelected" type="String">Danh sách Ids</param>
        /// <param name="listFields" type="String">Danh sách Các field hiển thị ra excel</param>
        /// <param name="urlDownloadFileExport" type="String">Url Download</param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary> Xuất dữ liệu ra excel theo Id đã chọn.</summary>
        /// <param name="urlGetData" type="String">Url lấy dữ liệu</param>
        /// <param name="listIdSelected" type="String">Danh sách Ids</param>
        /// <param name="listFields" type="String">Danh sách Các field hiển thị ra excel</param>
        /// <param name="urlDownloadFileExport" type="String">Url Download</param>
        /// <param name="pageNamePermission" type="String">Tên trang phân quyền</param>
        /// <returns type="Void"></returns>
        /// </signature>

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Export, pageNamePermission);
            if (!isAccess) {
                return;
            }
        }

        $.ajax({
            traditional: true,
            type: 'POST',
            url: urlGetData,
            data: { selectedIds: listIdSelected, valueFields: listFields },
            dataType: 'json',
            success: function (returnValue) {

                if (returnValue == "Error") {

                    ShowNotificationProcessor("@ConstantMessages.Notification.TranslateString()", "@ConstantMessages.YouNoConfigurationTemplate.TranslateString()", "k-block k-info-colored");
                    return;
                }

                var n = returnValue.indexOf(","), status = '', fullPath = '';
                if (n > 0) {
                    status = returnValue.substring(0, n);
                    if (status == "Success") {
                        fullPath = returnValue.substring(n + 1, returnValue.length);
                        window.location = urlDownloadFileExport + fullPath;
                        ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                    }
                }
                else {
                    ShowNotificationProcessor(returnValue);
                }
            },
            error: function (data) {
                ShowNotificationProcessor(data.responseText);
            }
        });
    }


    //[Chuc.Nguyen] - Delete trên lưới
    function DeleteGrid(gridName, urlDelete, pageNamePermission) {
        /// <signature>
        /// <summary> Delete trên lưới.</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="Json">đường dẫn </param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary> Delete trên lưới.</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="Json">đường dẫn </param>
        /// <param name="pageNamePermission" type="String">tên trang phân quyền (có thể dùng 'ConstantPermission.')</param>
        /// <returns type="Void"></returns>
        /// </signature>

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Delete, pageNamePermission);
            if (!isAccess) {
                return;
            }
        }


        $("#" + gridName).on("click", ".gridDeleteImgButton", function (e) {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "@ConstantMessages.Notification.TranslateString()",
                message: "@ConstantMessages.AreYouSureYouTantToDelete.TranslateString()",
                icon: "k-ext-warning"
            })
            ).done(function (response) {
                var grid = $("#" + gridName).data("kendoGrid");
                e.preventDefault();
                var row = $(this).closest("tr");
                var dataItem = grid.dataItem(row);
                $.ajax({
                    url: urlDelete,
                    data: { id: dataItem.Id },
                    type: 'POST',
                    success: function (data) {
                        ReadGrid(gridName);
                        ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                    },
                    error: function (data) {
                        ShowNotificationProcessor(data.responseText);
                    }
                });
            });
        });
    }

    //[Hieu.Van] - Xử lý update Status các dòng dữ liệu được chọn
    function SetStatusSelectedWithPermission(gridName, urlDelete, selectedIds, status, userApproved, notification) {

        if (selectedIds != '' && selectedIds != null) {
            $.ajax({
                traditional: true,
                url: urlDelete,
                data: { selectedIds: selectedIds, status: status, userApproved: userApproved },
                type: 'POST',
                success: function (data) {
                    checkedNodes = [];
                    selectedIds = [];
                    ReadGrid(gridName);
                    if (data.ActionStatus == "NoPermission") {
                        ShowNotificationProcessor("@ConstantMessages.YouDoNotHaveTheRightTreatmentMemorandumHey.TranslateString()");
                    }
                    else if (data.ActionStatus == "NoApproveOTMySelf") {
                        ShowNotificationProcessor("@ConstantMessages.DisallowBrowseOvertimeForYourself.TranslateString() ");
                    } else {
                        ShowNotificationProcessor(notification);
                    }
                },
                error: function (data) {
                    alert('Error');
                }
            });
            selectedIds = [];
        }
        else {
            window.ShowNotificationProcessor("@ConstantMessages.NoDataIsSelected.TranslateString()");
        }
    }

    //[Tam.Le] - Xử lý update Status các dòng dữ liệu được chọn
    function SetStatusSelected(gridName, urlDelete, selectedIds, status, notification) {

        if (selectedIds != '' && selectedIds != null) {
            $.ajax({
                traditional: true,
                url: urlDelete,
                data: { selectedIds: selectedIds, status: status },
                type: 'POST',
                success: function (data) {
                    checkedNodes = [];
                    selectedIds = [];
                    ReadGrid(gridName);
                    if (data.ActionStatus == "NoPermission") {
                        ShowNotificationProcessor("@ConstantMessages.YouDoNotHaveTheRightTreatmentMemorandumHey.TranslateString()");
                    } else {
                        ShowNotificationProcessor(notification);
                    }
                },
                error: function (data) {
                    alert('Error');
                }
            });
            selectedIds = [];
        }
        else {
            window.ShowNotificationProcessor("@ConstantMessages.NoDataIsSelected.TranslateString()");
        }
    }


    function SetMethodPaymentSelected(gridName, urlDelete, selectedIds, status) {

        if (selectedIds != '' && selectedIds != null) {
            $.ajax({
                traditional: true,
                url: urlDelete,
                data: { selectedIds: selectedIds, status: status },
                type: 'POST',
                success: function (data) {
                    //alert(data);
                    selectedIds = [];

                    if (data.ActionStatus == "NoPermission") {
                        ShowNotificationProcessor("@ConstantMessages.YouDoNotHaveTheRightTreatmentMemorandumHey.TranslateString()");
                    } else {
                        ShowNotificationProcessor(data.ActionStatus);
                    }
                    ReadGrid(gridName);
                },
                error: function (data) {
                    alert('Error');
                }
            });
            selectedIds = [];
        }
        else {
            window.ShowNotificationProcessor("@ConstantMessages.NoDataIsSelected.TranslateString()");
        }
    }

    //[Hien.Nguyen]
    //Validation datetimepicker
    function ValidationDatetime(e) {

        if (e.sender.value() != null) {
            debugger;
            if (kendo.parseDate(e.sender.value()) == null) {
                ShowNotificationProcessor("@ConstantMessages.InvalidDate.TranslateString()");
                e.sender.value("");
            }
        }
    };

    //hrm-data.js

    function VnrConfirmForm(messages) {
        var value = false;
        $.when(kendo.ui.ExtOkCancelDialog.show({
            title: "@ConstantMessages.Notification.TranslateString()",
            message: messages,
            icon: "k-ext-warning"
        })
            ).done(function (response) {
                if (response.button == "OK") {
                    value = true;
                }
            });

        return value;
    }

    //[Chuc.Nguyen] - Xử lý delete các dòng dữ liệu được chọn
    function DeleteSelected(gridName, urlDelete, parameter, pageNamePermission) {

        ShowHre_ProgressBar();


        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <param name="pageNamePermission" type="String">tên trang phân quyền</param>
        /// <returns type="Void"></returns>
        /// </signature>
        debugger;
        var grid = $("#" + gridName).data("kendoGrid");
        if (selectedIds.length == 1) {
            var selectedItem = grid.dataItem(grid.select());
            if (selectedItem.Status == "Duyệt" || selectedItem.Status == "E_APPROVED" || selectedItem.Status == "APPROVED" || selectedItem.Status == "E_APPROVE" || selectedItem.Status == "APPROVE") {
                ErrorMessages("@ConstantMessages.DataWasNotPermittedDeleteBrowsing.TranslateString()");
                CloseHre_ProgressBar();
                return;
            }
        }

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Delete, pageNamePermission);
            if (!isAccess) {
                CloseHre_ProgressBar();
                return;
            }
        }


        if (parameter != '' && parameter != null) {
        
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: '@Html.Raw(ConstantMessages.Notification.TranslateString())',
                message: "@ConstantMessages.AreYouSureYouWantToDelete.TranslateString() " + selectedIds.length + " @ConstantMessages.SelectedDataLines.TranslateString()",
                icon: "k-ext-warning"
            })
            ).done(function (response) {
                debugger;
                if (response.button == "OK") {
                    $.ajax({
                        traditional: true,
                        type: 'POST',
                        url: urlDelete,
                        dataType: 'Json',
                        data: { selectedIds: parameter },
                        success: function (data) {
                            debugger;
                            CloseHre_ProgressBar();
                            selectedIds = [];
                            if (data != undefined) {
                                debugger;
                                if (data.ActionStatus == 'Locked') {
                                    Notification('@ConstantMessages.AudienceLocked.TranslateString()', 'warning');
                                }
                                else {
                                    ReadGrid(gridName);
                                    window.ShowNotificationProcessor(data.ActionStatus);
                                }
                            }
                        },
                        error: function (data) {
                            CloseHre_ProgressBar();
                            ReadGrid(gridName);
                            window.ShowNotificationProcessor(data.responseText);
                        }
                    });
                } else {
                    CloseHre_ProgressBar();
                }
            });
        } else {

            window.ShowNotificationProcessor("@ConstantMessages.NoDataIsSelected.TranslateString()");
            CloseHre_ProgressBar();
        }
    }

    //[Son.Vo] - Xử lý Lưu và áp dụng màn hình DS thông tin chung ứng viên
    function SaveAndApply(gridName, urlDelete, parameter, pageNamePermission) {
        ShowHre_ProgressBar();
        debugger;
        var grid = $("#" + gridName).data("kendoGrid");
        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Delete, pageNamePermission);
            if (!isAccess) {
                CloseHre_ProgressBar();
                return;
            }
        }
        if (parameter != '' && parameter != null) {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "@ConstantMessages.Notification.TranslateString()",
                message: "@ConstantMessages.ValidationSaveAndApply.TranslateString().",
                icon: "k-ext-warning"
            })
            ).done(function (response) {
                debugger;
                if (response.button == "OK") {
                    $.ajax({
                        traditional: true,
                        type: 'POST',
                        url: urlDelete,
                        dataType: 'html',
                        data: { selectedIds: parameter },
                        success: function (data) {
                            CloseHre_ProgressBar();
                            selectedIds = [];
                            ReadGrid(gridName);
                            window.ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                        },
                        error: function (data) {
                            window.ShowNotificationProcessor(data.responseText);
                        }
                    });
                } else {
                    CloseHre_ProgressBar();
                }
            });
        } else {
            window.ShowNotificationProcessor("@ConstantMessages.NoDataIsSelected.TranslateString()");
            CloseHre_ProgressBar();
        }
    }


    //Xóa có thông báo số dòng
    function DeleteSelectedConfirm(gridName, urlDelete, parameter, pageNamePermission) {
        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <param name="pageNamePermission" type="String">tên trang phân quyền</param>
        /// <returns type="Void"></returns>
        /// </signature>

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Delete, pageNamePermission);
            if (!isAccess) {
                return;
            }
        }


        if (parameter != '' && parameter != null) {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "@ConstantMessages.Notification.TranslateString()",
                message: "@ConstantMessages.AreYouSureYouWantToDelete.TranslateString() " + parameter.length + " @ConstantMessages.SelectedDataLines.TranslateString()",
                icon: "k-ext-warning",
                width: "366px"
            })
            ).done(function (response) {

                if (response.button == "OK") {
                    $.ajax({
                        //Tho.Bui
                        traditional: true,
                        type: 'POST',
                        url: urlDelete,
                        dataType: 'html',
                        data: { selectedIds: parameter },
                        success: function (data) {

                            selectedIds = [];
                            ReadGrid(gridName);
                            window.ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                        },
                        error: function (data) {
                            window.ShowNotificationProcessor(data.responseText);

                        }
                    });
                }
            });
        } else {
            window.ShowNotificationProcessor("@ConstantMessages.NoDataIsSelected.TranslateString()");
        }
    }


    function DeleteSelectedConfirmMessage(gridName, urlDelete, parameter, pageNamePermission, Message) {
        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <param name="pageNamePermission" type="String">tên trang phân quyền</param>
        /// <returns type="Void"></returns>
        /// </signature>

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Delete, pageNamePermission);
            if (!isAccess) {
                return;
            }
        }


        if (parameter != '' && parameter != null) {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "@ConstantMessages.Notification.TranslateString()",
                message: Message,
                icon: "k-ext-warning",
                width: "366px"
            })
            ).done(function (response) {

                if (response.button == "OK") {
                    $.ajax({
                        //Tho.Bui
                        traditional: true,
                        type: 'POST',
                        url: urlDelete,
                        dataType: 'html',
                        data: { selectedIds: parameter },
                        success: function (data) {

                            selectedIds = [];
                            ReadGrid(gridName);
                            window.ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                        },
                        error: function (data) {
                            window.ShowNotificationProcessor(data.responseText);

                        }
                    });
                }
            });
        } else {
            window.ShowNotificationProcessor("@ConstantMessages.NoDataIsSelected.TranslateString()");
        }
    }

    //Xu lu nut xoa va thong bao so dong se xoa va so dong khong xoa duoc
    function DeleteSelecteds(gridName, urlDelete, parameter, recordids, pageNamePermission) {
        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <returns type="Void"></returns>
        /// </signature>

        /// <signature>
        /// <summary>delete các dòng dữ liệu được chọn</summary>
        /// <param name="gridName" type="String">tên Grid</param>
        /// <param name="urlDelete" type="String">Url</param>
        /// <param name="parameter" type="String">Tham số</param>
        /// <param name="pageNamePermission" type="String">tên trang phân quyền</param>
        /// <returns type="Void"></returns>
        /// </signature>

        if (pageNamePermission != undefined) {
            var isAccess = checkPermission(PrivilegeType.Delete, pageNamePermission);
            if (!isAccess) {
                return;
            }
        }


        if (parameter != '' && parameter != null) {

            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "@ConstantMessages.Notification.TranslateString()",
                message: "@ConstantMessages.AreYouSureYouWantToDelete.TranslateString()" + parameter.length + "/" + recordids.length + " @ConstantMessages.SelectedDataLines.TranslateString() \n\n @ConstantMessages.LineStatusIndelibleBrowse.TranslateString()",
                icon: "k-ext-warning",
                width: "330px"
            })
            ).done(function (response) {

                if (response.button == "OK") {
                    $.ajax({
                        traditional: true,
                        type: 'POST',
                        url: urlDelete,
                        dataType: 'html',
                        data: { selectedIds: parameter },
                        success: function (data) {

                            selectedIds = [];
                            ReadGrid(gridName);
                            window.ShowNotificationProcessor("@ConstantMessages.Succeed.TranslateString()");
                        },
                        error: function (data) {
                            window.ShowNotificationProcessor(data.responseText);

                        }
                    });
                }
                if (response.button == "Cancel") {
                    selectedIds = [];
                    for (var i = 0; i < recordids.length; i++) {
                        selectedIds.push(recordids[i]);
                    }
                }
            });
        } else {
            for (var i = 0; i < recordids.length; i++) {
                selectedIds.push(recordids[i]);
            }
            window.ShowNotificationProcessor("@ConstantMessages.BrowseDataHaveNotBeJobStatus.TranslateString()");
        }
    }

    function InsertSuccess() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");
        notificationWidget.show('@ConstantMessages.InsertSuccess.TranslateString()');
    }

    function InsertFail() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");
        notificationWidget.show('@ConstantMessages.InsertFail.TranslateString()', 'error');
    }

    function UpdateSuccess() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");

        notificationWidget.show('@ConstantMessages.UpdateSuccess.TranslateString()');
    }

    function UpdateFail() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");

        notificationWidget.show('@ConstantMessages.UpdateFail.TranslateString()', 'error');

    }

    function ExportFailSelectOne() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");
        notificationWidget.show('@ConstantMessages.PleaseSelectOnlyOneTypeTemplateToExportAlert.TranslateString()', 'warning');
    }


    function ExportFail() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");
        notificationWidget.show('@ConstantMessages.PleaseSelectTemplateToExportAlert.TranslateString()', 'warning');
    }


    function DeleteFail() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");
        notificationWidget.show('@ConstantMessages.PleaseSelectDataToDelete.TranslateString()', 'warning');

    }


    function ExportSelectedFail() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");

        notificationWidget.show(' @ConstantMessages.PleaseSelectExportDataToExcel.TranslateString()', 'error');

    }

    function ExportAllFail() {
        var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");

        notificationWidget.show(' @ConstantMessages.NoSelectExportDataToExcel.TranslateString()', 'error');

    }

    function checkDuplicate(_host, _controller, _action, _jsonData, _fieldId) {
        /// <signature>
        /// <summary>Kiểm tra trùng dữ liệu</summary>        
        /// <param name="_host" type="String">tên host</param>        
        /// <param name="_controller" type="String">tên controller</param>        
        /// <param name="_action" type="String">tên action (phương thức POST) </param>        
        /// <param name="_jsonData" type="json">kiểu json ({ loginName: 'admin',id : 1 };) ** Note: Nếu không truyền tham số thì ghi []</param>        
        /// <param name="_fieldId" type="string">tên cột kiểm tra trùng (dùng để xuất thông báo cột nào bị trùng dữ liệu)</param>        
        /// <returns type="bool">Trả về field có trùng dữ liệu không ?</returns>
        /// </signature>

        var _url = _host + _controller + "/" + _action;
        var success = false;
        $.ajax({
            url: _url,
            type: 'POST',
            async: false,
            data: _jsonData,
            cache: false,
            success: function (result, status) {

                if (result == true) {
                    var fieldId = "#" + _fieldId;
                    if (_fieldId.indexOf("lbl") == -1) {
                        fieldId = "#lbl" + _fieldId;
                    }
                    var fieldName = $(fieldId).text();
                    ShowNotificationProcessor("@ConstantMessages.Error.TranslateString(), [" + fieldName + "] @ConstantMessages.AlreadyExists.TranslateString()");
                    success = true;

                } else {
                    success = false;
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("@ConstantMessages.Status.TranslateString(): " + textStatus + "@ConstantMessages.Error.TranslateString(): " + errorThrown);
                success = false;
            }
        });
        return success;
    }


    function checkDuplicate_4Condition(_host, _controller, _action, _jsonData, _fieldId) {
        /// <signature>
        /// <summary>Kiểm tra trùng dữ liệu</summary>        
        /// <param name="_host" type="String">tên host</param>        
        /// <param name="_controller" type="String">tên controller</param>        
        /// <param name="_action" type="String">tên action (phương thức POST) </param>        
        /// <param name="_jsonData" type="json">kiểu json ({ loginName: 'admin',id : 1 };) ** Note: Nếu không truyền tham số thì ghi []</param>        
        /// <param name="_fieldId" type="string">tên cột kiểm tra trùng (dùng để xuất thông báo cột nào bị trùng dữ liệu)</param>        
        /// <returns type="bool">Trả về field có trùng dữ liệu không ?</returns>
        /// </signature>

        var _url = _host + _controller + "/" + _action;
        var success = false;
        $.ajax({
            url: _url,
            type: 'POST',
            async: false,
            data: _jsonData,
            cache: false,
            success: function (result, status) {

                var listField = _fieldId.split(",");
                if (result == true) {
                    var fieldId1 = "#" + listField[0];
                    var fieldId2 = "#" + listField[1];
                    var fieldId3 = "#" + listField[2];
                    var fieldId4 = "#" + listField[3];
                    if (listField[0].indexOf("lbl") == -1) {
                        fieldId1 = "#lbl" + listField[0];
                    }
                    if (listField[1].indexOf("lbl") == -1) {
                        fieldId2 = "#lbl" + listField[1];
                    }
                    if (listField[2].indexOf("lbl") == -1) {
                        fieldId3 = "#lbl" + listField[2];
                    }
                    if (listField[3].indexOf("lbl") == -1) {
                        fieldId4 = "#lbl" + listField[3];
                    }
                    var fieldName1 = $(fieldId1).text();
                    var fieldName2 = $(fieldId2).text();
                    var fieldName3 = $(fieldId3).text();
                    var fieldName4 = $(fieldId4).text();
                    ShowNotificationProcessor("@ConstantMessages.Error.TranslateString(), [" + fieldName1 + ", " + fieldName2 + ", " + fieldName3 + ", " + fieldName4 + "] @ConstantMessages.AlreadyExists.TranslateString()");
                    success = true;

                } else {
                    success = false;
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("@ConstantMessages.Status.TranslateString(): " + textStatus + "@ConstantMessages.Error.TranslateString(): " + errorThrown);
                success = false;
            }
        });
        return success;
    };

    //Set Ajax
    var SetUpAjax = function () {
        jQuery.ajaxSetup({
            headers: {
                '@HeaderObject.UserID': '@Session[SessionObjects.UserId]',
                '@HeaderObject.UserLogin': '@Session[SessionObjects.LoginUserName]'

            },
            //crossDomain: true,
        });
    };
    SetUpAjax();


</script>

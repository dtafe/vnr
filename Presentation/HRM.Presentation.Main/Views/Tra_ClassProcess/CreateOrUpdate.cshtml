@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect

@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.Payroll.Models;
@using HRM.Presentation.Hr.Models;
@using HRM.Presentation.Training.Models;
@using HRM.Infrastructure.Security
@model Tra_ClassModel

@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    IList<SelectListItem> listClassType = Enum.GetValues(typeof(EnumDropDown.ClassStatus))
     .Cast<EnumDropDown.ClassStatus>()
     .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
     .ToList();
    var ClassID = Guid.Empty;
    if (Model != null)
    {
        ClassID = Model.ID;
    }
}
@{
    var window = new WindowBuilderInfo
    {
        Name = "windowTrainee",
        Visible = false,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),
        Width = 1000,
        LoadContentFrom = _hrm_Main_Web + "Tra_Class/TraineeInfo?ContractD=" + ClassID,
    };
}
@(Html.VnrWindow(window))
@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = ConstantDisplay.MessageError.TranslateString(),
        Content = ConstantDisplay.YouMustSaveContractFirst.TranslateString()
    };
}
@(Html.VnrWindow(windowError))
<script>
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Tra_Trainee_AddNew.TranslateString())';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Tra_Trainee_Update.TranslateString())';
    function filterFieldInfo() {
        return {
            ContractID: $("#ClassID").val()
        };
    }
    $("#btnCreateTrainee").click(function () {


        var x = $('#@Html.FieldIdFor(model => model.Class_ID)').val();

        if (x == '') {
            PopUpCreate("windowError");
        }
        else {
            var profileMulti = $("#ProfileID").data("kendoMultiSelect");
            setTimeout(function () {
                PopUpCreate("windowTrainee", titleCreatePopUp, '@ConstantPermission.Hre_AppendixContract')
            }, 1000)
         
            $("#ClassID").val($('#@Html.FieldIdFor(model => model.Class_ID)').val());
        }
    });

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();

        //Xử lý Edit popup
        var url = '@_hrm_Main_Web' + "Tra_Class/TraineeInfo/";
        EditGridPopUp("grid_TraineeInClass", "windowTrainee", url, '@ConstantPermission.Hre_Contract', titleEditPopUp);
    });


    GridCheckbox('grid_TraineeInClass');

</script>
<div class="VnRMain">
    <table style="width:100%">
        <tbody>          
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div>
                        <div style="float:left">
                           
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.PlanID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _PlanID = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "ItemForShopIfo_PlanID",
                                            DataTextField = "PlanName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Tra_GetData/GetMultiPlanName",
                                            ServerFilter = true,
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.PlanID, _PlanID).Text(Model == null ? string.Empty : Model.PlanName))
                                </div>
                            </div>
                            <div id="div2">
                                <div class="FieldTitle170">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_Training_Title.TranslateString())                                    
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrRadioButtonFor(mode => mode.IsTrainingInside, "groupInOutside")
                                    @Html.VnrLabelFor(mode => mode.IsTrainingInside)

                                    @Html.VnrRadioButtonFor(mode => mode.IsTrainingOut, "groupInOutside")
                                    @Html.VnrLabelFor(mode => mode.IsTrainingOut)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.CourseID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _CourseID = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "ItemForShopIfo_PlanID",
                                            DataTextField = "CourseName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Tra_GetData/GetMultiTraCourse",
                                            ServerFilter = true,
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.CourseID, _CourseID).Text(Model == null ? string.Empty : Model.CourseName))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Code)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.Code)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ClassName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.ClassName)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Status)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _Type = new DropDownListBuilderInfo()
                                        {
                                            //  Name = "RevenueForProfileIfo_Type",
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = listClassType
                                        };
                                    }
                                    @Html.VnrDropDownListFor(model => model.Status, _Type)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.TrainingPlace)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.TrainingPlace)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Teacher)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.Teacher)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.StartDate)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _DateFrom = new DatePickerBuilderInfo()
                                        {
                                            // Name = "RevenueForProfileIfo_DateFrom",
                                            StyleCss = "width:100px"
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.StartDate, _DateFrom)

                                    @Html.VnrLabelFor(mode => mode.EndDate)

                                    @{
                                        var _DateTo = new DatePickerBuilderInfo()
                                        {
                                            //  Name = "RevenueForProfileIfo_DateTo",
                                            StyleCss = "width:100px"
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.EndDate, _DateTo)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Schedule)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.Schedule)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ScheduleTimeStart)
                                </div>
                                <div class="FieldValue">
                                   @{
                                       var _ScheduleTimeStart = new DateTimePickerBuilderInfo()
                                        {
                                            // Name = "RevenueForProfileIfo_DateFrom",
                                            //StyleCss = "width:100px"
                                        };
                                    }
                                    @Html.VnrDateTimePickerFor(model => model.ScheduleTimeStart, _ScheduleTimeStart)

                                    @Html.VnrLabelFor(mode => mode.ScheduleTimeEnd)
                                    @{
                                        var _ScheduleTimeEnd = new DateTimePickerBuilderInfo()
                                         {
                                             // Name = "RevenueForProfileIfo_DateFrom",
                                             //StyleCss = "width:100px"
                                         };
                                    }
                                    @Html.VnrDateTimePickerFor(model => model.ScheduleTimeEnd, _ScheduleTimeEnd)
                                    @*@(Html.TextBoxFor(mode => mode.ScheduleTimeEnd, new { id = "Vnr_MaskedTextBox_Time", style = "width:77px" }))*@
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.MassNumProfileAttendanced)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _MassNumProfileAttendanced = new NumericTextBoxBuilderInfo<int>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.MassNumProfileAttendanced, _MassNumProfileAttendanced))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ExpectedCost)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _ExpectedCost = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.ExpectedCost, _ExpectedCost))

                                    @{
                                        var CurrencyName = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "BasicSalaryInfo1_CurrencyID3",
                                            DataTextField = "CurrencyName",
                                            DataValueField = "ID",
                                            Url = _hrm_Cat_Service + "Cat_GetData/GetMultiCurrency",
                                            StyleCss = "width:60px;",
                                            // Index = 0,
                                            Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
                                            // Autobind = true,
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.CurrencyID, CurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName1))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.TotalAmount)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _TotalAmount = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.TotalAmount, _TotalAmount))

                                    @{
                                        var CurrencyName1 = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "BasicSalaryInfo1_CurrencyID3",
                                            DataTextField = "CurrencyName",
                                            DataValueField = "ID",
                                            Url = _hrm_Cat_Service + "Cat_GetData/GetMultiCurrency",
                                            StyleCss = "width:60px;",
                                            // Index = 0,
                                            Value = Model == null ? string.Empty : Model.CurrencyID2.ToString(),
                                            // Autobind = true,
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.CurrencyID2, CurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName2))
                                </div>
                            </div>
                            
                        </div>  
                        <div style="float:left; margin-left:50px">
                            <div id="div2">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.TypeHandleFomular)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrRadioButtonFor(mode => mode.TypeHandleFomularNormal, "groupTypeFormula")
                                    @Html.VnrLabelFor(mode => mode.TypeHandleFomularNormal)

                                    @Html.VnrRadioButtonFor(mode => mode.TypeHandleFomularAverage, "groupTypeFormula")
                                    @Html.VnrLabelFor(mode => mode.TypeHandleFomularAverage)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Formula)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(model => model.Formula)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.StandardScoreToPass)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _StandardScoreToPass = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.StandardScoreToPass, _StandardScoreToPass))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.RankingGroupID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _RankingGroupID = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "ItemForShopIfo_PlanID",
                                            DataTextField = "RankingGroupName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiTraCourse",
                                            ServerFilter = true,
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.RankingGroupID, _RankingGroupID).Text(Model == null ? string.Empty : Model.RankGroupName))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Topic)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(model => model.Topic)
                                </div>
                            </div>

                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ContentTraining)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(model => model.ContentTraining)
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>              
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
                @Html.HiddenFor(mode => mode.ID)
                @Html.HiddenFor(mode => mode.Class_ID)
            </tr>
        </tbody>
    </table>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTrainee", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    <div style="float:right">
        <div class="HideExportCate">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        //Thông tin hiển column hiển thị
        string[] valueFields = new string[]
                            {
                                Tra_TraineeModel.FieldNames.CodeEmp,
                                Tra_TraineeModel.FieldNames.ProfileName,
                                Tra_TraineeModel.FieldNames.OrgStructureName,
                                Tra_TraineeModel.FieldNames.JobTitleName,
                                 Tra_TraineeModel.FieldNames.CertificateName,
                                Tra_TraineeModel.FieldNames.CertificateDate,
                                Tra_TraineeModel.FieldNames.Status,
                                Tra_TraineeModel.FieldNames.RankingName
                            };

        //Set độ rộng cho từng column
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {Tra_TraineeModel.FieldNames.CodeEmp, 150},
                                {Tra_TraineeModel.FieldNames.ProfileName, 150},
                                {Tra_TraineeModel.FieldNames.OrgStructureName, 100},
                                {Tra_TraineeModel.FieldNames.JobTitleName, 130},
                                {Tra_TraineeModel.FieldNames.CertificateName, 130},
                                {Tra_TraineeModel.FieldNames.CertificateDate, 150},
                                {Tra_TraineeModel.FieldNames.Status, 120},
                                {Tra_TraineeModel.FieldNames.RankingName, 120}
                            };

        //Thông tin hiển thị được dịch
        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                            {
                                {Tra_TraineeModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Att_Report_CodeEmp},
                                {Tra_TraineeModel.FieldNames.ProfileName, ConstantDisplay.HRM_Tra_Trainee_ProfileID},
                                {Tra_TraineeModel.FieldNames.OrgStructureName, ConstantDisplay.HRM_Tra_Trainee_OrgStructureID},
                                {Tra_TraineeModel.FieldNames.JobTitleName, ConstantDisplay.HRM_HR_AppendixContract_DateofEffect},
                                {Tra_TraineeModel.FieldNames.CertificateDate, ConstantDisplay.HRM_Tra_Trainee_CertificateDate},
                                {Tra_TraineeModel.FieldNames.Status, ConstantDisplay.HRM_Tra_Trainee_Status},
                                {Tra_TraineeModel.FieldNames.RankingName, ConstantDisplay.HRM_Tra_Trainee_RankingName},
                            };

        var grid = new GridBuilderInfo
        {
            Name = "grid_TraineeInClass",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            ShowCommand = false,
            GridHeight = 200,
            AutoBind = true,
            ReadActionUrl = _hrm_Hr_Service + "Tra_GetData/GetTraineeByClassIDList?ClassID=" + ClassID,
            ReadData = "filterFieldInfo",
        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Tra_TraineeModel>(grid)
                               .DataSource(dataSource => dataSource
                                   .Ajax()
                                        //   .Model(model => model.Field(o => o.ContractNo).Editable(false))
                                  )
    )
</div>
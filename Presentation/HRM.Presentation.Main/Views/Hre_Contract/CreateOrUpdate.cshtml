@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Hr.Models
@using HRM.Infrastructure.Utilities

@using System.Collections
@using HRM.Infrastructure.Security

@model Hre_ContractModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var ContractID = Guid.Empty;
    var ProfileName = string.Empty;
    var Status = string.Empty;
    if (Model != null)
    {
        ContractID = Model.ID;
    }
    IList<SelectListItem> TypeHourWork = Enum.GetValues(typeof(EnumDropDown.LoopType))
   .Cast<EnumDropDown.LoopType>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).ToList();
}

@{
    var window = new WindowBuilderInfo
    {
        Name = "windowAppendixContract",
        Visible = false,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),
        Width = 1100,
        LoadContentFrom = _hrm_Main_Web + "Hre_Contract/AppendixContractInfo?ContractID=" + ContractID,
    };
}
@(Html.VnrWindow(window))
@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = ConstantDisplay.MessageError.TranslateString(),
        Content = ConstantDisplay.YouMustSavePlanFirst.TranslateString()
    };
}
@(Html.VnrWindow(windowError))

<script type="text/javascript">
    SetFieldRequired();
    var gridName = '@ConstantControlName.HRM_HR_AppendixContract_Grid_Name.TranslateString()';
    var popUpName = '@ConstantControlName.HRM_HR_AppendixContract_PopUp_Name.TranslateString()';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_HR_AppendixContract_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_HR_AppendixContract_PopUp_Create_Title.TranslateString())';
    $("#btnCreateAppendixContract").click(function () {
        debugger;

        var x = $('#@Html.FieldIdFor(model => model.Contract_ID)').val();
      
        if (x == '') {
            PopUpCreate("windowError");
        }
        else {
            var profileMulti = $("#ProfileID").data("kendoMultiSelect");
            $("#ProfileName").val(profileMulti._dataItems[0].ProfileName);
            $("#ContractID").val($('#@Html.FieldIdFor(model => model.Contract_ID)').val());
            setTimeout(function () {
                PopUpCreate("windowAppendixContract", titleCreatePopUp, '@ConstantPermission.Hre_AppendixContract')
            }, 1000)

        }
    });

    function filterFieldInfo() {
        return {
            ContractID: $("#ContractID").val()
        };
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();

        //Xử lý Edit popup
        var url = '@_hrm_Main_Web' + "Hre_Contract/AppendixContractInfo/";
        EditGridPopUp("grid_AppendixContract", "windowAppendixContract", url, '@ConstantPermission.Hre_Contract', titleEditPopUp);
    });


    GridCheckbox(gridName);

    //Xóa PLHĐ
    $('#btnDelete').click(function (e) {
        var isAccess = checkPermission(PrivilegeType.Delete, '@ConstantPermission.Hre_AppendixContract');
        if (!isAccess) {
            return;
        }
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        DeleteSelected("grid_AppendixContract", '@_hrm_Main_Web' + "Hre_AppendixContract/RemoveSelected/", selectedIds.join(","));
    });

    $("#btnGetBasicSalary").click(function () {
        var _profileID = $('#@Html.FieldIdFor(model => model.ProfileID)').val();
        $.ajax({
            url: '@_hrm_Hr_Service' + "Hre_GetData/GetBasicSalaryByProfileID",
            data: { ProfileID: _profileID[0] },
            type: 'POST',
            datatype: 'json',
            success: function (data) {

                if (data == "Error") {
                    WarningMessages('@ConstantDisplay.YouHaveNotInputProfile.TranslateString()');
                } else if (data == "NoBasicSalary") {
                    WarningMessages('@ConstantDisplay.ProfileNotHaveBasicSalary.TranslateString()');
                }
                if (data != null) {
                    var Salary = $("#Salary").data("kendoNumericTextBox");
                    Salary.value(data.GrossAmount);
                }

            }

        });
    });

    function ContractTypeSelect(e) {

        checkedNodes = [];
        var ProfileID = $('#@Html.FieldIdFor(model => model.ProfileID)').val();
        ProfileID != null ? $('#@Html.FieldIdFor(model => model.ProfileIDs)').val(ProfileID.join(',')) : null;
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        checkedNodes != null ? $('#@Html.FieldIdFor(model => model.OrgStructureIDs)').val(checkedNodes.join(',')) : null;
        $("#OrgStructureIDs").val(checkedNodes.join(','));

        if ($("#OrgStructureIDs").val() != "") {
            return;
        }
        if (ProfileID == "") {
            return;
        }

        var _dateStart = $("#DateStart").data("kendoDatePicker");
        var _dateSigned = $("#DateSigned").data("kendoDatePicker");
        var _dateEnd = $("#DateEnd").data("kendoDatePicker");


        var currentDate = new Date();
        var day = currentDate.getDate();
        var month = currentDate.getMonth() + 1;
        var year = currentDate.getFullYear();
        var date = day + "/" + month + "/" + year;

        var dataItem = this.dataSource.view()[e.item.index()];

        $.ajax({
            url: '@_hrm_Hr_Service' + "Hre_GetData/GetContractTypeByID",
            data: { ContractTypeID: dataItem.ID, ProfileID: ProfileID.toString() },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                debugger;
                _dateStart.value(date);
                _dateSigned.value(date);
                if (data.DateStart != null) {
                    var dHire = new Date(parseInt(data.DateStart.slice(6, -2)));
                    var _monthHire = 1 + dHire.getMonth();
                    var _dayHire = dHire.getDate();
                    var _yearHire = dHire.getFullYear();
                    var fullDateHire = _dayHire + "/" + _monthHire + "/" + _yearHire;
                    _dateStart.value(fullDateHire);
                }
                if (data.DateEnd != null) {
                    var dEndProbation = new Date(parseInt(data.DateEnd.slice(6, -2)));
                    var _monthEndProbation = 1 + dEndProbation.getMonth();
                    var _dayEndProbation = dEndProbation.getDate();
                    var _yearEndProbation = dEndProbation.getFullYear();
                    var fullDateEndProbation = _dayEndProbation + "/" + _monthEndProbation + "/" + _yearEndProbation;
                    _dateEnd.value(fullDateEndProbation);

                } else {
                    _dateEnd.value("");
                }
                if (data.DateSigned != null) {

                    var d = new Date(parseInt(data.DateSigned.slice(6, -2)));
                    var _month = 1 + d.getMonth();
                    var _day = d.getDate();
                    var _year = d.getFullYear();
                    var fullDate = _day + "/" + _month + "/" + _year;
                    _dateSigned.value(fullDate);
                }

                if (data.Type == '@EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString()') {
                    debugger;
                    var _comboRankNextContract = $("#RankDetailForNextContract").data("kendoComboBox");
                    var _comboNextContractType = $("#NextContractTypeID").data("kendoComboBox");

                    _comboRankNextContract.dataSource.filter({ field: "SalaryRankName", operator: "contains", value: "R0V08" })
                    _comboRankNextContract.select(_comboRankNextContract.ul.children().eq(0));

                    _comboNextContractType.dataSource.filter({ field: "ContractTypeName", operator: "contains", value: data.NextContractTypeName })
                    _comboNextContractType.select(_comboNextContractType.ul.children().eq(0));

                    //_comboNextContractType.dataSource.filter({ field: "ID", operator: "contains", value: data.ContractNextID })
                    //_comboNextContractType.select(_comboNextContractType.ul.children().eq(0));

                }
            }

        });
    }

    function ProfileSelect(e) {

        var _jobtitle = $("#JobTitleID").data("kendoMultiSelect");
        var _position = $("#PositionID").data("kendoMultiSelect");
        var dataItem = this.dataSource.view()[e.item.index()];

        $.ajax({
            url: '@_hrm_Hr_Service' + "Hre_GetData/GetDataByProfileID",
            data: { ProfileID: dataItem.ID },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                debugger;
                if (data != null) {
                    _jobtitle.value(data.JobTitleID);
                    //  _jobtitle.text = data.JobTitleName;
                    _position.value(data.PositionID);
                    //  _position.text = data.PositionName;
                    $("#CodeEmp").val(data.CodeEmp);
                    $("#ProfileNameView").val(data.ProfileName + " - " + data.CodeEmp);
                }
            }

        });
    }

    $("#DateStart").change(function () {
        checkedNodes = [];
        var ProfileID = $('#@Html.FieldIdFor(model => model.ProfileID)').val();
        ProfileID != null ? $('#@Html.FieldIdFor(model => model.ProfileIDs)').val(ProfileID.join(',')) : null;
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        checkedNodes != null ? $('#@Html.FieldIdFor(model => model.OrgStructureIDs)').val(checkedNodes.join(',')) : null;
        $("#OrgStructureIDs").val(checkedNodes.join(','));

        if ($("#OrgStructureIDs").val() != "") {
            return;
        }
        if (ProfileID == "") {
            return;
        }

        debugger;
        var _dateStart = $("#DateStart").data("kendoDatePicker");
        var _dateSigned = $("#DateSigned").data("kendoDatePicker");
        var _dateEnd = $("#DateEnd").data("kendoDatePicker");

        var _profileID = $("#ProfileID").val();
        var _contractType = $("#ContractTypeID").val();
        var _dateStart = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateStart").val());

        $.ajax({
            url: '@_hrm_Hr_Service' + "Hre_GetData/GetDateByContractTypeID",
            data: { ProfileID: ProfileID, ContractTypeID: _contractType[0], DateStart: _dateStart },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                debugger;
                //if (data.DateStart != null) {
                //    var dHire = new Date(parseInt(data.DateStart.slice(6, -2)));
                //    var _monthHire = 1 + dHire.getMonth();
                //    var _dayHire = dHire.getDate();
                //    var _yearHire = dHire.getFullYear();
                //    var fullDateHire = _dayHire + "/" + _monthHire + "/" + _yearHire;
                //    _dateStart.value(fullDateHire);
                //}
                if (data.DateEnd != null) {
                    var dEndProbation = new Date(parseInt(data.DateEnd.slice(6, -2)));
                    var _monthEndProbation = 1 + dEndProbation.getMonth();
                    var _dayEndProbation = dEndProbation.getDate();
                    var _yearEndProbation = dEndProbation.getFullYear();
                    var fullDateEndProbation = _dayEndProbation + "/" + _monthEndProbation + "/" + _yearEndProbation;
                    _dateEnd.value(fullDateEndProbation);

                } else {
                    _dateEnd.value("");
                }
                if (data.DateSigned != null) {

                    var d = new Date(parseInt(data.DateSigned.slice(6, -2)));
                    var _month = 1 + d.getMonth();
                    var _day = d.getDate();
                    var _year = d.getFullYear();
                    var fullDate = _day + "/" + _month + "/" + _year;
                    _dateSigned.value(fullDate);
                }
            }

        });
    });

    function ChangeSalaryClass() {
        debugger;
        showAjaxLoading();
        var _SalaryClassID = $("#ClassRateID").val();
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Cat_GetData/GetSalaryRankBySalaryClassID/",
            data: { SalaryClassID: _SalaryClassID },
            dataType: 'json',
            success: function (data) {
                var Rank = $("#RankRateID").data("kendoComboBox");
                Rank.setDataSource(data);
                Rank.refresh();

                hideAjaxLoading();
            }
        });
    };

    // tự động load lương cơ bản + lương BHXH khi chọn Bậc lương chi tiết
    function ChangeSalaryRank() {
        showAjaxLoading();
        var ID = $("#RankRateID").val();
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Cat_GetData/GetDataOfSalaryRank/",
            data: { ID: ID },
            dataType: 'json',
            success: function (data) {
                var Salary = $("#Salary").data("kendoNumericTextBox");
                Salary.value(data.BasicSalary);
                var InsuranceAmount = $("#InsuranceAmount").data("kendoNumericTextBox");
                InsuranceAmount.value(data.BasicSalary);
                hideAjaxLoading();
            }
        });
    };

    $("#Salary").change(function (e) {
        var _salary = $("#Salary").val();
        var _ins = $("#InsuranceAmount").data("kendoNumericTextBox");
        _ins.value(_salary);
    });

    function FielterDataRankRate() {
        var Rank = $("#RankRateID").data("kendoComboBox");
        var ClassRank = $('#ClassRateID').data("kendoComboBox");
        return {
            text: Rank.text(),
            SalaryClassID: ClassRank.value(),
        };
    };

</script>

<div class="VnRMain">
    @Html.HiddenFor(mode => mode.Contract_ID)
    <div>
        @{
            if (Model != null)
            {
                @Html.HiddenFor(m => m.Status)
                @Html.HiddenFor(m => m.ProfileName)
            }
            else
            {

                @Html.Hidden("ProfileName", ProfileName)

                @Html.Hidden("Status", Status)
            }

        }
    </div>
    <table style="width:100%">
        <tbody>

            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div style="display: block; padding-top: 10px;">

                        <fieldset>
                            <legend>
                                @ConstantDisplay.HRM_HR_ContractCondition.TranslateString()
                            </legend>
                            <div style="float:left; width:100%">
                                <div style="float: left; width: 500px">
                                    <div id="div2">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.ProfileID)
                                            @(Html.HiddenFor(model => model.ID))
                                            @(Html.HiddenFor(model => model.ProfileIDs))
                                            @(Html.HiddenFor(model => model.OrgStructureIDs))
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                IEnumerable valuepro = new string[] { };
                                                if (Model != null)
                                                {
                                                    valuepro = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
                                                }
                                            }
                                            @{
                                                var multiSelectProfileID = new MultiSelectBuilderInfo()
                                                {
                                                    Width = 300,
                                                    DataTextField = "ProfileName",
                                                    DataValueField = "ID",
                                                    Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
                                                    Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                                    Value = valuepro
                                                };
                                            }
                                            @Html.ChooseEmpOrOrgFor(mode => mode.ProfileID, multiSelectProfileID, _hrm_Hr_Service + "Att_GetData/GetProfileByOrgId")
                                        </div>
                                    </div>

                                    <div id="div4" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.ContractNo)
                                        </div>
                                        <div class="FieldValue">
                                            @Html.VnrTextBoxFor(model => model.ContractNo)
                                        </div>

                                    </div>
                                    <div id="div6" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.ContractTypeID)
                                        </div>
                                        <div class="FieldValue">
                                            <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                                            @{
                                                IEnumerable valueContractType = new string[] { };
                                                if (Model != null)
                                                {
                                                    valueContractType = new[] { new { ContractTypeName = Model.ContractTypeName, ID = Model.ContractTypeID , Type = Model.Type} };
                                                }
                                            }
                                            @{
                                                var contractTypeID = new MultiSelectBuilderInfo
                                                {

                                                    DataTextField = "ContractTypeName",
                                                    DataValueField = "ID",
                                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiContractType",
                                                    MaxSelectedItems = 1,
                                                    Placeholder = ConstantDisplay.HRM_Category_SelectContractType.TranslateString(),
                                                    Value = valueContractType,
                                                    Width = 200,
                                                    EventSelect = "ContractTypeSelect"
                                                };
                                            }
                                            @Html.VnrMultiSelectFor(mode => mode.ContractTypeID, contractTypeID)
                                        </div>
                                    </div>

                                    <div id="div9" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.DateStart)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var dateStart = new DatePickerBuilderInfo()
                                                {
                                                    StyleCss = "width:100px;"

                                                };
                                            }
                                            @Html.VnrDatePickerFor(model => model.DateStart, dateStart)
                                        </div>
                                    </div>
                                    <div id="div10" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.DateEnd)
                                        </div>

                                        <div class="FieldValue">
                                            @{
                                                var dateEnd = new DatePickerBuilderInfo()
                                                {
                                                    StyleCss = "width:100px;"
                                                };
                                            }
                                            @Html.VnrDatePickerFor(model => model.DateEnd, dateEnd)
                                        </div>
                                    </div>
                                    <div id="div8" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.DateSigned)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var dateSigned = new DatePickerBuilderInfo()
                                                {
                                                    StyleCss = "width:100px;"
                                                };
                                            }
                                            @Html.VnrDatePickerFor(model => model.DateSigned, dateSigned)
                                        </div>
                                    </div>
                                    <div id="div8" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.TerminateDate)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var _TerminateDate = new DatePickerBuilderInfo()
                                                {
                                                    StyleCss = "width:100px;"
                                                };
                                            }
                                            @Html.VnrDatePickerFor(model => model.TerminateDate, _TerminateDate)
                                        </div>
                                    </div>
                                </div>
                                <div style="float: left; width: 500px;">
                                    <div id="div5" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.JobTitleID)
                                        </div>
                                        <div class="FieldValue">
                                            <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                                            @{
                                                IEnumerable valuejobTitle = new string[] { };
                                                if (Model != null)
                                                {
                                                    valuejobTitle = new[] { new { JobTitleName = Model.JobTitleName, ID = Model.JobTitleID } };
                                                }
                                            }
                                            @{
                                                var jobTitleID = new MultiSelectBuilderInfo
                                                {
                                                    DataTextField = "JobTitleName",
                                                    DataValueField = "ID",
                                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiJobTitle",
                                                    MaxSelectedItems = 1,
                                                    Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
                                                    Value = valuejobTitle,
                                                    Width = 200
                                                };
                                            }
                                            @Html.VnrMultiSelectFor(mode => mode.JobTitleID, jobTitleID)
                                        </div>
                                    </div>
                                    <div id="div11" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.PositionID)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                IEnumerable valuePosition = new string[] { };
                                                if (Model != null)
                                                {
                                                    valuePosition = new[] { new { PositionName = Model.PositionName, ID = Model.PositionID } };
                                                }
                                            }
                                            @{
                                                var positionID = new MultiSelectBuilderInfo()
                                                {
                                                    DataTextField = "PositionName",
                                                    DataValueField = "ID",
                                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
                                                    Placeholder = ConstantDisplay.HRM_Category_SelectPosition.TranslateString(),
                                                    Value = valuePosition,
                                                    MaxSelectedItems = 1,
                                                    Width = 200


                                                };
                                            }
                                            @(Html.VnrMultiSelectFor(mode => mode.PositionID, positionID))
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.QualificationID)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var QualificationName = new ComboBoxBuilderInfo()
                                                {
                                                    DataTextField = "QualificationName",
                                                    DataValueField = "ID",
                                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiQualification",
                                                    StyleCss = "width:150px;",
                                                    //   Value = Model == null ? string.Empty : Model.QualificationName,

                                                };
                                                if (Model != null)
                                                {
                                                    QualificationName.Value = Model == null ? string.Empty : Model.QualificationID.ToString();
                                                }
                                            }
                                            @(Html.VnrComboBoxFor(mode => mode.QualificationID, QualificationName).Text(Model == null ? string.Empty : Model.QualificationName))
                                        </div>
                                    </div>
                                    <div id="div10" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.ProfileSingID)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var displayprofilename = Hre_ContractModel.FieldNames.ProfileName;
                                                IEnumerable valueProfileSing = new string[] { };
                                                if (Model != null)
                                                {
                                                    valueProfileSing = new[] { new { ProfileSingName = Model.ProfileSingName, ID = Model.ProfileSingID } };
                                                }

                                                if (Model != null && Model.ProfileSingName != null)
                                                {
                                                    displayprofilename = Hre_ContractModel.FieldNames.ProfileSingName;
                                                }

                                                var ProfileSing = new MultiSelectBuilderInfo()
                                                {
                                                    DataTextField = displayprofilename,
                                                    DataValueField = Hre_ContractModel.FieldNames.ID,
                                                    Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
                                                    Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                                    MaxSelectedItems = 1,
                                                    Value = valueProfileSing,
                                                    Width = 200
                                                };
                                            }
                                            @(Html.VnrMultiSelectFor(mode => mode.ProfileSingID, ProfileSing))
                                        </div>
                                    </div>
                                    <div id="div10" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.DateAuthorize)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var DateAuthorize = new DatePickerBuilderInfo()
                                                {
                                                    StyleCss = "width:100px;"
                                                };
                                            }
                                            @Html.VnrDatePickerFor(model => model.DateAuthorize, DateAuthorize)
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.FollowNo)
                                        </div>
                                        <div class="FieldValue">
                                            @Html.VnrTextBoxFor(model => model.FollowNo)
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.WorkPlaceID)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var _workplaceName = new ComboBoxBuilderInfo()
                                                {
                                                    DataTextField = "WorkPlaceName",
                                                    DataValueField = "ID",
                                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiWorkPlace",
                                                    StyleCss = "width:200px;",
                                                    Value = Model == null ? string.Empty : Model.WorkPlaceID.ToString(),
                                                };
                                            }
                                            @(Html.VnrComboBoxFor(mode => mode.WorkPlaceID, _workplaceName).Text(Model == null ? string.Empty : Model.WorkPlaceName))
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.HourWorkInMonth)
                                        </div>
                                        <div class="FieldValue">
                                            <div style="float:left">
                                                @{
                                                    var HourWorkInMonth = new NumericTextBoxBuilderInfo<double>()
                                                    {
                                                        StyleCss = "width:100px",
                                                        Format = ConstantFormat.HRM_Format_Number_Double
                                                    };
                                                }
                                                @Html.VnrNumericTextBoxFor(model => model.HourWorkInMonth, HourWorkInMonth)
                                            </div>
                                            <div style="float:left">
                                                @{
                                                    var _TypeHourWork = new DropDownListBuilderInfo()
                                                    {
                                                        DataTextField = "Text",
                                                        DataValueField = "Value",
                                                        BindTo = TypeHourWork,
                                                        StyleCss = "Width: 100px",
                                                        OptionLabel = null,
                                                    };
                                                }
                                                @Html.VnrDropDownListFor(model => model.TypeHourWork, _TypeHourWork)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <div style="display: block; padding-top: 10px;">
                        <fieldset>
                            <legend>
                                @ConstantDisplay.HRM_HR_SalaryContractInformation.TranslateString()
                            </legend>
                            <div style="float:left; width:100%">
                                <div style="float:left; width:500px">
                                    <div id="Div_Rank">
                                        <div id="div3" class="DivContentTitleValue">
                                            <div class="FieldTitle150">
                                                @Html.VnrLabelFor(mode => mode.ClassRateID)
                                            </div>
                                            <div class="FieldValue">
                                                <div>
                                                    @{
                                                        var ClassRateName = new ComboBoxBuilderInfo()
                                                        {
                                                            DataTextField = "SalaryClassName",
                                                            DataValueField = "ID",
                                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiSalaryClass",
                                                            StyleCss = "width:200px;",
                                                            Value = Model == null ? string.Empty : Model.ClassRateID.ToString(),
                                                            EventChange = "ChangeSalaryClass",

                                                        };
                                                    }
                                                    @(Html.VnrComboBoxFor(mode => mode.ClassRateID, ClassRateName).Text(Model == null ? string.Empty : Model.ClassRateName))
                                                </div>
                                            </div>
                                        </div>
                                        <div id="div3" class="DivContentTitleValue">
                                            <div class="FieldTitle150">
                                                @Html.VnrLabelFor(mode => mode.RankRateID)
                                            </div>
                                            <div class="FieldValue">
                                                <div>
                                                    @{
                                                        var RankRateName = new ComboBoxBuilderInfo()
                                                        {
                                                            DataTextField = "SalaryRankName",
                                                            DataValueField = "ID",
                                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiSalaryRank",
                                                            StyleCss = "width:200px;",
                                                            Value = Model == null ? string.Empty : Model.RankRateID.ToString(),
                                                            EventChange = "ChangeSalaryRank",
                                                            //CascadeFrom = "ClassRateID",
                                                            //Data = "FielterDataRankRate"
                                                        };
                                                    }
                                                    @(Html.VnrComboBoxFor(mode => mode.RankRateID, RankRateName).Text(Model == null ? string.Empty : Model.SalaryRankName))
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.Salary)
                                        </div>
                                        <div class="FieldValue">
                                            <div style="float:left">
                                                @{
                                                    var Salary = new NumericTextBoxBuilderInfo<double>()
                                                    {
                                                        StyleCss = "width:140px",
                                                        Format = ConstantFormat.HRM_Format_Money,

                                                    };
                                                }
                                                @Html.VnrNumericTextBoxFor(model => model.Salary, Salary)
                                            </div>
                                            <div style="float: left; padding-left: 2px">
                                                @{
                                                    string valueCurr = string.Empty;
                                                    if (Model == null || Model.CurenncyID == null)
                                                    {
                                                        valueCurr = "VND";
                                                    }
                                                }
                                                @{
                                                    var CurrencyName = new ComboBoxBuilderInfo()
                                                    {
                                                        DataTextField = "CurrencyName",
                                                        DataValueField = "ID",
                                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                                        StyleCss = "width:60px;",
                                                        Autobind = true,
                                                        Value = valueCurr
                                                    };
                                                }
                                                @(Html.VnrComboBoxFor(mode => mode.CurenncyID, CurrencyName).Text(Model == null ? string.Empty : Model.CurrencySalName))
                                            </div>
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">

                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var CreateBasicSalary = new CheckBoxBuilderInfo()
                                                {
                                                };
                                                if (Model != null)
                                                {
                                                    if (Model.CreateBasicSalary == true)
                                                    {
                                                        CreateBasicSalary.Value = true;
                                                    }
                                                    else
                                                    {
                                                        CreateBasicSalary.Value = false;
                                                    }
                                                }
                                            }
                                            @Html.VnrCheckBoxFor(model => model.CreateBasicSalary, CreateBasicSalary)
                                            <div style="float: right; padding-top: 5px">
                                                @Html.VnrLabel(ConstantDisplay.HRM_HR_Contract_CreateBasicSalary.TranslateString())
                                                @*<a id="btnGetBasicSalary" style="cursor:pointer">Tham Khảo Lương Cơ Bản</a>*@
                                                <a id="btnGetBasicSalary" style="cursor:pointer">@ConstantDisplay.HRM_HR_Profile_ReferBasicSalary.TranslateString()</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var BasicSalaryForPerson = new CheckBoxBuilderInfo()
                                                {
                                                };
                                                if (Model != null)
                                                {
                                                    if (Model.BasicSalaryForPerson == true)
                                                    {
                                                        BasicSalaryForPerson.Value = true;
                                                    }
                                                    else
                                                    {
                                                        BasicSalaryForPerson.Value = false;
                                                    }
                                                }
                                            }
                                            @Html.VnrCheckBoxFor(model => model.BasicSalaryForPerson, BasicSalaryForPerson)
                                            <div style="float: right; padding-top: 5px">
                                                @Html.VnrLabel(ConstantDisplay.HRM_HR_Contract_BasicSalaryForPerson.TranslateString())
                                            </div>
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.InsuranceAmount)
                                        </div>
                                        <div class="FieldValue">
                                            <div style="float:left">
                                                @{
                                                    var InsuranceAmount = new NumericTextBoxBuilderInfo<double>()
                                                    {
                                                        StyleCss = "width:140px",
                                                        Format = ConstantFormat.HRM_Format_Money
                                                    };
                                                }
                                                @Html.VnrNumericTextBoxFor(model => model.InsuranceAmount, InsuranceAmount)
                                            </div>
                                            <div style="float: left; padding-left: 2px">
                                                @{
                                                    var CurenncyInsName = new ComboBoxBuilderInfo()
                                                    {
                                                        DataTextField = "CurrencyName",
                                                        DataValueField = "ID",
                                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                                        StyleCss = "width:60px;",
                                                        Value = Model == null ? string.Empty : Model.CurenncyID1.ToString(),
                                                    };
                                                }
                                                @(Html.VnrComboBoxFor(mode => mode.CurenncyID1, CurenncyInsName).Text(Model == null ? string.Empty : Model.CurenncyInsName))
                                            </div>
                                        </div>
                                    </div>
                                    <div id="div10" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.PersonalRate)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var PersonalRate = new NumericTextBoxBuilderInfo<double>()
                                                {
                                                    StyleCss = "width:200px",
                                                    Format = ConstantFormat.HRM_Format_Number_Double
                                                };
                                            }
                                            @Html.VnrNumericTextBoxFor(model => model.PersonalRate, PersonalRate)
                                        </div>
                                    </div>
                                </div>
                                <div style="float: left; width: 500px;">
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.Allowance1)
                                        </div>
                                        <div class="FieldValue">
                                            <div style="float:left">
                                                @{
                                                    var AllowanceID1Name = new ComboBoxBuilderInfo()
                                                    {
                                                        DataTextField = "UsualAllowanceName",
                                                        DataValueField = "ID",
                                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUsualAllowance",
                                                        StyleCss = "width:150px;",
                                                        Value = Model == null ? string.Empty : Model.AllowanceID1.ToString(),
                                                    };
                                                }
                                                @(Html.VnrComboBoxFor(mode => mode.AllowanceID1, AllowanceID1Name).Text(Model == null ? string.Empty : Model.AllowanceID1Name))

                                            </div>
                                            <div style="float: left; padding-left: 2px">
                                                @{
                                                    var Allowance1 = new NumericTextBoxBuilderInfo<double>()
                                                    {
                                                        StyleCss = "width:100px",
                                                        Format = ConstantFormat.HRM_Format_Money
                                                    };
                                                }
                                                @Html.VnrNumericTextBoxFor(model => model.Allowance1, Allowance1)
                                            </div>
                                            <div style="float: left; padding-left: 2px">
                                                @{
                                                    var CurenncyID2Name = new ComboBoxBuilderInfo()
                                                    {
                                                        DataTextField = "CurrencyName",
                                                        DataValueField = "ID",
                                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                                        StyleCss = "width:60px;",
                                                        Value = Model == null ? string.Empty : Model.CurenncyID2.ToString(),
                                                    };
                                                }
                                                @(Html.VnrComboBoxFor(mode => mode.CurenncyID2, CurenncyID2Name).Text(Model == null ? string.Empty : Model.CurenncyAllowance1Name))
                                            </div>
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.Allowance2)
                                        </div>
                                        <div class="FieldValue">
                                            <div>
                                                <div style="float:left">
                                                    @{
                                                        var AllowanceID2Name = new ComboBoxBuilderInfo()
                                                        {
                                                            DataTextField = "UsualAllowanceName",
                                                            DataValueField = "ID",
                                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUsualAllowance",
                                                            StyleCss = "width:150px;",
                                                            Value = Model == null ? string.Empty : Model.AllowanceID2.ToString(),
                                                        };
                                                    }
                                                    @(Html.VnrComboBoxFor(mode => mode.AllowanceID2, AllowanceID2Name).Text(Model == null ? string.Empty : Model.AllowanceID2Name))
                                                </div>
                                                <div style="float: left; padding-left: 2px">
                                                    @{
                                                        var Allowance2 = new NumericTextBoxBuilderInfo<double>()
                                                        {
                                                            StyleCss = "width:100px",
                                                            Format = ConstantFormat.HRM_Format_Money
                                                        };
                                                    }
                                                    @Html.VnrNumericTextBoxFor(model => model.Allowance2, Allowance2)
                                                </div>
                                                <div style="float: left; padding-left: 2px">
                                                    @{
                                                        var CurenncyAllowance2Name = new ComboBoxBuilderInfo()
                                                        {
                                                            DataTextField = "CurrencyName",
                                                            DataValueField = "ID",
                                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                                            StyleCss = "width:60px;",
                                                            Value = Model == null ? string.Empty : Model.CurenncyID3.ToString(),
                                                        };
                                                    }
                                                    @(Html.VnrComboBoxFor(mode => mode.CurenncyID3, CurenncyAllowance2Name).Text(Model == null ? string.Empty : Model.CurenncyAllowance2Name))

                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.Allowance3)
                                        </div>
                                        <div class="FieldValue">
                                            <div>
                                                <div>
                                                    <div style="float:left">
                                                        @{
                                                            var AllowanceID3Name = new ComboBoxBuilderInfo()
                                                            {
                                                                DataTextField = "UsualAllowanceName",
                                                                DataValueField = "ID",
                                                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUsualAllowance",
                                                                StyleCss = "width:150px;",
                                                                Value = Model == null ? string.Empty : Model.AllowanceID3.ToString(),
                                                            };
                                                        }
                                                        @(Html.VnrComboBoxFor(mode => mode.AllowanceID3, AllowanceID3Name).Text(Model == null ? string.Empty : Model.AllowanceID3Name))

                                                    </div>
                                                    <div style="float: left; padding-left: 2px">
                                                        @{
                                                            var Allowance3 = new NumericTextBoxBuilderInfo<double>()
                                                            {
                                                                StyleCss = "width:100px",
                                                                Format = ConstantFormat.HRM_Format_Money
                                                            };
                                                        }
                                                        @Html.VnrNumericTextBoxFor(model => model.Allowance3, Allowance3)
                                                    </div>
                                                    <div style="float: left; padding-left: 2px">
                                                        @{
                                                            var CurenncyAllowance3Name = new ComboBoxBuilderInfo()
                                                            {
                                                                DataTextField = "CurrencyName",
                                                                DataValueField = "ID",
                                                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                                                StyleCss = "width:60px;",
                                                                Value = Model == null ? string.Empty : Model.CurenncyIDSalary.ToString(),
                                                            };
                                                        }
                                                        @(Html.VnrComboBoxFor(mode => mode.CurenncyIDSalary, CurenncyAllowance3Name).Text(Model == null ? string.Empty : Model.CurenncyAllowance3Name))
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.Allowance4)
                                        </div>
                                        <div class="FieldValue">
                                            <div>
                                                <div style="float:left">
                                                    @{
                                                        var AllowanceID4Name = new ComboBoxBuilderInfo()
                                                        {
                                                            DataTextField = "UsualAllowanceName",
                                                            DataValueField = "ID",
                                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUsualAllowance",
                                                            StyleCss = "width:150px;",
                                                            Value = Model == null ? string.Empty : Model.AllowanceID4.ToString(),
                                                        };
                                                    }
                                                    @(Html.VnrComboBoxFor(mode => mode.AllowanceID4, AllowanceID4Name).Text(Model == null ? string.Empty : Model.AllowanceID4Name))
                                                </div>
                                                <div style="float: left; padding-left: 2px">
                                                    @{
                                                        var Allowance4 = new NumericTextBoxBuilderInfo<double>()
                                                        {
                                                            StyleCss = "width:100px",
                                                            Format = ConstantFormat.HRM_Format_Money
                                                        };
                                                    }
                                                    @Html.VnrNumericTextBoxFor(model => model.Allowance4, Allowance4)
                                                </div>
                                                <div style="float: left; padding-left: 2px">
                                                    @{
                                                        var CurenncyAllowance4Name = new ComboBoxBuilderInfo()
                                                        {
                                                            DataTextField = "CurrencyName",
                                                            DataValueField = "ID",
                                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                                            StyleCss = "width:60px;",
                                                            Value = Model == null ? string.Empty : Model.CurenncyID4.ToString(),
                                                        };
                                                    }
                                                    @(Html.VnrComboBoxFor(mode => mode.CurenncyID4, CurenncyAllowance4Name).Text(Model == null ? string.Empty : Model.CurenncyAllowance4Name))
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.Allowance)
                                        </div>
                                        <div class="FieldValue">
                                            <div>

                                                <div style="float:left">
                                                    @{
                                                        var Allowance = new NumericTextBoxBuilderInfo<double>()
                                                        {
                                                            StyleCss = "width:140px",
                                                            Format = ConstantFormat.HRM_Format_Money
                                                        };
                                                    }
                                                    @Html.VnrNumericTextBoxFor(model => model.Allowance, Allowance)
                                                </div>
                                                <div style="float: left; padding-left: 2px">
                                                    @{
                                                        var CurenncyOAllowanceName = new ComboBoxBuilderInfo()
                                                        {
                                                            DataTextField = "CurrencyName",
                                                            DataValueField = "ID",
                                                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                                            StyleCss = "width:60px;",
                                                            Value = Model == null ? string.Empty : Model.CurenncyID5.ToString(),
                                                        };
                                                    }
                                                    @(Html.VnrComboBoxFor(mode => mode.CurenncyID5, CurenncyOAllowanceName).Text(Model == null ? string.Empty : Model.CurenncyOAllowanceName))

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.SalaryClassTypeID)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var SalaryClassTypeName = new ComboBoxBuilderInfo()
                                                {
                                                    DataTextField = "SalaryClassTypeName",
                                                    DataValueField = "ID",
                                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiSalaryClassType",
                                                    StyleCss = "width:200px;",
                                                    Value = Model == null ? string.Empty : Model.SalaryClassTypeID.ToString(),
                                                };
                                            }
                                            @(Html.VnrComboBoxFor(mode => mode.SalaryClassTypeID, SalaryClassTypeName).Text(Model == null ? string.Empty : Model.SalaryClassTypeName))
                                        </div>
                                    </div>
                                    <div id="div3" class="DivContentTitleValue">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.FormPaySalary)
                                        </div>
                                        <div class="FieldValue">
                                            @Html.VnrTextBoxFor(mode => mode.FormPaySalary)
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </fieldset>
                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>
        </tbody>
    </table>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateAppendixContract", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    <div style="float:right">
        <div class="HideExportCate">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        //Thông tin hiển column hiển thị
        string[] valueFields = new string[]
                            {
                                Hre_AppendixContractModel.FieldNames.Code,
                                Hre_AppendixContractModel.FieldNames.AppendixContractType,
                                Hre_AppendixContractModel.FieldNames.DateSignedAppendixContract,
                                Hre_AppendixContractModel.FieldNames.DateofEffect,
                                Hre_AppendixContractModel.FieldNames.DateEndAppendixContract,
                                Hre_AppendixContractModel.FieldNames.Amount
                            };

        //Set độ rộng cho từng column
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {Hre_AppendixContractModel.FieldNames.Code, 150},
                                {Hre_AppendixContractModel.FieldNames.AppendixContractType, 150},
                                {Hre_AppendixContractModel.FieldNames.DateSignedAppendixContract, 100},
                                {Hre_AppendixContractModel.FieldNames.DateofEffect, 130},
                                {Hre_AppendixContractModel.FieldNames.DateEndAppendixContract, 150},
                                {Hre_AppendixContractModel.FieldNames.Amount, 120}
                            };

        //Thông tin hiển thị được dịch
        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                            {
                                {Hre_AppendixContractModel.FieldNames.Code, ConstantDisplay.HRM_HR_AppendixContract_Code},
                                {Hre_AppendixContractModel.FieldNames.AppendixContractType, ConstantDisplay.HRM_HR_AppendixContract_AppendixContractType},
                                {Hre_AppendixContractModel.FieldNames.DateSignedAppendixContract, ConstantDisplay.HRM_HR_AppendixContract_DateSignedAppendixContract},
                                {Hre_AppendixContractModel.FieldNames.DateofEffect, ConstantDisplay.HRM_HR_AppendixContract_DateofEffect},
                                {Hre_AppendixContractModel.FieldNames.DateEndAppendixContract, ConstantDisplay.HRM_HR_AppendixContract_DateEndAppendixContract},
                                {Hre_AppendixContractModel.FieldNames.Amount, ConstantDisplay.HRM_HR_AppendixContract_Amount}
                            };

        var grid = new GridBuilderInfo
        {
            Name = "grid_AppendixContract",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            ShowCommand = false,
            GridHeight = 200,
            AutoBind = true,
            ReadActionUrl = _hrm_Hr_Service + "Hre_GetData/GetAppendixContractByContractList?ContractID=" + ContractID,
            ReadData = "filterFieldInfo",
        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Hre_AppendixContractModel>(grid)
                               .DataSource(dataSource => dataSource
                                   .Ajax()
                                           .Model(model => model.Field(o => o.ContractNo).Editable(false))
                                  )
    )
</div>

<script>
    $(document).ready(function () {
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Hre_GetData/IsInputGeneralCandidateManual/",
            dataType: 'json',
            async: false,
            success: function (returnValue) {
                debugger;
                if (returnValue == true) {
                    $("#Div_Rank").hide();
                }
                else {
                    $("#Div_Rank").show();
                }
            },
        });
    });
</script>

<div>
    @{
        if(Model != null)
        {
            <script>
                $("#Contarct_ID").val($("#ID").val());
            </script>
        }
    }
</div>
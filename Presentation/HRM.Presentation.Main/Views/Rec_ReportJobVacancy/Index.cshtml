@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.Recruitment.Models
@using HRM.Presentation.UI.Controls.Kendo

@model Rec_ReportJobVacancySearchModel
@{
    ViewBag.Title = "JobVacancy Index";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    Layout = null;
    string[] valueFields = null;

    IList<SelectListItem> lstType = Enum.GetValues(typeof(JobVacancyType))
   .Cast<JobVacancyType>()
   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
   .ToList();
}
@Html.Hidden("Screen", screen)
<script>
    SetFieldRequired();
    var checkedNodes = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;

    function filterFieldInfo(isExport) {
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        var dataParameter = {
            DateStart: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateStart").val()),
            DateEnd: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateEnd").val()),
            OrgStructureID: checkedNodes.join(','),
            Type: $("#SType").val(),
            PositionID: $("#SPositionID").val(),
            RankID: $("#SRankID").val(),
            ValueFields: $('#valueFieldsGrid').val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid
        };
        if (isExport == true) {
            dataParameter["ExportID"] = $('#ddlScreenName').val();
        }
        return dataParameter;
    }

    function CheckEmpty() {

        var datefrom = $("#DateStart").val();
        var dateto = $("#DateEnd").val();
        if (datefrom == "") {
            ShowNotificationProcessor("Error,Từ Ngày Không Được Rỗng !");
            return;
        }
        if (dateto == "") {
            ShowNotificationProcessor("Error,Đến Ngày Không Được Rỗng !"); return;
        }
    }

    $(document).ready(function () {
        //Xử lý sự kiện click button tìm kiếm
        $("#btnSearch").click(function () {
            var datefrom = $("#DateStart").val();
            var dateto = $("#DateEnd").val();
            if (datefrom == "") {
                ShowNotificationProcessor("Error,Từ Ngày Không Được Rỗng !");
                return;
            }
            if (dateto == "") {
                ShowNotificationProcessor("Error,Đến Ngày Không Được Rỗng !"); return;
            }
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes)
            var grid = $('#gridRec_ReportJobVacancy').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
            checkedNodes = [];
        });
        //Xử lý show hide form tìm kiếm
        ShowHidePanel();
    });
    GridCheckbox("gridRec_ReportJobVacancy");
    $("#btnExport").click(function () {
        var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_ReportJobVacancy');
        if (!isAccess) {
            return;
        }
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        var urlGetData = '@hrm_Hr_Service' + "Rec_GetData/GetReportJobVacancy";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload);
        checkedNodes = [];
    });
    $("#btnCreateTemplate").click(function () {
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = false;
        CreateTemplate('@hrm_Hr_Service' + '/Rec_GetData/GetReportJobVacancy', filterFieldInfo(true));
    });
    function onDataBoundGrid() {
        CheckedGrid("gridRec_ReportJobVacancy", selectedIds.join(","));
    }
</script>
<div id="grid_Demo"></div>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <form action="#" method="POST" id="form-search">
                    <div class="hrm_box">
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.OrgStructureID)
                            </div>
                            <div class="FieldValue" id="test">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateStart)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var dateFrom = new DatePickerBuilderInfo()
                                    {
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateStart, dateFrom)
                                @{
                                    var dateTo = new DatePickerBuilderInfo()
                                    {
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateEnd, dateTo)
                            </div>
                        </div>
                    </div>
                    <div class="hrm_box">
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.RankID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _RankID = new DropDownListBuilderInfo()
                                    {
                                        Name = "SRankID",
                                        DataValueField = "ID",
                                        DataTextField = "NameEntityName",
                                        Url = hrm_Hr_Service + "Cat_GetData/GetMultiRank",
                                        OptionLabel = ConstantDisplay.HRM_Rec_JobCondition_SelectRank.TranslateString(),
                                    };
                                }
                                @Html.VnrDropDownListFor(model => model.RankID, _RankID)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Type)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var Type = new DropDownListBuilderInfo()
                                    {
                                        Name = "SType",
                                        DataTextField = "Text",
                                        DataValueField = "Value",
                                        BindTo = lstType,
                                        OptionLabel = ConstantDisplay.HRM_Category_SelectType.TranslateString(),

                                    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.Type, Type)
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)

            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        valueFields = new[]
            {
                Rec_JobVacancyModel.FieldNames.OrgStructureName,
                Rec_JobVacancyModel.FieldNames.PositionName,
                Rec_JobVacancyModel.FieldNames.Quantity,
                Rec_JobVacancyModel.FieldNames.JobVacancyRankName,
                Rec_JobVacancyModel.FieldNames.Type,
                Rec_JobVacancyModel.FieldNames.DateProposal,
                Rec_JobVacancyModel.FieldNames.DateStart,
                Rec_JobVacancyModel.FieldNames.DateEnd,
                Rec_JobVacancyModel.FieldNames.DateCheck
            };

        var sizeFields = new Dictionary<string, int>()
            {
                {Rec_JobVacancyModel.FieldNames.OrgStructureName,120},
                {Rec_JobVacancyModel.FieldNames.PositionName,140},
                {Rec_JobVacancyModel.FieldNames.Quantity,120},
                {Rec_JobVacancyModel.FieldNames.JobVacancyRankName,120},
                {Rec_JobVacancyModel.FieldNames.Type,130},
                {Rec_JobVacancyModel.FieldNames.DateProposal,150},
                {Rec_JobVacancyModel.FieldNames.DateStart,100},
                {Rec_JobVacancyModel.FieldNames.DateEnd,100},
                {Rec_JobVacancyModel.FieldNames.DateCheck,120},
            };

        var filterable = new Dictionary<string, bool>()
            {

                {Rec_JobVacancyModel.FieldNames.OrgStructureName,true},
                {Rec_JobVacancyModel.FieldNames.PositionName,true},
                {Rec_JobVacancyModel.FieldNames.Quantity,true},
                {Rec_JobVacancyModel.FieldNames.JobVacancyRankName,true},
                {Rec_JobVacancyModel.FieldNames.Type,true},
                {Rec_JobVacancyModel.FieldNames.DateProposal,false},
                {Rec_JobVacancyModel.FieldNames.DateStart,false},
                {Rec_JobVacancyModel.FieldNames.DateEnd,false},
                {Rec_JobVacancyModel.FieldNames.DateCheck,false},
            };

        var displayFields = new Dictionary<string, string>()
            {

                {Rec_JobVacancyModel.FieldNames.OrgStructureName,ConstantDisplay.HRM_HR_Profile_OrgStructureName},
                {Rec_JobVacancyModel.FieldNames.PositionName,ConstantDisplay.HRM_HR_Profile_JobTitleName},
                {Rec_JobVacancyModel.FieldNames.Quantity,ConstantDisplay.HRM_Rec_JobVacancy_Quantity},
                {Rec_JobVacancyModel.FieldNames.JobVacancyRankName,ConstantDisplay.HRM_Rec_JobVacancy_RankID},
                {Rec_JobVacancyModel.FieldNames.Type,ConstantDisplay.HRM_Rec_JobVacancy_Type},
                {Rec_JobVacancyModel.FieldNames.DateProposal,ConstantDisplay.HRM_Rec_JobVacancy_DateProposal},
                {Rec_JobVacancyModel.FieldNames.DateStart,ConstantDisplay.HRM_Rec_RecruitmentCampaign_DateStart},
                {Rec_JobVacancyModel.FieldNames.DateEnd,ConstantDisplay.HRM_Rec_RecruitmentCampaign_DateEnd},
                {Rec_JobVacancyModel.FieldNames.DateCheck,ConstantDisplay.HRM_Rec_JobVacancy_DateCheck},
            };

        var grid = new GridBuilderInfo
        {
            Name = "gridRec_ReportJobVacancy",
            ShowEditIcon = false,
            ShowCheckAll = false,
            ShowCheckbox = false,
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            Filterable = filterable,
            ReadActionUrl = hrm_Hr_Service + "Rec_GetData/GetReportJobVacancy/",
            ReadData = "filterFieldInfo",
        };
    }
    @(Html.VnrGrid<Rec_JobVacancyModel>(grid))
</div>
@{
    var valueFields1 = string.Empty;
    for (int i = 0; i < valueFields.Count(); i++)
    {
        valueFields1 += "," + valueFields[i];
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)

@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Hr.Models
@using HRM.Infrastructure.Utilities

@using System.Collections
@using HRM.Infrastructure.Security

@model FIN_CashAdvanceModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    //var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var ContractID = Guid.Empty;
    var ProfileName = string.Empty;
    if (Model != null)
    {
        ContractID = Model.ID;
    }

   // IList<SelectListItem> lstExpensesType = Enum.GetValues(typeof(ExpensesType))
   //.Cast<ExpensesType>()
   //.Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   //.ToList();
}
 

@{
    var windowClaim = new WindowBuilderInfo
    {
        Name = "windowCashAdvanceItem",
        Visible = false,
        LoadContentFrom = _hrm_Main_Web + "FIN_CashAdvance/FIN_CashAdvanceItemInfo/",
    };
}
@(Html.VnrWindow(windowClaim))
@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = ConstantDisplay.Hrm_Notification.TranslateString(),
        Content = ConstantDisplay.PleaseSaveCashAdvance.TranslateString()
    };
}
@(Html.VnrWindow(windowError))
@*bỏ thành cuộn trong popup*@
<style>
    .k-window div.k-window-content {
        overflow: hidden;
    }
</style>
<script type="text/javascript">
    SetFieldRequired();
    var gridName = '@ConstantControlName.HRM_FIN_TravelRequestItem_Grid_Name.TranslateString()';
    var popUpName = '@ConstantControlName.HRM_FIN_TravelRequestItem_PopUp_Name.TranslateString()';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_FIN_CashAdvanceItem_Edit.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_FIN_CashAdvanceItem_Create.TranslateString())';

    //Truyền nhiều id trên lưới
    function PopData1(idWindow, url, parameter1, parameter2, titlePopUp) {

        var window = $("#" + idWindow).data("kendoWindow");
        window.refresh({
            url: url,
            data: { TravelRequestID: parameter1, ProfileID: parameter2 }
        }).center().open().title(titlePopUp);
    }
    $("#btnCreate").click(function () {

        debugger;
        var x = $('#@Html.FieldIdFor(model => model.CashAdvance_ID)').val();
        if (x == '') {
            PopUpCreate("windowError");
        }
        else {

            PopUpCreate("windowCashAdvanceItem", titleCreatePopUp, '@ConstantPermission.Hre_AppendixContract')
        }
    });

    $(document).ready(function () {
        document.getElementById("JobTitleName").readOnly = true;
        document.getElementById("OrgStructureName").readOnly = true;
        document.getElementById("Channel").readOnly = true;
        document.getElementById("Region").readOnly = true;
        document.getElementById("Area").readOnly = true;
        document.getElementById("OrgStructureCode").readOnly = true;
        document.getElementById("SupervisorName").readOnly = true;
        document.getElementById("WorkPlaceName").readOnly = true;
        //Show Hide Panel
        ShowHidePanel();

        //Xử lý Edit popup
        var url = '@_hrm_Main_Web' + "FIN_CashAdvance/FIN_CashAdvanceItemInfo/";
        EditGridPopUp("grid_CashAdvanceItem", "windowCashAdvanceItem", url, '@ConstantPermission.Hre_Contract', titleEditPopUp);

    });

    function filterFieldInfo_Item() {
       
        debugger;

        return {
            CashAdvanceID: $("#CashAdvance_ID").val()
        };
    };




    GridCheckbox('grid_CashAdvanceItem');

    //Xóa PLHĐ
    $('#btnDelete').click(function (e) {
        var isAccess = checkPermission(PrivilegeType.Delete, '@ConstantPermission.Hre_AppendixContract');
        if (!isAccess) {
            return;
        }
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        DeleteSelected("grid_CashAdvanceItem", '@_hrm_Main_Web' + "FIN_CashAdvance/RemoveSelectedItem/", selectedIds.join(","));
    });
    $('#btnDeleteClaim').click(function (e) {
        var isAccess = checkPermission(PrivilegeType.Delete, '@ConstantPermission.FIN_Claim');
        if (!isAccess) {
            return;
        }
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        DeleteSelected("grid_CashAdvanceItem", '@_hrm_Main_Web' + "FIN_TravelRequest/RemoveFIN_ClaimSelected/", selectedIds.join(","));
    });

    function ProfileSelect(e) {


        var dataItem = this.dataSource.view()[e.item.index()];

        $.ajax({
            url: '@_hrm_Hr_Service' + "Hre_GetData/GetDataByProfileID",
            data: { ProfileID: dataItem.ID },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                debugger;
                if (data != null) {
                    $("#JobTitleName").val(data.JobTitleName);
                    $("#OrgStructureName").val(data.OrgStructureName);
                    $("#Channel").val(data.Channel);
                    $("#Region").val(data.Region);
                    $("#Area").val(data.Area);
                    $("#OrgStructureCode").val(data.OrgStructureCode);
                    $("#SupervisorName").val(data.SupervisorName);
                    $("#WorkPlaceName").val(data.WorkPlaceName);
                }
            }

        });
    }

    function onDataBoundGrid() {
        debugger;
        var grid = $("#grid_CashAdvanceItem").data("kendoGrid");
        if (grid._data[0] != undefined)
        {
            var sumQuantity = grid._data[0].TotalAmount;
            var sumQuantityNumberTextBox = $("#TotalAmount").data("kendoNumericTextBox");
            sumQuantityNumberTextBox.value(sumQuantity);
        }
    }


    $('#btnApproved').click(function (e) {

        e.preventDefault();
        var grid = $('#grid_CashAdvanceItem').data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        if (selectedItem != null) {

            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: '@Html.Raw(@ConstantDisplay.Hrm_Notification.TranslateString())',
                message: '@Html.Raw(@ConstantDisplay.HRM_Message_AreYouSureWantToChangeStatus.TranslateString())',
                icon: "k-ext-warning",
                width: "355px",
                height: "105px"
            })
                ).done(function (response) {

                    if (response.button == "OK") {
                        DoActionData("grid_CashAdvanceItem", '@_hrm_Hr_Service' + "Hre_GetData/ActionApprovedCashAdvanceItem/", selectedIds, 'E_APPROVED');
                    }
                    else if (response.button == "Cancel") {
                        return false;
                    }
                });
        }
        else {
            ErrorMessages('@Html.Raw(@ConstantDisplay.HRM_Message_PleaseSelectData.TranslateString())');
        }
        return false;
    });

    $('#btnSubmit').click(function (e) {
        var userId = '@Session[SessionObjects.UserId]';
        e.preventDefault();
        var grid = $('#grid_CashAdvanceItem').data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        if (selectedItem != null) {

            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: '@Html.Raw(@ConstantDisplay.Hrm_Notification.TranslateString())',
                message: '@Html.Raw(@ConstantDisplay.HRM_Message_AreYouSureWantToChangeStatus.TranslateString())',
                icon: "k-ext-warning",
                width: "355px",
                height: "105px"
            })
                ).done(function (response) {

                    if (response.button == "OK") {
                        DoActionData("grid_CashAdvanceItem", '@_hrm_Hr_Service' + "Hre_GetData/ActionSubmitCashAdvanceItem/", selectedIds, 'E_SUBMIT', userId);
                    }
                    else if (response.button == "Cancel") {
                        return false;
                    }
                });
        }
        else {
            ErrorMessages('@Html.Raw(@ConstantDisplay.HRM_Message_PleaseSelectData.TranslateString())');
        }
        return false;
    });

    // Hàm xử lý dữ liệu được chọn trên lưới và xử lý bên dưới
    // vd: Xử lý thay đổi trạng thái
    function DoActionData(gridName, actionURL, parameter, status, userId) {

        $.ajax({
            url: actionURL,
            data: { selectedIds: parameter, status: status, userId: userId },
            type: 'POST',
            traditional: true,
            success: function (data) {

                selectedIds = [];
                ReadGrid(gridName);
                ShowNotificationProcessor('@Html.Raw(@ConstantDisplay.Hrm_Change_Status_Succeed.TranslateString())');
            },
            error: function (data) {
                alert('Lỗi hàm DoActionData trong hrm-8.0.js');//Chưa dịch
            }
        });
    };

</script>

<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            @Html.HiddenFor(mode => mode.ID)
            @Html.HiddenFor(mode => mode.CashAdvance_ID)
            @Html.HiddenFor(mode => mode.UserCreateID)
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div style="display: block; padding-top: 10px;">
                      <fieldset>
                          <legend>
                              Thông Tin Người Yêu Cầu
                          </legend>
                      </fieldset>
                        <div style="width:100%">
                            <div style="float:left;">
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.ProfileID)
                                        @Html.HiddenFor(mode => mode.ID)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            IEnumerable valueProfile = new string[] { };
                                            if (Model != null)
                                            {
                                                valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
                                            }
                                        }
                                        @{
                                            var Profile = new MultiSelectBuilderInfo()
                                            {
                                                // Name = "ProfileID",
                                                DataTextField = Hre_ContractModel.FieldNames.ProfileName,
                                                DataValueField = Hre_ContractModel.FieldNames.ID,
                                                Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
                                                Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                                MaxSelectedItems = 1,
                                                Value = valueProfile,
                                                EventSelect = "ProfileSelect",
                                                

                                            };
                                        }
                                        @(Html.VnrMultiSelectFor(mode => mode.ProfileID, Profile))
                                    </div>
                                </div>

                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.JobTitleName)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.JobTitleName)
                                    </div>
                                </div>
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.OrgStructureName)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.OrgStructureName)
                                    </div>
                                </div>

                            </div>
                            <div style="float:left">
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.Channel)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.Channel)
                                    </div>
                                </div>
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.Region)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.Region)
                                    </div>
                                </div>
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.Area)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.Area)
                                    </div>
                                </div>
                            </div>
                            <div style="float:left">
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.OrgStructureCode)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.OrgStructureCode)
                                    </div>
                                </div>
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.SupervisorName)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.SupervisorName)
                                    </div>
                                </div>
                                <div  id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.WorkPlaceName)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.WorkPlaceName)
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div style="display: block; padding-top: 10px;">
                        <fieldset>
                            <legend>
                                Thông Tin Chung
                            </legend>
                            @*<div  id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelForNoneIcon(model => model.Code)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.Code)
                                </div>
                            </div>*@
                            <div  id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelForNoneIcon(model => model.CashAdvanceName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.CashAdvanceName)
                                </div>
                            </div>
                            @*<div id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelForNoneIcon(model => model.PayTo)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.PayTo)
                                </div>
                            </div>*@
                            
                            <div  id="div13">
                                <div class="FieldTitle150">
                                    @*@Html.VnrLabel(ConstantDisplay.HRM_FIN_Claim_PaymentType_Title.TranslateString())*@
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrRadioButtonFor(mode => mode.IsTravelRequest, "IsEntertaiment")
                                    @Html.VnrLabelFor(mode => mode.IsTravelRequest)

                                    @Html.VnrRadioButtonFor(mode => mode.IsEntertaiment, "IsEntertaiment")
                                    @Html.VnrLabelFor(mode => mode.IsEntertaiment)

                                    @Html.VnrRadioButtonFor(mode => mode.IsOther, "IsEntertaiment")
                                    @Html.VnrLabelFor(mode => mode.IsOther)
                                </div>
                            </div>
                            <div id="contentTravelRequest" hidden="hidden">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.TravelRequestID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _TravelRequestID = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "TraCourseInfo_TrainCategoryID",
                                            DataTextField = "TravelRequestName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Hre_GetData/GetMultiTravelRequest",
                                            ServerFilter = true,
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.TravelRequestID, _TravelRequestID).Text(Model != null ? Model.TravelRequestName : string.Empty))
                                </div>
                            </div>
                            <div id="contentOther" hidden="hidden">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelForNoneIcon(model => model.Other)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.Other)
                                </div>

                            </div>
                            <div id="div13">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(model => model.TotalAmount)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _TotalAmount = new NumericTextBoxBuilderInfo<int>()
                                        {
                                            StyleCss = "width:150px",
                                            Format = ConstantFormat.HRM_Format_Money,
                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(model => model.TotalAmount, _TotalAmount)
                                </div>
                            </div>
                            </fieldset>
</div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>
        </tbody>
    </table>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSubmit", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconApprovedPath })
    <div style="float:right">
        <div class="HideExportCate">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        //Thông tin hiển column hiển thị
        string[] valueFields = new string[]
                            {
                                FIN_CashAdvanceItemModel.FieldNames.CashAdvanceItemName,
                                FIN_CashAdvanceItemModel.FieldNames.Amount,
                                FIN_CashAdvanceItemModel.FieldNames.CurrencyName,
                                FIN_CashAdvanceItemModel.FieldNames.Remark,
                                FIN_CashAdvanceItemModel.FieldNames.StatusView,
                               
                                
                            };

        //Set độ rộng cho từng column
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {FIN_CashAdvanceItemModel.FieldNames.CashAdvanceItemName, 130},
                                {FIN_CashAdvanceItemModel.FieldNames.Amount, 100},
                                {FIN_CashAdvanceItemModel.FieldNames.CurrencyName, 100},
                                {FIN_CashAdvanceItemModel.FieldNames.Remark, 100},
                                {FIN_CashAdvanceItemModel.FieldNames.StatusView, 100},
                            };

        //Thông tin hiển thị được dịch
        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                            {
                                {FIN_CashAdvanceItemModel.FieldNames.CashAdvanceItemName, ConstantDisplay.FIN_ClaimItem_ClaimItemName},
                                {FIN_CashAdvanceItemModel.FieldNames.Amount, ConstantDisplay.FIN_ClaimItem_Amount},
                                {FIN_CashAdvanceItemModel.FieldNames.CurrencyName, ConstantDisplay.FIN_ClaimItem_CurrencyName},
                                {FIN_CashAdvanceItemModel.FieldNames.Remark, ConstantDisplay.FIN_ClaimItem_Description},
                                {FIN_CashAdvanceItemModel.FieldNames.StatusView, ConstantDisplay.HRM_FIN_Claim_Status},
                                   
                            };
        Dictionary<string, string> FormatFields = new Dictionary<string, string>()
            {
                //{Sal_BasicSalaryModel.FieldNames.GrossAmount, ConstantFormat.HRM_Format_Int},
                {FIN_CashAdvanceItemModel.FieldNames.Amount, ConstantFormat.HRM_Format_Int},
            };

        var grid = new GridBuilderInfo
        {
            Name = "grid_CashAdvanceItem",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            ShowCommand = false,
            GridHeight = 200,
            AutoBind = true,
            ReadActionUrl = _hrm_Hr_Service + "Hre_GetData/GetCashAdvanceItemByCashAdvanceID",
            ReadData = "filterFieldInfo_Item",
            FormatFields = FormatFields,
            EventDataBound = "onDataBoundGrid"
        };
    }

    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<FIN_CashAdvanceItemModel>(grid))
</div>

<div>
    @if(Model != null)
    {
        <script>
            $(document).ready(function () {
                var sumQuantityNumberTextBox = $("#TotalAmount").data("kendoNumericTextBox");
                sumQuantityNumberTextBox.readonly();
                debugger;
                var _isEntertaimentValue = '@Model.IsEntertaiment';
                var _isTravelRequestValue = '@Model.IsTravelRequest';
                var _isOtherValue = '@Model.IsOther';

                var _isEntertaiment = document.getElementById("IsEntertaiment");
                var _isTravelRequest = document.getElementById("IsTravelRequest");
                var _isOther = document.getElementById("IsOther");

                if (_isEntertaimentValue == "False") {
                    $("#contentOther").show();
                    _isEntertaiment.checked = false;
                } else {
                    $("#contentOther").hide();
                    _isEntertaiment.checked = true;
                }

                if (_isOtherValue != "")
                {
                    if (_isOtherValue == "False") {
                        $("#contentOther").hide();
                        _isOther.checked = false;
                    } else {
                        $("#contentOther").show();
                        _isOther.checked = true;
                    }
                
                }
                
                if (_isTravelRequestValue != "")
                {
                    if (_isTravelRequestValue == "False") {
                        $("#contentTravelRequest").hide();
                        _isTravelRequest.checked = false;
                    } else {
                        $("#contentTravelRequest").show();
                        $("#contentOther").hide();
                        _isTravelRequest.checked = true;
                    }
                }
                

            });
        </script>
    }
</div>

<div>
    @if (Model == null)
    {
        <script>
            $(document).ready(function () {
                var profileId = '@Session[SessionObjects.ProfileID]';
                $.ajax({
                    url: '@_hrm_Hr_Service' + "Hre_GetData/GetDataByProfileID",
                    data: { ProfileID: profileId },
                    type: 'POST',
                    datatype: 'json',
                    success: function (data) {
                        debugger;
                        if (data != null) {
                            var dataSource = new kendo.data.DataSource();
                            var ItemsSelect = [];
                            dataSource.add({ ID: data.ID, ProfileName: data.ProfileName });
                            ItemsSelect.push(data.ID);
                            var multiProfile = $("#ProfileID").data("kendoMultiSelect");

                            multiProfile.setDataSource(dataSource);
                            multiProfile.value(ItemsSelect);


                            $("#JobTitleName").val(data.JobTitleName);
                            $("#OrgStructureName").val(data.OrgStructureName);
                            $("#Channel").val(data.Channel);
                            $("#Region").val(data.Region);
                            $("#Area").val(data.Area);
                            $("#OrgStructureCode").val(data.OrgStructureCode);
                            $("#SupervisorName").val(data.SupervisorName);
                            $("#WorkPlaceName").val(data.WorkPlaceName);
                        }
                    }

                });
            });
        </script>
    }
</div>
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Infrastructure.Security
@using System.Collections
@using HRM.Presentation.Insurance.Models
@model Ins_InsuranceRecordModel

@{
    Layout = null;
    //  var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _Hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    // var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
  //  var _hrm_Hr_Service = ConstantPathWeb.Hrm_Att_Service;
    IList<SelectListItem> InsuranceRecordType = Enum.GetValues(typeof(InsuranceRecordType))
       .Cast<InsuranceRecordType>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
       .ToList();
    IList<SelectListItem> InsuranceRecordTypeData = Enum.GetValues(typeof(InsuranceRecordTypeData))
    .Cast<InsuranceRecordTypeData>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
    .ToList();
    IList<SelectListItem> ilTypeSuckle = Enum.GetValues(typeof(TypeSuckle))
       .Cast<TypeSuckle>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
       .ToList();
    IList<SelectListItem> ilTypeSick = Enum.GetValues(typeof(TypeSick))
       .Cast<TypeSick>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
       .ToList();
    IEnumerable lstChildSick=null;
    Guid? childSickID = Guid.Empty;
    string childSickName = string.Empty;
    double? dayCount = null;
    if(Model !=null && Model.ID != Guid.Empty)
    {
        childSickID = Model.ChildSickID;
        childSickName = Model.ChildSickName;
        lstChildSick = new[] { new { ID = Model.ChildSickID, ChildSickName = Model.ChildSickName } };
        dayCount = Model.DayCount;
    }
       bool EnableProfile=true;
       if(Model!=null&&Model.ID!=Guid.Empty)
       {
           EnableProfile=false;
           
       }
}
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_Insurance_ChildSick_PopUp_Name,
        Visible = false,
        LoadContentFrom = @_hrm_Main_Web + "Ins_ChildSick/ChildSickInfo/",
    };
}
@(Html.VnrWindow(window))
<script>
    SetFieldRequired();
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Insurance_ChildSick_PopUp_Create_Title.TranslateString())';
    function getChildSick() {
        debugger;
        var dataTemplate = [{ ChildSickName: '@Html.Raw(childSickName)', ID: '@childSickID' }];
        $("#ChildSickID1").kendoComboBox({
            dataTextField: "ChildSickName",
            dataValueField: "ID",
            value: '@Html.Raw(childSickName)',
            // dataSource: dataTemplate
        });

    }
    $(document).ready(function () {
        getChildSick();
        $("#DayCount").val('@dayCount');
        //setTimeout(function () { getChildSick(); }, 1000);
        $("#createdata").click(function () {
            PopUpCreate('@ConstantControlName.HRM_Insurance_ChildSick_PopUp_Name', titleCreatePopUp, '@ConstantPermission.Ins_ChildSick');
        });


    })
    $("#getdata").click(function () {
        LoadChidSick();
    });
    function showhideControl() {
        var _type = $('#@Html.FieldIdFor(model => model.InsuranceType)').val();
        debugger;
        if (_type == '@EnumDropDown.InsuranceRecordType.E_SICK_CHILD.ToString()') {
            document.getElementById('divTypeData').style.display = 'none';      // Nơi Dưỡng Sức
            document.getElementById('divChildSickID').style.display = 'block';  // Con Ốm
            document.getElementById('divDateSuckle').style.display = 'block';    // Ngày Sinh Con
            document.getElementById('divTypeSuckle').style.display = 'block';    // Loại Sinh Con
            document.getElementById('divTypeSick').style.display = 'block';      // Loại Bệnh
        }
        else if (_type == '@EnumDropDown.InsuranceRecordType.E_PREGNANCY_SUCKLE.ToString()') {
            document.getElementById('divTypeData').style.display = 'none';      // Nơi Dưỡng Sức
            document.getElementById('divChildSickID').style.display = 'none';  // Con Ốm
            document.getElementById('divDateSuckle').style.display = 'block';    // Ngày Sinh Con
            document.getElementById('divTypeSuckle').style.display = 'block';    // Loại Sinh Con
            document.getElementById('divTypeSick').style.display = 'none';      // Loại Bệnh
        }
        else if (_type == '@EnumDropDown.InsuranceRecordType.E_SICK_SHORT.ToString()') {
            document.getElementById('divTypeData').style.display = 'none';      // Nơi Dưỡng Sức
            document.getElementById('divChildSickID').style.display = 'none';  // Con Ốm
            document.getElementById('divDateSuckle').style.display = 'none';    // Ngày Sinh Con
            document.getElementById('divTypeSuckle').style.display = 'none';    // Loại Sinh Con
            document.getElementById('divTypeSick').style.display = 'block';      // Loại Bệnh
        }
        else if (_type == '@EnumDropDown.InsuranceRecordType.E_SICK_LONG.ToString()') {
            document.getElementById('divTypeData').style.display = 'none';      // Nơi Dưỡng Sức
            document.getElementById('divChildSickID').style.display = 'none';  // Con Ốm
            document.getElementById('divDateSuckle').style.display = 'none';    // Ngày Sinh Con
            document.getElementById('divTypeSuckle').style.display = 'none';    // Loại Sinh Con
            document.getElementById('divTypeSick').style.display = 'block';      // Loại Bệnh
        }
        else if (_type == '@EnumDropDown.InsuranceRecordType.E_RESTORATION_SICK.ToString()') {
            document.getElementById('divTypeData').style.display = 'block';      // Nơi Dưỡng Sức
            document.getElementById('divChildSickID').style.display = 'none';  // Con Ốm
            document.getElementById('divDateSuckle').style.display = 'none';    // Ngày Sinh Con
            document.getElementById('divTypeSuckle').style.display = 'none';    // Loại Sinh Con
            document.getElementById('divTypeSick').style.display = 'none';      // Loại Bệnh
        } else {
            document.getElementById('divTypeData').style.display = 'block';      // Nơi Dưỡng Sức
            document.getElementById('divChildSickID').style.display = 'block';  // Con Ốm
            document.getElementById('divDateSuckle').style.display = 'block';    // Ngày Sinh Con
            document.getElementById('divTypeSuckle').style.display = 'block';    // Loại Sinh Con
            document.getElementById('divTypeSick').style.display = 'block';      // Loại Bệnh
        }

    }

    function LoadChidSick() {
        $.ajax({
            url: '@_Hrm_Hre_Service' + 'Ins_GetData/GetMultiChildSick',
            data: { profileId: $("#ProfileID").val().join(",") },
            type: 'Get',
            success: function (data) {
                $("#ChildSickID1").kendoComboBox({
                    dataTextField: "ChildSickName",
                    dataValueField: "ID",
                    dataSource: data
                });
            }
        });
    }
    function Validate() {
       OrgStructure();

        var profiles = $('#@Html.FieldIdFor(model => model.ProfileIds)').val();
        var insurancetype = $("#InsuranceType").val();
        var datestart = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateStart").val());
        var dateend = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateEnd").val());
        if (profiles == null || profiles == "") {
            ShowNotificationProcessor("Chưa Chọn Nhân Viên");
            return;
        }
        if (insurancetype == null || insurancetype == "") {
            ShowNotificationProcessor("Chưa Loại Chứng Từ");
            return;
        }

        if (datestart == null || datestart == "") {
            ShowNotificationProcessor("Chưa Chọn Ngày Bắt Đầu");
            return;
        }
        if (dateend == null || dateend == "") {
            ShowNotificationProcessor("Chưa Chọn Ngày Kết Thúc");
            return;
        }
        $.ajax({
            url: '@_Hrm_Hre_Service' + 'Ins_GetData/RealDayCount',
            data: { ProfileIDs: profiles, InsuranceType: insurancetype, DateStart: datestart, DateEnd: dateend },
            type: 'POST',
            success: function (data) {
                $("#DayCount").val(data);
            }
        });
    }
    function Calculate() {
        Validate();

    }
    function OrgStructure() {
        var ProfileID = $('#InsuranceRecord_ProfileID').val();
        $("#ChildSickID").val($("#ChildSickID1").val());
        if (ProfileID != null) {
            $('#@Html.FieldIdFor(model => model.ProfileIds)').val(ProfileID.join(','));
        }
        var checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        checkedNodes != null ? $('#@Html.FieldIdFor(model => model.OrgStructureIDs)').val(checkedNodes.join(',')) : null;
    }
    function onSaveInsRecord() {
        OrgStructure();
        onSaveAndContinue($('#form_Ins_InsuranceRecord'), '@_Hrm_Hre_Service', 'api/Ins_InsuranceRecord/', '@ConstantControlName.HRM_Insurance_InsuranceRecord_Grid_Name', '@ConstantControlName.HRM_Insurance_InsuranceRecord_PopUp_Name');
        return false;
    }
    function onSaveCloseInsRecord() {
        OrgStructure();
        onSaveAndClose($('#form_Ins_InsuranceRecord'), '@_Hrm_Hre_Service', 'api/Ins_InsuranceRecord/', '@ConstantControlName.HRM_Insurance_InsuranceRecord_Grid_Name', '@ConstantControlName.HRM_Insurance_InsuranceRecord_PopUp_Name');
        return false;
    }
    function onSaveDataPopUpInsRecord() {
        OrgStructure();
        onlySave($('#form_Ins_InsuranceRecord'), '@_Hrm_Hre_Service', 'api/Ins_InsuranceRecord/', '@ConstantControlName.HRM_Insurance_InsuranceRecord_PopUp_Name'); return false;
    }
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Ins_InsuranceRecord" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div style="display:block; padding-top:10px;">
                    <fieldset>
                        <legend>
                            @ConstantDisplay.HRM_Insurance_InsuranceRecord.TranslateString()
                        </legend>
                       
                             

                                    <div id="div2">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.ProfileID)
                                            @Html.HiddenFor(mode => mode.ID)
                                            @Html.HiddenFor(model => model.OrgStructureIDs)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                            IEnumerable valuePro = new string[] { };
                                            if (Model != null)
                                            {
                                                valuePro = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
                                            }
                                                                                    }
                                                                                    @{
                                            var mtsProfile = new MultiSelectBuilderInfo()
                                            {
                                                Name = "InsuranceRecord_ProfileID",
                                                DataTextField = "ProfileName",
                                                DataValueField = "ID",
                                                Url = @_Hrm_Hre_Service + "HrMultiSelect/GetMultiProfile",
                                                Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                                Width=300,
                                                Value = valuePro,
                                               // Enable = EnableProfile
                                                
                                            };
                                            }
                                            @Html.ChooseEmpOrOrgFor(mode => mode.ProfileID, mtsProfile, _Hrm_Hre_Service + "Ins_GetData/GetProfileByOrgId")
                                            @(Html.HiddenFor(model => model.ProfileIds))
                                        </div>
                                        <br />
                                    </div>

                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.InsuranceType)
                            </div>
                            <div class="FieldValue">
                                @{
    var InsuranceType = new ComboBoxBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = InsuranceRecordType,
        Placeholder = ConstantDisplay.HRM_Insurance_SelectInsuranceType.TranslateString(),
        StyleCss = "width:300px",
        Autobind = true,
        EventChange = "showhideControl"
    };
    
                                }

                                @Html.VnrComboBoxFor(mode => mode.InsuranceType, InsuranceType)
                            </div>
                        </div>
                        <div id="divTypeData">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.TypeData)
                            </div>
                            <div class="FieldValue">
                                @{
    var _InsuranceRecordTypeData = new ComboBoxBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = InsuranceRecordTypeData,
        Placeholder = ConstantDisplay.HRM_Insurance_SelectInsuranceRecordTypeData.TranslateString(),
        StyleCss = "width:300px",
        Autobind = true
    };
    if (Model != null)
    {
        _InsuranceRecordTypeData.Value = Model.TypeData;
    }
                                }
                                @Html.VnrComboBoxFor(mode => mode.TypeData, _InsuranceRecordTypeData)
                            </div>
                        </div>




                         
                                    <div id="div3">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.RecordDate)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var RecordDate = new DatePickerBuilderInfo()

                                                {
                                                    Format = "dd/MM/yyyy",
                                                    StyleCss = "width:120px;"
                                                };
                                            }
                                            @Html.VnrDatePickerFor(mode => mode.RecordDate, RecordDate)
                                        </div>
                                        <div style="clear: both;"></div>
                                    </div>
                                    <div id="div3">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.DateStart)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                            var DateStart = new DatePickerBuilderInfo()

                                                {
                                                    Format = "dd/MM/yyyy",
                                                    StyleCss = "width:120px;"
                                                };
                                            }
                                            @Html.VnrDatePickerFor(mode => mode.DateStart, DateStart)
                                        </div>
                                        <div style="clear: both;"></div>
                                    </div>
                                    <div id="div3">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.DateEnd)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var DateEnd = new DatePickerBuilderInfo()

                                                {
                                                    Format = "dd/MM/yyyy",
                                                    StyleCss = "width:120px;"
                                                };
                                            }
                                            @Html.VnrDatePickerFor(mode => mode.DateEnd, DateEnd)
                                        </div>
                                        <div style="clear: both;"></div>
                                    </div>
                        <div id="divChildSickID">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ChildSickID)
                            </div>
                            <div class="FieldValue">
                                <input id="ChildSickID1" style="width: 200px;"></input>
                                @Html.Hidden("ChildSickID")

                                @*@Html.VnrTextBoxFor(model => model.ChildSickID,"Width:200px")*@
                                @*<input id="ChildSickID"  style="width:200px" />*@
                                <a id="getdata">@ConstantDisplay.HRM_Insurance_ChildSick_GetDataChildSick.TranslateString()</a> |
                                <a id="createdata">@ConstantDisplay.HRM_Insurance_ChildSick_PopUp_Create_Title.TranslateString()</a>
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        
                        
                        
                        

                        <div id="divDateSuckle">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateSuckle)
                            </div>
                            <div class="FieldValue">
                                @{
    var DateSuckle = new DatePickerBuilderInfo()

    {
        Format = "dd/MM/yyyy",
        StyleCss = "width:120px;"
    };
                                }
                                @Html.VnrDatePickerFor(mode => mode.DateSuckle, DateSuckle)
                            </div>
                            <div style="clear: both;"></div>
                        </div>





                        <div id="divTypeSuckle">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.TypeSuckle)
                            </div>
                            <div class="FieldValue">
                                @{
    var TypeSuckle = new ComboBoxBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = ilTypeSuckle,
        StyleCss = "width:300px",
        Placeholder = ConstantDisplay.HRM_Insurance_SelectTypeSuckle.TranslateString(),

    };
                                }
                                @Html.VnrComboBoxFor(mode => mode.TypeSuckle, TypeSuckle)
                            </div>
                        </div>

                        <div id="divTypeSick">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.TypeSick)
                            </div>
                            <div class="FieldValue">
                                @{
    var TypeSick = new ComboBoxBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = ilTypeSick,
        StyleCss = "width:300px;",
        Placeholder = ConstantDisplay.HRM_Insurance_SelectTypeSick.TranslateString(),

    };
                                }
                                @Html.VnrComboBoxFor(mode => mode.TypeSick, TypeSick)
                            </div>
                        </div>

                                    <div id="div5">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.DayCount)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                            var DayCount = new TextBoxBuilderInfo()
                                            {
                                                Width = 300,
                                            };
                                            }
                                            @Html.VnrTextBoxFor(mode => mode.DayCount, DayCount)
                                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick="Calculate",  Name = "Calculate", Content = ConstantAction.HRM_Common_Calculate.TranslateString(), ImageUrl = ConstantPath.IconComputePath })
                                        </div>
                                        <div style="clear: both;"></div>
                                    </div>
                                    <div id="div5">
                                        <div class="FieldTitle150">
                                            @Html.VnrLabelFor(mode => mode.Comment)
                                        </div>
                                        <div class="FieldValue">
                                            @Html.VnrTextAreaFor(model => model.Comment, "width:500px;height:100px;")
                                        </div>
                                        <div style="clear: both;"></div>
                                    </div>
                    
                                
                             
                               
                            
</fieldset>
                    
                </div>

            </td>

        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUpInsRecord", Name = "save", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveInsRecord", Name = "save-continue", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveCloseInsRecord", Name = "save-close", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>

                </div>
            </td>
        </tr>
    </table>
}


@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models
@model HRM.Presentation.Payroll.Models.Sal_ReportBasicSalaryMonthlyModel
@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;

    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;

    IList<SelectListItem> listTransfer = Enum.GetValues(typeof(EnumDropDown.Transfer))
  .Cast<EnumDropDown.Transfer>()
  .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
  .ToList();
    IList<SelectListItem> lstStatus = Enum.GetValues(typeof(EnumDropDown.StatusEmployee))
.Cast<EnumDropDown.StatusEmployee>()
.Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
.ToList();

}
@Html.Hidden("Screen", screen)


<script type="text/javascript">
    SetFieldRequired();
    var selectedIds = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        //var multiselectElementType = $("#ElementType").data("kendoMultiSelect");
        //var ElementTypeValue = multiselectElementType.value();
        //var ProfileIDsValue = $('#@Html.FieldIdFor(model => model.ProfileIDs)').val();
        var checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        var WorkingPlace = $("#WorkingPlaceID").data("kendoComboBox");
        var elementPara = {
            CutOffDurationID: $("#CutOffDurationID").val(),
            OrgStructureID: checkedNodes.join(','),
            //DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            //DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            //ProfileIDs: ProfileIDsValue != null ? ProfileIDsValue.join(',') : null,
            WorkingPlaceID: WorkingPlace.value(),
            WorkingPlace: WorkingPlace.text(),
            //ElementType: ElementTypeValue.join(','),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
            UserID: '@Session[SessionObjects.ProfileID]',
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }

    $("#btnSearch").click(function () {
        var from = $("#DateFrom").val();
        //var to = $("#DateTo").val();
        if (from == '') {
            ShowNotificationProcessor('@ConstantDisplay.HRM_INS_RptD02TS_MonthYear.TranslateString() ' + ' Thể Bỏ Trống !');
            return;
        }
        @*var multiselectElementType = $("#ElementType").data("kendoMultiSelect");
        var ElementTypeValue = multiselectElementType.value();
        if (ElementTypeValue == '' || ElementTypeValue == null || ElementTypeValue.join(',') == '') {
            ShowNotificationProcessor('@ConstantDisplay.HRM_Attendance_TAMScanLog_Type.TranslateString() ' + ' Thể Bỏ Trống !');
            return;
        }*@
        ShowHre_ProgressBar();
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        $.ajax({
            url: '@_hrm_Hr_Service' + "Sal_GetData/ReportAccountingOfClearing",
            type: 'POST',
            data: filterFieldInfo(false),
            datatype: 'json',
            success: function (data) {
                debugger;
                if (data[0] == "error") {
                    ShowNotificationProcessor(data[1]);
                }
                else {

                    debugger;
                    var grid = VnrGridDynamic;
                    grid.GridName = "grid_ReportSalaryTable";
                    grid.ShowCheckbox = false;
                    grid.DataSource = data.Data;
                    grid.pageSize = 50;
                    VnrGridDynamicControl(grid);
                }
                CloseHre_ProgressBar();
            }
        });
    });

    $("#btnExport").click(function () {
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = true;
        var isAccess = checkPermission(PrivilegeType.Export, '@HRM.Infrastructure.Security.ConstantPermission.Hre_ReportHCSeniority');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + '/Sal_GetData/ReportAccountingOfClearing',
            data: filterFieldInfo(true),
            dataType: 'json',
            success: function (returnValue) {

                var strSplit = returnValue.indexOf(',');
                var status = "";
                var fullPath = "";
                if (strSplit > 0) {
                    status = returnValue.substring(0, strSplit);
                    if (status == "Success") {
                        fullPath = returnValue.substring(strSplit + 1, returnValue.length);
                        window.location = '@_hrm_Main_Web' + fullPath;
                        ShowNotificationProcessor(status);
                    }
                } else {
                    ShowNotificationProcessor(returnValue);
                }
                @*var url = '@_hrm_Main_Web' + returnValue;
                window.location = url;*@
            }
        });
    });

    $("#btnCreateTemplate").click(function () {
        var from = $("#DateFrom").val();
        //var to = $("#DateTo").val();
        if (from == '') {
            ShowNotificationProcessor('@ConstantDisplay.HRM_HR_Profile_MonthStop.TranslateString() ' + ' Thể Bỏ Trống !');
            return;
        }
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = true;
        CreateTemplate('@_hrm_Hr_Service' + '/Sal_GetData/ReportAccountingOfClearing', filterFieldInfo(true));
    });



    function DoActionData(gridName, actionURL, parameter) {

        $.ajax({
            url: actionURL,
            data: { selectedIds: parameter },
            type: 'POST',
            success: function (data) {
                selectedIds = [];
                ReadGrid(gridName);
                ShowNotificationProcessor('@Html.Raw(@ConstantDisplay.Hrm_Succeed.TranslateString())');
            },
            error: function (data) {
                alert('Lỗi hàm DoActionData trong hrm-8.0.js');
            }
        });
    }
</script>


@Html.Hidden("valueFields")
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div style="float:left">
                     
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.CutOffDurationID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var cutOffDurationName = new DropDownListBuilderInfo()
                                {
                                    DataTextField = "CutOffDurationName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hre_Service + "Att_GetData/GetMultiCutOffDuration",
                                    StyleCss = "width:200px",
                                };
                            }
                            @(Html.VnrDropDownListFor(m => m.CutOffDurationID, cutOffDurationName))
                        </div>
                    </div>
                        <br />
                        <div id="div4">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.OrgStructureID)
                            </div>
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            </div>
                        </div>
                        <br />
                        <div>
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(model => model.WorkingPlaceID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _WorkingPlaceID = new ComboBoxBuilderInfo()
                                    {
                                        StyleCss = "width:200px;",
                                        // Name = "SShopID",
                                        DataTextField = "WorkPlaceName",
                                        DataValueField = "ID",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiWorkPlace",
                                        ServerFilter = true
                                    };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.WorkingPlaceID, _WorkingPlaceID))
                            </div>
                        </div>
             
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Cat_Service + "Cat_GetData/GetScreenName",
                    StyleCss = "width:200px;",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)

            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
    </div>
</div>

<div id="grid_ReportSalaryTable">

</div>





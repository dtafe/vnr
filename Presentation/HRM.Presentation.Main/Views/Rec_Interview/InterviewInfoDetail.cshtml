@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using System.Collections

@using HRM.Presentation.Recruitment.Models

@model Rec_InterviewModel
@{
    Layout = null;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    string CdID = null;
    if ( ViewData["CandidateID"] != null)
    {
        string strID = ViewData["CandidateID"].ToString();
        if (!string.IsNullOrEmpty(strID))
        {
            CdID = strID;
        }
    }
}
@{
    IList<SelectListItem> Result = Enum.GetValues(typeof(Interview))
       .Cast<Interview>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
       .ToList();
}
<script>
    SetFieldRequiredByScreenName('Rec_InterviewDetail_Info');
    var arrayConditionEnum = [];
    function onSave() {
        var aaa = document.getElementById("displayValue");
        var bbb = aaa.childNodes;
        var str = "";
        //for (var i = 0; i < bbb.length; i++) {
        //    if (bbb[i].localName == "input") {
        //        str += bbb[i].id + "," + bbb[i].value + "|";
        //    }
        //}
        for (var i = 0; i < arrayConditionEnum.length; i++) {

            str += $('#' + arrayConditionEnum[i]).attr('id') + "," + $('#' + arrayConditionEnum[i]).val() + "|";
        }
        $("#ConditionTemp").val(str);
        onSaveAndContinue($('#form_Rec_Interview'), '@_hrm_Hre_Service', 'api/Rec_Interview/', '@ConstantControlName.HRM_Rec_Interview_Grid_Name', '@ConstantControlName.HRM_Rec_Interview_PopUp_Name');
        ReadGrid("gridInterview");
    }

    function onSaveClose() {
        var aaa = document.getElementById("displayValue");
        var bbb = aaa.childNodes;
        var str = "";
        //for (var i = 0; i < bbb.length; i++) {
        //    if (bbb[i].localName == "input") {
        //        str += bbb[i].id + "," + bbb[i].value + "|";
        //    }
        //}
        for (var i = 0; i < arrayConditionEnum.length; i++) {

            str += $('#' + arrayConditionEnum[i]).attr('id') + "," + $('#' + arrayConditionEnum[i]).val() + "|";
        }
        $("#ConditionTemp").val(str);
        onSaveAndClose($('#form_Rec_Interview'), '@_hrm_Hre_Service', 'api/Rec_Interview/', '@ConstantControlName.HRM_Rec_Interview_Grid_Name', '@ConstantControlName.HRM_Rec_Interview_PopUp_Name');
        ReadGrid("gridInterview");
    }

    function onSaveDataPopUp() {
        var aaa = document.getElementById("displayValue");
        var bbb = aaa.childNodes;
        var str = "";
        //for (var i = 0; i < bbb.length; i++) {
        //    if (bbb[i].localName == "input") {
        //        str += bbb[i].id + "," + bbb[i].value + "|";
        //    }
        //}
        for (var i = 0; i < arrayConditionEnum.length; i++) {

            str += $('#' + arrayConditionEnum[i]).attr('id') + "," + $('#' + arrayConditionEnum[i]).val() + "|";
        }
        $("#ConditionTemp").val(str);
        onlySave($('#form_Rec_Interview'), '@_hrm_Hre_Service', 'api/Rec_Interview/', '@ConstantControlName.HRM_Rec_Interview_Grid_Name');
        ReadGrid("gridInterview");
    }
    //Lấy tên candidatename
    //SetFieldRequiredByScreenName('Rec_Interview');
    $(document).ready(function () {
        @*$("#ID").val('@CdID');*@
        $("#CandidateID").val('@CdID');
        document.getElementById("CandidateName123").readOnly = true;
        document.getElementById("JobVacancyName").readOnly = true;
        document.getElementById("LevelInterview").readOnly = true;
        $("#CandidateName123").val($("#CandidateNameGenarel").val());
        $("#btnJobConditionResult").hide();
    });

    $("#InterviewInfo_CandidateID").ready(function () {
        debugger;
        var _ID = $('#CandidateID').val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Rec_GetData/getLevelInterview',
            type: 'POST',
            data: { ID: _ID },
            dataType: 'json',
            success: function (data) {
                debugger;
                $("#LevelInterview").val(data);
            },
        });
    });
    //Hiển thị Name yêu cầu tuyển
    //$("#InterviewInfo_CandidateID").change(function () {
    $("#InterviewInfo_CandidateID").ready(function () {

        var _ID = $('#CandidateID').val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Rec_GetData/getJobInterview',
            type: 'POST',
            data: { ID: _ID },
            success: function (Status) {
                $("#JobVacancyName").val(Status);
            },
        });
    });
    //Hiển thị ID yêu cầu tuyển
    //$("#InterviewInfo_CandidateID").change(function () {
    $("#InterviewInfo_CandidateID").ready(function () {

        var _ID = $('#CandidateID').val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Rec_GetData/getJobIDInterview',
            type: 'POST',
            data: { ID: _ID },
            success: function (Status) {
                $("#JobVacancyID").val(Status);
            },
        });
    });

    //Lấy Candidate by Id
    $("#InterviewInfo_CandidateID").ready(function () {

        var _ID = $('#CandidateID').val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Rec_GetData/getNameCandidate',
            type: 'POST',
            data: { ID: _ID },
            success: function (Status) {
                $("#CandidateName123").val(Status);
            },
        });
    });

    //lấy RecruitmentHistoryId
    $("#InterviewInfo_CandidateID").ready(function () {

        var _ID = $('#CandidateID').val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Rec_GetData/getRecruitmentHistoryId',
            type: 'POST',
            data: { ID: _ID },
            success: function (Status) {
                $("#RecruitmentHistoryID").val(Status);
            },
        });
    });

    //Tính kết quả
    function result() {
        debugger;
        ShowHre_ProgressBar();
        var _candidateID = $('#CandidateID').val();
        var _ID = $('#InterviewInfoDetail_GroupConditionID').val();
        var Score1 = $('#Score1').val();
        var Score2 = $('#Score2').val();
        var Score3 = $('#Score3').val();
        var strValue = document.getElementById("displayValue");
        var strInput = "";
        if (strValue != undefined && strValue != "" && strValue.innerHTML != "<table></table>")
        {
           var  strString = strValue.childNodes[0].childNodes[0].childNodes;
           for (var i = 0; i < strString.length; i++) {
               strInput += strString[i].childNodes[1].childNodes[0].id + "," + strString[i].childNodes[1].childNodes[0].value + "|";
            }
        }
        debugger;
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Rec_GetData/getResultInterview',
            type: 'POST',
            data: { ID: _ID, str: strInput, score1: Score1, score2: Score2, score3: Score3, candidateID: _candidateID },
            success: function (result) {
                debugger;
                CloseHre_ProgressBar();
                var ResultInterview_Combobox = $("#ResultInterview").data("kendoDropDownList");
                ResultInterview_Combobox.value(result);
            },
        });
    }

    function functionChangeGroupConditionID(e) {
        var _ID = $('#InterviewInfoDetail_GroupConditionID').val();

        if (_ID == undefined || _ID == '') {
            $("#btnJobConditionResult").hide();
        }
        else {
            $("#btnJobConditionResult").show();
        }

        $.ajax({
            url: '@_hrm_Hre_Service' + 'Rec_GetData/getGroupCondition',
            data: { ID: _ID },
            type: 'POST',
            success: function (data) {
                debugger;
                var strHtml = "";
                var strName = " " + '@ConstantDisplay.HRM_Category_ConditionalColor_Condition.TranslateString()';
                strHtml += "<table>"

                for (var i = 0; i < data.length; i++) {
                    arrayConditionEnum.push(data[i].ConditionName);
                    strHtml += "<tr>"
                    strHtml += "<td style ='width:95px; '>"
                    strHtml += "<label>" + data[i].EnumTranslate + "</label>";
                    strHtml += "</td>"
                    strHtml += "<td style ='width:40px; '>"
                    strHtml += "<input type='text' id ='" + data[i].ConditionName + "' class='k-textbox' style='width: 40px' />";
                    strHtml += "</td>"
                    strHtml += "</tr>"
                    //strHtml += "<label>" + data[i].EnumTranslate + "</label><input type='text' id ='" + data[i].ConditionName + "' class='k-textbox' style='width: 40px' />";
                }
                strHtml += "</table>"
                $("#displayText").html(strName);
                $("#displayValue").html(strHtml);
            },
            error: function (data) {

            }
        });
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Rec_Interview" }))
{
    @Html.HiddenFor(mode => mode.ConditionTemp)
    <table>
        <tbody>
            <tr>
                <td valign="top">
                    <div class="hrm_box">
                        <!--Tên ứng viên-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.HiddenFor(m => m.ID)
                                @Html.HiddenFor(m => m.CandidateID)
                                @Html.VnrLabelFor(mode => mode.CandidateName)
                            </div>
                            <div class="FieldValue">
                                @*@Html.VnrTextBoxFor(m => m.CandidateName)*@
                                @Html.VnrTextBox("CandidateName123", "Width:300px")
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <!--Vòng phỏng vấn-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.LevelInterview)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(mode => mode.LevelInterview, "Width:300px")
                            </div>
                        </div>
                        <!--Nhóm điều kiện-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.GroupConditionID)
                            </div>
                            <div class="FieldValue">
                                @{
    IEnumerable valueGroupCondition = new string[] { };
    if (Model != null)
    {
        valueGroupCondition = new[] { new { GroupName = Model.GroupName, ID = Model.GroupConditionID } };
    }
                                }
                                @{
    var GroupConditionID = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        Name = "InterviewInfoDetail_GroupConditionID",
        DataTextField = "GroupName",
        DataValueField = "ID",
        Url = @_hrm_Hre_Service + "Rec_GetData/GetMultiGroupCondition",
        Value = valueGroupCondition.ToString(),
        EventChange = "functionChangeGroupConditionID"
    };
                                }
                                @Html.VnrDropDownListFor(model => model.GroupConditionID, GroupConditionID)
                            </div>
                        </div>
                        <!--Điều kiện-->
                        <div id="GroupCondition" style="display:block">
                            <div id="displayText" class="FieldTitle150" style="padding-left: 3px;">

                            </div>
                            <div id="displayValue" class="FieldValue">

                            </div>
                            <div style="display:inherit; float:left;">
                                @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "result", Name = "btnJobConditionResult", Content = ConstantAction.HRM_Common_Result_Jobcandidate.TranslateString() })
                            </div>
                        </div>
                        <!--Ngày phỏng vấn-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateInterview)
                            </div>
                            <div class="FieldValue">
                                @{
    var dateInterview = new DatePickerBuilderInfo()
    {
        StyleCss = "width:100px;",
    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateInterview, dateInterview)
                            </div>

                        </div>
                        <!--Người phỏng vấn 1-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Interviewer1)
                            </div>
                            <div class="FieldValue">
                                @{
    IEnumerable valueInterviewer1 = new string[] { };
    if (Model != null)
    {
        valueInterviewer1 = new[] { new { ProfileName = Model.Interviewer1, ID = Model.Interviewer1 } };
    }
                                }
                                @{
    var MutiInterviewer1 = new MultiSelectBuilderInfo
    {
        DataTextField = "ProfileName",
        DataValueField = "ProfileName",
        Width = 200,
        Url = @_hrm_Hre_Service + "Hre_GetData/GetMultiProfileWorking",
        // MaxSelectedItems = 1,
        Value = valueInterviewer1,
    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.Interviewer1, MutiInterviewer1)
                            </div>
                        </div>
                        <!--Điểm 1-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Score1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Score1 = new NumericTextBoxBuilderInfo<double>()
    {
        //    Name = "RevenueForProfileIfo_Actual",
        //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
        Format = ConstantFormat.HRM_Format_Int,
    };
                                }
                                @*@Html.Kendo().MaskedTextBoxFor(model => model.Score1).Mask("000000000").HtmlAttributes(new { style = "width:60px" })*@
                                @*@Html.VnrTextBoxFor(model => model.Score1)*@
                                @(Html.VnrNumericTextBoxFor(model => model.Score1, _Score1))
                            </div>
                        </div>


                        <!--Kết quả-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ResultInterview)
                            </div>
                            <div class="FieldValue">
                                @{
    var ResultInterview = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = Result,
        OptionLabel = ConstantDisplay.HRM_Category_SelectType.TranslateString()
    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.ResultInterview, ResultInterview)
                            </div>
                        </div>
                        <!--Ghi chú 1-->
                        <div id="div3" class="DivContentTitleValue">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Comment1)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextAreaFor(mode => mode.Comment1, "Width:300px")
                            </div>
                        </div>
                        <div id="div3" class="DivContentTitleValue">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.LanguageID)
                            </div>
                            <div class="FieldValue">
                                @{
    var _LanguageID = new DropDownListBuilderInfo()
    {
        Name = "InterviewInfoDetail_LanguageID",
        DataTextField = "NameEntityName",
        DataValueField = "ID",
        Url = @_hrm_Hre_Service + "Hre_GetData/GetMultiLanguageType",
        Value = @Html.DisplayFor(mode => mode.LanguageID).ToString(),
        StyleCss = "width:300px"
    };
                                }
                                @(Html.VnrDropDownListFor(mode => mode.LanguageID, _LanguageID))
                            </div>
                        </div>
                    </div>
                    <div class="hrm_box">
                        <!--Yêu cầu tuyển-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.JobVacancyID)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.JobVacancyName, "Width:300px")
                                @Html.HiddenFor(mode => mode.JobVacancyID, "Width:300px")
                                @Html.HiddenFor(mode => mode.RecruitmentHistoryID, "Width:300px")
                            </div>
                        </div>
                        <!--Bảng câu hỏi-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.QuestionQuestionaireID)
                            </div>
                            <div class="FieldValue">
                                @{
    var dropdownQuestioniareID = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        DataTextField = "QuestionaireName",
        DataValueField = "ID",
        Url = _hrm_Hre_Service + "Rec_GetData/GetMultiQuestionaire",
        Value = @Html.DisplayFor(mode => mode.QuestionQuestionaireID).ToString(),
        //OptionLabel = ConstantDisplay.HRM_Interview_Taget.Translate(),
        Enable = true,
        //StyleCss = "width:250px"
    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.QuestionQuestionaireID, dropdownQuestioniareID)
                            </div>

                        </div>
                        <!--Thời gian-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Hour)
                            </div>
                            <div class="FieldValue">
                                @Html.Kendo().MaskedTextBoxFor(model => model.Hour).Mask("00:00").HtmlAttributes(new { style = "width:60px" })
                            </div>
                        </div>
                        <!--Địa chỉ-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Address)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(mode => mode.Address, "Width:300px")
                            </div>
                        </div>
                         <!--Người phỏng vấn 2-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Interviewer2)
                            </div>
                            <div class="FieldValue">
                                @{
    IEnumerable valueInterviewer2 = new string[] { };
    if (Model != null)
    {
        valueInterviewer2 = new[] { new { ProfileName = Model.Interviewer2, ID = Model.Interviewer2 } };
    }
                                }
                                @{
    var MutiInterviewer2 = new MultiSelectBuilderInfo
    {
        DataTextField = "ProfileName",
        DataValueField = "ProfileName",
        Width = 300,
        Url = @_hrm_Hre_Service + "Hre_GetData/GetMultiProfileWorking",
        Value = valueInterviewer2,
    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.Interviewer2, MutiInterviewer2)
                            </div>
                        </div>
                        <!--Điểm 2-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Score2)
                            </div>
                            <div class="FieldValue">
                                @*@Html.Kendo().MaskedTextBoxFor(model => model.Score2).Mask("000000000").HtmlAttributes(new { style = "width:60px" })*@
                                @*@Html.VnrTextBoxFor(model => model.Score2)*@
                                @{
    var _Score2 = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        //    Name = "RevenueForProfileIfo_Actual",
        //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
        Format = ConstantFormat.HRM_Format_Int,
    };
                                }
                                @*@Html.Kendo().MaskedTextBoxFor(model => model.Score1).Mask("000000000").HtmlAttributes(new { style = "width:60px" })*@
                                @*@Html.VnrTextBoxFor(model => model.Score1)*@
                                @(Html.VnrNumericTextBoxFor(model => model.Score2, _Score2))
                            </div>
                        </div>
                        <!--Đánh giá 2-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Comment2)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextAreaFor(model => model.Comment2, "width: 300px")
                            </div>
                        </div>
                        <!--Người phỏng vấn 3-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Interviewer3)
                            </div>
                            <div class="FieldValue">
                                @{
    IEnumerable valueInterviewer3 = new string[] { };
    if (Model != null)
    {
        valueInterviewer3 = new[] { new { ProfileName = Model.Interviewer3, ID = Model.Interviewer3 } };
    }
                                }
                                @{
    var MutiInterviewer3 = new MultiSelectBuilderInfo
    {
        DataTextField = "ProfileName",
        DataValueField = "ProfileName",
        Width = 300,
        Url = @_hrm_Hre_Service + "Hre_GetData/GetMultiProfileWorking",
        Value = valueInterviewer3,
    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.Interviewer3, MutiInterviewer3)
                            </div>
                        </div>
                        <!--Điểm 3-->
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Score3)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Score3 = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Format = ConstantFormat.HRM_Format_Int,
    };
                                }
                                @(Html.VnrNumericTextBoxFor(model => model.Score3, _Score3))
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td valign="top">
                    <div>
                        <div id="div3" class="DivContentTitleValue">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Comment)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextAreaFor(mode => mode.Comment, "width:750px")
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle150">

                        </div>
                        <div class="FieldValue">
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-InterviewInfoDetail1", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-InterviewInfoDetail1", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-InterviewInfoDetail1", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        </div>
                    </div>
                </td>
            </tr>
    </table>
}

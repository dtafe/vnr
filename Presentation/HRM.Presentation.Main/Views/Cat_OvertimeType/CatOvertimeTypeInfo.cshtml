@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models
@model HRM.Presentation.Category.Models.CatOvertimeTypeModel


@{
    ViewBag.Title = "CatOvertimeTypeInfo";
    Layout = null;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineID = Model == null ? Guid.Empty : Model.ID;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;


    IList<SelectListItem> listOverTimeType = Enum.GetValues(typeof(EnumDropDown.OverTimeType))
    .Cast<EnumDropDown.OverTimeType>()
    .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p=>p.Text)
    .ToList();

    IList<SelectListItem> listPaymentType = Enum.GetValues(typeof(EnumDropDown.PaymentType))
    .Cast<EnumDropDown.PaymentType>()
    .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p=>p.Text)
    .ToList();

    var _NumericTextBoxBuilder = new NumericTextBoxBuilderInfo<double>()
    {
        Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
        StyleCss = "width:150px"
    };

}


<script>
    SetFieldRequired();
    document.getElementById("Code").readOnly = true;
    $(document).ready(function () {

        $('input[type=checkbox]').change(function () {
            
            if ($(this).is(':checked')) {
                $(this).val('true');
            } else {
                $(this).val('false');
            }
            checkchange();
        });

    });
    function checkchange() {
        
        var WorkDayValue = $('#@Html.FieldIdFor(model => model.IsWorkDay)').val();
        var strCode = "";
        if (WorkDayValue == "true") {
            $('#@Html.FieldIdFor(model => model.IsHoliday)').val("false");
            $('#@Html.FieldIdFor(model => model.IsHoliday)').prop("checked", false);
            $('#@Html.FieldIdFor(model => model.IsWeeked)').val("false");
            $('#@Html.FieldIdFor(model => model.IsWeeked)').prop("checked", false);
        }
        var HolidayValue = $('#@Html.FieldIdFor(model => model.IsHoliday)').val();
        if (HolidayValue == "true") {
            $('#@Html.FieldIdFor(model => model.IsWorkDay)').val("false");
            $('#@Html.FieldIdFor(model => model.IsWorkDay)').prop("checked", false);
            $('#@Html.FieldIdFor(model => model.IsWeeked)').val("false");
            $('#@Html.FieldIdFor(model => model.IsWeeked)').prop("checked", false);
        }
        var WeekedValue = $('#@Html.FieldIdFor(model => model.IsWeeked)').val();
        if (WeekedValue == "true") {
            $('#@Html.FieldIdFor(model => model.IsWorkDay)').val("false");
            $('#@Html.FieldIdFor(model => model.IsWorkDay)').prop("checked", false);
            $('#@Html.FieldIdFor(model => model.IsHoliday)').val("false");
            $('#@Html.FieldIdFor(model => model.IsHoliday)').prop("checked", false);
        }
        var NightShift = $('#@Html.FieldIdFor(model => model.IsNightShift)').val();

        if (HolidayValue == "true" && NightShift == "true") {
            strCode = '@EnumDropDown.OverTimeType.E_HOLIDAY_NIGHTSHIFT.ToString()';
        }
        else if (WeekedValue == "true" && NightShift == "true") {
            strCode = '@EnumDropDown.OverTimeType.E_WEEKEND_NIGHTSHIFT.ToString()';
        }
        else if (WorkDayValue == "true" && NightShift == "true") {
            strCode = '@EnumDropDown.OverTimeType.E_WORKDAY_NIGHTSHIFT.ToString()';
        }
        else if (HolidayValue == "true") {
            strCode = '@EnumDropDown.OverTimeType.E_HOLIDAY.ToString()';
        }
        else if (WeekedValue == "true") {
            strCode = '@EnumDropDown.OverTimeType.E_WEEKEND.ToString()';
        }
        else if (WorkDayValue == "true") {
            strCode = '@EnumDropDown.OverTimeType.E_WORKDAY.ToString()';
        }

        $('#@Html.FieldIdFor(model => model.Code)').val(strCode);
        @*var x = $('#@Html.FieldIdFor(model => model.TypeLoadData)').val();
        if (x != null && (x == '@EnumDropDown.TypeLoadData.E_TYPEINOUT' || x == '@EnumDropDown.TypeLoadData.E_TYPEINOUT_MAXMIN')) {
            $('#lblSymbolIn').css("visibility", "visible");
            $('#@Html.FieldIdFor(model => model.SymbolIn)').css("visibility", "visible");
            $('#lblSymbolOut').css("visibility", "visible");
            $('#@Html.FieldIdFor(model => model.SymbolOut)').css("visibility", "visible");
        }
        else {
            $('#lblSymbolIn').css("visibility", "hidden");
            $('#@Html.FieldIdFor(model => model.SymbolIn)').css("visibility", "hidden");
            $('#@Html.FieldIdFor(model => model.SymbolIn)').val("");
            $('#lblSymbolOut').css("visibility", "hidden");
            $('#@Html.FieldIdFor(model => model.SymbolOut)').css("visibility", "hidden");
            $('#@Html.FieldIdFor(model => model.SymbolOut)').val("");
        }*@
    }

    @*var data = SetCharacteFieldRequired();
    $('#Rate').removeAttr('data-val-required');
    function checkDuplicationCode() {

        var _code = $("#OvertimeType_Code").val();
        var _ID = '@lineID';
        var param = {
            tableName: 'Cat_OvertimeType',
            columnName: 'Code',
            keyword: _code,
            ID: _ID
        };

        var isduplicate = checkDuplicate('@_hrm_Hr_Service', 'Sys_GetData', 'CheckDuplicate', param, "Code");

        return isduplicate;
    }*@
    function onSave() {
        //if (CheckValidate(data)) {
        //     if (!checkDuplicationCode()) {

        var _Rate = $("#Rate").val();
        var _TaxRate = $("#TaxRate").val();
        if (_Rate == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Hệ Số Tăng Ca] không thể bỏ trống", "k-block k-info-colored");
            return;
        }
        if (_TaxRate == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Hệ Số Thuế] không thể bỏ trống", "k-block k-info-colored");
            return;
        }
        onSaveAndContinue($('#form_cat_OvertimeType'), '@_hrm_Hr_Service', 'api/CatOvertimeType/', 'gridCatOvertimeType', 'windowCatOvertimeType');
        //      }
        //}
        return false;
    }

    function onSaveClose() {
        debugger;
        //if (CheckValidate(data)) {
        //    if (!checkDuplicationCode()) {
        var _Rate = $("#Rate").val();
        var _TaxRate = $("#TaxRate").val();
        if (_Rate == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Hệ Số Tăng Ca] không thể bỏ trống", "k-block k-info-colored");
            return;
        }
        if (_TaxRate == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Hệ Số Thuế] không thể bỏ trống", "k-block k-info-colored");
            return;
        }
        onSaveAndClose($('#form_cat_OvertimeType'), '@_hrm_Hr_Service', 'api/CatOvertimeType/', 'gridCatOvertimeType', 'windowCatOvertimeType');
        //    }
        //}
        return false;
    }
    function onSaveDataPopUp() {
        //if (CheckValidate(data)) {
        //    if (!checkDuplicationCode()) {
        var _Rate = $("#Rate").val();
        var _TaxRate = $("#TaxRate").val();
        if (_Rate == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Hệ Số Tăng Ca] không thể bỏ trống", "k-block k-info-colored");
            return;
        }
        if (_TaxRate == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Hệ Số Thuế] không thể bỏ trống", "k-block k-info-colored");
            return;
        }
        onlySave($('#form_cat_OvertimeType'), '@_hrm_Hr_Service', 'api/CatOvertimeType/', 'gridCatOvertimeType'); return false;
        //    }
        //}
    }
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_OvertimeType" }))
{
    <div>
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.UserCreate)
        <script>
            $("#UserCreate").val($("#UserInfoName").val());
        </script>
    </div>

    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.OvertimeTypeName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.OvertimeTypeName, "width: 300px")
                        @*@Html.ValidationMessageFor(model => model.OvertimeTypeName)*@
                    </div>
                </div>
                <div>
                    <div>
                        <div class="FieldTitle150">

                            @Html.VnrLabelFor(mode => mode.TypeTemp)
                        </div>
                        <div class="FieldValue">
                            @{
    var _IsWorkDay = new CheckBoxBuilderInfo()
    {
        Value = Model.IsWorkDay == true ? true : false
    };
                            }
                            @Html.VnrCheckBoxFor(model => model.IsWorkDay, _IsWorkDay)
                            @*@(Html.EditorFor(mode => mode.IsWorkDay))*@
                            @Html.VnrLabelFor(mode => mode.IsWorkDay)
                            @{
    var _IsHoliday = new CheckBoxBuilderInfo()
    {
        Value = Model.IsHoliday == true ? true : false
    };
                            }
                            @Html.VnrCheckBoxFor(model => model.IsHoliday, _IsHoliday)
                            @*@(Html.EditorFor(mode => mode.IsHoliday))*@
                            @Html.VnrLabelFor(mode => mode.IsHoliday)

                            @{
    var _IsWeeked = new CheckBoxBuilderInfo()
    {
        Value = Model.IsWeeked == true ? true : false
    };
                            }
                            @Html.VnrCheckBoxFor(model => model.IsWeeked, _IsWeeked)
                            @*@(Html.EditorFor(mode => mode.IsWeeked))*@
                            @Html.VnrLabelFor(mode => mode.IsWeeked)

                            @{
    var _IsNightShift = new CheckBoxBuilderInfo()
    {
        Value = Model.IsNightShift == true ? true : false
    };
                            }
                            @Html.VnrCheckBoxFor(model => model.IsNightShift, _IsNightShift)
                            @*@(Html.EditorFor(mode => mode.IsNightShift))*@
                            @Html.VnrLabelFor(mode => mode.IsNightShift)

                        </div>
                    </div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @*@{
                            var _OvertimeTypeCode = new TextBoxBuilderInfo() {
                                Name = "OvertimeType_Code",
                                CssStyle = "width:150px"
                            };
                            if(Model != null){
                                _OvertimeTypeCode.Value = Model.Code == null ? string.Empty : Model.Code;
                            }
                                                }*@
                        @Html.VnrTextBoxFor(mode => mode.Code, "width: 300px;background-color:WhiteSmoke;")

                    </div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.CodeStatistic)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(m => m.CodeStatistic, "width: 300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Rate)
                    </div>
                    <div class="FieldValue">
                        @{
    var _Rate = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Format = ConstantFormat.HRM_Format_Number_Double.ToString(),

    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.Rate, _Rate))


                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.TimeOffInLieuRate)
                    </div>
                    <div class="FieldValue">
                        @(Html.VnrNumericTextBoxFor(m => m.TimeOffInLieuRate, _NumericTextBoxBuilder))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.TaxRate)
                    </div>
                    <div class="FieldValue">
                        @{
    var _TaxRate = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Format = ConstantFormat.HRM_Format_Number_Double.ToString()
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.TaxRate, _TaxRate))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Type)
                    </div>
                    <div class="FieldValue">
                        @{
    var ddlPaymentType = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listPaymentType,
        Autobind = true,
        StyleCss = "width:300px",
        OptionLabel = ConstantDisplay.HRM_Category_OvertimeType_SelectPaymentType.TranslateString(),
    };
                        }
                        @Html.VnrDropDownListFor(model => model.Type, ddlPaymentType)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Order)
                    </div>
                    <div class="FieldValue">
                        @{
    var _IntTextBoxBuilder = new NumericTextBoxBuilderInfo<int>()
    {
        Format = ConstantFormat.HRM_Format_Number_Integer.ToString(),
        StyleCss = "width:150px"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.Order, _IntTextBoxBuilder))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Comment)
                    </div>
                    <div class="FieldValue">
                        @(Html.VnrTextAreaFor(m => m.Comment, "width:500px;height:100px;"))
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-OvertimeType", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catOvertimeType", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catOvertimeType", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}
<div>
    @{

        if (Model != null && Model.ID == Guid.Empty)
        {
            <script>

                
                var x = $("#Rate").data("kendoNumericTextBox");
                x.value("");
                var z = $("#TaxRate").data("kendoNumericTextBox");
                z.value("");
            </script>
        }
    }
</div>

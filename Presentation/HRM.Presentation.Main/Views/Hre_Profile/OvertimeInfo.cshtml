@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Attendance.Models
@model HRM.Presentation.Attendance.Models.Att_OvertimeModel

@{
    Layout = null;

    var lineId = Model == null ? Guid.Empty : Model.ID;

    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;


    IList<SelectListItem> listMethodPayment = Enum.GetValues(typeof(EnumDropDown.MethodPayment))
         .Cast<EnumDropDown.MethodPayment>()
         .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
         .ToList();

    IList<SelectListItem> listStatus = Enum.GetValues(typeof(EnumDropDown.OverTimeStatus))
       .Cast<EnumDropDown.OverTimeStatus>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
       .ToList();
}
<script>
    //var data = SetCharacteFieldRequired();

    $(document).ready(function () {
        
        // document.getElementById("RegisterHours").disabled = true;
    });

    //SetFieldRequired();
    function onSaveClose() {
        onSaveAndClose($('#form_att_overtime'), '@_hrm_Hr_Service', 'api/Att_OvertimeEdit/', 'gridTab_OvertimeView', '@ConstantControlName.HRM_Attendance_Overtime_PopUp_Name'); return false;

    }
    function onSaveDataPopUp() {
        onlySave($('#form_att_overtime'), '@_hrm_Hr_Service', 'api/Att_OvertimeEdit/', 'gridTab_OvertimeView'); return false;
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_att_overtime" }))
{
    @Html.HiddenFor(model => model.ID)
    @*@Html.HiddenFor(model=>model.ProfileID)*@
    @*@Html.HiddenFor(model=>model.WorkDate)*@
    @*@Html.HiddenFor(model=>model.ShiftID)*@
    @*@Html.HiddenFor(model=>model.RegisterHours)*@

    <table>
        <tr>
            <td>
                <div>

                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.WorkDate)

                        </div>
                        <div class="FieldValue">
                            @{
    TextBoxBuilderInfo txt_WorkDate = new TextBoxBuilderInfo()
    {
        Value = (Model != null && Model.WorkDate != null) ? Model.WorkDate.ToString(ConstantFormat.HRM_Format_DayMonthYear_HoursMinSecond) : string.Empty,
        Disabled = true
    };
                            }


                            @Html.VnrTextBoxFor(model => model.WorkDate, txt_WorkDate)  @Html.HiddenFor(model => model.WorkDate)
                        </div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle">

                            @Html.VnrLabelFor(mode => mode.ShiftID)
                        </div>
                        <div class="FieldValue">

                            @*@{

                                var _dropdownShiftID = new DropDownListBuilderInfo()
                                {
                                    Name = "ShiftID",
                                    DataTextField = "ShiftName",
                                    DataValueField = "ID",
                                    Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiShift",
                                    OptionLabel = @ConstantDisplay.HRM_Category_SelectShift.TranslateString(),
                                    Autobind = true,
                                    Enable=false,

                                };
                                }
                                @(Html.VnrDropDownListFor(mode => mode.ShiftID, _dropdownShiftID))
                                <script>
                                    var dropdownlist = $("#ShiftID").data("kendoDropDownList");
                                    dropdownlist.value('@Html.DisplayFor(mode => mode.ShiftID).ToString()');
                                </script>*@
                            @{
    TextBoxBuilderInfo _textboxShiftName = new TextBoxBuilderInfo()
    {
        Value = (Model != null && Model.ShiftName != null) ? Model.ShiftName.ToString() : string.Empty,
        Disabled = true
    };
                            }
                            @Html.VnrTextBoxFor(model => model.ShiftName, _textboxShiftName)  @Html.HiddenFor(model => model.ShiftID)
                        </div>
                        <br />
                    </div>
                    <div id="div3">

                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.ProfileName)
                        </div>
                        <div class="FieldValue">
                            @*@{
                                    IEnumerable valueProfile = new string[] { };
                                    if (Model != null)
                                    {
                                        valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
                                    }
                                }
                                @{
                                    var Profile = new MultiSelectBuilderInfo()
                                     {
                                         Name = "ProfileID",
                                         DataTextField = "ProfileName",
                                         DataValueField = "ID",
                                         Url = @_hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                                         Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                         MaxSelectedItems = 1,
                                         Value = valueProfile,
                                        // Enable=false
                                     };
                                }

                                @(Html.VnrMultiSelectFor(mode => mode.ProfileID, Profile))*@
                            @{
    TextBoxBuilderInfo _textboxProfileName = new TextBoxBuilderInfo()
    {
        Value = (Model != null && Model.ProfileName != null) ? Model.ProfileName : string.Empty,
        Disabled = true
    };
                            }
                            @(Html.VnrTextBoxFor(model => model.ProfileName, _textboxProfileName))@Html.HiddenFor(model => model.ProfileID)
                        </div>
                        <br />
                    </div>
                    <div id="div5">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.RegisterHours)
                        </div>
                        <div class="FieldValue">
                            @*@{
                                    var numericTextBoxRegisterHours = new NumericTextBoxBuilderInfo<double>()
                                    {
                                        Value=Model!=null?Model.RegisterHours:0.0,
                                        StyleCss = "width:170px;"


                                    };
                                }
                                @Html.VnrNumericTextBoxFor(model => model.RegisterHours, numericTextBoxRegisterHours)*@
                            @{
    TextBoxBuilderInfo _textboxRegisterHours = new TextBoxBuilderInfo()
    {
        Value = (Model != null && Model.RegisterHours != null) ? Model.RegisterHours.ToString() : string.Empty,
        Disabled = true
    };
                            }
                            @(Html.VnrTextBoxFor(model => model.RegisterHours, _textboxRegisterHours))@Html.HiddenFor(model => model.RegisterHours)
                        </div>
                        <br />
                    </div>
                    <div id="div6">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.MethodPayment)
                        </div>
                        <div class="FieldValue">
                            @{
    var dropdownMethodPayment = new DropDownListBuilderInfo()
    {
        Name = "MethodPayment",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listMethodPayment,
        OptionLabel = @ConstantDisplay.HRM_Attendance_SelectMethodPayment.TranslateString(),
        StyleCss = "width:170px"
    };
                            }
                            @(Html.VnrDropDownListFor(mode => mode.MethodPayment, dropdownMethodPayment))
                            @Html.ValidationMessageFor(model => model.MethodPayment)
                        </div>
                        <br />
                    </div>
                    <div id="div7">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OvertimeTypeID)
                        </div>
                        <div class="FieldValue">
                            @{
    var dropdownOvertimeTypeID = new DropDownListBuilderInfo()
    {
        Name = "AttOvertimeInfo_OvertimeTypeID",
        DataTextField = "OvertimeTypeName",
        DataValueField = "ID",
        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiOvertimeType",
        Value = @Html.DisplayFor(mode => mode.OvertimeTypeID).ToString(),
        OptionLabel = @ConstantDisplay.HRM_Attendance_SelectOvertimeType.TranslateString(),
        StyleCss = "width:170px"
    };
                            }
                            @(Html.VnrDropDownListFor(mode => mode.OvertimeTypeID, dropdownOvertimeTypeID))
                            @Html.ValidationMessageFor(model => model.OvertimeTypeID)
                        </div>
                        <br />
                    </div>
                    <div id="div13">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.Status)
                        </div>
                        <div class="FieldValue">
                            @{
    var dropdownStatus = new DropDownListBuilderInfo()
    {
        Name = "AttOvertimeInfo_Status",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listStatus,
        OptionLabel = @ConstantDisplay.HRM_Category_SelectStatus.TranslateString(),
        StyleCss = "width:170px"
    };
                            }
                            @(Html.VnrDropDownListFor(mode => mode.Status, dropdownStatus))

                        </div>
                        <br />
                    </div>


                    <div id="div7">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.ReasonOT)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextAreaFor(model => model.ReasonOT)
                            @Html.ValidationMessageFor(model => model.ReasonOT)
                        </div>
                        <br />
                    </div>
                    <div id="div8">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.UserApproveID)
                        </div>
                        <div class="FieldValue">
                            @{
    IEnumerable valueUserApprove = new string[] { };
    if (Model != null)
    {
        valueUserApprove = new[] { new { UserInfoName = Model.UserApproveName1, ID = Model.UserApproveID } };
    }
                            }
                            @{
    var multiSelectUserApproveID = new MultiSelectBuilderInfo()
    {
        Name = "UserApproveID",
        DataTextField = "UserInfoName",
        DataValueField = "ID",
        Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_" + ApproveType.E_OVERTIME.ToString(),
        //Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUser",
        Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
        MaxSelectedItems = 1,
        Value = valueUserApprove
    };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.UserApproveID, multiSelectUserApproveID))
                        </div>
                        <br />
                    </div>
                    <div id="div9">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.UserApproveID2)
                        </div>
                        <div class="FieldValue">
                            @{
    IEnumerable valueUserApprove2 = new string[] { };
    if (Model != null)
    {
        valueUserApprove2 = new[] { new { UserInfoName = Model.UserApproveName2, ID = Model.UserApproveID2 } };
    }
                            }
                            @{
    var multiSelectUserApproveID2 = new MultiSelectBuilderInfo()
    {
        Name = "UserApproveID2",
        DataTextField = "UserInfoName",
        DataValueField = "ID",
        Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_" + ApproveType.E_OVERTIME.ToString(),
        //Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUser",
        Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
        MaxSelectedItems = 1,
        Value = valueUserApprove2
    };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.UserApproveID2, multiSelectUserApproveID2))
                        </div>
                        <br />
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-AttOvertime", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-AttOvertime", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>



}
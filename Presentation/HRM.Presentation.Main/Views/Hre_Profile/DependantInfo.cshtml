
@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models


@model HRM.Presentation.Hr.Models.Hre_DependantModel

@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ProfileID = Guid.Empty;

    string profileid = ViewBag.profileID;
    if (!string.IsNullOrEmpty(profileid))
    {
        ProfileID = Common.ConvertToGuid(profileid.ToString());
    }
}
@{
    IList<SelectListItem> list = Enum.GetValues(typeof(EnumDropDown.Gender))
         .Cast<EnumDropDown.Gender>()
         .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
         .ToList();

    SelectList data = new SelectList(list, "Value", "Text");
}
@Html.ValidationSummary(false)
@Html.AntiForgeryToken()
<script>
    SetFieldRequired();
</script>
<script>

    $("#ProfileName").prop('disabled', true);
    $("#DependantInfo_ProfileName").val($("#profileNameView").text())

    //Gán profile id lại cho tất cả các form đư
    $("input[name=ProfileID]").val(SelectID);

    $(document).ready(function () {
    });

    SetFieldRequiredByScreenName('Hre_Dependant_Tab');
    var data = SetCharacteFieldRequired();

    function onSaveClose() {
        onSaveAndClose($('#form_Dependant'), '@_hrm_Hr_Service', 'api/Hre_Dependant/', '@ConstantControlName.HRM_HR_Dependant_Grid_Name', '@ConstantControlName.HRM_HR_Dependant_PopUp_Name'); return false;
    }
    function onSaveDataPopUp() {
        onlySave($('#form_Dependant'), '@_hrm_Hr_Service', 'api/Hre_Dependant/', '@ConstantControlName.HRM_HR_Dependant_Grid_Name'); return false;
    }
    $("#ProfileName").prop('disabled', true);

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Dependant" }))
{
    @Html.HiddenFor(model => model.Dependant_ID)


    <div>
        @{
    if (Model != null)
    {
        @Html.HiddenFor(m => m.ProfileID)
    }
    else
    {
        @Html.Hidden("ProfileID", ProfileID)
    }
        }
    </div>

    <table>
        <tr>
            <td>
                <div id="div2">
                    <div class="FieldTitle150">
                        @Html.HiddenFor(mode => mode.ID)
                        @Html.VnrLabelFor(mode => mode.ProfileName)
                    </div>
                    <div class="FieldValue">
                        @{
    var _ProfileName = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "DependantInfo_ProfileName",
        Disabled = true
    };
    if (Model != null)
    {
        _ProfileName.Value = Model == null ? string.Empty : Model.ProfileName;
    }
                        }
                        @Html.VnrTextBoxFor(model => model.ProfileName, _ProfileName)
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.DependantName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.DependantName, "width:300px")
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.IDNo)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.IDNo, "width:300px")
                    </div>
                </div>
                <div id="div4">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.DateOfBirth)
                    </div>
                    <div class="FieldValue">
                        @{
    var dateOfBirth = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px;",
    };
                        }
                        @Html.VnrDatePickerFor(model => model.DateOfBirth, dateOfBirth)
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div id="div5">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Gender)
                    </div>
                    <div class="FieldValue">
                        @{
    var gender = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px;",
        Name = "DependantInfo_Gender",
        BindTo = list,
        DataTextField = "Text",
        DataValueField = "Value"
    };
                        }
                        @Html.VnrDropDownListFor(model => model.Gender, gender)
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div id="div6">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.RelationID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _RelativeTypeName = new ComboBoxBuilderInfo()
     {
         Name = "DependantInfo_RelationID",
         DataTextField = "RelativeTypeName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRelativeType",
         StyleCss = "width:300px;",
         Value = Model == null ? string.Empty : Model.RelationID.ToString(),
     };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.RelationID, _RelativeTypeName).Text(Model == null ? string.Empty : Model.RelativeTypeName))
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div id="div7">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.MonthOfEffect)
                    </div>
                    <div class="FieldValue">
                        @{
    var monthOfEffect = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px;",
    };
                        }

                        @Html.VnrDatePickerFor(model => model.MonthOfEffect, monthOfEffect)
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div id="div8">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.MonthOfExpiry)
                    </div>
                    <div class="FieldValue">
                        @{
    var monthOfExpiry = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px;",
    };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthOfExpiry, monthOfExpiry)
                    </div>
                    <div style="clear: both;"></div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-DependantInfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-DependantInfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

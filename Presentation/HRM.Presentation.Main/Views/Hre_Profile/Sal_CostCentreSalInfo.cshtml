
@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models
@using HRM.Presentation.Payroll.Models

@model Sal_CostCentreSalModel

@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ProfileID = Guid.Empty;

    string profileid = ViewBag.profileID;
    if (!string.IsNullOrEmpty(profileid))
    {
        ProfileID = Common.ConvertToGuid(profileid.ToString());
    }
}
<script>

    SetFieldRequiredByScreenName('Sal_CostCentreSal_Tab');
    $(document).ready(function () {
        $("#ProfileID").val(SelectID);
        //$("#ProfileID").val(SelectID);
        //alert($("#ProfileID").val());

    });
    function onSaveClose() {
       

       
        var isaccess = true;
        var rate = document.getElementsByName("Info_Rate").valueOf();
        if (rate[0].value == "") {
            ErrorMessages("Hệ Số Không Để Trống!");
            return;
        }
        if (rate[0].value > 1 || rate[0].value == "") {
            ErrorMessages("Hệ Số Không Lớn Hơn 1!");
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'api/Sal_CostCentreSal',
            data: queryStringToJSON(slpitQueryEntity($("#form_Sal_CostCentreSalModelInfo").serialize())),
            dataType: 'json',
            async: false,
            success: function (data) {
                
                if (data.ActionStatus.indexOf(',') > 0) {
                    
                    var strStatus = data.ActionStatus.split(',');
                    if (strStatus[0] == "Error") {

                        ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())'," Tổng Hệ Số Của Một Nhân Viên Không Lớn Hơn 1!", "k-block k-info-colored");
                        return;
                    }
                    if (strStatus[0] == "Info") {
                        ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Loại Chi Phí Và Phần Tử Lương Đã Tồn Tại!", "k-block k-info-colored");
                        return;
                    }
                }
                if (data.ActionStatus == "Success") {
                    ShowNotificationProcessor(data.ActionStatus);
                    var window = $("#" + '@ConstantControlName.HRM_Sal_CostCentreSal_PopUp_Name').data("kendoWindow");
                    window.refresh().close();
                    var grid = $("#" + "grid_Sal_CostCentreSal").data("kendoGrid");
                    grid.dataSource.read();
                    result = true;
                    return result;
                }

            }
        });
        if (isaccess == false)
            return;
       // onSaveAndClose($('#form_Sal_CostCentreSalModelInfo'), '@_hrm_Hr_Service', 'api/Sal_CostCentreSal/', 'grid_Sal_CostCentreSal', '@ConstantControlName.HRM_Sal_CostCentreSal_PopUp_Name'); return false;
        return false;
    }
    function onSaveDataPopUp() {
      
    
      
        var rate = document.getElementsByName("Info_Rate").valueOf();
        if (rate[0].value == "") {
            ErrorMessages("Hệ Số Không Để Trống!");
            return;
        }
        if (rate[0].value > 1 || rate[0].value == "") {
            ErrorMessages("Hệ Số Không Lớn Hơn 1!");
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'api/Sal_CostCentreSal',
            data: queryStringToJSON(slpitQueryEntity($("#form_Sal_CostCentreSalModelInfo").serialize())),
            dataType: 'json',
            async: false,
            success: function (data) {
                
                if (data.ActionStatus.indexOf(',') > 0) {
                    
                    var strStatus = data.ActionStatus.split(',');
                    if (strStatus[0] == "Error") {

                        ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', " Tổng Hệ Số Của Một Nhân Viên Không Lớn Hơn 1!", "k-block k-info-colored");
                        return;
                    }
                    if (strStatus[0] == "Info") {
                        ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Loại Chi Phí Và Phần Tử Lương Đã Tồn Tại!", "k-block k-info-colored");
                        return;
                    }
                }
                if (data.ActionStatus == "Success") {
                    ShowNotificationProcessor(data.ActionStatus);
                    var grid = $("#" + "grid_Sal_CostCentreSal").data("kendoGrid");
                    grid.dataSource.read();
                    result = true;
                    return result;
                }
                else
                {
                    ShowNotificationProcessor(data.ActionStatus, "k-block k-info-colored");
                    return;
                }
            }
        });
        if (isaccess == false)
            return;
        //onlySave($('#form_Sal_CostCentreSalModelInfo'), '@_hrm_Hr_Service', 'api/Sal_CostCentreSal/', 'grid_Sal_CostCentreSal'); return false;
        return false;
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Sal_CostCentreSalModelInfo" }))
{ if (Model != null)
    {
        @Html.HiddenFor(m => m.ProfileID)
    }
    else
    {
        @Html.Hidden("ProfileID", ProfileID)
    }
 
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                        <label>
                        @ConstantDisplay.HRM_Payroll_CostCentreID.TranslateString()
                        </label>
                        @*@Html.VnrLabelFor(mode => mode.CostCentreID)*@
                        @Html.HiddenFor(model => model.ID)
                    </div>
                    <div class="FieldValue">
                        @{
                        var dropdownCostCentreID = new DropDownListBuilderInfo()
                        {
                            DataTextField = "CostCentreName",
                            DataValueField = "ID",
                            Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiCostCentre",
                            Value = @Html.DisplayFor(mode => mode.CostCentreID).ToString(),
                            Enable = true,
                            OptionLabel = @ConstantDisplay.HRM_Category_SelectCostCentre.TranslateString(),
                            StyleCss = "width:200px"
                        };
                                            }
                        @(Html.VnrDropDownListFor(mode => mode.CostCentreID, dropdownCostCentreID))
                    </div>
                </div>

                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ElementType)
                    </div>
                    <div class="FieldValue">
                        @{
                            var dropdownElementType = new DropDownListBuilderInfo()
                            {
                                DataTextField = "ElementName",
                                DataValueField = "ElementCode",
                                Url = @_hrm_Hr_Service + "Cat_GetData/GetElementType",
                                Value = @Html.DisplayFor(mode => mode.ElementType).ToString(),
                                Enable = true,
                                OptionLabel = @ConstantDisplay.HRM_Category_SelectElementType.TranslateString(),
                                StyleCss="width:200px"
                            };
                        }
                        @(Html.VnrDropDownListFor(mode => mode.ElementType, dropdownElementType))
                    </div>
                </div>
        
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Rate)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Rate = new NumericTextBoxBuilderInfo<double>()
                         {
                             Name = "Info_Rate",
                             StyleCss = "Width: 150px"
                         };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Rate, _Rate)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                       
                            @Html.VnrLabelFor(mode => mode.DateStart)
                            </div>
                            <div class="FieldValue">
                           @{
                            var datepickerDateStart = new DatePickerBuilderInfo()
                            {
                                Value = @Html.DisplayFor(mode => mode.DateStart).ToString(),                                           
                                StyleCss = "width:100px;",
                                Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                         }
                        @Html.VnrDatePickerFor(model => model.DateStart, datepickerDateStart)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Sal_CostCentreSalInfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-Sal_CostCentreSalInfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}
<div>
    @{
        if(Model.ID == null || Model.ID == Guid.Empty)
        {
          
                <script>
                    $("#ID").val("00000000-0000-0000-0000-000000000000");
                </script>
            
        }
    }
</div>
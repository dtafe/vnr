@using HRM.Presentation.Evaluation.Models
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security;

@model Eva_SaleEvaluationByProfileSearchModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Category.TranslateString();
    Layout = null;
    var hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _Hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var gridName = "gridSaleEvaluationOut";
    var windowName = "windowSaleEvaluationOut";
    var profileId = Guid.Empty;
    if (ViewBag.profileId != null)
    {
        profileId = ViewBag.profileId;
    }
}

@{
    var window = new WindowBuilderInfo
    {
        Name = windowName,
        Visible = false,Width=700,
        Title = "Thông tin Doanh Số",
        LoadContentFrom = _hrm_Main_Web + "Hre_Profile/Hre_SaleEvaluationInfo?profileId=" + profileId,
    };
}
@(Html.VnrWindow(window))

<script type="text/javascript">
    var titleEditPopUp = 'Chỉnh Sửa Doanh Số Cá Nhân'; @*'@Html.Raw(ConstantDisplay.HRM_Sys_User_Update_Title.TranslateString())';*@
    var titleCreatePopUp = 'Tạo Mới Doanh Số Cá Nhân'; @*'@Html.Raw(ConstantDisplay.HRM_Sys_User_Create_Title.TranslateString())';*@
    var windowName = '@windowName';
    var gridName = '@gridName';
    var checkedNodes = [];
    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo() {
        return {
            ProfileID: '@profileId',
            SaleType: 'SaleOut'
        };
    }

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();
        //tim kiem
        $("#btnSearch").click(function () {
            ReadGrid(gridName);
        });
        //setTimeout(function () { createSaleOutChart(); }, 1000);
        //Xử lý Edit popup
        var url = '@_hrm_Main_Web' + "Hre_Profile/Hre_SaleEvaluationInfo?profileId=@profileId";
        EditGridPopUp('gridSaleEvaluationOut', 'windowSaleEvaluationOut', url, '@ConstantPermission.Eva_SaleEvaluation', titleEditPopUp);
    });

    //Xử Lý grid
    GridCheckbox(gridName);

    $("#btnCreateOut").click(function () {
        PopUpEdit('windowSaleEvaluationOut', '@_hrm_Main_Web' + "Hre_Profile/Hre_SaleEvaluationInfo?profileId=" + SelectID, "", titleCreatePopUp);
        @*PopUpCreate(windowName, titleCreatePopUp, '@ConstantPermission.Eva_SaleEvaluation');*@
    });

    //Xử Lý button delete
    $('#btnDeleteOut').click(function (e) {
        e.preventDefault();
        DeleteSelected(gridName, '@_hrm_Main_Web' + "Hre_Profile/RemoveSaleEvaluation/", selectedIds.join(","), '@ConstantPermission.Eva_SaleEvaluation');
    });


    function createSaleOutChart() {
        debugger;
        var grid = $('#gridSaleEvaluationOut').data("kendoGrid");
       // alert(grid);
        var targetNumbersSaleIn = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var resultNumbersSaleIn = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var resultPercentsSaleIn = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

        var targetNumbersSaleOut = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var resultNumbersSaleOut = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var resultPercentsSaleOut = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        var max = 0;
        max = grid._data[0].TagetNumber;
        for (var i = 0; i < grid._data.length; i++) {
            var date = new Date(grid._data[i].Year);
            var month = date.getMonth();
            targetNumbersSaleIn[month] = grid._data[i].TagetNumberSaleIn;
            resultNumbersSaleIn[month] = grid._data[i].ResultNumberSaleIn;
            resultPercentsSaleIn[month] = Math.round(grid._data[i].ResultPercentSaleIn * 1000) / 1000;

            targetNumbersSaleOut[month] = grid._data[i].TagetNumber;
            resultNumbersSaleOut[month] = grid._data[i].ResultNumber;
            resultPercentsSaleOut[month] = Math.round(grid._data[i].ResultPercent * 1000) / 1000;

            //   TagetNumber  ResultNumber ResultPercent
            // take number max of TagetNumber
            if (grid._data[i].TagetNumber > max) {
                max = grid._data[i].TagetNumber;
            }
            if (grid._data[i].TagetNumberSaleIn > max) {
                max = grid._data[i].TagetNumberSaleIn;
            }
        }
       
        $("#chartSaleOut").kendoChart({
            title: {
                text: "@ConstantDisplay.HRM_Evaluation_SaleEvaluation_SaleIn_SaleOut.TranslateString()"
            },
            legend: {
                position: "bottom"
            },
            series: [{
                //Thực Đạt Mua Vào
                name: '@ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultNumberSaleIn.TranslateString()',
                // data: [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32],
                data: resultNumbersSaleIn,
                color: "#0094ff",
                type: "column",
                axis: "a"
            }, {
                //Thực Đạt Bán Ra
                type: "column",
                name: '@ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultNumberSaleOut.TranslateString()',
                //  data: [8, 9, 10, 11, 12, 13, 14, 15, 12, 17, 18, 19],
                data: resultNumbersSaleOut,
                color: "#ad0e0e",
                axis: "b"
            }, {
                //% Thực Đạt Mua Vào
                name: '@ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultPercentSaleIn.TranslateString()',
                // data: [80, 75, 71, 69, 67, 65, 64, 63, 62, 61, 60, 59],
                data: resultPercentsSaleIn,
                // color: "#f16a2b",
                color: "green",
                type: "line",
                dashType: "dot",
                //line: {
                //    color: "green",
                //    opacity: 0.5,
                //    width: 5,
                //    style: "dot"
                //},
                axis: "c",
            },
                {
                    //% Thực Đạt Bán Ra
                    name: '@ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultPercentSaleOut.TranslateString()',
                    // data: [80, 75, 71, 69, 67, 65, 64, 63, 62, 61, 60, 59],
                    data: resultPercentsSaleOut,
                    // color: "#f16a2b",
                    color: "black",
                    type: "line",
                    dashType: "dot",
                    //line: {
                    //    color: "green",
                    //    opacity: 0.5,
                    //    width: 5,
                    //    style: "dot"
                    //},
                    axis: "d",
                }

            ],
            valueAxes: [{
                name: "a",
                color: "#0094ff",
                minorGridLines: {
                    visible: true
                },
                min: 0,
                max: max,
            }, {
                name: "b",
                color: "#ad0e0e",
                minorGridLines: {
                    visible: true
                },
                min: 0,
                max: max,
            }, {
                    name: "c",
                    color: "green",
                    minorGridLines: {
                        visible: true
                    },
                    labels: {
                        format: "{0}%"
                    },
                    min: 0,
                    max: 100,
                }
                 , {
                     name: "d",
                     color: "black",
                     minorGridLines: {
                         visible: true
                     },
                     labels: {
                         format: "{0}%"
                     },
                     min: 0,
                     max: 100,
                 }

            ],
            categoryAxis: {
                categories: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Sep", "Oct", "Nov", "Dec"],
                majorGridLines: {
                    visible: false
                },
                axisCrossingValues: [0, 0, 32,32],
            },
            tooltip: {
                visible: true,
                format: "{0}",
                template: "#= series.name #: #= value #"
            }
        });
    }

    function onDataBoundGrid() {

        createSaleOutChart();
    }

</script>

<div class="commandToolBarWidge" style="margin-top:3px">
    <div class="GridTitle">
        @Html.VnrLabel(ConstantDisplay.HRM_Evaluation_SaleEvaluation_SaleIn_SaleOut.TranslateString())
    </div>
    <div style="float:right">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateOut", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDeleteOut", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>


<div>
    @*grid*@
    <div style="float:left;width:910px;">
        <!--Khai báo các thông tin cho Grid-->
        @{
            string[] valueFields = new string[]
            {
                Eva_SaleEvaluationModel.FieldNames.Year,
                //Eva_SaleEvaluationModel.FieldNames.SalesTypeName,
                Eva_SaleEvaluationModel.FieldNames.TargetNumberSaleIn,
                Eva_SaleEvaluationModel.FieldNames.ResultNumberSaleIn,
                Eva_SaleEvaluationModel.FieldNames.ResultPercentSaleIn,
                Eva_SaleEvaluationModel.FieldNames.TagetNumber,
                Eva_SaleEvaluationModel.FieldNames.ResultNumber,
                Eva_SaleEvaluationModel.FieldNames.ResultPercent
            };
            Dictionary<string, int> sizeFields = new Dictionary<string, int>()
            {
                {Eva_SaleEvaluationModel.FieldNames.Year, 100},
                //{Eva_SaleEvaluationModel.FieldNames.SalesTypeName, 120},
                {Eva_SaleEvaluationModel.FieldNames.TargetNumberSaleIn, 120},
                {Eva_SaleEvaluationModel.FieldNames.ResultNumberSaleIn, 130},
                {Eva_SaleEvaluationModel.FieldNames.ResultPercentSaleIn, 140},
                {Eva_SaleEvaluationModel.FieldNames.TagetNumber, 120},
                {Eva_SaleEvaluationModel.FieldNames.ResultNumber, 120},
                {Eva_SaleEvaluationModel.FieldNames.ResultPercent, 140},
            };

            Dictionary<string, string> displayFields = new Dictionary<string, string>()
            {
                {Eva_SaleEvaluationModel.FieldNames.Year, ConstantDisplay.HRM_Evaluation_SaleEvaluation_Year},
                //{Eva_SaleEvaluationModel.FieldNames.SalesTypeName, ConstantDisplay.HRM_Evaluation_SaleEvaluation_SalesTypeID},
                {Eva_SaleEvaluationModel.FieldNames.TargetNumberSaleIn, ConstantDisplay.HRM_Evaluation_SaleEvaluation_TagetNumberSaleIn},
                {Eva_SaleEvaluationModel.FieldNames.ResultNumberSaleIn, ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultNumberSaleIn},
                {Eva_SaleEvaluationModel.FieldNames.ResultPercentSaleIn, ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultPercentSaleIn},
                
                {Eva_SaleEvaluationModel.FieldNames.TagetNumber, ConstantDisplay.HRM_Evaluation_SaleEvaluation_TagetNumberSaleOut},
                {Eva_SaleEvaluationModel.FieldNames.ResultNumber, ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultNumberSaleOut},
                {Eva_SaleEvaluationModel.FieldNames.ResultPercent, ConstantDisplay.HRM_Evaluation_SaleEvaluation_ResultPercentSaleOut},
            };

            Dictionary<string, string> formatFields = new Dictionary<string, string>()
            {
                {Eva_SaleEvaluationModel.FieldNames.Year, ConstantFormat.HRM_Format_MonthYear}
            };

            var grid = new GridBuilderInfo
            {
                Name = gridName,
                ValueFields = valueFields,
                FormatFields = formatFields,
                ReadActionUrl = _Hrm_Hre_Service + "Eva_GetData/GetSaleEvaluationByProfileList",
                SizeFields = sizeFields,
                DisplayFields = displayFields,
                ReadData = "filterFieldInfo",
                ShowCheckbox = false,
                Scrollable = false,
                GridHeight = 400,
                GridWidth = Common.ScreenWidth - 260,
                AutoBind = true,
                EventDataBound = "onDataBoundGrid"
            };
        }

        <!--Khởi tạo Grid-->
        @(Html.VnrGrid<Eva_SaleEvaluationModel>(grid))
    </div>

    <div id="evaluationChart" style="float:left;padding-left:5px;">
        <div class="demo-section k-content">
            <div id="chartSaleOut"></div>
        </div>
    </div>

</div>

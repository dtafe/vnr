@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Attendance.Models

@model Att_ComputeWorkDayModel
@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var proid = Guid.Empty;
    var proName = string.Empty;
    var monNext = DateTime.Now.Month + 1;
}
<script type="text/javascript">
    function paramComputeWorkdayPopup() {
        var paramCP = {
            ProfileIDs: $("#ProfileIDs").val(),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#ComputeWorkdayPopUp_DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#ComputeWorkdayPopUp_DateTo").val()),
            UserCreateID: $("#UserLoginID").val(),
            ComputeContinue: false,
            ComputeRepeat: true
        };
        return paramCP;
    };

    $(document).ready(function () {
        proid = SelectID;
        proName = $("#profileNameView").html();
        
        $("#ComputeWorkdayPopUp_ProfileName").val(proName);
        $("#ProfileIDs").val(SelectID);
    });
    function onCompute() {
        $("#" + '@ConstantControlName.HRM_Att_ComputeWorkday_PopUp_Name').data("kendoWindow").close();
        ShowHre_ProgressBar();
        $.ajax({
            url: '@_hrm_Hr_Service' + 'Att_GetData/GetComputeWorkday',
            data: paramComputeWorkdayPopup(),
            type: 'POST',
            success: function (data) {
                
                CloseHre_ProgressBar();
                
                var idAsyn = data.ID;
                IsActiveProgress = true;
                ShowProgressBarWithID(idAsyn);
                
            },
            error: function () {
                CloseHre_ProgressBar();
            },
        });
    }

</script>


@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_ComputeWorkdayPopup" }))
{
    <table>
        <tr>
            <td>
                <div id="div4" class="DivContentTitleValue">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProfileIDs)
                    </div>
                    <div class="FieldValue" style="width:200px">
                        @{
                            var _txtName = new TextBoxBuilderInfo()
                            {
                                Name = "ComputeWorkdayPopUp_ProfileName",
                                Disabled = true,
                                CssStyle = "width:300px"
                            };
                        }
                        @Html.VnrTextBox(_txtName)

                        @Html.HiddenFor(model => model.ProfileIDs)
                    </div>

                </div>                
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabel(ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString())
                    </div>
                    <div class="FieldValue" style="width:200px">
                        @{
    var _DateFrom = new DateTimePickerBuilderInfo()
                            {
                                Name = "ComputeWorkdayPopUp_DateFrom",
        Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month,1).ToString(),
                                StyleCss = "width: 120px"
                            };
                        }
                        @Html.VnrDateTimePickerFor(model => model.DateFrom, _DateFrom)
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabel(ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString())
                    </div>
                    <div class="FieldValue" style="width:200px">
                        @{
                            var _DateTo = new DateTimePickerBuilderInfo()
                            {
                                Name = "ComputeWorkdayPopUp_DateTo",
                                //Value = new DateTime(DateTime.Now.Year, (DateTime.Now.Month + 1) == 13 ? 1 : (DateTime.Now.Month + 1), 1).AddMilliseconds(-1).ToString(),
                                StyleCss = "width: 120px"
                            };
                            if (DateTime.Now.Month + 1 > 12)
                            {
                                _DateTo.Value = new DateTime(DateTime.Now.Year + 1, (DateTime.Now.Month - 11), 1).AddMilliseconds(-1).ToShortDateString();
                            }
                            else
                            {
                                _DateTo.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month + 1, 1).AddMilliseconds(-1).ToShortDateString();
                            }
                        }
                        @Html.VnrDateTimePickerFor(model => model.DateTo, _DateTo)
                    </div>
                    <div style="clear: both;"></div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onCompute", Name = "onCompute", Content = ConstantDisplay.HRM_Attendance_ComputeWorkDay_Compute.TranslateString(), ImageUrl = ConstantPath.IconComputePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}


@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models


@model HRM.Presentation.Hr.Models.Hre_RelativesModel

@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ProfileID = Guid.Empty;

    string aaa = ViewBag.profileID;
    if (!string.IsNullOrEmpty(aaa))
    {
        ProfileID = Common.ConvertToGuid(aaa.ToString());
    }

}
@{
    IList<SelectListItem> list = Enum.GetValues(typeof(EnumDropDown.Gender))
         .Cast<EnumDropDown.Gender>()
         .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
         .ToList();

    SelectList data = new SelectList(list, "Value", "Text");
}
@Html.ValidationSummary(false)
@Html.AntiForgeryToken()
<script>
    SetFieldRequiredByScreenName('Hre_Relatives_Detail');
    $(".Dependant").hide();
    $('#DeclareFile').bind('click', function (e) {
        if (this.checked) {
            $("#Div_IsShow").show();
        }
        else {
            $("#Div_IsShow").hide();
        }
    });
    $(document).ready(function () {
        $("#Div_IsShow").hide();
    });
    $("#ProfileName").prop('disabled', true);
    $("#RelativeProfileInfo_ProfileName").val($("#profileNameView").text())
    $('#CheckAddDependant').change(function () {
        if ($(this).is(":checked")) {
            $(".Dependant").show();
        }
        else {
            $(".Dependant").hide();
        }

    });

    $("#RelativeName").change(function () {
        ShowHre_ProgressBar();
        var _ID = $('#@Html.FieldIdFor(model => model.ID)').val();
        var _RelativeName = $("#RelativeName").val().trim();
        $.ajax({
            url: '@_hrm_Hr_Service' + 'Hre_GetData/CheckDuplicateRelatives',
            type: 'POST',
            data: { ID: _ID, name: _RelativeName },
            success: function (status) {

                if (status != '') {
                    $("#idFailRelatives").attr("style", "display: inline-block; padding-top: 4px; padding-left: 5px; padding-right: 5px");
                    $("#idSuccessRelatives").attr("style", "display: none");
                    ShowNotification('@ConstantDisplay.HRM_Dashboard_Alerts.TranslateString()', '@ConstantDisplay.HRM_HR_Profile_ProfileNameExistInSystem.TranslateString()' + status, "k-block k-info-colored");
                    CloseHre_ProgressBar();
                }
                else {
                    $("#idSuccessRelatives").attr("style", "display: inline-block; padding-top: 4px; padding-left: 5px; padding-right: 5px");
                    $("#idFailRelatives").attr("style", "display: none");
                    CloseHre_ProgressBar();
                }
            },
        });
    });

    //Gán profile id lại cho tất cả các form đư
    $("input[name=ProfileID]").val(SelectID);

    function onSaveClose() {
        var DeclareFile = document.getElementById("DeclareFile");
        if (DeclareFile != null && DeclareFile.checked) {
            $("#DeclareFile").val("true");
        } else {
            $("#DeclareFile").val("false");
        }

        var BirthCertificate = document.getElementById("BirthCertificate");
        if (BirthCertificate != null && BirthCertificate.checked) {
            $("#BirthCertificate").val("true");
        } else {
            $("#BirthCertificate").val("false");
        }

        var HouseHold = document.getElementById("HouseHold");
        if (HouseHold != null && HouseHold.checked) {
            $("#HouseHold").val("true");
        } else {
            $("#HouseHold").val("false");
        }

        var MarriageLicenses = document.getElementById("HouseHold");
        if (MarriageLicenses != null && MarriageLicenses.checked) {
            $("#MarriageLicenses").val("true");
        } else {
            $("#MarriageLicenses").val("false");
        }

        var StudyingSchools = document.getElementById("StudyingSchools");
        if (StudyingSchools != null && StudyingSchools.checked) {
            $("#StudyingSchools").val("true");
        } else {
            $("#StudyingSchools").val("false");
        }

        var LaborDisabled = document.getElementById("LaborDisabled");
        if (LaborDisabled != null && LaborDisabled.checked) {
            $("#LaborDisabled").val("true");
        } else {
            $("#LaborDisabled").val("false");
        }

        var NurturingObligations = document.getElementById("NurturingObligations");
        if (NurturingObligations != null && NurturingObligations.checked) {
            $("#NurturingObligations").val("true");
        } else {
            $("#NurturingObligations").val("false");
        }

        var IDCardNo = document.getElementById("IDCardNo");
        if (IDCardNo != null && IDCardNo.checked) {
            $("#IDCardNo").val("true");
        } else {
            $("#IDCardNo").val("false");
        }
        onSaveAndClose($('#form_RelativeProfileInfo'), '@_hrm_Hr_Service', 'api/Hre_Relatives/', '@ConstantControlName.HRM_HR_RelativeProfile_Grid_Name', '@ConstantControlName.HRM_HR_Relative_PopUp_Name'); return false;
    }
    function onSaveDataPopUp() {
        var DeclareFile = document.getElementById("DeclareFile");
        if (DeclareFile != null && DeclareFile.checked) {
            $("#DeclareFile").val("true");
        } else {
            $("#DeclareFile").val("false");
        }

        var BirthCertificate = document.getElementById("BirthCertificate");
        if (BirthCertificate != null && BirthCertificate.checked) {
            $("#BirthCertificate").val("true");
        } else {
            $("#BirthCertificate").val("false");
        }

        var HouseHold = document.getElementById("HouseHold");
        if (HouseHold != null && HouseHold.checked) {
            $("#HouseHold").val("true");
        } else {
            $("#HouseHold").val("false");
        }

        var MarriageLicenses = document.getElementById("HouseHold");
        if (MarriageLicenses != null && MarriageLicenses.checked) {
            $("#MarriageLicenses").val("true");
        } else {
            $("#MarriageLicenses").val("false");
        }

        var StudyingSchools = document.getElementById("StudyingSchools");
        if (StudyingSchools != null && StudyingSchools.checked) {
            $("#StudyingSchools").val("true");
        } else {
            $("#StudyingSchools").val("false");
        }

        var LaborDisabled = document.getElementById("LaborDisabled");
        if (LaborDisabled != null && LaborDisabled.checked) {
            $("#LaborDisabled").val("true");
        } else {
            $("#LaborDisabled").val("false");
        }

        var NurturingObligations = document.getElementById("NurturingObligations");
        if (NurturingObligations != null && NurturingObligations.checked) {
            $("#NurturingObligations").val("true");
        } else {
            $("#NurturingObligations").val("false");
        }

        var IDCardNo = document.getElementById("IDCardNo");
        if (IDCardNo != null && IDCardNo.checked) {
            $("#IDCardNo").val("true");
        } else {
            $("#IDCardNo").val("false");
        }
        onlySave($('#form_RelativeProfileInfo'), '@_hrm_Hr_Service', 'api/Hre_Relatives/', '@ConstantControlName.HRM_HR_RelativeProfile_Grid_Name'); return false;
    }
    $("#ProfileName").prop('disabled', true);

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_RelativeProfileInfo" }))
{
    @Html.HiddenFor(model => model.Relative_ID)


    <div>
        @{
    if (Model != null)
    {
        @Html.HiddenFor(m => m.ProfileID)
    }
    else
    {
        @Html.Hidden("ProfileID", ProfileID)
    }
        }
    </div>

    <table>
        <tr>
            <td>
                @*<div style="float:left; width:100%">
                    <div id="div2">
                        <div class="FieldTitle150">
                            @Html.HiddenFor(mode => mode.ID)
                            @Html.VnrLabelFor(mode => mode.ProfileName)
                        </div>
                        <div class="FieldValue">
                            @{
    var _ProfileName = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "RelativeProfileInfo_ProfileName",
        Disabled = true
    };
    if (Model != null)
    {
        _ProfileName.Value = Model == null ? string.Empty : Model.ProfileName;
    }
                            }
                            @Html.VnrTextBoxFor(model => model.ProfileName, _ProfileName)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.RelativeName)
                        </div>
                        <div class="FieldValue">
                            @{
    var txtRelativeName = new TextBoxBuilderInfo()
    {
        Name = "RelativeProfileInfo_RelativeName",
        CssStyle = "Width:300px;",
        Value = Model != null ? Model.RelativeName : null
    };
                            }
                            @Html.VnrTextBoxFor(mode => mode.RelativeName,txtRelativeName)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.IDNo)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(model => model.IDNo, "width:300px")
                    </div>
                    <div id="div3">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.Career)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.Career, "Width:300px;")
                            @Html.ValidationMessageFor(model => model.Career)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.Gender)
                        </div>
                        <div class="FieldValue">

                            @{
    var gender = new DropDownListBuilderInfo()
    {
        StyleCss = "width:100px",
        Name = "RelativeProfileInfo_Gender",
        BindTo = list,
        DataTextField = "Text",
        DataValueField = "Value",
        OptionLabel = " "
    };
                            }
                            @Html.VnrDropDownListFor(model => model.Gender, gender)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.YearOfBirth)
                        </div>
                        <div class="FieldValue">
                            @Html.Kendo().MaskedTextBoxFor(model => model.YearOfBirth).Mask("0000").HtmlAttributes(new { style = "width:100px" })
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.NationalityID)
                        </div>
                        <div class="FieldValue">
                            @{
    var _NationalityID = new ComboBoxBuilderInfo()
     {
         DataTextField = "CountryName",
         DataValueField = Hre_VisaInfoModel.FieldNames.ID,
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCountry",
         StyleCss = "width:300px;",
         Value = Model == null ? string.Empty : Model.NationalityID.ToString(),
     };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.NationalityID, _NationalityID).Text(Model == null ? string.Empty : Model.CountryName))
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div1">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.RelativeTypeName)
                        </div>
                        <div class="FieldValue">
                            @{
    var _RelativeType = new ComboBoxBuilderInfo()
     {
         DataTextField = "RelativeTypeName",
         DataValueField = Hre_VisaInfoModel.FieldNames.ID,
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRelativeType",
         StyleCss = "width:300px;",
         Value = Model == null ? string.Empty : Model.RelativeTypeID.ToString(),
     };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.RelativeTypeID, _RelativeType).Text(Model == null ? string.Empty : Model.RelativeTypeName))
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div3">
                        <div class="FieldTitle150   ">
                            @Html.VnrLabelFor(mode => mode.Address)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.Address, "Width:300px;")
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div3">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.Notes)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextAreaFor(model => model.Notes, "width:500px;height:100px;")
                            @Html.ValidationMessageFor(model => model.Notes, "width:500px;height:100px;")
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                </div>*@


                <div>
                    <div style="float:left; width:700px">
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ProfileID)
                            </div>
                            <div class="FieldValue">
                                <div style="float:left;">
                                    @{
    var _ProfileName = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "RelativeProfileInfo_ProfileName",
        Disabled = true
    };
    if (Model != null)
    {
        _ProfileName.Value = Model == null ? string.Empty : Model.ProfileName;
    }
                                    }
                                    @Html.VnrTextBoxFor(model => model.ProfileName, _ProfileName)
                                </div>
                                <div style="float:left; padding-left:2px">
                                    @{
    var CheckAddDependant = new CheckBoxBuilderInfo()
    {
    };
                                    }
                                   
                                    @Html.VnrCheckBoxFor(m => m.CheckAddDependant, CheckAddDependant)@ConstantDisplay.HRM_HR_Relatives_CheckAddDependant.TranslateString()
                                </div>
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div class="Dependant">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.MonthOfEffect)
                            </div>
                            <div class="FieldValue">
                                @{
    var MonthOfEffect = new DatePickerBuilderInfo()
    {
        StyleCss = "Width: 120px",
        Name = "RelativeProfileInfo_MonthOfEffect",
        Format = ConstantFormat.HRM_Format_DayMonthYear
    };

                                }
                                @Html.VnrDatePickerFor(model => model.MonthOfEffect, MonthOfEffect)
                            </div>
                        </div>
                        <div class="Dependant">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.MonthOfExpiry)
                            </div>
                            <div class="FieldValue">
                                @{
    var MonthOfExpiry = new DatePickerBuilderInfo()
    {
        Name = "RelativeProfileInfo_MonthOfExpiry",
        StyleCss = "Width: 120px",
        Format = ConstantFormat.HRM_Format_DayMonthYear
    };

                                }
                                @Html.VnrDatePickerFor(model => model.MonthOfExpiry, MonthOfExpiry)
                            </div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.HiddenFor(mode => mode.ID)
                                @Html.VnrLabelFor(mode => mode.RelativeName)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(mode => mode.RelativeName)
                                <div id="idSuccessRelatives" style="display: none"><img src="Content\images\icons\accept.png" /></div>
                                <div id="idFailRelatives" style="display: none; padding-top: 4px; padding-left: 5px; padding-right: 5px; "><img src="Content\images\icons\reject.png" /></div>

                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.IDNo)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.IDNo, "width:300px")
                            </div>
                        </div>
                        <div id="div3">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Career)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.Career, "Width:300px;")
                                @Html.ValidationMessageFor(model => model.Career)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Gender)
                            </div>
                            <div class="FieldValue">

                                @{
    var gender = new DropDownListBuilderInfo()
    {
        Name = "RelativeProfileInfo_Gender",
        BindTo = list,
        DataTextField = "Text",
        DataValueField = "Value",
        StyleCss = "Width: 100px",
        OptionLabel = " ",
    };
                                }
                                @Html.VnrDropDownListFor(model => model.Gender, gender)
                            </div>

                            <div style="clear: both;"></div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.YearOfBirth)
                            </div>
                            <div class="FieldValue">
                                @Html.Kendo().MaskedTextBoxFor(model => model.YearOfBirth).Name("RelativeinfoDetail_YearOfBirth").Mask("00/00/0000").HtmlAttributes(new { style = "width:100px" })
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.NationalityID)
                            </div>
                            <div class="FieldValue">
                                @{
    var _NationalityID = new ComboBoxBuilderInfo()
     {
         Name = "RelativeProfileInfo_NationalityID",
         DataTextField = "CountryName",
         DataValueField = Hre_VisaInfoModel.FieldNames.ID,
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCountry",
         StyleCss = "width:300px;",
         Value = Model == null ? string.Empty : Model.NationalityID.ToString(),
     };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.NationalityID, _NationalityID).Text(Model == null ? string.Empty : Model.CountryName))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div1">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.RelativeTypeID)
                            </div>
                            <div class="FieldValue">
                                @{
    var _RelativeType = new ComboBoxBuilderInfo()
    {
        Name = "RelativeProfileInfo_RelativeTypeID",
        DataTextField = "RelativeTypeName",
        DataValueField = Hre_VisaInfoModel.FieldNames.ID,
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRelativeType",
        StyleCss = "width:300px;",
        Value = Model == null ? string.Empty : Model.RelativeTypeID.ToString(),
    };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.RelativeTypeID, _RelativeType).Text(Model == null ? string.Empty : Model.RelativeTypeName))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div3">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Address)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.Address, "Width:300px;")
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div3">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Notes)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextAreaFor(model => model.Notes, "width:500px;height:100px;")
                                @Html.ValidationMessageFor(model => model.Notes, "width:500px;height:100px;")
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </div>
                    <div style="float:left">
                        <div>
                            <div class="FieldTitle200">
                                @Html.VnrLabelFor(mode => mode.DeclareFile)
                            </div>
                            <div class="FieldValue">
                                @{
    var DeclareFile = new CheckBoxBuilderInfo()
    {
    };
    if (Model != null)
    {
        if (Model.DeclareFile == true)
        {
            DeclareFile.Value = true;
        }
        else
        {
            DeclareFile.Value = false;
        }
    }

                                }
                                @Html.VnrCheckBoxFor(model => model.DeclareFile, DeclareFile)
                            </div>
                        </div>
                        <div id="Div_IsShow">
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.BirthCertificate)
                                </div>
                                <div class="FieldValue">
                                    @{
    var BirthCertificate = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.BirthCertificate == true)
        {
            BirthCertificate.Value = true;
        }
        else
        {
            BirthCertificate.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.BirthCertificate, BirthCertificate)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.HouseHold)
                                </div>
                                <div class="FieldValue">
                                    @{
    var HouseHold = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.HouseHold == true)
        {
            HouseHold.Value = true;
        }
        else
        {
            HouseHold.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.HouseHold, HouseHold)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.MarriageLicenses)
                                </div>
                                <div class="FieldValue">
                                    @{
    var MarriageLicenses = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.MarriageLicenses == true)
        {
            MarriageLicenses.Value = true;
        }
        else
        {
            MarriageLicenses.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.MarriageLicenses, MarriageLicenses)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.StudyingSchools)
                                </div>
                                <div class="FieldValue">
                                    @{
    var StudyingSchools = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.StudyingSchools == true)
        {
            StudyingSchools.Value = true;
        }
        else
        {
            StudyingSchools.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.StudyingSchools, StudyingSchools)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.LaborDisabled)
                                </div>
                                <div class="FieldValue">
                                    @{
    var LaborDisabled = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.LaborDisabled == true)
        {
            LaborDisabled.Value = true;
        }
        else
        {
            LaborDisabled.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.LaborDisabled, LaborDisabled)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.NurturingObligations)
                                </div>
                                <div class="FieldValue">
                                    @{
    var NurturingObligations = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.NurturingObligations == true)
        {
            NurturingObligations.Value = true;
        }
        else
        {
            NurturingObligations.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.NurturingObligations, NurturingObligations)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.IDCardNo)
                                </div>
                                <div class="FieldValue">
                                    @{
    var IDCardNo = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.IDCardNo == true)
        {
            IDCardNo.Value = true;
        }
        else
        {
            IDCardNo.Value = false;
        }
    }
                                    }
                                    @Html.VnrCheckBoxFor(model => model.IDCardNo, IDCardNo)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Relative", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-Relative", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}
@{
    if (Model != null)
    {
        <script>
             $(document).ready(function () {
                 debugger;
                 var _DeclareFile = '@Model.DeclareFile';
                 if (_DeclareFile == "True") {
                     $("#Div_IsShow").show();
                 }
                 else
                 {
                     $("#Div_IsShow").hide();
                 }
             });
        </script>
    }
}
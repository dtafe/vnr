@using HRM.Infrastructure.Utilities;
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models

@model Hre_WorkHistoryModel


@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ProfileID = Guid.Empty;
    IList<SelectListItem> listLaborType = Enum.GetValues(typeof(EnumDropDown.LaborType))
   .Cast<EnumDropDown.LaborType>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();
    IList<SelectListItem> listJRType = Enum.GetValues(typeof(EnumDropDown.JRType))
 .Cast<EnumDropDown.JRType>()
 .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
 .ToList();

    IList<SelectListItem> listStatus = Enum.GetValues(typeof(WorkHistoryStatus))
   .Cast<WorkHistoryStatus>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();

    IList<SelectListItem> listFormType = Enum.GetValues(typeof(EnumDropDown.FormType))
.Cast<EnumDropDown.FormType>()
.Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
.ToList();
    string aaa = ViewBag.profileID;
    if (!string.IsNullOrEmpty(aaa))
    {
        // ProfileID = Model.ProfileID;
        if (Model.ProfileID == Guid.Empty)
        {
            Model.ProfileID = ProfileID;
        }
    }
}
<script>
    $("#ProfileName").prop('disabled', true);
    $("#WorkHistoryInfo_ProfileName").val($("#profileNameView").text())
    //Gán profile id lại cho tất cả các form đư
    $("input[name=ProfileID]").val(SelectID);
    $(document).ready(function () {
        //
        @*if (ProfileID!=null)
        $('#@Html.HiddenFor(m=>m.ProfileID)').val(ProfileID);*@

        //$("#ProfileID").val($("#ID").val());
        //alert($("#ProfileID").val());

        $.ajax({
            url: '@_hrm_Hr_Service' + "Hre_GetData/GetDataByProfileID",
            data: { ProfileID: SelectID },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                if (data != null) {
                    debugger;
                    $("#PositionOld").val(data.JobTitleName);
                    $("#JobTitleOld").val(data.PositionName);
                }
            }
        });

    });
    SetFieldRequiredByScreenName('Hre_WorkHistory_Tab');



    @*function onSaveNew() {
        var dataCheck = data[''];

        if (CheckValidate(data)) {
            onSaveAndContinue($('#form_WorkHistory'), '@_hrm_Hr_Service', 'api/Hre_WorkHistory/', '@ConstantControlName.HRM_HR_WorkHistory_Grid_Name', '@ConstantControlName.HRM_HR_WorkHistory_PopUp_Name'); return false;

        }
    }*@

    function onSaveClose() {
        // if (CheckValidate(data)) {
        onSaveAndClose($('#form_WorkHistory'), '@_hrm_Hr_Service', 'api/Hre_WorkHistory/', '@ConstantControlName.HRM_HR_WorkHistory_Grid_Name', '@ConstantControlName.HRM_HR_WorkHistory_PopUp_Name'); return false;

        // }
    }
    function onSaveDataPopUp() {
        //if (CheckValidate(data)) {
        onlySave($('#form_WorkHistory'), '@_hrm_Hr_Service', 'api/Hre_WorkHistory/', '@ConstantControlName.HRM_HR_WorkHistory_Grid_Name'); return false;
        //  }
    }
    $("#ProfileName").prop('disabled', true);
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_WorkHistory" }))
{
    @Html.HiddenFor(model => model.WorkHistory_ID)

    if (Model != null)
    {
        @Html.HiddenFor(m => m.ProfileID)
    }
    else
    {
        @Html.Hidden("ProfileID", ProfileID)
    }

@*<div>
        <div class="FieldTitle150">
            @Html.VnrLabelForNoneIcon(mode => mode.ProfileID)
        </div>
        <div class="FieldValue">
            Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit
            @{
    IEnumerable valueProfile = new string[] { };
    if (Model != null)
    {
        valueProfile = new[] { new { valueProfileName = Model.ProfileName, ID = Model.ProfileID } };
    }
            }
            @{
    var _ProfileID = new MultiSelectBuilderInfo()
    {
        Name = "_ProfileID",
        DataTextField = "ProfileName",
        DataValueField = "ID",
        Url = @_hrm_Hr_Service + "Sal_GetData/GetMultiProfile",
        Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
        MaxSelectedItems = 1,
        Autobind = true,
        Value = valueProfile
    };
            }
            @Html.VnrMultiSelectFor(model => model.ProfileID, _ProfileID)
        </div>
    </div>*@
<table>
    <tbody>
        <tr><td colspan="3" style=""></td></tr>
        <tr>

            <td valign="top">
                <div class="hrm_box" style="width: 50%;">
                    <div style="display: block; float: left; width: 100%">
                        <div id="div2">
                            <div class="FieldTitle150" >
                                @Html.HiddenFor(mode => mode.ID)
                                @Html.HiddenFor(mode => mode.PositionOld)
                                @Html.HiddenFor(mode => mode.JobTitleOld)
                                @Html.VnrLabelFor(mode => mode.ProfileName)
                            </div>
                            <div class="FieldValue">
                                @{
                                         var _ProfileName = new TextBoxBuilderInfo()
                                         {
                                             Name = "WorkHistoryInfo_ProfileName",
                                             Disabled = true,
                                             CssStyle = "width:300px"
                                         };
                                         if (Model != null)
                                         {
                                             _ProfileName.Value = Model == null ? string.Empty : Model.ProfileName;
                                         }
                                }
                                @Html.VnrTextBoxFor(model => model.ProfileName, _ProfileName)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div>
                            <div class="FieldTitle150" >
                                @Html.VnrLabelForNoneIcon(model => model.OrganizationStructureID)
                            </div>
                            <div class="FieldValue">
                                @{
                                         var orgTreeView = new TreeViewDropdDownBuilderInfo()
                                         {
                                            
                                             SetFieldName = "OrganizationStructureID",
                                             IsShowCheckBox = false,
                                             Value = Model.OrgStructureName,
                                             SetFieldID = "OrganizationStructureID",
                                            Width = "200px",
                                         };
                                }
                                @Html.Partial("EditorTemplates/OrgTreeViewDropDown", orgTreeView)
                                @Html.HiddenFor(m => m.OrganizationStructureID)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150" >

                                @Html.VnrLabelForNoneIcon(mode => mode.JobTitleID)
                            </div>
                            <div class="FieldValue">
                                <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                                @{
                                         IEnumerable valueJobTitle = new string[] { };
                                         if (Model != null)
                                         {
                                             valueJobTitle = new[] { new { JobTitleName = Model.JobTitleName, ID = Model.JobTitleID } };
                                         }
                                }
                                @{
                                         var _JobTitleID = new MultiSelectBuilderInfo()
                                         {
                                             Width = 300,
                                             Name = "_JobTitleID",
                                             DataTextField = "JobTitleName",
                                             DataValueField = "ID",
                                             Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiJobTitle",
                                             Placeholder = ConstantDisplay.HRM_HR_SelectJobTitle.TranslateString(),
                                             MaxSelectedItems = 1,
                                             Value = valueJobTitle
                                         };
                                }
                                @Html.VnrMultiSelectFor(model => model.JobTitleID, _JobTitleID)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150" >

                                @Html.VnrLabelForNoneIcon(mode => mode.PositionID)
                            </div>
                            <div class="FieldValue">
                                <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                                @{
                                         IEnumerable valuePosition = new string[] { };
                                         if (Model != null)
                                         {
                                             valuePosition = new[] { new { PositionName = Model.PositionName, ID = Model.PositionID } };
                                         }
                                }
                                @{
                                         var _PositionID = new MultiSelectBuilderInfo()
                                         {
                                             Width = 300,
                                             Name = "_PositionID",
                                             DataTextField = "PositionName",
                                             DataValueField = "ID",
                                             Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
                                             Placeholder = ConstantDisplay.HRM_HR_SelectPostion.TranslateString(),
                                             MaxSelectedItems = 1,
                                             Value = valuePosition
                                         };
                                }
                                @Html.VnrMultiSelectFor(model => model.PositionID, _PositionID)
                            </div>
                        </div>

                        <div>
                            <div class="FieldTitle150" >
                                @{
                                    if (Model != null)
                                    {
                                        @Html.HiddenFor(m => m.ProfileID)
                                    }
                                    else
                                    {
                                        @Html.Hidden("ProfileID", ProfileID)
                                    }
                                }
                                @Html.VnrLabelFor(mode => mode.DateEffective)
                            </div>

                            <div class="FieldValue">
                                @{
                                         if (Model.DateEffective == DateTime.MinValue)
                                         {
                                             Model.DateEffective = DateTime.Now;
                                         }
                                         var dateEffective = new DatePickerBuilderInfo()
                                         {
                                             Name = "WorkHistoryInfo1_DateEffective",

                                         };
                                }
                                @Html.VnrDatePickerFor(model => model.DateEffective, dateEffective)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150" >
                                @Html.VnrLabelForNoneIcon(model => model.Status)
                            </div>
                            <div class="FieldValue">
                                @{
                                         var ddlStatus = new DropDownListBuilderInfo()
                                         {
                                             StyleCss = "width:300px",
                                             DataTextField = "Text",
                                             DataValueField = "Value",
                                             BindTo = listStatus
                                         };
                                }
                                @Html.VnrDropDownListFor(model => model.Status, ddlStatus)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150" >
                                @Html.VnrLabelForNoneIcon(model => model.FormType)
                            </div>
                            <div class="FieldValue">
                                @{
                                         var ddlFormType = new DropDownListBuilderInfo()
                                         {
                                             StyleCss = "width:300px",
                                             DataTextField = "Text",
                                             DataValueField = "Value",
                                             BindTo = listFormType
                                         };
                                }
                                @Html.VnrDropDownListFor(model => model.FormType, ddlFormType)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150" >
                                @Html.VnrLabelFor(mode => mode.UserApprove)
                            </div>
                            <div class="FieldValue">
                                @{
                                         var _UserApprove = new ComboBoxBuilderInfo()
                                           {
                                               
                                               DataTextField = "UserLogin",
                                               StyleCss = "Width: 300px",
                                               DataValueField = "UserLogin",
                                               FilterType = FilterType.Contains,
                                               Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUser",
                                               Value = Model == null ? string.Empty : Model.UserApprove
                                           };
                                }
                                @Html.VnrComboBoxFor(model => model.UserApprove, _UserApprove).Text(Model == null ? string.Empty : Model.UserApprove)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="hrm_box" style="width: 50%;">
                    <div style="display: block; float: left; width: 100%">

                        <div class="DivContentTitleValue" id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.CostCentreID)
                            </div>
                            <div class="FieldValue">
                                @{
                                     IEnumerable valueCostCentre = new string[] { };
                                     if (Model != null)
                                     {
                                         valueCostCentre = new[] { new { CostCentreName = Model.CostCentreName, ID = Model.CostCentreID } };
                                     }
                                }
                                @{
                                     var costCentreID = new DropDownListBuilderInfo()
                                     {
                                         DataTextField = "CostCentreName",
                                         DataValueField = "ID",
                                         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCostCentre",
                                         StyleCss = "Width: 300px",
                                         OptionLabel = ConstantDisplay.HRM_Category_SelectCostCentre.TranslateString(),
                                         Autobind = false
                                     };
                                }
                                @Html.VnrDropDownListFor(mode => mode.CostCentreID, costCentreID)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.LaborType)
                            </div>
                            <div class="FieldValue">
                                @{
                                     var ddlLaborType = new DropDownListBuilderInfo()
                                     {
                                         StyleCss = "Width: 300px",
                                         DataTextField = "Text",
                                         DataValueField = "Value",
                                         BindTo = listLaborType
                                     };
                                }
                                @Html.VnrDropDownListFor(model => model.LaborType, ddlLaborType)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.EmployeeTypeName)
                            </div>
                            <div class="FieldValue">
                                @{
                                     var _EmployeeType = new ComboBoxBuilderInfo()
                                      {
                                          DataTextField = "EmployeeTypeName",
                                          DataValueField = "ID",
                                          Url = _hrm_Hr_Service + "Cat_GetData/GetMultiEmployeeType",
                                          StyleCss = "width:300px;",
                                          Value = Model == null ? string.Empty : Model.EmployeeTypeID.ToString(),
                                      };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.EmployeeTypeID, _EmployeeType).Text(Model == null ? string.Empty : Model.EmployeeTypeName))
                            </div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.WorkLocation)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.WorkLocation, "Width: 300px")
                                @Html.ValidationMessageFor(model => model.WorkLocation)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.Supervisor)
                            </div>
                            <div class="FieldValue">
                                @{
                                     var _Supervisor = new ComboBoxBuilderInfo()
                                      {
                                          DataTextField = "ProfileName",
                                          StyleCss = "Width: 295px",
                                          DataValueField = "ProfileName",
                                          FilterType = FilterType.Contains,
                                          Url = _hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
                                          Value = Model == null ? string.Empty : Model.Supervisor
                                      };
                                }
                                @Html.VnrComboBoxFor(model => model.Supervisor, _Supervisor).Text(Model == null ? string.Empty : Model.Supervisor)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.JRType)
                            </div>
                            <div class="FieldValue">
                                @{
                                     var ddlJRType = new DropDownListBuilderInfo()
                                     {
                                         StyleCss = "Width: 300px",
                                         DataTextField = "Text",
                                         DataValueField = "Value",
                                         BindTo = listJRType
                                     };
                                }
                                @Html.VnrDropDownListFor(model => model.JRType, ddlJRType)
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.SalaryClassID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _SalaryClassName = new ComboBoxBuilderInfo()
                                     {
                                         DataTextField = "SalaryClassName",
                                         DataValueField = "ID",
                                         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiSalaryClass",
                                         StyleCss = "width:300px",
                                         Value = Model == null ? string.Empty : Model.SalaryClassID.ToString(),
                                     };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.SalaryClassID, _SalaryClassName).Text(Model == null ? string.Empty : Model.SalaryClassName))
                            </div>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td valign="top">
                <div id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Rromotion)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Rromotion, "width:800px;height:100px;")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.RequirCondit)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.RequirCondit, "width:800px;height:100px;")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Description, "width:800px;height:100px;")
                    </div>
                </div>
                <div id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Role)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Role, "width:800px;height:100px;")
                    </div>
                </div>

            </td>

        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150" >
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-WorkHistory", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-WorkHistory", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-WorkHistory", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
</table>
}
@using System.Collections
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.UI.Controls.Kendo

@model  HRM.Presentation.Evaluation.Models.Eva_SaleEvaluationModel

@{
    ViewBag.Title = "saleEvaluation";
    Layout = null;
    var _hrm_Eva_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var userId = Model == null ? Guid.Empty : Model.ID;
    var gridName = "gridSaleEvaluation";
    var windowName = "windowSaleEvaluation";

    var profileName = string.Empty;
    var profileId = Guid.Empty;
    if (ViewBag.profileId != null)
    {
        profileId = ViewBag.profileId;
    }
    if (ViewBag.profileName != null)
    {
        profileName = ViewBag.profileName;
    }
    
}

<script>
    var gridName = '@gridName';
    var windowName = '@windowName';
    var data = SetCharacteFieldRequired();
    
    function onSave() {
        onSaveAndContinue($('#form_cat_saleEvaluation'), '@_hrm_Eva_Service', 'api/Eva_SaleEvaluation/', 'gridSaleEvaluationOut', 'windowSaleEvaluationOut'); return false;
        return false;
    }
    function onSaveClose() {
        onSaveAndClose($('#form_cat_saleEvaluation'), '@_hrm_Eva_Service', 'api/Eva_SaleEvaluation/', 'gridSaleEvaluationOut', 'windowSaleEvaluationOut'); return false;
        return false;
    }
    function onSaveDataPopUp() {
        onlySave($('#form_cat_saleEvaluation'), '@_hrm_Eva_Service', 'api/Eva_SaleEvaluation/', 'gridSaleEvaluationOut', 'windowSaleEvaluationOut'); return false;
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_saleEvaluation" }))
{
    @Html.HiddenFor(model => model.ID)

      @Html.HiddenFor(model => model.ProfileID,profileId)
    <table>
        <tr>
            <td>
                @*<div id="dvProfileID">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ProfileID)
                    </div>
                    <div class="FieldValue">
                        @{
                            IEnumerable valueProfile = new string[] { };
                            valueProfile = new[]
                            {
                                new
                                {
                                    ProfileName = profileName,
                                    ID = profileId
                                }
                            };

                        var multiSelectProfileID = new MultiSelectBuilderInfo()
                        {
                            DataTextField = Hre_ProfileModel.FieldNames.ProfileName,
                            DataValueField = Hre_ProfileModel.FieldNames.ID,
                            Url = _hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                            Width = 300,
                            MaxSelectedItems = 1,
                            Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                            Value = valueProfile
                        };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.ProfileID, multiSelectProfileID)
                    </div>
                </div>*@

                <div id="dvSalesTypeID">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.SalesTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
                        var ddlSalesType = new DropDownListBuilderInfo()
                        {
                            Name = "SaleEvaluationInfo_SalesTypeID",
                            DataTextField = "SalesTypeName",
                            DataValueField = "ID",
                            Url = _hrm_Eva_Service + "Eva_GetData/GetMultiSalesType",
                            OptionLabel = ConstantDisplay.HRM_Evaluation_SalesType_Choose.TranslateString(),
                            StyleCss = "Width:300px",
                        };
                        }
                        @(Html.VnrDropDownListFor(mode => mode.SalesTypeID, ddlSalesType))
                    </div>
                </div>
                
                <div id="dvYear">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Year)
                    </div>
                    <div class="FieldValue">
                        @{
                        var dtYear = new DatePickerBuilderInfo()
                        {
                            StyleCss = "Width:120px",
                            Name = "SaleEvaluationInfo_Year"
                        };
                        }
                        @Html.VnrDatePickerFor(model => model.Year, dtYear).Format(ConstantFormat.HRM_Format_MonthYear)
                    </div>
                </div>
                
                <div id="dvTagetNumber">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.TagetNumber)
                    </div>
                    <div class="FieldValue">
                        @{
                         var targetNumber = new NumericTextBoxBuilderInfo<double>() {
                             StyleCss = "Width:150px",
                             Name = "SaleEvaluationInfo_TagetNumber"
                         };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.TagetNumber, targetNumber)
                    </div>
                </div>

                <div id="dvResultNumber">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ResultNumber)
                    </div>
                    <div class="FieldValue">
                        @{
    var resultNumber = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "Width:150px",
        
        Name = "SaleEvaluationInfo_ResultNumber"
                        };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.ResultNumber, resultNumber)
                    </div>
                </div>
                
                <div id="dvNote">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Note)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Note, "width:500px;height:100px;")
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-SaveEvaluationInfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-SaveEvaluationInfo", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-SaveEvaluationInfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}


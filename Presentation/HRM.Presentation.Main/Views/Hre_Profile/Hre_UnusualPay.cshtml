@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Attendance.Models

@using HRM.Presentation.Hr.Models
@using HRM.Presentation.Payroll.Models;
@using HRM.Infrastructure.Security;
@{
    Layout = null;
    ViewBag.Title = "Hre_UnusualPay";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    var profileID = Guid.Empty;
    if (Model != null)
    {
        profileID = Model.ID;
    }
}
<script type="text/javascript">
    function onDataBoundGrid() {
        
        SetStyleGrid('gridPayroll_UnusualPay');
    }
    function GetValueCompute() {
        var checkedNodes = [];
        return {
            CutOffDurationID: $('#CutOffDurationID').val(),
            OrgStructureID: SelectID,
        };
    }

    $("#btnCompute_UnusualPay").click(function () {
        if ($('#CutOffDurationID').val() == "") {
            window.ShowNotificationProcessor("Chưa Chọn Kỳ Lương !"); //Chưa Dịch!
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/ComputeAdvancePaymentByProfileID',
            data: GetValueCompute(),
            dataType: 'json',
            async: false,
            success: function (data) {
                
                IsActiveProgress = true;
                ShowProgressBar(data, 'gridPayroll_UnusualPay');
            },
            error: function (data) {
                window.ShowNotificationProcessor("Lỗi trong quá trình xử lý !");//Chưa Dịch!
                IsActiveProgress = false;
            }
        });
    });

    function filterFieldInfo(isExport) {
        var elementPara = {
            CutOffDurationID: $('#CutOffDurationID').val(),
            ProfileID: SelectID,
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenNameUnusualPay').val();
        }
        return elementPara;
    }

    $("#btnExport_UnusualPay").click(function () {
        var grid = $('#gridPayroll_UnusualPay').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        if ($('#ddlScreenNameUnusualPay').val() == "") {
            ShowNotificationProcessor("Vui lòng chọn mẫu báo cáo !");//Chưa dịch!
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/GetUnusualPayItemByIdProfile/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Att_TAMScanLog');

    });


</script>
@(Html.TextBox("txt_HiddenProfileCardHistory", null, new { style = "display: none" }))
<div style="padding-top:3px">
    <div class="commandToolBarWidge">
        <div class="GridTitle">
            @Html.VnrLabel(ConstantDisplay.Hre_UnusualPay.TranslateString())
        </div>
        <div style="float:right">
            <script>
                function GetScreenName() {
                    return {
                        screenName: '@screen'
                    };
                }
            </script>
            <div class="FieldValue" style="margin-top: 0;">
                @{
                    var screenName = new DropDownListBuilderInfo()
                    {
                        Name = "ddlScreenNameUnusualPay",
                        DataTextField = "ExportName",
                        DataValueField = "ID",
                        Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                        StyleCss = "width:200px;",
                        Data = "GetScreenName",
                    };
                }
                @Html.VnrDropDownList(screenName)

                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport_UnusualPay", Content = ConstantDisplay.HRM_Common_Export_BasicSalary_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCompute_UnusualPay", Content = ConstantDisplay.HRM_Payroll_Salary.TranslateString(), ImageUrl = ConstantPath.IconBtnCompute })
            </div>


        </div>
        <div class="clear"></div>
    </div>
    <div style=" width:100%;">
        <!--Khai báo các thông tin cho Grid-->
        @{
            string[] valueFields = new string[]
        {
            Sal_UnusualPayItemModel.FieldNames.Element,
         //   Sal_UnusualPayItemModel.FieldNames.UnusualPayItemName,
            Sal_UnusualPayItemModel.FieldNames.Amount,
            
        };
            Dictionary<string, int> sizeFields = new Dictionary<string, int>()
        {
            {Sal_UnusualPayItemModel.FieldNames.Element,130},
         //   {Sal_UnusualPayItemModel.FieldNames.UnusualPayItemName,130},
            {Sal_UnusualPayItemModel.FieldNames.Amount,120},
            

        };

            Dictionary<string, string> displayFields = new Dictionary<string, string>()
        {
            {Sal_UnusualPayItemModel.FieldNames.Element,ConstantDisplay.HRM_Payroll_UnusualPayItem_Element},
            //{Sal_UnusualPayItemModel.FieldNames.UnusualPayItemName,ConstantDisplay.HRM_Payroll_UnusualPayItem_UnusualPayItemName},
            {Sal_UnusualPayItemModel.FieldNames.Amount,ConstantDisplay.HRM_Payroll_UnusualPayItem_Amount},
            
        };

            var grid = new GridBuilderInfo
            {
                Name = "gridPayroll_UnusualPay",
                ValueFields = valueFields,
                SizeFields = sizeFields,
                DisplayFields = displayFields,
                ReadActionUrl = @_hrm_Hr_Service + "Sal_GetData/GetUnusualPayItemByIdProfile",
                ShowCheckbox = false,
                AutoBind = true,
                ShowEditIcon = false,
                EventDataBound = "onDataBoundGrid",
                ReadData = "filterFieldInfo_Reload",
                GridHeight = 550,
            };
            @(Html.VnrGrid<Sal_UnusualPayItemModel>(grid))
        }
    </div>
</div>
@{
    var valueFields1 = ",ProfileName,CodeEmp";
    for (int i = 0; i < valueFields.Count(); i++)
    {
        valueFields1 += "," + valueFields[i];
    }
}
<script>
    $(document).ready(function () {
        $("#valueFieldsGrid").val('@valueFields1');
    });
</script>
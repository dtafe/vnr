@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.Hr.Models
@using HRM.Infrastructure.Utilities

@using System.Collections


@model Hre_DependantModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
}
@{
    
    IList<SelectListItem> list = Enum.GetValues(typeof(EnumDropDown.Gender))
        .Cast<EnumDropDown.Gender>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
        .ToList();

    SelectList data = new SelectList(list, "Value", "Text");
}


<script>
    SetFieldRequired();
       
    $('#DeclareFile').bind('click', function (e) {
        if (this.checked) {
            $("#Div_IsShow").show();
        }
        else
        {
            $("#Div_IsShow").hide();
        }
    });
    $(document).ready(function () {
        $("#Div_IsShow").hide();
    });


    function onSave() {
        var DeclareFile = document.getElementById("DeclareFile");
        if (DeclareFile != null && DeclareFile.checked) {
            $("#DeclareFile").val("true");
        } else {
            $("#DeclareFile").val("false");
        }

        var BirthCertificate = document.getElementById("BirthCertificate");
        if (BirthCertificate != null && BirthCertificate.checked) {
            $("#BirthCertificate").val("true");
        } else {
            $("#BirthCertificate").val("false");
        }

        var HouseHold = document.getElementById("HouseHold");
        if (HouseHold != null && HouseHold.checked) {
            $("#HouseHold").val("true");
        } else {
            $("#HouseHold").val("false");
        }

        var MarriageLicenses = document.getElementById("HouseHold");
        if (MarriageLicenses != null && MarriageLicenses.checked) {
            $("#MarriageLicenses").val("true");
        } else {
            $("#MarriageLicenses").val("false");
        }

        var StudyingSchools = document.getElementById("StudyingSchools");
        if (StudyingSchools != null && StudyingSchools.checked) {
            $("#StudyingSchools").val("true");
        } else {
            $("#StudyingSchools").val("false");
        }

        var LaborDisabled = document.getElementById("LaborDisabled");
        if (LaborDisabled != null && LaborDisabled.checked) {
            $("#LaborDisabled").val("true");
        } else {
            $("#LaborDisabled").val("false");
        }

        var NurturingObligations = document.getElementById("NurturingObligations");
        if (NurturingObligations != null && NurturingObligations.checked) {
            $("#NurturingObligations").val("true");
        } else {
            $("#NurturingObligations").val("false");
        }

        var IDCardNo = document.getElementById("IDCardNo");
        if (IDCardNo != null && IDCardNo.checked) {
            $("#IDCardNo").val("true");
        } else {
            $("#IDCardNo").val("false");
        }


        var IsRegisterAtCompany = document.getElementById("IsRegisterAtCompany");
        if (IsRegisterAtCompany != null && IsRegisterAtCompany.checked) {
            $("#IsRegisterAtCompany").val("true");
        } else {
            $("#IsRegisterAtCompany").val("false");
        }

        onSaveAndContinue($('#form_DependantInfo'), '@_hrm_Hr_Service', 'api/Hre_Dependant/', '@ConstantControlName.HRM_gridHre_Dependant_Grid_Name', '@ConstantControlName.HRM_gridHre_Dependant_PopUp_Name');
        return false;
    }

    function onSaveClose() {
        var DeclareFile = document.getElementById("DeclareFile");
        if (DeclareFile != null && DeclareFile.checked) {
            $("#DeclareFile").val("true");
        } else {
            $("#DeclareFile").val("false");
        }

        var BirthCertificate = document.getElementById("BirthCertificate");
        if (BirthCertificate != null && BirthCertificate.checked) {
            $("#BirthCertificate").val("true");
        } else {
            $("#BirthCertificate").val("false");
        }

        var HouseHold = document.getElementById("HouseHold");
        if (HouseHold != null && HouseHold.checked) {
            $("#HouseHold").val("true");
        } else {
            $("#HouseHold").val("false");
        }

        var MarriageLicenses = document.getElementById("HouseHold");
        if (MarriageLicenses != null && MarriageLicenses.checked) {
            $("#MarriageLicenses").val("true");
        } else {
            $("#MarriageLicenses").val("false");
        }

        var StudyingSchools = document.getElementById("StudyingSchools");
        if (StudyingSchools != null && StudyingSchools.checked) {
            $("#StudyingSchools").val("true");
        } else {
            $("#StudyingSchools").val("false");
        }

        var LaborDisabled = document.getElementById("LaborDisabled");
        if (LaborDisabled != null && LaborDisabled.checked) {
            $("#LaborDisabled").val("true");
        } else {
            $("#LaborDisabled").val("false");
        }

        var NurturingObligations = document.getElementById("NurturingObligations");
        if (NurturingObligations != null && NurturingObligations.checked) {
            $("#NurturingObligations").val("true");
        } else {
            $("#NurturingObligations").val("false");
        }

        var IDCardNo = document.getElementById("IDCardNo");
        if (IDCardNo != null && IDCardNo.checked) {
            $("#IDCardNo").val("true");
        } else {
            $("#IDCardNo").val("false");
        }
        var IsRegisterAtCompany = document.getElementById("IsRegisterAtCompany");
        if (IsRegisterAtCompany != null && IsRegisterAtCompany.checked) {
            $("#IsRegisterAtCompany").val("true");
        } else {
            $("#IsRegisterAtCompany").val("false");
        }
        onSaveAndClose($('#form_DependantInfo'), '@_hrm_Hr_Service', 'api/Hre_Dependant/', '@ConstantControlName.HRM_gridHre_Dependant_Grid_Name', '@ConstantControlName.HRM_gridHre_Dependant_PopUp_Name');
        return false;
    }

    function onSaveDataPopUp() {
        var DeclareFile = document.getElementById("DeclareFile");
        if (DeclareFile != null && DeclareFile.checked) {
            $("#DeclareFile").val("true");
        } else {
            $("#DeclareFile").val("false");
        }

        var BirthCertificate = document.getElementById("BirthCertificate");
        if (BirthCertificate != null && BirthCertificate.checked) {
            $("#BirthCertificate").val("true");
        } else {
            $("#BirthCertificate").val("false");
        }

        var HouseHold = document.getElementById("HouseHold");
        if (HouseHold != null && HouseHold.checked) {
            $("#HouseHold").val("true");
        } else {
            $("#HouseHold").val("false");
        }

        var MarriageLicenses = document.getElementById("HouseHold");
        if (MarriageLicenses != null && MarriageLicenses.checked) {
            $("#MarriageLicenses").val("true");
        } else {
            $("#MarriageLicenses").val("false");
        }

        var StudyingSchools = document.getElementById("StudyingSchools");
        if (StudyingSchools != null && StudyingSchools.checked) {
            $("#StudyingSchools").val("true");
        } else {
            $("#StudyingSchools").val("false");
        }

        var LaborDisabled = document.getElementById("LaborDisabled");
        if (LaborDisabled != null && LaborDisabled.checked) {
            $("#LaborDisabled").val("true");
        } else {
            $("#LaborDisabled").val("false");
        }

        var NurturingObligations = document.getElementById("NurturingObligations");
        if (NurturingObligations != null && NurturingObligations.checked) {
            $("#NurturingObligations").val("true");
        } else {
            $("#NurturingObligations").val("false");
        }

        var IDCardNo = document.getElementById("IDCardNo");
        if (IDCardNo != null && IDCardNo.checked) {
            $("#IDCardNo").val("true");
        } else {
            $("#IDCardNo").val("false");
        }
        var IsRegisterAtCompany = document.getElementById("IsRegisterAtCompany");
        if (IsRegisterAtCompany != null && IsRegisterAtCompany.checked) {
            $("#IsRegisterAtCompany").val("true");
        } else {
            $("#IsRegisterAtCompany").val("false");
        }
        onlySave($('#form_DependantInfo'), '@_hrm_Hr_Service', 'api/Hre_Dependant/', '@ConstantControlName.HRM_gridHre_Dependant_Grid_Name');
        return false;
    }
</script>
<style>
    label {
        min-width: 100px;
    }
</style>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_DependantInfo" }))
{
 
        <table style="width:100%">
            <tr>
                <td valign="top">
                    <div style="float:left; width:500px">
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ProfileID)
                                @Html.HiddenFor(mode => mode.ID)
                            </div>
                            <div class="FieldValue">
                                @{
    IEnumerable valueProfile = new string[] { };
    if (Model != null)
    {
        valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
    }
                                }
                                @{
    var Profile = new MultiSelectBuilderInfo()
     {
         Width = 300,
         Name = "DependantInfo_ProfileID",
         DataTextField = Hre_ContractModel.FieldNames.ProfileName,
         DataValueField = Hre_ContractModel.FieldNames.ID,
         Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
         Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
         MaxSelectedItems = 1,
         Value = valueProfile
     };
                                }
                                @(Html.VnrMultiSelectFor(mode => mode.ProfileID, Profile))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div3">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DependantName)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.DependantName, "width:300px")
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabel(ConstantDisplay.HRM_HR_Dependant_IDNo.TranslateString())
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.IDNo, "width:300px")
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.CodeTax)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.CodeTax, "width:300px")
                            </div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateOfBirth)
                            </div>
                            <div class="FieldValue">
                                @{
    var dateOfBirth = new DatePickerBuilderInfo()
    {
        Name = "DependantInfo_DateOfBirth",
        StyleCss = "width:120px"
    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateOfBirth, dateOfBirth)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div5">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Gender)
                            </div>
                            <div class="FieldValue">
                                @{
    var gender = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        Name = "DependantInfo_Gender",
        BindTo = list,
        DataTextField = "Text",
        DataValueField = "Value"
    };
                                }
                                @Html.VnrDropDownListFor(model => model.Gender, gender)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div6">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.RelationID)
                            </div>
                            <div class="FieldValue">
                                @{
    var _RelativeTypeName = new ComboBoxBuilderInfo()
     {
         Name = "DependantInfo_RelationID",
         DataTextField = "RelativeTypeName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRelativeType",
         StyleCss = "width:300px;",
         Value = Model == null ? string.Empty : Model.RelationID.ToString(),
     };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.RelationID, _RelativeTypeName).Text(Model == null ? string.Empty : Model.RelativeTypeName))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div7">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.MonthOfEffect)
                            </div>
                            <div class="FieldValue">
                                @{
    var monthOfEffect = new DatePickerBuilderInfo()
    {
        //Format = ConstantFormat.HRM_Format_MonthYear
        StyleCss = "width:120px"
    };
                                }

                                @Html.VnrDatePickerFor(model => model.MonthOfEffect, monthOfEffect)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div8">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.MonthOfExpiry)
                            </div>
                            <div class="FieldValue">
                                @{
    var monthOfExpiry = new DatePickerBuilderInfo()
    {
        //Format = ConstantFormat.HRM_Format_MonthYear
        StyleCss = "width:120px"
    };
                                }
                                @Html.VnrDatePickerFor(model => model.MonthOfExpiry, monthOfExpiry)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div8">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.CompleteDate)
                            </div>
                            <div class="FieldValue">
                                @{
    var CompleteDate = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px"
    };
                                }
                                @Html.VnrDatePickerFor(model => model.CompleteDate, CompleteDate)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                    </div>
                    <div style="float:left">
                        <div>
                            <div class="FieldTitle200">
                                @Html.VnrLabelFor(mode => mode.DeclareFile)
                            </div>
                            <div class="FieldValue">
                                @{
    var DeclareFile = new CheckBoxBuilderInfo()
    {
    };
    if (Model != null)
    {
        if (Model.DeclareFile == true)
        {
            DeclareFile.Value = true;
        }
        else
        {
            DeclareFile.Value = false;
        }
    }

                                }
                                @Html.VnrCheckBoxFor(model => model.DeclareFile, DeclareFile)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle200">
                                @Html.VnrLabelFor(mode => mode.IsRegisterAtCompany)
                            </div>
                            <div class="FieldValue">
                                @{
    var _IsRegisterAtCompany = new CheckBoxBuilderInfo()
    {
    };
    if (Model != null)
    {
        if (Model.IsRegisterAtCompany == true)
        {
            _IsRegisterAtCompany.Value = true;
        }
        else
        {
            _IsRegisterAtCompany.Value = false;
        }
    }

                                }
                                @Html.VnrCheckBoxFor(model => model.IsRegisterAtCompany, _IsRegisterAtCompany)
                            </div>
                        </div>
                        <div id="Div_IsShow">
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.BirthCertificate)
                                </div>
                                <div class="FieldValue">
                                    @{
    var BirthCertificate = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.BirthCertificate == true)
        {
            BirthCertificate.Value = true;
        }
        else
        {
            BirthCertificate.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.BirthCertificate, BirthCertificate)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.HouseHold)
                                </div>
                                <div class="FieldValue">
                                    @{
    var HouseHold = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.HouseHold == true)
        {
            HouseHold.Value = true;
        }
        else
        {
            HouseHold.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.HouseHold, HouseHold)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.MarriageLicenses)
                                </div>
                                <div class="FieldValue">
                                    @{
    var MarriageLicenses = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.MarriageLicenses == true)
        {
            MarriageLicenses.Value = true;
        }
        else
        {
            MarriageLicenses.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.MarriageLicenses, MarriageLicenses)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.StudyingSchools)
                                </div>
                                <div class="FieldValue">
                                    @{
    var StudyingSchools = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.StudyingSchools == true)
        {
            StudyingSchools.Value = true;
        }
        else
        {
            StudyingSchools.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.StudyingSchools, StudyingSchools)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.LaborDisabled)
                                </div>
                                <div class="FieldValue">
                                    @{
    var LaborDisabled = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.LaborDisabled == true)
        {
            LaborDisabled.Value = true;
        }
        else
        {
            LaborDisabled.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.LaborDisabled, LaborDisabled)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.NurturingObligations)
                                </div>
                                <div class="FieldValue">
                                    @{
    var NurturingObligations = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.NurturingObligations == true)
        {
            NurturingObligations.Value = true;
        }
        else
        {
            NurturingObligations.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.NurturingObligations, NurturingObligations)
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle200">
                                    @Html.VnrLabelFor(mode => mode.IDCardNo)
                                </div>
                                <div class="FieldValue">
                                    @{
    var IDCardNo = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.IDCardNo == true)
        {
            IDCardNo.Value = true;
        }
        else
        {
            IDCardNo.Value = false;
        }
    }

                                    }
                                    @Html.VnrCheckBoxFor(model => model.IDCardNo, IDCardNo)
                                </div>
                            </div>
                        </div>
                   </div>
                </td>
            </tr>
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle150">

                        </div>
                        <div class="FieldValue">
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Dependant", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-Dependant", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-Dependant", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        </div>

                    </div>
                </td>
            </tr>

        </table>
        }
@{
    if (Model != null)
    {
         <script>
             $(document).ready(function () {
                 debugger;
                 var _DeclareFile = '@Model.DeclareFile';
                 if (_DeclareFile == "True") {
                     $("#Div_IsShow").show();
                 }
                 else
                 {
                     $("#Div_IsShow").hide();
                 }
             });
         </script>
    }
 }
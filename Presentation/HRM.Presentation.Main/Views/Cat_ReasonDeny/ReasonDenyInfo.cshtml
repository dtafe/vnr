@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models;
@model Cat_NameEntityModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    IList<SelectListItem> ilType = Enum.GetValues(typeof(EnumDropDown.EntityType))
        .Cast<EnumDropDown.EntityType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();
}
<script>
    //SetFieldRequiredByScreenName('Cat_ReasonDeny');
    SetFieldRequiredByScreenName('Cat_NameEntity_ReasonDeny');
    $(document).ready(function () {
        

    });
    function onSaveNew() {
        $("#ReasonDeny_NameEntityType2").val("E_ReasonDenyCV");
        $("#ReasonDeny_EnumType2").val("E_ReasonDenyCV");
        $("#ReasonDeny_Order_2").val($("#Order2").val());
        //if (!checkDuplicationCode()) {
        onSaveAndContinue($('#form_Cat_ReasonDeny'), '@_hrm_Hr_Service', 'api/Cat_ReasonDeny/', '@ConstantControlName.HRM_Category_ReasonDeny_Grid_Name', '@ConstantControlName.HRM_Category_ReasonDeny_PopUp_Name'); return false;
        // }
    }

    function onSaveClose() {
        $("#ReasonDeny_NameEntityType2").val("E_ReasonDenyCV");
        $("#ReasonDeny_EnumType2").val("E_ReasonDenyCV");
        $("#ReasonDeny_Order_2").val($("#Order2").val());
        // if (!checkDuplicationCode()) {
        onSaveAndClose($('#form_Cat_ReasonDeny'), '@_hrm_Hr_Service', 'api/Cat_ReasonDeny/', '@ConstantControlName.HRM_Category_ReasonDeny_Grid_Name', '@ConstantControlName.HRM_Category_ReasonDeny_PopUp_Name'); return false;
        // }
    }
    function onSaveDataPopUp() {
        $("#ReasonDeny_NameEntityType2").val("E_ReasonDenyCV");
        $("#ReasonDeny_EnumType2").val("E_ReasonDenyCV");
        $("#ReasonDeny_Order_2").val($("#Order2").val());
        // if (!checkDuplicationCode()) {
        onlySave($('#form_Cat_ReasonDeny'), '@_hrm_Hr_Service', 'api/Cat_ReasonDeny/', '@ConstantControlName.HRM_Category_ReasonDeny_Grid_Name'); return false;
        // }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_ReasonDeny" }))
{
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.NameEntityType, new { id = "ReasonDeny_NameEntityType2" })
    @Html.HiddenFor(model => model.EnumType, new { id = "ReasonDeny_EnumType2" })
    @Html.HiddenFor(model => model.Order, new { id = "ReasonDeny_Order_2" })
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
    var _Code = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "ReasonDeny_Code",
        Value = Model != null ? Model.Code : null
    };
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code, _Code)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.NameEntityName)
                    </div>
                    <div class="FieldValue">
                        @{
    var _NameEntityName = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "ReasonDeny_NameEntityName",
        Value = Model != null ? Model.NameEntityName : null
    };
                        }
                        @Html.VnrTextBoxFor(mode => mode.NameEntityName,_NameEntityName)
                    </div>
                </div>
               
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Description, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Cat_ReasonDeny", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-Cat_ReasonDeny", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-Cat_ReasonDeny", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Infrastructure.Security
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models;
@model Cat_UsualAllowanceModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    //var _hrm_Main_Web = ConstantPathWeb._hrm_Main_Web;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;


}
@{
    IList<SelectListItem> List_PayrollElement = Enum.GetValues(typeof(PayrollElement))
        .Cast<PayrollElement>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();
}

@Html.HiddenFor(m => m.ID)
<div class="VnRMain">
    <div class="contendSearchWidge">
        <div style="float:left; width:450px">
            <div id="div2">
                <label>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.Code, "width:200px;")
                    </div>
                </label>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <label>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.UsualAllowanceName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.UsualAllowanceName, "width:200px;")
                    </div>
                </label>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <label>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.IsAddToHourlyRate)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.IsAddToHourlyRate)
                    </div>
                </label>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <label>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.IsChargePIT)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.IsChargePIT)
                    </div>
                </label>
                <div style="clear: both;"></div>
            </div>
        </div>

        <div style="width:500px; display:block; float:left">
         
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.Comment)
                </div>
                <div class="FieldValue">
                    @Html.VnrTextAreaFor(mode => mode.Comment)
                </div>
                <div style="clear: both;"></div>
            </div>
        </div>


    </div>
</div>

<div class="VnRMain">
    <table class="table">
        <tr>
            <td style="width:350px;">
                <div id="TabsTrip_CatElement">
                    <ul>
                        <li class="k-state-active">Phần Tử Enum</li>@*Chưa Dịch!*@
                    </ul>
                    <div>
                        @{
                            //Thông tin hiển column hiển thị
                            var valueFields = new string[]
        {
            CatElementModel.FieldNames.ElementCode,
            CatElementModel.FieldNames.ElementName,
            CatElementModel.FieldNames.Formula,
            //CatElementModel.FieldNames.Cat_ElementType,
        };

                            //Set độ rộng cho từng column
                            var sizeFields = new Dictionary<string, int>()
        {
            {CatElementModel.FieldNames.ElementName, 400},
        };

                            //Thông tin hiển thị được dịch
                            var displayFields = new Dictionary<string, string>()
        {
            {CatElementModel.FieldNames.ElementName , ConstantDisplay.HRM_Category_Element_ElementName },
        };
                            var hiddenFields = new string[]
        {
            CatElementModel.FieldNames.ElementCode,
           // CatElementModel.FieldNames.ElementName,
            CatElementModel.FieldNames.Formula,
            //CatElementModel.FieldNames.Cat_ElementType,
        };

                            var grid = new GridBuilderInfo
                           {
                               Name = "Grid_Emun",
                               ValueFields = valueFields,
                               SizeFields = sizeFields,
                               HiddenFields = hiddenFields,
                               DisplayFields = displayFields,
                               ShowCheckbox = false,
                               ShowEditIcon = false,
                               GridHeight = 400,
                               AutoBind = true,
                               ReadActionUrl = _hrm_Hr_Service + "Cat_GetData/GetElementInEnum",

                           };
                        }

                        <!--Khởi tạo Grid-->
                        @(Html.VnrGrid<CatElementModel>(grid))
                    </div>
                </div>


            </td>
            <td style="width:30px;">
                <div style="height:30px;"></div>
                <div>
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnNext", Content = "", ImageUrl = ConstantPath.IconNext })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnPrev", Content = "", ImageUrl = ConstantPath.IconPrev })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnClear", Content = "", ImageUrl = ConstantPath.IconClear })
                </div>
            </td>
            <td style="width:700px;">
                <div style="margin-bottom:5px;">
                    <div>
                        @{
                            var ElementSearch = new MultiSelectBuilderInfo()
                            {
                                Name = "CatElementSearch",
                                BindTo = List_PayrollElement,
                                MaxSelectedItems = 1,
                                DataTextField = "Text",
                                DataValueField = "Value",
                                Width = 200,
                            };
                        }
                        @Html.VnrMultiSelect(ElementSearch)
                    </div>
                    <div>
                        @*@Html.VnrTextBox("CatElementSearch","width:200px")*@
                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "SelectFormula", Content = "Chọn", ImageUrl = ConstantPath.IconAddNewPath }) @*Chưa Dịch!*@
                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "CheckFormula", Content = "Kiểm Tra Công Thức", ImageUrl = ConstantPath.IconCheckError })
                    </div>
                </div>
                <div>
                    @Html.HiddenFor(m => m.Formula)
                    <div id="FormulaValue" class="k-textbox" style="width: 420px; height: 400px;" contenteditable="true">
                        @if (Model != null)
                        {
                            @Model.Formula
                        }
                    </div>

                </div>
            </td>
        </tr>
    </table>
</div>


<script type="text/javascript">
    //Init Tabstrip
    $("#TabsTrip_CatElement").kendoTabStrip({
        animation: { open: { effects: "fadeIn" } },
        @*contentUrls: [
                     '@__hrm_Main_Web' + 'Cat_Element/GridCatElement',
                        '@__hrm_Main_Web' + 'Cat_Element/GridCatElement?type=' + '@CatElementType.Attendance.ToString()',
                       '@__hrm_Main_Web' + 'Cat_Element/GridCatElement?type=' + '@CatElementType.Allowances.ToString()',
                       '@__hrm_Main_Web' + 'Cat_Element/GridCatElement?type=' + '@CatElementType.AllowancesOut.ToString()',
        ]*@
    }).data('kendoTabStrip');


    $(document).ready(function () {

        CloseHre_ProgressBar();
        

        //set value for Formula
        function AddItemFormula(value) {
            var Formula = $("#FormulaValue").html();
            if (value != "") {
                $("#FormulaValue").html(Formula + '[' + value + ']');
            }
        };

        //Chọn phầm tử vào formula
        $("#btnNext").click(function () {
            
            var index = $("#TabsTrip_CatElement").data("kendoTabStrip").select().index();

            var grid = $("#Grid_Emun").data("kendoGrid");

            var selectedItem = grid.dataItem(grid.select());

            if (selectedItem == null) {
                ShowNotificationProcessor("Vui lòng chọn phần tử !");//Chưa Dịch!
                return;
            }
            AddItemFormula(selectedItem.ElementCode);

        });

        //claer all formula
        $("#btnClear").click(function () {
            $("#FormulaValue").html("");
        });

        //Xóa 1 phần tử trong formula
        $("#btnPrev").click(function () {
            
            var formula = window.document.getElementById('FormulaValue').textContent;
            var value = window.document.getElementById('FormulaValue').textContent;
            var IsItem = false;//Kiểm tra xem phần tử cuối cùng là phần tử lương hay là số
            for (var i = formula.length - 1; i >= 0; i--) {
                
                if (i == formula.length - 1 && formula[i] == "]") {
                    IsItem = true;
                }
                if (IsItem == true && formula[i] == "[") {
                    value = value.substring(0, value.length - 1);
                    break;
                }
                if (IsItem == false && formula[i] == "]") {
                    break;
                }
                if (value == "") {
                    ShowNotificationProcessor("Hế phần tử !");//Chưa Dịch!
                    break;
                }
                value = value.substring(0, value.length - 1);
            }
            $("#FormulaValue").html(value);
        });

        //select value for multiple select
        $("#SelectFormula").click(function () {

            var multi = $("#CatElementSearch").data("kendoMultiSelect");

            AddItemFormula(multi.value().join(","));

            multi.value("");
            multi.input.blur();
        });

        //Check Is Formula
        $("#CheckFormula").click(function () {
            CheckFormula();
        });


        function InsertFormula(gridName) {
            var grid = $("#" + gridName).data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            

            AddItemFormula(selectedItem.ElementCode);
        };

  


        //Xử lý sự kiện dblclick cho các grid
        $("#Grid_Emun").on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('Grid_Emun');
        });
    });



</script>
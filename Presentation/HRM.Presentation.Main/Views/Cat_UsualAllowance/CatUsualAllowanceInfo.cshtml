@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Infrastructure.Security
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models;
@model Cat_UsualAllowanceModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    //var _hrm_Main_Web = ConstantPathWeb._hrm_Main_Web;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    IList<SelectListItem> IlEDType = Enum.GetValues(typeof(EDType)).Cast<EDType>().Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();
    IList<SelectListItem> IlFormula = Enum.GetValues(typeof(EFormula)).Cast<EFormula>().Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();

    var AllowanceID = Guid.Empty;

    if (Model != null)
    {
        AllowanceID = Model.ID;
    }
}

@*@{
    var windowHelp = new WindowBuilderInfo
    {
        Name = "windowHelp",
        Visible = false,
        LoadContentFrom = @_hrm_Main_Web + "Cat_UsualAllowance/Help",
    };
}

@{
    var windowUALevel = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_Category_UsualAllowanceLevel_PopUp_Name,
        Visible = false,

        LoadContentFrom = @_hrm_Main_Web + "Cat_UsualAllowanceLevel/CatUsualAllowanceLevelInfo",
    };
}
@(Html.VnrWindow(windowUALevel))

@{
    var windowUALevelError = new WindowBuilderInfo
    {
        Name = "windowUALevelError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = ConstantDisplay.MessageError,
        Content = "<br><br><center><b>" + ConstantDisplay.HRM_Sal_SaveBeforeDetails.TranslateString() + "</b></center>"
    };
}
@(Html.VnrWindow(windowUALevelError))*@



<script>
    //phụ cấp
    SetFieldRequired();

    function changeGrossAmount(e) {
        var number = $("#CatUsualAllowanceInfo_GrossAmount").val().replace(".00", "");
        $("#Formula").val(number);
    }

    function onSaveNew() {
        //if ($("#Formula").val().trim() == "")
        //{
        //    ShowNotificationProcessor("[Tiền Lương] Không thể bỏ trống.");
        //    return;
        //}
        ////if (!checkDuplicationCode()) {

        debugger;
        var _GrossAmount = $("#CatUsualAllowanceInfo_GrossAmount").val();
        if (_GrossAmount == '')
        {
            ShowNotificationProcessor('@ConstantDisplay.HRM_Payroll_BasicSalary_GrossAmount.TranslateString()'+'@ConstantDisplay.HRM_Common_NotEmtpy.TranslateString()')
            return;
        }
      

        onSaveAndContinue($('#form_Cat_UsualAllowanceInfo'), '@_hrm_Hr_Service', 'api/Cat_UsualAllowance/', '@ConstantControlName.HRM_Category_UsualAllowance_Grid_Name', '@ConstantControlName.HRM_Category_UsualAllowance_PopUp_Name'); return false;
        // }
    }

    function onSaveClose() {
        //if ($("#Formula").val().trim() == "") {
        //    ShowNotificationProcessor("[Tiền Lương] Không thể bỏ trống.");
        //    return;
        //}
        //  if (!checkDuplicationCode()) {
        debugger;
        var _GrossAmount = $("#CatUsualAllowanceInfo_GrossAmount").val();
        if (_GrossAmount == '') {
            ShowNotificationProcessor('@ConstantDisplay.HRM_Payroll_BasicSalary_GrossAmount.TranslateString()' + '@ConstantDisplay.HRM_Common_NotEmtpy.TranslateString()')
            return;
        }

        onSaveAndClose($('#form_Cat_UsualAllowanceInfo'), '@_hrm_Hr_Service', 'api/Cat_UsualAllowance/', '@ConstantControlName.HRM_Category_UsualAllowance_Grid_Name', '@ConstantControlName.HRM_Category_UsualAllowance_PopUp_Name'); return false;
        //  }
    }
    function onSaveDataPopUp() {
        //if ($("#Formula").val().trim() == "") {
        //    ShowNotificationProcessor("[Tiền Lương] Không thể bỏ trống.");
        //    return;
        //}
        //  if (!checkDuplicationCode()) {
        debugger;
        var _GrossAmount = $("#CatUsualAllowanceInfo_GrossAmount").val();
        if (_GrossAmount == '') {
            ShowNotificationProcessor('@ConstantDisplay.HRM_Payroll_BasicSalary_GrossAmount.TranslateString()' + '@ConstantDisplay.HRM_Common_NotEmtpy.TranslateString()')
            return;
        }

        onlySave($('#form_Cat_UsualAllowanceInfo'), '@_hrm_Hr_Service', 'api/Cat_UsualAllowance/', '@ConstantControlName.HRM_Category_UsualAllowance_Grid_Name'); return false;
        // }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_UsualAllowanceInfo" }))
{
      @Html.HiddenFor(model => model.ID)
     <table style="width:100%">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td valign="top">
                    <div style="overflow: hidden;">
                        <div style="display:block;">

                            <div style="float:left;">
                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.Code)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var _Code = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "CatUsualAllowanceInfo_Code"
    };
    if (Model != null)
    {
        _Code.Value = Model.Code == null ? string.Empty : Model.Code;
    }
                                        }

                                        @Html.VnrTextBoxFor(mode => mode.Code, _Code)
                                    </div>
                                </div>
                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.UsualAllowanceName)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var _UsualAllowanceName = new TextBoxBuilderInfo()
    {
        Name = "CatUsualAllowanceInfo_UsualAllowanceName",
        Width = 300,
    };
    if (Model != null)
    {
        _UsualAllowanceName.Value = Model.UsualAllowanceName == null ? string.Empty : Model.UsualAllowanceName;
    }
                                        }
                                        @Html.VnrTextBoxFor(mode => mode.UsualAllowanceName, _UsualAllowanceName)
                                    </div>
                                </div>
                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.IsChargePIT)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrCheckBoxFor(mode => mode.IsChargePIT)
                                    </div>
                                </div>
                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.IsAddToHourlyRate)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrCheckBoxFor(mode => mode.IsAddToHourlyRate)
                                    </div>
                                </div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(model => model.GrossAmount)
                                </div>
                                <div class="FieldValue">
                                    @{
    var number = new NumericTextBoxBuilderInfo<double>()
    {
        Name = "CatUsualAllowanceInfo_GrossAmount",
        StyleCss = "width:150px",
        Value = Model == null ? 0 : double.Parse(Model.Formula == "" ? "0" : Model.Formula),
    };
                                    }
                                    @Html.VnrNumericTextBoxFor(model => model.GrossAmount, number).Events(m => m.Change("changeGrossAmount"))
                                    @Html.HiddenFor(m => m.Formula)
                                </div>

                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Comment)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.Comment, "width:500px;height:100px;")
                                </div>
                            </div>
                        </div>

                    </div>
                </td>
            </tr>
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle150">
                        </div>
                        <div class="FieldValue">
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-UsualAllowanceLevel", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-UsualAllowanceLevel", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-UsualAllowanceLevel", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

}

@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models;
@model CatProductModel

@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
<script>
    SetFieldRequired();
    function onSaveNew() {
       // var dataCheck = data[''];
        
       // if (CheckValidate(data) && !checkDuplicationCode()) {
            onSaveAndContinue($('#form_cat_Product'), '@_hrm_Hr_Service', 'api/CatProduct/', '@ConstantControlName.HRM_Category_Product_Grid_Name', '@ConstantControlName.HRM_Category_Product_PopUp_Name'); return false;

       // }
    }

    function onSaveClose() {
      //  if (CheckValidate(data) && !checkDuplicationCode()) {
            onSaveAndClose($('#form_cat_Product'), '@_hrm_Hr_Service', 'api/CatProduct/', '@ConstantControlName.HRM_Category_Product_Grid_Name', '@ConstantControlName.HRM_Category_Product_PopUp_Name'); return false;

       // }
    }
    function onSaveDataPopUp() {
        
     //   if (CheckValidate(data)) {
           // if (!checkDuplicationCode()) {
                onlySave($('#form_cat_Product'), '@_hrm_Hr_Service', 'api/CatProduct/', '@ConstantControlName.HRM_Category_Product_Grid_Name'); return false;
           // }
       // }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_Product" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProductName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.ProductName,"width:300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
    var _Code = new TextBoxBuilderInfo() { 
          Width = 300, 
        Name = "CatProductInfo_Code"
    };
    if(Model != null){
        _Code.Value = Model == null ? string.Empty: Model.Code;
    }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code,_Code)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.ProductTypeID)
                    </div>
                    <div class="FieldValue">
                        <!--Xử lý gán trực tiếp dữ liệu cho Multi, không cần load dữ liệu từ database lên, giảm kết nối đến database khi edit-->
                        @{
    IEnumerable valueProductType = new string[] { };
    if (Model != null)
    {
        valueProductType = new[] { new { valueProductType = Model.ProductTypeName, ID = Model.ProductTypeID } };
    }
                        }
                        @{
    var _ProductTypeID = new MultiSelectBuilderInfo()
    {
        Name = "_ProductTypeID",
        DataTextField = "TypeName",
        DataValueField = "ID",
        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiProductType",
        Placeholder = ConstantDisplay.HRM_Category_Product_SelectProductType.TranslateString(),
        MaxSelectedItems = 1,
        Autobind = true,
        Value = valueProductType,
        Width = 300
    };
                        }
                        @Html.VnrMultiSelectFor(model => model.ProductTypeID, _ProductTypeID)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.BonusPerUnit)
                    </div>
                    @*<div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.BonusPerUnit)
                    </div>*@
                    <div class="FieldValue">
                        @{
    var BonusPerUnit = new NumericTextBoxBuilderInfo<double>()
 {
     Name = "CatProductInfo_BonusPerUnit",
     StyleCss = "width:150px",
     Format = ConstantFormat.HRM_Format_Money

 };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.BonusPerUnit, BonusPerUnit)

                        @{
    var CurrencyName = new ComboBoxBuilderInfo()
     {

         Name = "CatProductInfo_CurrencyName",
         DataTextField = "CurrencyName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
         StyleCss = "width:300px;",
         Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
     };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID, CurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                </div>

                @*<div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.CurrencyName)
                    </div>
                    <div class="FieldValue">
                        @{
    IEnumerable valueCurrency = new string[] { };
    if (Model != null)
    {
        valueCurrency = new[] { new { valueCurrencyName = Model.CurrencyName, ID = Model.CurrencyID } };
    }
                        }
                        @{
    var valueCurrencyID = new MultiSelectBuilderInfo
    {
        Name = "CatProductInfo_CurrencyID",
        DataTextField = "CurrencyName",
        DataValueField = "ID",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
        MaxSelectedItems = 1,
        Placeholder = ConstantDisplay.HRM_Category_SelectCurrency.TranslateString(),
        Autobind = true,
        Value = valueCurrency,
        Width = 200
    };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.CurrencyID, valueCurrencyID)
                    </div>
                </div>*@


                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.EffectiveDate)
                    </div>
                    <div class="FieldValue">
                        @{
    var EffectiveDate = new DatePickerBuilderInfo() { 
        StyleCss="width:120px"
    };
                        }
                        @Html.VnrDatePickerFor(model => model.EffectiveDate, EffectiveDate)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProductionTime)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextBoxFor(mode => mode.ProductionTime, "width: 300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Note)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Note, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Product", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-catProduct", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catProduct", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
   
    
}

<script type="text/javascript">
    $(document).ready(function () {
        document.getElementById("ProductName").focus();
    });

</script>
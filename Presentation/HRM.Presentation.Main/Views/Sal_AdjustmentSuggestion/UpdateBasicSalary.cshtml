@using System.Collections
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    string lstProfileIDs = "";
    //if (ViewData["lstProfileIDs"] != null)
    //{
    //    lstProfileIDs = ViewData["lstProfileIDs"].ToString();
    //}
}
@model Hre_ProfileTemp
<script>
    SetFieldRequiredByScreenName('Hre_ProfileTemp');
    var checkedNodes = [];

    function onSaveClose() {
        var result = true;
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Hre_GetData/ValidateUpdateBasicSalary/',
            data: queryStringToJSON(slpitQueryEntity($("#form_Hre_ProfileTemp").serialize() + "&SalaryClassName=" + $("#SalaryClassName").val() + "&BasicSalary=" + $("#BasicSalary").val() + "&AbilityTitle=" + $("#AbilityTitle").val() + "&GradePayrollID=" + $("#GradePayrollID").val() + "&GradeAttendanceID=" + $("#GradeAttendanceID").val())),
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data.ActionStatus != "Success") {
                    ShowNotificationProcessor(data.ActionStatus);
                    result = false;
                }
            }
        });

    };


    function onSaveApply() {
        onSaveClose();
        debugger;
        var strProfileID = "";
        var ProfileID = $('#@Html.FieldIdFor(model => model.ProfileID)').val() != null ? $('#@Html.FieldIdFor(model => model.ProfileID)').val().join(',') : $('#@Html.FieldIdFor(model => model.ProfileID)').val();
        checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        checkedNodes != null ? $('#@Html.FieldIdFor(model => model.OrgStructureID)').val(checkedNodes.join(',')) : null;
        $("#OrgStructureIDs").val(checkedNodes.join(','));


        var _dateHire = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateOfEffect").val());
        var _dateEndProbation = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateEndProbation").val());
        var result = true;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Hre_GetData/ValidateUpdateBasicSalary/',
            data: queryStringToJSON(slpitQueryEntity($("#form_Hre_ProfileTemp").serialize() + "&SalaryClassName=" + $("#SalaryClassName").val() + "&BasicSalary=" + $("#BasicSalary").val() )),
            dataType: 'json',
            async: false,
            success: function (data) {

                if (data.ActionStatus != "Success") {
                    ShowNotificationProcessor(data.ActionStatus);
                    result = false;
                }
            }
        });

        if (result == true) {

            //var ProfileIDs = $("#UpdatefileCandidate_ProfileIDs").val();
            //if (ProfileIDs != "") {
            //    ProfileIDs = ProfileIDs.join(',');
            //}
            //cập Nhật SalaryClassName,DateHire,DateEndProbation,OrgStructureID cho hre_Profile
            @*$.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + "Hre_GetData/UpdateSalaryClassNameForProfile/",
                data: { SalaryClassName: $("#SalaryClassName").val(), ProfileIDs: ProfileIDs, DateEndProbation: _dateEndProbation, DateHire: _dateHire, OrgStructureID: $("#OrgStructureID").val(), SalaryRankID: $("#SalaryRankID").val(), WorkPlaceID: $("#WorkPlaceID").val(), ContractTypeID: $("#ContractTypeID").val() },
                dataType: 'json',
                success: function (data) {
                }


            });*@

            if (ProfileID == null) {
                ProfileID = "";
            } 






            debugger;
            //Tạo Mới DateHire,BasicSalary,DateHire lưu vào bảng Sal_BasicSalary
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + "Sal_GetData/AddAdjustmentSuggestionForBasicSalary/",
                data: { ProfileIDs: ProfileID, BasicSalary: $("#BasicSalary").val(), DateHire: _dateHire, SalaryRankID: $("#SalaryRankID").val(), OrgStructureID: $("#OrgStructureIDs").val() },
                dataType: 'json',
                success: function (data) {
                }


            });
            //Tạo Mới ContractTypeID,BasicSalary,DateHire lưu vào bảng Hre_Contract
            @*$.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + "Hre_GetData/AddDataForContract/",
                data: { ProfileIDs: ProfileIDs, BasicSalary: $("#BasicSalary").val(), ContractTypeID: $("#ContractTypeID").val(), DateHire: _dateHire, SalaryRankID: $("#SalaryRankID").val() },
                dataType: 'json',
                success: function (data) {
                }
            });*@

            //Tạo Mới GradePayrollID,DateHire lưu vào bảng Sal_Grade
            @*$.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + "Sal_GetData/AddDataForGrade/",
                data: { ProfileIDs: ProfileIDs, GradePayrollID: $("#GradePayrollID").val(), DateHire: _dateHire },
                dataType: 'json',
                success: function (data) {
                }
            });*@
            //Tạo Mới GradeAttendanceID,DateHire lưu vào bảng Att_Grade
            @*$.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + "Att_GetData/AddDataForGrade/",
                data: { ProfileIDs: ProfileIDs, GradeAttendanceID: $("#GradeAttendanceID").val(), DateHire: _dateHire },
                dataType: 'json',
                success: function (data) {
                }
            });*@
            var window = $("#windowUpdateBasicSalary").data("kendoWindow");
            window.refresh().close();
            ReadGrid("gridSal_AdjustmentSuggestion");
        }
    };

    $(document).ready(function () {
         @{
             if (lstProfileIDs != string.Empty)
             {
                 <text>
                    setTimeout(function () {
                        $.ajax({
                            type: 'POST',
                            url: '@_hrm_Hr_Service' + "Hre_GetData/GetProfileNameByProfileID/",
                            data: { profileIds: '@lstProfileIDs' },
                            dataType: 'json',
                            async: false,
                            success: function (data) {
                                var dataSource = new kendo.data.DataSource();
                                var ItemsSelect = [];
                                for (var i = 0; i < data.length; i++) {
                                    dataSource.add({ ID: data[i].ID, ProfileName: data[i].ProfileName });
                                    ItemsSelect.push(data[i].ID);
                                }
                                var Profilemultiselect = $("#ProfileID").data("kendoMultiSelect");
                                if (Profilemultiselect != undefined) {
                                    Profilemultiselect.setDataSource(dataSource);
                                    Profilemultiselect.value(ItemsSelect);
                                }
                            },
                        });
                    }, 500);
                 </text>
             }
         }

        $("#SalaryClassName").prop("readonly", true);
        $("#BasicSalary").prop("readonly", true);
        $("#AbilityTitle").prop("readonly", true);
    });

    function ChangeSalaryRank() {
        showAjaxLoading();
        var ID = $("#SalaryRankID").val();
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Cat_GetData/GetDataOfSalaryRank/",
            data: { ID: ID },
            dataType: 'json',
            success: function (data) {
                $("#SalaryClassName").val(data.SalaryClassName);
                $("#BasicSalary").val(data.BasicSalary);
                //$("#AbilityTitle").val(data.AbilityTitle);
                hideAjaxLoading();
                if (data.SalaryClassName != '' || data.SalaryClassName != null) {
                    //GetGradePayrollAndGradeAttendanceByRank();
                }
            }
        });


    };
    // load Chế độ lương theo Rank( load thep Salaryclassname thực chất Code của SalaryClass )
    @*function GetGradePayrollAndGradeAttendanceByRank() {
        debugger;
        $.ajax({
            type: 'POST',
            data: { Rank: $("#SalaryClassName").val() },
            url: '@_hrm_Hr_Service' + 'Cat_GetData/GetGradePayrollAndGradeAttendanceByRank/',
            dataType: 'json',
            async: false,
            success: function (data) {
                debugger;
                if (data.GradePayrollID != '@Guid.Empty') {
                    $("#GradePayrollID").data("kendoComboBox").value(data.GradePayrollID);
                }
                else {
                    $("#GradePayrollID").data("kendoComboBox").value("");
                }
                if (data.GradeAttendanceID != '@Guid.Empty') {
                    $("#GradeAttendanceID").data("kendoComboBox").value(data.GradeAttendanceID);
                }
                else {
                    $("#GradeAttendanceID").data("kendoComboBox").value("");
                }
            }
        })
    };*@
    function ChangeContractType() {
        var ContractTypeID = $("#ContractTypeID").val();
        if (ContractTypeID != "") {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + "Cat_GetData/GetMonthOfDateEndProbation/",
                data: { ContractTypeID: ContractTypeID },
                dataType: 'json',
                success: function (data) {
                    $("#DateEndProbation").val(data);
                }
            });
        }
    };

    $("input[name=IsRank]").on('change', function () {
        debugger;
        var orderNumber = $("#UpdateBasicSalry_OrderNumber").val();
        var radioItem = $("input[name=IsRank]");
        for (var i = 0; i < radioItem.length; i++) {
            debugger;
            if (radioItem[i].checked) {
               
                if (orderNumber == "")
                {
                    alert(1);
                    return;
                }
                radioItem[i].value = true;
                if (radioItem[i].value = true) {
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + "Cat_GetData/GetDataRankByOrderNumber/",
                        data: { OrderNumber: orderNumber },
                        dataType: 'json',
                        success: function (data) {
                            debugger;
                            var _comboRankDetail = $("#SalaryRankID").data("kendoComboBox");
                            $("#SalaryClassName").val(data.SalaryClassName);
                            $("#BasicSalary").val(data.SalaryStandard);
                            _comboRankDetail.value(data.ID);

                        }
                    });
                } 
                
                
            }
            else {
                if (orderNumber == "") {
                    alert(2);
                    return;
                }
                radioItem[i].value = false;
                if (radioItem[i].value = true)
                {
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + "Cat_GetData/GetDataRankDetailByOrderNumber/",
                        data: { OrderNumber: orderNumber, rankCode: $("#SalaryClassName").val() },
                        dataType: 'json',
                        success: function (data) {
                            debugger;
                            var _comboRankDetail = $("#SalaryRankID").data("kendoComboBox");
                            $("#SalaryClassName").val(data.SalaryClassName);
                            $("#BasicSalary").val(data.SalaryStandard);
                            _comboRankDetail.value(data.ID);

                        }
                    });
                }
                
            }
        }
    });
</script>


<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Hre_ProfileTemp" }))
{
    <div style="width:100%">
        <table>
            <tr>
                <td>
                    <div style="display:block">
                        @Html.HiddenFor(model => model.DateEndProbation)
                        @(Html.HiddenFor(model => model.ProfileIDs))
                        @(Html.HiddenFor(model => model.OrgStructureIDs))
                        <div style="float:left; width:400px">
                            <div id="div1">
                                <div class="FieldTitle150">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Rec_Interview_CandidateName.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @{
                                        IEnumerable valuepro = new string[] { };
                                        if (Model != null)
                                        {
                                            valuepro = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
                                        }
                                    }
                                    @{
                                        var Profiles = new MultiSelectBuilderInfo()
                                         {
                                             //Name = "UpdatefileCandidate_ProfileIDs",
                                             DataTextField = "ProfileName",
                                             DataValueField = "ID",
                                             Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                             //Autobind = true,
                                             ServerFiltering=false,
                                             Value = valuepro
                                         };
                                    }
                                    @Html.ChooseEmpOrOrgFor(mode => mode.ProfileID, Profiles, _hrm_Hr_Service + "Att_GetData/GetProfileByOrgId")
                                    @*@(Html.VnrMultiSelectFor(mode => mode.ProfileIDs, Profiles))*@
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabel("Rank Detail")
                                </div>
                                <div class="FieldValue">
                                    
                                    @{
                                        var SalaryRankID = new ComboBoxBuilderInfo()
                                            {
                                                Name = "SalaryRankID",
                                                DataTextField = "SalaryRankName",
                                                DataValueField = "ID",
                                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiSalaryRankAndRankDetail",
                                                StyleCss = "width:150px;",
                                                EventChange = "ChangeSalaryRank",
                                            };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.SalaryRankID, SalaryRankID))
                                </div>
                            </div>

                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabel("Rank")
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.SalaryClassName)

                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabel("Basic Salary")
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.BasicSalary)

                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.DateOfEffect)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var DateHire = new DatePickerBuilderInfo()
                                        {
                                            // Format=ConstantFormat.HRM_Format_DayMonthYear,
                                            //    Value=DateTime.Now.ToString("dd/MM/yyyy")
                                        };

                                    }
                                    @Html.VnrDatePickerFor(mode => mode.DateOfEffect, DateHire)
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div id="div1">
                                <div class="FieldTitle150">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Tra_Course_Score.ToString().TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @{
                                    var MinimumScore = new NumericTextBoxBuilderInfo<int>()
                                       {
                                           Name = "UpdateBasicSalry_OrderNumber",
                                           StyleCss = "width:92px",
                                        
                                           Format = ConstantFormat.HRM_Format_Int,
                                       };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.OrderNumber, MinimumScore))

    
                                </div>
                            </div>

                            <div>
                                <div class="FieldTitle150">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_Training_Title.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrRadioButtonFor(mode => mode.IsRank, "IsRank")
                                    @Html.VnrLabelFor(mode => mode.IsRank)

                                    @Html.VnrRadioButtonFor(mode => mode.IsRankDetail, "IsRank")
                                    @Html.VnrLabelFor(mode => mode.IsRankDetail)
                                </div>
                            </div>
                   
                    </div>
                </td>
            </tr>
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle">
                        </div>
                        <div class="FieldValue">
                            @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-ProfileTemp", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveApply", Name = "save-apply-ProfileTemp", Content = ConstantAction.HRM_Common_SaveAndApply.TranslateString(), ImageUrl = ConstantPath.IconApprovePath })
                        </div>
                    </div>
                </td>
            </tr>
        </table>
    </div>
}

<script>
    var _GradeAttendanceID = $('#GradeAttendanceID').data("kendoComboBox");
    var _GradePayrollID = $('#GradePayrollID').data("kendoComboBox");
    _GradeAttendanceID.readonly();
    _GradePayrollID.readonly();
</script>
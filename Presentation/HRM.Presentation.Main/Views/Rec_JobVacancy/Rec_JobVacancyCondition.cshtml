@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models;
@model Rec_JobConditionModel

@{
    Layout = null;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var ID = Model != null ? Model.ID : Guid.Empty;
    if (Model != null)
    {
        try
        {
            Model.Value1_Number = double.Parse(Model.Value1);
        }
        catch
        {
        }
        try
        {
            Model.Value2_Number = double.Parse(Model.Value2);
        }
        catch
        {
        }

        if (Model.Value1 == "true")
        {
            Model.Value1_bool = true;
        }


    }
    Guid? JobVacancyID = Guid.Empty;
    if (ViewData["JobVacancyID"] != null)
    {
        JobVacancyID = Common.ConvertToGuid(ViewData["JobVacancyID"].ToString());
    }
    IList<SelectListItem> lstConditionBrand = Enum.GetValues(typeof(ConditionBrand))
      .Cast<ConditionBrand>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
      .ToList();

    IList<SelectListItem> lstEntityType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.EnumDropDown.EntityType))
      .Cast<HRM.Infrastructure.Utilities.EnumDropDown.EntityType>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
      .ToList();

    IList<SelectListItem> lstValueType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.ValueType))
    .Cast<HRM.Infrastructure.Utilities.ValueType>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();

    IList<SelectListItem> lstGender = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.EnumDropDown.GenderType))
      .Cast<HRM.Infrastructure.Utilities.EnumDropDown.GenderType>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();
    IList<SelectListItem> lstConditionName = Enum.GetValues(typeof(ConditionName))
      .Cast<ConditionName>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();

}
<script>
    SetFieldRequiredByScreenName('Rec_JobCondition');
    $(document).ready(function () {
        $(".number1").hide();
        $(".number2").hide();
        $(".bool").hide();
        $(".Gender").hide();
        $(".Disease").hide();
        ChangeAppear();
    });
    
    function AddJobCavancy() {
        if ('@JobVacancyID' != '@Guid.Empty') {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + "Rec_GetData/AddJobCavancy/",
                data: { JobVacancyID: '@JobVacancyID', ConditionID: $("#ID").val() },
                dataType: 'json',
                success: function (e) {
                    var grid = $("#gridJobCondition").data("kendoGrid");
                    grid.dataSource.read();
                }
            });
        }
        else {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + "Rec_GetData/AddJobCavancy/",
                data: { JobVacancyID: $("#JobVacancyID").val(), ConditionID: $("#ID").val() },
                dataType: 'json',
                success: function (e) {
                    var grid = $("#gridJobCondition").data("kendoGrid");
                    grid.dataSource.read();
                }
            });
        }
    }

    function onSaveNew1() {
        SetValue();
        onSaveAndContinue($('#form_Rec_JobCondition'), '@_hrm_Hre_Service', 'api/Rec_JobCondition/', '@ConstantControlName.HRM_Rec_JobCondition_Grid_Name', '@ConstantControlName.HRM_Rec_JobCondition_PopUp_Name');
       AddJobCavancy();
        //ReadGrid('@ConstantControlName.HRM_Rec_JobCondition_Grid_Name');

        return false;
    }

    function onSaveClose1() {
        SetValue();
        onSaveAndClose($('#form_Rec_JobCondition'), '@_hrm_Hre_Service', 'api/Rec_JobCondition/', '@ConstantControlName.HRM_Rec_JobCondition_Grid_Name', '@ConstantControlName.HRM_Rec_JobCondition_PopUp_Name');
       AddJobCavancy();
        // ReadGrid('@ConstantControlName.HRM_Rec_JobCondition_Grid_Name');
        return false;
    }
    function onSaveDataPopUp1() {
        SetValue();
        onlySave($('#form_Rec_JobCondition'), '@_hrm_Hre_Service', 'api/Rec_JobCondition/', '@ConstantControlName.HRM_Rec_JobCondition_Grid_Name');
        AddJobCavancy();
        // ReadGrid('@ConstantControlName.HRM_Rec_JobCondition_Grid_Name');
        return false;
    }
   

    function SetValue() {
        var ConditionName = $("#ConditionName").val();
        if (ConditionName == "E_HEIGHT" || ConditionName == "E_WEIGHT" || ConditionName == "E_LEVELEYES" || ConditionName == "E_DURATIONFAILPREVIOUS" || ConditionName == "E_TOAGE" || ConditionName == "E_FORMAGE") {

            $("#Value1").val($("#Value1_Number").val());
            $("#Value2").val($("#Value2_Number").val());

        }
        if (ConditionName == "E_ISTERMINATEINCOMPANY") {

            $("#Value1").val($("#Value1_bool").val());
        }
        if (ConditionName == "E_DISEASEIDS") {
            $("#Value1").val($("#Disease").val());
        }
        if (ConditionName == '@ConditionName.E_GENDER.ToString()') {
            $("#Value1").val($("#Gender").val());
        }
    }
    function ChangeAppear()
    {
        
        var ConditionName = $("#ConditionName").val();
        if (ConditionName == "E_HEIGHT" || ConditionName == "E_WEIGHT" || ConditionName == "E_LEVELEYES" || ConditionName == "E_DURATIONFAILPREVIOUS" || ConditionName == "E_TOAGE" || ConditionName == "E_FORMAGE") {
            $(".number1").show();
            $(".number2").show();
            $(".bool").hide();
            $(".Gender").hide();
            $(".Disease").hide();
            $("#Value1").val($("#Value1_Number").val());
            $("#Value2").val($("#Value2_Number").val());

        }
        if (ConditionName == "E_ISTERMINATEINCOMPANY") {
            $(".number1").hide();
            $(".number2").hide();
            $(".bool").show();
            $(".Gender").hide();
            $(".Disease").hide();
            $("#Value1").val($("#Value1_bool").val());
        }
        if (ConditionName == "E_DISEASEIDS") {
            $(".number1").hide();
            $(".number2").hide();
            $(".bool").hide();
            $(".Gender").hide();
            $(".Disease").show();
            $("#Value1").val($("#Disease").val());
        }
        if (ConditionName == '@ConditionName.E_GENDER.ToString()') {
            $(".number1").hide();
            $(".number2").hide();
            $(".bool").hide();
            $(".Gender").show();
            $(".Disease").hide();
            $("#Value1").val($("#Gender").val());
        }

    }
    function SelectChangeConditionName() {
        
        ChangeAppear();
       
    }
</script>
Form dùng cho edit và update
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Rec_JobCondition" }))
{
    @Html.HiddenFor(model => model.ID)

    <table>
        <tr>
            <td>
                <div style="display:block">
                    <fieldset>
                        <legend>
                            @ConstantDisplay.HRM_Rec_JobCondition_ConditionName.TranslateString()
                        </legend>
                        <div>
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Code)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(mode => mode.Code)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle">
                                @Html.HiddenFor(mode => mode.Value1)
                                @Html.HiddenFor(mode => mode.Value2)
                                @Html.VnrLabelFor(mode => mode.ConditionName)
                            </div>
                            <div class="FieldValue">
                                @{
    var _ConditionName = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = lstConditionName,
        Value = Model != null ? Model.ConditionName : null,
        EventChange = "SelectChangeConditionName"
    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.ConditionName, _ConditionName)
                            </div>

                        </div>


                        <div class="number1">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Value1_Number = new NumericTextBoxBuilderInfo<double>()
{
    Name = "Value1_Number",
    Value = Model != null && Model.Value1_Number.HasValue ? Model.Value1_Number.Value : 0

};

                                }
                                @Html.VnrNumericTextBoxFor(mode => mode.Value1_Number, _Value1_Number)

                            </div>

                        </div>

                        <div class="bool">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Value1_bool = new CheckBoxBuilderInfo()
{
    Id = "Value1_bool",
    Value = Model != null && Model.Value1_bool.HasValue ? Model.Value1_bool.Value : false
};

                                }
                                @Html.VnrCheckBoxFor(mode => mode.Value1_bool, _Value1_bool)

                            </div>

                        </div>


                        <div class="Gender">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _gender = new DropDownListBuilderInfo()
    {
        Name = "Gender",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = lstGender,
        Value = Model != null ? Model.Value1 : null,
    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.Value1, _gender)
                            </div>

                        </div>

                        <div class="Disease">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var Disease = new MultiSelectBuilderInfo()
{
    Name = "Disease",
    DataTextField = "DiseaseName",
    DataValueField = "ID",
   // Url = _hrm_Rec_Service + "Rec_GetData/GetMultiRecruitmentCampaign",
    Placeholder = ConstantDisplay.HRM_Rec_JobCondition_SelectDiseases.TranslateString(),
    Width = 200
};
                                }
                                @Html.VnrMultiSelectFor(mode => mode.Value1, Disease)
                            </div>

                        </div>
                        <div class="number2">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Value2)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Value2_Number = new NumericTextBoxBuilderInfo<double>()
{
    Name = "Value2_Number",

};

                                }
                                @Html.VnrNumericTextBoxFor(mode => mode.Value2_Number, _Value2_Number)

                            </div>

                        </div>

                        <div>
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.ConditionBrand)
                            </div>
                            <div class="FieldValue">
                                @{
    var _ConditionBrand = new DropDownListBuilderInfo()
{
    DataTextField = "Text",
    DataValueField = "Value",
    BindTo = lstConditionBrand,
    Value = Model != null ? Model.ConditionBrand : null,
};
                                }
                                @Html.VnrDropDownListFor(mode => mode.ConditionBrand, _ConditionBrand)
                            </div>

                        </div>
                        <div>
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.ValueType)
                            </div>
                            <div class="FieldValue">
                                @{
    var _ValueType = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = lstValueType,
        Value = Model != null ? Model.ValueType : null,
    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.ValueType, _ValueType)
                            </div>

                        </div>
                        <div>
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Note)
                            </div>
                            <div class="FieldValue">

                                @Html.VnrTextAreaFor(mode => mode.Note)
                            </div>

                        </div>
                    </fieldset>
                </div>


            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp1", Name = "save-JobCondition", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew1", Name = "save-New-JobCondition", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose1", Name = "save-close-JobCondition", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>


}

@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using System.Collections
@using HRM.Infrastructure.Security
@using HRM.Presentation.Recruitment.Models
@model Rec_JobConditionSearchModel

@{
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    Layout = null;
    Guid JobVacancyID = Guid.Empty;
    if (ViewData["JobVacancyID"] != null)
    {
        JobVacancyID = Common.ConvertToGuid(ViewData["JobVacancyID"].ToString());
    }
  

}


<script>
    
    function filterFieldInfo() {
        return null;
       
    }
    function AddConditionIntoVacancy() {

        if ('@JobVacancyID' != '@Guid.Empty') {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + "Rec_GetData/AddConditionIntoVacancy/",
                data: { JobVacancyID: '@JobVacancyID', ConditionIDs: selectedIds.join(',') },
                dataType: 'json',
                success: function (e) {
                    var grid = $("#gridJobCondition").data("kendoGrid");
                    grid.dataSource.read();
                    selectedIds = [];
                    window.ShowNotificationProcessor("Success");
                }
            });
        }
        else {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hre_Service' + "Rec_GetData/AddConditionIntoVacancy/",
                data: { JobVacancyID: $("#JobVacancyID").val(), ConditionIDs: selectedIds.join(',') },
                dataType: 'json',
                success: function (e) {
                    var grid = $("#gridJobCondition").data("kendoGrid");
                    grid.dataSource.read();
                    selectedIds = [];
                    window.ShowNotificationProcessor("Success");
                }
            });
        }
    }
   
   

    function onSaveCloseConditionSelect() {
        
        if (selectedIds != "") {
            AddConditionIntoVacancy();
        }
        var window = $("#windowConditionSelect").data("kendoWindow");
        window.refresh().close();
    }

   
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Rec_ConditionSelect" }))
{
    <table>
        <tr>
            <td>
                <div style="display:block; padding-top:10px;">
                  
                    
                    <div style="width:850px;display: block">
                        <fieldset>
                            <legend>
                                @ConstantDisplay.HRM_Rec_JobCondition_SelectCondition.TranslateString()
                            </legend>

                            <div>
                                <!--Khai báo các thông tin cho Grid-->
                                @{

                            IList<SelectListItem> conditionName = Enum.GetValues(typeof(ConditionName)).Cast<ConditionName>()
                   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();

                            IList<SelectListItem> conditionBrand = Enum.GetValues(typeof(ConditionBrand))
                   .Cast<ConditionBrand>()
                   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
                   .ToList();

                            IList<SelectListItem> valueType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.ValueType))
                      .Cast<HRM.Infrastructure.Utilities.ValueType>()

                      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();

                            Dictionary<object, object[]> foreignKey = new Dictionary<object, object[]>()
        {
            {Rec_JobConditionModel.FieldNames.ConditionName,new object[]
               { "Value", "Text", conditionName, ConstantDisplay.HRM_Rec_JobCondition_ConditionName,""}},

                  {Rec_JobConditionModel.FieldNames.ConditionBrand,new object[]
               { "Value", "Text", conditionBrand, ConstantDisplay.HRM_Rec_JobCondition_ConditionBrand,""}},

                 {Rec_JobConditionModel.FieldNames.ValueType,new object[]
               { "Value", "Text", valueType, ConstantDisplay.HRM_Rec_JobCondition_ValueType,""}},
        };
                            string[] valueFields = new[]
        {

            Rec_JobConditionModel.FieldNames.Code,
            Rec_JobConditionModel.FieldNames.ConditionName,
            Rec_JobConditionModel.FieldNames.Value1,
            Rec_JobConditionModel.FieldNames.Value2,
            Rec_JobConditionModel.FieldNames.ConditionBrand,
            Rec_JobConditionModel.FieldNames.ValueType,
            Rec_JobConditionModel.FieldNames.Note,
        };

                            var sizeFields = new Dictionary<string, int>()
        {

            {Rec_JobConditionModel.FieldNames.Code,120},
            {Rec_JobConditionModel.FieldNames.ConditionName,120},
            {Rec_JobConditionModel.FieldNames.Value1,120},
            {Rec_JobConditionModel.FieldNames.Value2,120},
            {Rec_JobConditionModel.FieldNames.ConditionBrand,120},
            {Rec_JobConditionModel.FieldNames.ValueType,120},
            {Rec_JobConditionModel.FieldNames.Note,120},
        };

                            var filterable = new Dictionary<string, bool>()
        {
            {Rec_JobConditionModel.FieldNames.Code,true},
           {Rec_JobConditionModel.FieldNames.ConditionName,true},
            {Rec_JobConditionModel.FieldNames.Value1,true},
            {Rec_JobConditionModel.FieldNames.Value2,true},
            {Rec_JobConditionModel.FieldNames.ConditionBrand,true},
            {Rec_JobConditionModel.FieldNames.ValueType,true},
            {Rec_JobConditionModel.FieldNames.Note,true},
        };

                            var displayFields = new Dictionary<string, string>()
        {
            {Rec_JobConditionModel.FieldNames.Code,ConstantDisplay.HRM_Rec_JobCondition_Code},
            {Rec_JobConditionModel.FieldNames.ConditionName,ConstantDisplay.HRM_Rec_JobCondition_ConditionName},
            {Rec_JobConditionModel.FieldNames.Value1,ConstantDisplay.HRM_Rec_JobCondition_Value1},
            {Rec_JobConditionModel.FieldNames.Value2,ConstantDisplay.HRM_Rec_JobCondition_Value2},
            {Rec_JobConditionModel.FieldNames.ConditionBrand,ConstantDisplay.HRM_Rec_JobCondition_ConditionBrand},
            {Rec_JobConditionModel.FieldNames.ValueType,ConstantDisplay.HRM_Rec_JobCondition_ValueType},
            {Rec_JobConditionModel.FieldNames.Note,ConstantDisplay.HRM_Rec_JobCondition_Note},
        };

                            var grid = new GridBuilderInfo
                            {
                                Name = "GridConditionSelect",
                                ForeignKey = foreignKey,
                                ValueFields = valueFields,
                                SizeFields = sizeFields,
                                DisplayFields = displayFields,
                                Filterable = filterable,
                                AutoBind = true,
                                ShowEditButton=false,
                                ShowEditIcon=false,
                                GridHeight = 500,
                                ReadData = "filterFieldInfo",
                                ReadActionUrl = _hrm_Hre_Service + "Rec_GetData/GetJobConditionList/",
                            };
                                }

                                @(Html.VnrGrid<Rec_JobConditionModel>(grid))
                            </div>
                        </fieldset>
                    </div>

                </div>

            </td>

        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveCloseConditionSelect", Name = "save-close-ConditionSelect", Content = ConstantAction.HRM_Common_Add.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
                    </div>

                </div>
            </td>
        </tr>
    </table>
}


@using System.Collections
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models
@using HRM.Infrastructure.Security
@model Rec_JobVacancySearchModel
@{
    //ViewBag.Title = "Recl Level Index";
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    Layout = null;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    // string[] valueFields = null;
}
@Html.Hidden("Screen", screen)
@{
    IList<SelectListItem> lstType = Enum.GetValues(typeof(JobVacancyType))
       .Cast<JobVacancyType>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
       .ToList();
}

@{
    var windowJobVacancy = new WindowBuilderInfo
    {
        Name = "windowJobVacancy",
        Visible = false,
        //LoadContentFrom = @_hrm_Main_Web + "Rec_RecruitmentCampaign/RecruitmentCampaignInfo/",
    };
}
@(Html.VnrWindow(windowJobVacancy))

<script>

    var titleEditPopUpJobVacancy = '@Html.Raw(ConstantDisplay.HRM_Rec_JobVacancy_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUpJobVacancy = '@Html.Raw(ConstantDisplay.HRM_Rec_JobVacancy_PopUp_Create_Title.TranslateString())';
    var gridName = "gridJobVacancy";
    var windowName = "windowJobVacancy";
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    @*var gridName = '@ConstantControlName.HRM_grid_Rec_JobVacancy_Name';
    var windowName = '@ConstantControlName.HRM_grid_Rec_JobVacancy_PopUp_Name';*@
    var checkedNodes = [];
    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        var dataParameter = {
            DateStartFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateStartFrom").val()),
            DateStartTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateStartTo").val()),
            JobVacancyName: $('#@Html.FieldIdFor(model => model.JobVacancyName)').val(),
            Code: $('#@Html.FieldIdFor(model => model.Code)').val(),
            QuantityTo: $('#@Html.FieldIdFor(model => model.QuantityTo)').val() ? $('#@Html.FieldIdFor(model => model.QuantityTo)').val() : null,
            QuantityFrom: $('#@Html.FieldIdFor(model => model.QuantityFrom)').val() ? $('#@Html.FieldIdFor(model => model.QuantityFrom)').val() : null,
            Type: $("#SType").val(),
            PositionID: $("#SPositionID").val(),
            SourceAdID: $("#SSourceAdsID").val(),
            RankID: $("#SRankID").val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
        };
        if (isExport == true) {
            dataParameter["ExportId"] = $('#ddlScreenName').val();
        }
        return dataParameter;
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            ReadGrid(gridName);
        });
        //Show Hide Panel
        ShowHidePanel();
        //Xử lý Edit
        EditGridNewPage(gridName, '#Hrm_Main_Web/Rec_JobVacancy/Edit/', 'Hrm_Main_Web', '@_hrm_Main_Web');
    });

    //Xử lý tạo mới
    $("#btnCreate").click(function () {

        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Rec_JobVacancy');
        if (!isAccess) {
            return;
        }
        KendoRouteMapping('#Hrm_Main_Web/Rec_JobVacancy/Create/', 'Hrm_Main_Web', '@_hrm_Main_Web');
    });
    //Xử Lý grid
    GridCheckbox(gridName);

    //Xử lý delete
    $('#btnDelete').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelected(gridName, '@_hrm_Main_Web' + "Rec_JobVacancy/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Rec_JobVacancy');
        return false;
    });
    //Expoprt
    $("#btnExportAll").click(function () {
        var grid = $('#' + gridName).data("kendoGrid");
        var count = grid.dataSource._data.toJSON().length;
        if (count == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Rec_GetData/ExportJobVacancyList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Rec_JobVacancy');
    });
    $("#btnExportSelected").click(function () {
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Rec_GetData/ExportJobVacancySelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Rec_JobVacancy');
    });


    $("#btnCreateTemplate").click(function () {
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = false;
        CreateTemplate('@_hrm_Hr_Service' + "Rec_GetData/ExportJobVacancyListByTemplate", filterFieldInfo(true));


    });
    $("#btnExport").click(function () {
        //showAjaxLoading()
        var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Rec_JobVacancy');
        if (!isAccess) {
            return;
        }
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = true;
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Rec_GetData/ExportJobVacancyListByTemplate/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload);
        checkedNodes = [];
        //hideAjaxLoading()
    });

    $("#btnExportByTemplate").click(function () {
        if (selectedIds == "") {

            ErrorMessages('Vui Lòng Chọn Dữ Liệu Để Xuất.');
            return;
        }
        var exportID = $("#ddlScreenNameWord").val();
        var currentLocation = window.location.href;
        //Tách link thành 2 phần: trước và sau dấu #
        var strArray = currentLocation.split('#');
        var strArray2 = strArray[1].split('/');

        //Ẩn hết tất cả các validate default của kendo
        $(document.body).find("span.k-tooltip-validation").hide();

        var controllerName = strArray2[1];
        var screenName = strArray2[1] + "/" + strArray2[2];

        //return;
        var urlGetData = '@_hrm_Hr_Service' + "Rec_GetData/ExportJobVacancyByTemplate/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds;
        //alert(selectedIds);
        ExportSelected(urlGetData, listIds, exportID, urlDownload, '@ConstantPermission.Rec_JobVacancy');
    });

</script>
<style>
    .k-window div.k-window-content {
        overflow: hidden;
    }
</style>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div class="hrm_box" style="padding-right:20px">
                    <div>
                        <div class="FieldTitle150">
                            @ConstantDisplay.HRM_Rec_RecruitmentCampaign_DateStart.TranslateString()
                        </div>
                        <div class="FieldValue">
                            @{
                                var DateStartFrom = new DatePickerBuilderInfo()
                                {
                                    Name = "DateStartFrom",
                                    StyleCss = "width:100px",
                                    Placeholder = ConstantDisplay.HRM_Common_From.TranslateString()

                                };
                                var DateStartTo = new DatePickerBuilderInfo()
                                {
                                    Name = "DateStartTo",
                                    StyleCss = "width:100px",
                                    Placeholder = ConstantDisplay.HRM_Common_To.TranslateString()

                                };
                            }
                            @Html.VnrDatePickerFor(mode => mode.DateStartFrom, DateStartFrom)

                            @Html.VnrDatePickerFor(mode => mode.DateStartTo, DateStartTo)

                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(model => model.Code)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(mode => mode.Code)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(model => model.JobVacancyName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(mode => mode.JobVacancyName)
                        </div>
                    </div>

                </div>
                <div class="hrm_box" style="padding-right:20px">
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.RankID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _RankID = new DropDownListBuilderInfo()
                                {
                                    Name = "SRankID",
                                    DataValueField = "ID",
                                    DataTextField = "NameEntityName",
                                    Url = _hrm_Hre_Service + "Cat_GetData/GetMultiRank",
                                    OptionLabel = ConstantDisplay.HRM_Rec_JobCondition_SelectRank.TranslateString(),
                                };
                            }
                            @Html.VnrDropDownListFor(model => model.RankID, _RankID)
                        </div>
                    </div>

                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.PositionID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var PositionName = new DropDownListBuilderInfo()
                                {
                                    Name = "SPositionID",
                                    DataTextField = "PositionName",
                                    DataValueField = "ID",
                                    Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiPosition",
                                    OptionLabel = ConstantDisplay.HRM_Category_SelectJobVacancyPosition.TranslateString(),
                                };
                            }
                            @Html.VnrDropDownListFor(mode => mode.PositionID, PositionName)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.SourceAdID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var SourceAdsID = new DropDownListBuilderInfo()
                                {
                                    Name = "SSourceAdsID",
                                    DataTextField = "SourceAdsName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hre_Service + "Cat_GetData/GetMultiSourceAds",
                                    OptionLabel = ConstantDisplay.HRM_Recruitment_SelectSourceAds.TranslateString(),
                                };
                            }
                            @Html.VnrDropDownListFor(mode => mode.SourceAdID, SourceAdsID)
                        </div>
                    </div>
                </div>
                <div class="hrm_box" style="padding-right:20px">
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.Type)
                        </div>
                        <div class="FieldValue">
                            @{
                                var Type = new DropDownListBuilderInfo()
                                {
                                    Name = "SType",
                                    DataTextField = "Text",
                                    DataValueField = "Value",
                                    BindTo = lstType,
                                    OptionLabel = ConstantDisplay.HRM_Category_SelectType.TranslateString(),

                                };
                            }
                            @Html.VnrDropDownListFor(mode => mode.Type, Type)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @ConstantDisplay.HRM_Rec_JobVacancy_Quantity.TranslateString()
                        </div>
                        <div class="FieldValue">
                            @{
                                var QuantityTo = new NumericTextBoxBuilderInfo<int>()
                                {
                                    Name = "QuantityTo",
                                    StyleCss = "width:70px",
                                    Format = ConstantFormat.HRM_Format_Int,
                                    Placeholder = ConstantDisplay.HRM_Common_To.TranslateString()

                                };
                                var QuantityFrom = new NumericTextBoxBuilderInfo<int>()
                                {
                                    Name = "QuantityFrom",
                                    StyleCss = "width:70px",
                                    Format = ConstantFormat.HRM_Format_Int,
                                    Placeholder = ConstantDisplay.HRM_Common_From.TranslateString()

                                };
                            }
                            @Html.VnrNumericTextBoxFor(mode => mode.QuantityFrom, QuantityFrom)

                            @Html.VnrNumericTextBoxFor(mode => mode.QuantityTo, QuantityTo)

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        @{
            var screenNameWord = new DropDownListBuilderInfo()
            {
                Name = "ddlScreenNameWord",
                DataTextField = "ExportName",
                DataValueField = "ID",
                Url = _hrm_Hr_Service + "Cat_GetData/GetScreenNameWord",
                Data = "GetScreenName"
            };
        }
        @Html.VnrDropDownList(screenNameWord)
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportByTemplate", Content = ConstantAction.HRM_Common_ExportByTemplate.TranslateString(), ImageUrl = ConstantPath.IconWord })
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">

                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @{
            var screenName = new DropDownListBuilderInfo()
            {
                Name = "ddlScreenName",
                DataTextField = "ExportName",
                DataValueField = "ID",
                Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                StyleCss = "width:200px;",
                Data = "GetScreenName",
            };
        }
        @Html.VnrDropDownList(screenName)

        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnJobVacancy", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_grid_Rec_JobVacancy_Name + "__Rec_JobVacancy_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_grid_Rec_JobVacancy_Name,
            ReadActionUrl = _hrm_Hre_Service + "Rec_GetData/GetJobVacancyList",
            ReadData = "filterFieldInfo",
            AutoBind = false,
            ShowDeleteButton = true,
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
                            {
                                Rec_JobVacancyModel.FieldNames.Code,
                                Rec_JobVacancyModel.FieldNames.JobVacancyName,
                                Rec_JobVacancyModel.FieldNames.RecruitmentCampaignName,
                                Rec_JobVacancyModel.FieldNames.JobVacancyRankName,
                                Rec_JobVacancyModel.FieldNames.PositionName,
                                Rec_JobVacancyModel.FieldNames.Quantity,
                                Rec_JobVacancyModel.FieldNames.Workplace,
                                Rec_JobVacancyModel.FieldNames.AreaPostJobName,
                                Rec_JobVacancyModel.FieldNames.WorkPlaceName,
                                Rec_JobVacancyModel.FieldNames.DateStart,
                                Rec_JobVacancyModel.FieldNames.DateEnd,
                                Rec_JobVacancyModel.FieldNames.Status,
                                Rec_JobVacancyModel.FieldNames.Type,
                                Rec_JobVacancyModel.FieldNames.SourceAdName,
                                Rec_JobVacancyModel.FieldNames.NoLevelInterview,
                                Rec_JobVacancyModel.FieldNames.NoPost,
                                Rec_JobVacancyModel.FieldNames.DateCheck,
                                Rec_JobVacancyModel.FieldNames.DateInterview,
                                Rec_JobVacancyModel.FieldNames.UserUpdate,
                                Rec_JobVacancyModel.FieldNames.DateUpdate,
                            };

            grid.SizeFields = new Dictionary<string, int>()
                            {
                                {Rec_JobVacancyModel.FieldNames.Code, 120},
                                {Rec_JobVacancyModel.FieldNames.PositionName, 130},
                                {Rec_JobVacancyModel.FieldNames.JobVacancyName, 125},
                                {Rec_JobVacancyModel.FieldNames.JobVacancyRankName, 120},
                                {Rec_JobVacancyModel.FieldNames.RecruitmentCampaignName, 155},
                                {Rec_JobVacancyModel.FieldNames.Quantity, 110},
                                {Rec_JobVacancyModel.FieldNames.Workplace, 140},
                                {Rec_JobVacancyModel.FieldNames.AreaPostJobName, 140},
                                {Rec_JobVacancyModel.FieldNames.WorkPlaceName, 110},
                                {Rec_JobVacancyModel.FieldNames.DateStart, 120},
                                {Rec_JobVacancyModel.FieldNames.DateEnd, 120},
                                {Rec_JobVacancyModel.FieldNames.Status, 80},
                                {Rec_JobVacancyModel.FieldNames.Type, 80},
                                {Rec_JobVacancyModel.FieldNames.SourceAdName, 120},
                                {Rec_JobVacancyModel.FieldNames.NoLevelInterview, 120},
                                {Rec_JobVacancyModel.FieldNames.NoPost, 100},
                                {Rec_JobVacancyModel.FieldNames.DateCheck, 120},
                                {Rec_JobVacancyModel.FieldNames.DateInterview, 120},
                                {Rec_JobVacancyModel.FieldNames.UserUpdate, 105},
                                {Rec_JobVacancyModel.FieldNames.DateUpdate, 115},

                            };

            grid.DisplayFields = new Dictionary<string, string>()
                            {
                                {Rec_JobVacancyModel.FieldNames.Code, ConstantDisplay.HRM_Rec_JobVacancy_Code},
                                {Rec_JobVacancyModel.FieldNames.JobVacancyName, ConstantDisplay.HRM_Rec_JobVacancy_JobVacancyName},
                                {Rec_JobVacancyModel.FieldNames.RecruitmentCampaignName, ConstantDisplay.HRM_Rec_JobVacancy_RecruitmentCampaignName},
                                {Rec_JobVacancyModel.FieldNames.JobVacancyRankName, ConstantDisplay.HRM_Rec_JobVacancy_RankID},
                                {Rec_JobVacancyModel.FieldNames.PositionName, ConstantDisplay.HRM_REC_Candidate_Position},
                                {Rec_JobVacancyModel.FieldNames.Quantity, ConstantDisplay.HRM_Rec_JobVacancy_Quantity},
                                {Rec_JobVacancyModel.FieldNames.Workplace, ConstantDisplay.HRM_Rec_JobVacancy_Workplace},
                                {Rec_JobVacancyModel.FieldNames.AreaPostJobName, ConstantDisplay.HRM_Rec_JobVacancy_AreaPostJobID},
                                {Rec_JobVacancyModel.FieldNames.WorkPlaceName, ConstantDisplay.HRM_Rec_JobVacancy_WorkPlaceID},
                                {Rec_JobVacancyModel.FieldNames.DateStart, ConstantDisplay.HRM_Rec_RecruitmentCampaign_DateStart},
                                {Rec_JobVacancyModel.FieldNames.DateEnd, ConstantDisplay.HRM_Rec_RecruitmentCampaign_DateEnd},
                                {Rec_JobVacancyModel.FieldNames.Status, ConstantDisplay.HRM_Rec_JobVacancy_Status},
                                {Rec_JobVacancyModel.FieldNames.Type, ConstantDisplay.HRM_Rec_JobVacancy_Type},
                                {Rec_JobVacancyModel.FieldNames.SourceAdName, ConstantDisplay.HRM_Rec_JobVacancy_SourceAdsName},
                                {Rec_JobVacancyModel.FieldNames.NoLevelInterview, ConstantDisplay.HRM_Rec_JobVacancy_NoLevelInterview},
                                {Rec_JobVacancyModel.FieldNames.NoPost, ConstantDisplay.HRM_Rec_JobVacancy_NoPost},
                                {Rec_JobVacancyModel.FieldNames.DateCheck, ConstantDisplay.HRM_Rec_JobVacancy_DateCheck},
                                {Rec_JobVacancyModel.FieldNames.DateInterview, ConstantDisplay.HRM_Rec_JobVacancy_DateInterview},
                                {Rec_JobVacancyModel.FieldNames.UserUpdate, ConstantDisplay.HRM_Common_UserUpdate},
                                {Rec_JobVacancyModel.FieldNames.DateUpdate, ConstantDisplay.HRM_Common_DateUpdate},
                            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }

    }
    @(Html.VnrGrid<Rec_JobVacancyModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnJobVacancy", "Rec_JobVacancyModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
@using HRM.Infrastructure.Utilities;
@using HRM.Infrastructure.Security

@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Payroll.Models;

@model Sal_ProductiveModel
@{
    Layout = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hr_Services = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Web = ConstantPathWeb.Hrm_Main_Web;

    var controller = ViewContext.RouteData.Values["Controller"].ToString();


    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
}
@{
    var window = new WindowBuilderInfo
    {
        Name = "windowSal_Productive",
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Sal_Productive/Sal_ProductiveInfo/",
    };
}
@(Html.VnrWindow(window))


@Html.Hidden("Screen", screen)
<script type="text/javascript">

    

    var titleCreate = '@Html.Raw(ConstantDisplay.HRM_Sal_Productive_Title_Create.TranslateString())';
    var titleUpdate = '@Html.Raw(ConstantDisplay.HRM_Sal_Productive_Title_Edit.TranslateString())';

    $(document).ready(function () {
        var url = '@_hrm_Main_Web' + "Sal_Productive/Sal_ProductiveInfo/";
        EditGridPopUp("@ConstantControlName.HRM_gridSal_Producttive_Grid_Name", "windowSal_Productive", url, '@ConstantPermission.Sal_Productive', titleUpdate);
    });


    function EvenBtnProductive() {
        ReadGrid('@ConstantControlName.HRM_gridSal_Producttive_Grid_Name');
    };

    function EvenCreateProductive()
    {
        PopUpCreate("windowSal_Productive", titleCreate, '@ConstantPermission.Sal_Productive');
    };

    function filterFieldInfo(isExport) {
        var ProductID = $('#ProductTive_ProductID').data("kendoComboBox");
        var ProductItemID = $('#ProductTive_ProductItemID').data("kendoComboBox");
        var dataParameter = {
            StartDate: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#Index_MonthStart").val()),
            EndDate: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#Index_MonthEnd").val()),
            ProductID: ProductID.value(),
            ProductItemID: ProductItemID.value(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
        return dataParameter;
    };

    $("#btnExportAll").click(function () {

        //var grid = $('#gridSal_Grade').data("kendoGrid");
        //if (grid.dataSource.total() == 0) {
        //    ExportAllFail();
        //    return;
        //}
        var urlGetData = '@_hrm_Hr_Services' + "Sal_GetData/ExportAllSalProductiveList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Sal_Productive');
    });

    $("#btnExportSelected").click(function () {

        if (selectedIds.length == 0) {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Services' + "Sal_GetData/ExportSalProductiveList/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Sal_Productive');

    });

    //function filterProduct() {
    //    return {
    //        ID: $("#ProductTive_ProductID").val(),
    //    }
    //};

</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->

            <div class="contendSearchWidge" style="overflow:visible">
                <form id="form-search">
                    <div>
                        <div id="div2">
                            <div class="FieldTitle">
                                @Html.Label(ConstantDisplay.HRM_Att_Grade_TimeApply.TranslateString())
                            </div>
                            <div class="FieldValue">
                                @{
                                    var datepickerMonthStart = new DatePickerBuilderInfo()
                                    {
                                        Name = "Index_MonthStart",
                                        Value = @Html.DisplayFor(mode => mode.StartDate).ToString(),
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.StartDate, datepickerMonthStart)

                                @{
                                    var datepickerMonthEnd = new DatePickerBuilderInfo()
                                    {
                                        Name = "Index_MonthEnd",
                                        Value = @Html.DisplayFor(mode => mode.EndDate).ToString(),
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.EndDate, datepickerMonthEnd)

                            </div>
                            <br />
                        </div>
                        <div id="div3">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(model => model.ProductID)
                                @*@Html.HiddenFor(model => model.Id)*@
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _ProductID = new ComboBoxBuilderInfo()
                                    {
                                        Name = "ProductTive_ProductID",
                                        DataTextField = "ProductName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiProduct",
                                        Placeholder = ConstantDisplay.HRM_Category_Product_SelectProductType.TranslateString(),
                                        //Autobind = true,
                                        Value = (Model != null && Model.ProductID != null) ? Model.ProductID.ToString() : "",
                                    };
                                }
                                @Html.VnrComboBoxFor(model => model.ProductID, _ProductID)
                            </div>
                        </div>
                        <div id="div3">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(model => model.ProductItemID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var ProductItemID = new ComboBoxBuilderInfo()
                                    {
                                        Name = "ProductTive_ProductItemID",
                                        DataTextField = "ProductItemName",
                                        DataValueField = "ID",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetFieldterProductITemMulti",
                                        //CascadeFrom = "ProductTive_ProductID",
                                        //Data = "filterProduct",
                                        ServerFilter = true,
                                        Value = (Model != null && Model.ProductItemID != null) ? Model.ProductItemID.ToString() : "",
                                    };
                                }
                                @Html.VnrComboBoxFor(m => m.ProductItemID, ProductItemID)
                            </div>
                        </div>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() {EventClick="EvenCreateProductive" ,Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() {EventClick="EvenBtnProductive" ,Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float: right">
        @*@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnActionSubmit", Content = ConstantDisplay.HRM_Common_SendRequestApprove_Button.TranslateString(), ImageUrl = ConstantPath.IconConfirmPath })*@
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnProductive", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Payroll.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridSal_Producttive_Grid_Name + "__Sal_Productive_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridSal_Producttive_Grid_Name,
            ReadActionUrl = @_hrm_Hr_Services + "Sal_GetData/GetSal_Producttive/",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
            {
                Sal_ProductiveModel.FieldNames.ProfileName,
                  Sal_ProductiveModel.FieldNames.ProductName,
                    Sal_ProductiveModel.FieldNames.ProductItemName,
                      Sal_ProductiveModel.FieldNames.StartDate,
                        Sal_ProductiveModel.FieldNames.EndDate,
                          Sal_ProductiveModel.FieldNames.Quantity,
                                                    Sal_ProductiveModel.FieldNames.CurrencyName,
                                           Sal_ProductiveModel.FieldNames.Note,
             
            };
            grid.SizeFields = new Dictionary<string, int>()
            {

                {Sal_ProductiveModel.FieldNames.ProfileName, 135},
                 {Sal_ProductiveModel.FieldNames.ProductName, 135},
                  {Sal_ProductiveModel.FieldNames.ProductItemName, 135},
                   {Sal_ProductiveModel.FieldNames.StartDate, 135},
                           {Sal_ProductiveModel.FieldNames.EndDate, 135},
                 {Sal_ProductiveModel.FieldNames.Quantity, 135},
                  {Sal_ProductiveModel.FieldNames.CurrencyName, 135},
                   {Sal_ProductiveModel.FieldNames.Note, 135},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {

                {Sal_ProductiveModel.FieldNames.ProfileName, ConstantDisplay.HRM_HR_Profile_ProfileName},
                {Sal_ProductiveModel.FieldNames.ProductName, ConstantDisplay.HRM_Category_Product_ProductName},
                {Sal_ProductiveModel.FieldNames.ProductItemName, ConstantDisplay.HRM_Category_ProductItem_ProductItemName},
                {Sal_ProductiveModel.FieldNames.StartDate, ConstantDisplay.HRM_Att_AllowLimitOvertime_DateStart},
                {Sal_ProductiveModel.FieldNames.EndDate, ConstantDisplay.HRM_Att_AllowLimitOvertime_DateEnd},
                {Sal_ProductiveModel.FieldNames.Quantity, ConstantDisplay.HRM_Canteen_Report_Quantity},
                {Sal_ProductiveModel.FieldNames.CurrencyName, ConstantDisplay.FIN_ClaimItem_CurrencyName},
                {Sal_ProductiveModel.FieldNames.Note, ConstantDisplay.HRM_Attendance_AttendanceTable_Note},
               

            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
    //var hyperlinkFields = new Dictionary<string, string>()
    //{
    //    {Sal_GradeModel.FieldNames.ProfileName,"clickProfile,ProfileID"},
    //};

    //var grid = new GridBuilderInfo
    //{
    //    Name = "gridSal_Grade",
    //    ValueFields = valueFields,
    //    SizeFields = sizeFields,
    //    DisplayFields = displayFields,
    //    ReadActionUrl = @_hrm_Hr_Services + "Sal_GetData/GetGradeList/",
    //    ReadData = "filterFieldInfo",
    //    EventDataBound = "changePageGird",
    ////    HyperlinkFields = hyperlinkFields
    //};
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Sal_ProductiveModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnProductive", "Sal_ProductiveModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>

@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)





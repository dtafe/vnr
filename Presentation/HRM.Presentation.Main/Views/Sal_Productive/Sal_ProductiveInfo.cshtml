@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models

@model Sal_ProductiveModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
}

<script>
    SetFieldRequired();

    function onSave() {
        onSaveAndContinue($('#form_Sal_Productive'), '@_hrm_Hr_Service', 'api/Sal_Productive/', '@ConstantControlName.HRM_gridSal_Producttive_Grid_Name', 'windowSal_Productive');
        return false;
    }

    function onSaveClose() {
        onSaveAndClose($('#form_Sal_Productive'), '@_hrm_Hr_Service', 'api/Sal_Productive/', '@ConstantControlName.HRM_gridSal_Producttive_Grid_Name', 'windowSal_Productive');
        return false;
    }

    function onSaveDataPopUp() {
        onlySave($('#form_Sal_Productive'), '@_hrm_Hr_Service', 'api/Sal_Productive/', '@ConstantControlName.HRM_gridSal_Producttive_Grid_Name');
        return false;
    }

</script>

@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Sal_Productive" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div id=" div1">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProfileID)
                    </div>
                    <div class="FieldValue">
                        @{
                            System.Collections.IEnumerable valueProfile = new string[] { };
                            if (Model != null)
                            {
                                valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
                            }
                                                }
                                                @{
                            var _ProfileID = new MultiSelectBuilderInfo()
                            {
                                Name = "ProductiveInfo_ProfileID",
                                DataTextField = "ProfileName",
                                DataValueField = "ID",
                                Url = @_hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                                Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                MaxSelectedItems = 1,
                                // Autobind = true,
                                Value = valueProfile,
                                Width = 300
                            };
                        }
                        @Html.VnrMultiSelectFor(model => model.ProfileID, _ProfileID)
                    </div>
                </div>
                <div id=" div1">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProductID)
                    </div>
                    <div class="FieldValue">
                       @{
                            var _ProductID = new ComboBoxBuilderInfo()
                            {
                                Name = "ProductTiveInfo_ProductID",
                                DataTextField = "ProductName",
                                DataValueField = "ID",
                                Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiProduct",
                                //Placeholder = ConstantDisplay.HRM_Category_Product_SelectProductType.TranslateString(),
                                Autobind = true,
                                ServerFilter=true,
                                Value = (Model != null && Model.ProductID != null) ? Model.ProductID.ToString() : "",
                            };
                        }
                        @Html.VnrComboBoxFor(model => model.ProductID, _ProductID)
                    </div>
                </div>

                <div id=" div1">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProductItemID)
                    </div>
                    <div class="FieldValue">
                      @{
                            var ProductItemID = new ComboBoxBuilderInfo()
                            {
                                Name = "ProductTiveInfo_ProductItemID",
                                DataTextField = "ProductItemName",
                                DataValueField = "ID",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetFieldterProductITemMulti",
                                //CascadeFrom = "ProductTive_ProductID",
                                //Data = "filterProduct",
                                ServerFilter = true,
                                Autobind = true,
                                Value = (Model != null && Model.ProductItemID != null) ? Model.ProductItemID.ToString() : "",
                            };
                        }
                        @Html.VnrComboBoxFor(m => m.ProductItemID, ProductItemID)
                    </div>
                </div>
                <div id=" div1">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.StartDate)
                    </div>
                    <div class="FieldValue">
                        @{
    var datepickerMonthStart = new DatePickerBuilderInfo()
    {
        Name = "ProductTiveInfo_StartDate",
        Value = @Html.DisplayFor(mode => mode.StartDate).ToString(),
        StyleCss = "width:100px;",
        Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
    };
                        }
                        @Html.VnrDatePickerFor(model => model.StartDate, datepickerMonthStart)

                        @{
    var datepickerMonthEnd = new DatePickerBuilderInfo()
    {
        Name = "ProductTiveInfo_EndDate",
        Value = @Html.DisplayFor(mode => mode.EndDate).ToString(),
        StyleCss = "width:100px;",
        Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
    };
                        }
                        @Html.VnrDatePickerFor(model => model.EndDate, datepickerMonthEnd)
                    </div>
                </div>
                <div id=" div1">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Quantity)
                    </div>
                    <div class="FieldValue">
                        @{
    var _quantity = new NumericTextBoxBuilderInfo<double>()
    {
        Name = "ProductTiveInfo_Quantity",
        Value = Model != null && Model.Quantity != null ? (double)Model.Quantity : 0,
        Format = ConstantFormat.HRM_Format_Number_Integer,
    };
                        }
                        @Html.VnrNumericTextBoxFor(m => m.Quantity, _quantity)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>

                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-LineItemForShop", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-LineItemForShop", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-LineItemForShop", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}
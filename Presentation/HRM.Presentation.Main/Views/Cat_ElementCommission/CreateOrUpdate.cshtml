@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.Category.Models
@using HRM.Infrastructure.Utilities

@model CatElementModel
@{
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    IList<SelectListItem> List_CatElementType = Enum.GetValues(typeof(CatElementType))
        .Cast<CatElementType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();


    IList<SelectListItem> List_CatElementLevel = Enum.GetValues(typeof(DisplayTypeBasicSalary))
    .Cast<DisplayTypeBasicSalary>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();

    IList<SelectListItem> List_CatElementDataType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.EnumDropDown.ElementDataType))
    .Cast<HRM.Infrastructure.Utilities.EnumDropDown.ElementDataType>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();

    IList<SelectListItem> List_MethodPayroll = Enum.GetValues(typeof(MethodPayroll))
    .Cast<MethodPayroll>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();
}

<script type="text/javascript">
    SetFieldRequired();

    var ListGridName = ['@CatElementType.Payroll.ToString()',
          '@CatElementType.Attendance.ToString()',
          '@CatElementType.Allowances.ToString()',
          '@CatElementType.AllowancesOut.ToString()',
          '@CatElementType.Evaluation.ToString()',
          '@CatElementType.Comission.ToString()',
          '@CatElementType.AdvancePayment.ToString()',
          '@CatElementType.FLIGHT.ToString()',
          'Grid_Emun',
    ];
    function changeGradePayroll() {
        for (var i = 0; i < ListGridName.length - 1; i++) {
            ReadGrid(ListGridName[i]);
        }
    };

    $(document).ready(function () {
        $('#MethodPayroll').val('@MethodPayroll.E_COMMISSION_PAYMENT.ToString()');
    });
</script>

<style>
    .table thead > tr > th, .table tbody > tr > th, .table tfoot > tr > th, .table thead > tr > td, .table tbody > tr > td, .table tfoot > tr > td {
        padding: 4px;
    }
</style>
@Html.HiddenFor(m => m.ID)
@Html.HiddenFor(m => m.MethodPayroll)
<div class="VnRMain">
    <div class="contendSearchWidge">
        <div style="float:left; width:350px">
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.ElementCode)
                </div>
                <div class="FieldValue">
                    @Html.VnrTextBoxFor(mode => mode.ElementCode, "width:200px;")
                </div>
            </div>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.ElementName)
                </div>
                <div class="FieldValue">
                    @Html.VnrTextBoxFor(mode => mode.ElementName, "width:200px;")
                </div>
            </div>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.GradePayrollID)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_CatGradePayroll = new ComboBoxBuilderInfo
                        {
                            DataTextField = "GradeCfgName",
                            DataValueField = "ID",
                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiGradePayroll",
                            StyleCss = "width:200px",
                            Autobind = true,
                            Placeholder = @ConstantDisplay.HRM_HR_Contract_PleaseSelectData.TranslateString(),
                            Value = Model == null ? string.Empty : Model.GradePayrollID.ToString(),
                            EventChange = "changeGradePayroll",
                        };
                    }
                    @Html.VnrComboBoxFor(m => m.GradePayrollID, drop_CatGradePayroll).Text(Model == null ? string.Empty : Model.GradeCfgName)
                </div>
                <div style="clear: both;"></div>
            </div>
        </div>


        <div style="width:350px; display:block; float:left">
            <div>
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.TabType)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_TabType = new DropDownListBuilderInfo
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = List_CatElementType,
                            Autobind = true,
                            StyleCss = "width:200px",
                            //Value = @Html.DisplayFor(mode => mode.TabType).ToString()
                        };
                    }
                    @Html.VnrDropDownListFor(m => m.TabType, drop_TabType)
                </div>
            </div>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.Type)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_CatElementDataType = new DropDownListBuilderInfo
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = List_CatElementDataType,
                            Autobind = true,
                            StyleCss = "width:200px",
                            Value = @Html.DisplayFor(mode => mode.Type).ToString()
                        };
                    }
                    @Html.VnrDropDownListFor(m => m.Type, drop_CatElementDataType)
                </div>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.ElementLevel)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_CatElementLevel = new DropDownListBuilderInfo
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = List_CatElementLevel,
                            Autobind = true,
                            StyleCss = "width:200px",
                            Value = @Html.DisplayFor(mode => mode.ElementLevel).ToString()
                        };
                    }
                    @Html.VnrDropDownListFor(m => m.ElementLevel, drop_CatElementLevel)
                </div>
                <div style="clear: both;"></div>
            </div>
            <div style="clear: both;"></div>
            <div id="div2">

                <div style="clear: both;"></div>
            </div>
        </div>
        <div style="width:300px; display:block; float:left">
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.OrderNumber)
                </div>
                <div class="FieldValue">
                    @{
                        var _OrderNumber = new NumericTextBoxBuilderInfo<long>()
                     {
                     };
                    }
                    @Html.VnrNumericTextBoxFor(model => model.OrderNumber, _OrderNumber)
                </div>
            </div>
            @*<div id="div2">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.DisplayIndex)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _DisplayIndex = new NumericTextBoxBuilderInfo<long>()
                         {
                         };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.DisplayIndex, _DisplayIndex)
                    </div>
                </div>*@
            <div id="div2">
                <div style="float: left;">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Invisible)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.Invisible)
                    </div>
                </div>
                <div style="float: left;">
                    <div class="FieldTitle" style="width: 50px;">
                        @Html.VnrLabelFor(mode => mode.IsBold)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.IsBold)
                    </div>
                </div>
                <div style="clear: both;"></div>
            </div>
            <div>
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.Description)
                </div>
                <div class="FieldValue">
                    @Html.VnrTextAreaFor(mode => mode.Description, "height: 50px; min-width:180px;")
                </div>
            </div>
        </div>
    </div>
</div>
<div class="VnRMain">
    <table class="table" style="width:0% !important">
        <tr>
            <td>
                <div id="TabsTrip_CatElement" style="width:642px">
                    <ul>
                        <li class="k-state-active">@EnumDropDown.GetEnumDescription(CatElementType.Payroll)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.Attendance)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.Allowances)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.AllowancesOut)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.Evaluation)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.Comission)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.AdvancePayment)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.FLIGHT)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.ExChangeRate)</li>
                        <li>Enum</li>@*Chưa Dịch!*@
                    </ul>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.Payroll.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.Attendance.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.Allowances.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.AllowancesOut.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.Evaluation.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.Comission.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.AdvancePayment.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.FLIGHT.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.ExChangeRate.ToString())
                    </div>
                    <div style="padding:3px">
                        @{
                            //Thông tin hiển column hiển thị
                            var valueFields = new string[]
                            {
                                CatElementModel.FieldNames.ElementCode,
                                CatElementModel.FieldNames.ElementName,
                                CatElementModel.FieldNames.Formula,
                            };

                            //Set độ rộng cho từng column
                            var sizeFields = new Dictionary<string, int>()
                            {
                                {CatElementModel.FieldNames.ElementCode, 250},
                                 {CatElementModel.FieldNames.ElementName, 350}
                            };

                            //Thông tin hiển thị được dịch
                            var displayFields = new Dictionary<string, string>()
                            {
                                {CatElementModel.FieldNames.ElementName , ConstantDisplay.HRM_Category_Element_ElementName },
                            };
                            var hiddenFields = new string[]
                            {
                                CatElementModel.FieldNames.Formula,
                            };

                            var grid = new GridBuilderInfo
                           {
                               Name = "Grid_Emun",
                               ValueFields = valueFields,
                               SizeFields = sizeFields,
                               HiddenFields = hiddenFields,
                               DisplayFields = displayFields,
                               ShowCheckbox = false,
                               ShowEditIcon = false,
                               GridHeight = 400,
                               AutoBind = true,
                               ReadActionUrl = _hrm_Hr_Service + "Cat_GetData/GetElementInEnum",
                           };
                            grid.Filterable = new Dictionary<string, bool>()
            {
                {CatElementModel.FieldNames.ElementCode,true},
                {CatElementModel.FieldNames.ElementName,true},
            };
                        }
                        <!--Khởi tạo Grid-->
                        @(Html.VnrGrid<CatElementModel>(grid))
                    </div>
                </div>


                <div style="float:left; width:510px ;margin : 5px 0 0 0;">

                    <table style="border:0;" cellpadding="0" cellspacing="0">
                        <tr>
                            <td class="FieldTitle" style="border-top: 0px !important; padding-top: 1px;">
                                @Html.VnrLabelFor(mode => mode.Formula)
                            </td>
                            <td colspan="4" style="border-top: 0px !important; padding-top: 1px; ">
                                @Html.TextArea("displayFormula", new { style = "width: 523px; height: 70x;", @class = "k-textbox", @readonly = "readonly" })
                            </td>
                        </tr>
                        <tr>
                            <td class="FieldTitle" style="border-top: 0px !important; padding-top: 1px;">
                                @Html.VnrLabelFor(mode => mode.ElementName)
                            </td>
                            <td style="border-top: 0px !important; padding-top: 1px; ">
                                @{
                                    var _ElementName = new TextBoxBuilderInfo()
                                    {
                                        Name = "CatElemnetInfo_ElementName",
                                        Readonly = true
                                    };

                                }
                                @Html.VnrTextBoxFor(mode => mode.ElementName, _ElementName)
                            </td>

                            @*<td class="FieldTitle" style="border-top: 0px none ! important; width: 58px;">
                                    @Html.VnrLabelFor(mode => mode.Description)
                                </td>
                                <td rowspan="3" style="border-top: 0px !important">
                                    @{
                                        var _Description = new TextAreaBuilderInfo()
                                        {
                                            Name = "CatElemnetInfo_Description",
                                        };
                                    }
                                    @Html.TextArea("CatElemnetInfo_Description", new { style = "width: 100px; height: 65x;", @class = "k-textbox", @readonly = "readonly" })
                                </td>*@
                        </tr>
                        <tr>
                            <td class="FieldTitle" style="border-top: 0px !important; padding-top: 1px;">
                                @Html.VnrLabelFor(mode => mode.Type)
                            </td>
                            <td style="border-top: 0px !important; padding-top: 1px; ">
                                @{
                                    var _type = new TextBoxBuilderInfo()
                                    {
                                        Name = "CatElementInfo_Type",
                                        Readonly = true
                                    };
                                }
                                @Html.VnrTextBoxFor(mode => mode.Type, _type)
                            </td>
                        </tr>

                        <tr>
                            <td class="FieldTitle" style="border-top: 0px none !important; width: 58px; padding-top: 1px;">
                                @Html.VnrLabelFor(mode => mode.Description)
                            </td>
                            <td rowspan="3" style="border-top: 0px !important; padding-top: 1px; ">
                                @{
                                    var _Description = new TextAreaBuilderInfo()
                                    {
                                        Name = "CatElemnetInfo_Description",
                                    };
                                }
                                @Html.TextArea("CatElemnetInfo_Description", new { style = "width: 523px; height: 50x;", @class = "k-textbox", @readonly = "readonly" })
                            </td>
                        </tr>
                    </table>
                </div>
            </td>

            <td style="width:30px;">
                <div style="height:30px; padding-top:100px"></div>
                <div>
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnNext", Content = "", ImageUrl = ConstantPath.IconNext })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnPrev", Content = "", ImageUrl = ConstantPath.IconPrev })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnClear", Content = "", ImageUrl = ConstantPath.IconClear })
                </div>
            </td>

            <td>
                <div style="margin-bottom:5px;">
                    <div>
                        @{
                            var ElementSearch = new MultiSelectBuilderInfo()
                            {
                                Name = "CatElementSearch",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCatElement",
                                Autobind = false,
                                MaxSelectedItems = 1,
                                DataTextField = "ElementName",
                                DataValueField = "ElementCode",
                                ServerFiltering = true,
                                Width = 135,
                            };
                        }
                        @Html.VnrMultiSelect(ElementSearch)
                    </div>
                    <div style="padding-right:5px">
                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "SelectFormula", Content = "Chọn", ImageUrl = ConstantPath.IconAddNewPath }) @*Chưa Dịch!*@
                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "CheckFormula", Content = "Kiểm Tra CT", ImageUrl = ConstantPath.IconCheckError })
                    </div>
                </div>
                <div>

                    @Html.VnrTextAreaFor(m => m.Formula, "width: 307px; height: 570px;")

                </div>

            </td>
        </tr>
    </table>
</div>

<div>
    @{
        if (Model == null)
        {
            <script>
                $(document).ready(function () {

                    var x = location.href.split('/');
                    var arrGradePayrollID = x[x.length - 1];
                    var gradePayrollID = arrGradePayrollID.split('#');
                    var ddlGradePayroll = $("#GradePayrollID").data("kendoComboBox");
                    var payrollID = gradePayrollID[0].split('?');

                    if (gradePayrollID[0] != "") {
                        ddlGradePayroll.value(gradePayrollID[0]);
                        $("#" + '@CatElementType.Payroll.ToString()').data('kendoGrid').dataSource.read();
                    }
                });
            </script>
        }
    }
</div>
<script type="text/javascript">
    //Init Tabstrip
    $("#TabsTrip_CatElement").kendoTabStrip({
        animation: { open: { effects: "fadeIn" } },
    }).data('kendoTabStrip');


    $(document).ready(function () {

        CloseHre_ProgressBar();


        //set value for Formula
        function AddItemFormula(value) {
            var Formula = $("#Formula").val();
            if (value != "") {
                $("#Formula").val(Formula + '[' + value + ']');
            }
        };

        //Chọn phầm tử vào formula
        $("#btnNext").click(function () {

            var index = $("#TabsTrip_CatElement").data("kendoTabStrip").select().index();

            var grid = $("#" + ListGridName[index]).data("kendoGrid");

            var selectedItem = grid.dataItem(grid.select());

            if (selectedItem == null) {
                ShowNotificationProcessor("Vui lòng chọn phần tử !");//Chưa Dịch!
                return;
            }
            AddItemFormula(selectedItem.ElementCode);

        });

        //claer all formula
        $("#btnClear").click(function () {
            $("#Formula").val("");
        });

        //Xóa 1 phần tử trong formula
        $("#btnPrev").click(function () {

            var formula = $('#Formula').val();
            var value = $('#Formula').val();
            var IsItem = false;//Kiểm tra xem phần tử cuối cùng là phần tử lương hay là số
            for (var i = formula.length - 1; i >= 0; i--) {

                if (i == formula.length - 1 && formula[i] == "]") {
                    IsItem = true;
                }
                if (IsItem == true && formula[i] == "[") {
                    value = value.substring(0, value.length - 1);
                    break;
                }
                if (IsItem == false && formula[i] == "]") {
                    break;
                }
                if (value == "") {
                    ShowNotificationProcessor("Hết phần tử !");//Chưa Dịch!
                    break;
                }
                value = value.substring(0, value.length - 1);
            }
            $("#Formula").val(value);

        });

        //select value for multiple select
        $("#SelectFormula").click(function () {

            var multi = $("#CatElementSearch").data("kendoMultiSelect");

            AddItemFormula(multi.value().join(","));

            multi.value("");
            multi.input.blur();
        });

        //Check Is Formula
        $("#CheckFormula").click(function () {
            CheckFormula();
        });


        function InsertFormula(gridName) {
            var grid = $("#" + gridName).data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());



            AddItemFormula(selectedItem.ElementCode);
        };

        function DisplayFormula(gridName) {
            var grid = $("#" + gridName).data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            $("#displayFormula").val(selectedItem.Formula);
            $("#CatElementInfo_Type").val(selectedItem.Type);
            $("#CatElemnetInfo_ElementName").val(selectedItem.ElementName);
            $("#CatElemnetInfo_Description").val(selectedItem.Description);
        };

        //Xử lý sự kiện dblclick cho các grid
        $("#" + '@CatElementType.Payroll.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.Payroll.ToString()');
        });
        $("#" + '@CatElementType.Allowances.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.Allowances.ToString()');
        });
        $("#" + '@CatElementType.Attendance.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.Attendance.ToString()');
        });
        $("#" + '@CatElementType.AllowancesOut.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.AllowancesOut.ToString()');
        });
        $("#" + '@CatElementType.Evaluation.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.Evaluation.ToString()');
        });
        $("#" + '@CatElementType.Comission.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.Comission.ToString()');
        });
        $("#" + '@CatElementType.AdvancePayment.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.AdvancePayment.ToString()');
        });
        $("#" + '@CatElementType.FLIGHT.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.FLIGHT.ToString()');
        });
        $("#" + '@CatElementType.ExChangeRate.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.ExChangeRate.ToString()');
        });
        $("#Grid_Emun").on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('Grid_Emun');
        });

        //Xử lý hiển thị formula lên text box
        $("#" + '@CatElementType.Payroll.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.Payroll.ToString()');
        });
        $("#" + '@CatElementType.Allowances.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.Allowances.ToString()');
        });
        $("#" + '@CatElementType.Attendance.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.Attendance.ToString()');
        });
        $("#" + '@CatElementType.AllowancesOut.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.AllowancesOut.ToString()');
        });
        $("#" + '@CatElementType.Evaluation.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.Evaluation.ToString()');
        });
        $("#" + '@CatElementType.Comission.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.Comission.ToString()');
        });
        $("#" + '@CatElementType.AdvancePayment.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.AdvancePayment.ToString()');
        });
        $("#" + '@CatElementType.FLIGHT.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.FLIGHT.ToString()');
        });
        $("#" + '@CatElementType.ExChangeRate.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.ExChangeRate.ToString()');
        });
        $("#Grid_Emun").on("click", "tr.k-state-selected", function () {
            DisplayFormula('Grid_Emun');
        });
    });

    //Check Is Formula
    function CheckFormula() {
        var IsActive = false;
        var Formula = $('#Formula').val();
        $.ajax({
            url: '@_hrm_Hr_Service' + 'Cat_GetData/CheckFormula',
            data: { values: Formula },
            type: 'POST',
            async: false,
            success: function (data) {
                if (data.success) {
                    ShowNotificationProcessor(data.mess);
                    IsActive = true;
                    return IsActive;
                }
                else {
                    ShowNotificationProcessor(data.mess);
                    IsActive = false;
                    return IsActive;
                }
            },
            error: function (data) {
                IsActive = false;
                return IsActive;
            }
        });
        return IsActive;
        //return true;
    };
</script>
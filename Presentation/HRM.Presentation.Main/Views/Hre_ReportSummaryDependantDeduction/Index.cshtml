@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.Main.Controllers
@using HRM.Presentation.UI.Controls.Kendo
@model Hre_ReportSummaryDependantDeductionModel

@{
    ViewBag.Title = "Profiles Index";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    Layout = null;
 
}
@Html.Hidden("Screen", screen)

<style>
    .k-state-selected {
        color: #fff !important;
        background-color: #5A83B1 !important;
        border-color: #5A83B1 !important;
    }
</style>
<script>
    SetFieldRequired();
    var checkedNodes = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        var dataParameter = {
            MonthFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#MonthFrom").val()),
            MonthTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#MonthTo").val()),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
        };
        if (isExport == true) {
            dataParameter["ExportId"] = $('#ddlScreenName').val();
        }
        return dataParameter;
    }

    $(document).ready(function () {
        ShowHidePanel();
        $("#btnCreateTemplate").click(function () {
            var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_ReportSummaryDependantDeduction');
            if (!isAccess) {
                return;
            }
            isCreateTemplate = true;
            isCreateTemplateForDynamicGrid = true;
            var window1 = window;
            CreateTemplate('@_hrm_Hre_Service' + '/Hre_GetData/GetReportSummaryDependantDeduction', filterFieldInfo(true));
        });
    });



    $("#btnSearch").click(function () {
       ShowHre_ProgressBar();
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hre_Service' + 'Hre_GetData/GetReportSummaryDependantDeductionValidate',
            data: filterFieldInfo(),
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data[0] == "error") {
                    CloseHre_ProgressBar();
                    ShowNotificationProcessor(data[1]);
                }
                else {
                    $.ajax({
                        url: '@_hrm_Hre_Service' + "Hre_GetData/GetReportSummaryDependantDeduction",
                        data: filterFieldInfo(false),
                        type: 'POST',
                        datatype: 'json',
                        success: function (data) {
                            CloseHre_ProgressBar();
                            var grid = VnrGridDynamic;
                            grid.GridName = "gridHre_ReportSummaryDependantDeduction";
                            grid.DataSource = data.Data;
                            VnrGridDynamicControl(grid);
                        }
                    });
                    checkedNodes = [];
                }
            }
        });
    });

     $("#btnExport").click(function () {
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = true;

        var isAccess = checkPermission(PrivilegeType.Export, '@HRM.Infrastructure.Security.ConstantPermission.Hre_ReportSummaryDependantDeduction');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hre_Service' + '/Hre_GetData/GetReportSummaryDependantDeduction',
            data: filterFieldInfo(true),
            dataType: 'json',
            success: function (returnValue) {
                var strSplit = returnValue.indexOf(',');
                var status = "";
                var fullPath = "";
                if (strSplit > 0) {
                    status = returnValue.substring(0, strSplit);
                    if (status == "Success") {
                        fullPath = returnValue.substring(strSplit + 1, returnValue.length);
                        window.location = '@_hrm_Main_Web' + fullPath;
                        ShowNotificationProcessor(status);
                    }
                } else {
                    ShowNotificationProcessor(returnValue);
                }
            }
        });
    });
</script>
<div id="grid_Demo"></div>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div>
                    <div class="hrm_box">
                        <div id="div7">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.MonthFrom)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var DateFrom = new DatePickerBuilderInfo()
                                    {
                                        StyleCss = "width:100px;",
                                        Format = ConstantFormat.HRM_Format_MonthYear,
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_MonthFrom.TranslateString()
                                    };

                                }
                                @Html.VnrDatePickerFor(mode => mode.MonthFrom, DateFrom)
                                @{
                                    var DateTo = new DatePickerBuilderInfo()
                                    {
                                        StyleCss = "width:100px;",
                                        Format = ConstantFormat.HRM_Format_MonthYear,
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_MonthTo.TranslateString()
                                    };
                                }
                                @Html.VnrDatePickerFor(mode => mode.MonthTo, DateTo)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_ExportReport.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantAction.HRM_Common_CreateTemplate.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
    </div>
</div>
<div id="gridHre_ReportSummaryDependantDeduction"></div>
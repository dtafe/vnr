@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models
@model HRM.Presentation.Payroll.Models.Sal_HoldSalarySearchModel
@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    string[] valueFields = null;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    IList<SelectListItem> listSalaryStatus = Enum.GetValues(typeof(EnumDropDown.WorkdayStatus))
  .Cast<EnumDropDown.WorkdayStatus>()
  .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
  .ToList();
}
@Html.Hidden("Screen", screen)

<script type="text/javascript">
    SetFieldRequired();
    var checkedNodes = [];
    var selectedIds = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        debugger;
        checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        var multiselect = $("#WorkingPlace").data("kendoMultiSelect");
        var value = multiselect.value();

        var elementPara = {
            ProfileName: $("#SProfileName").val(),
            CodeEmp: $("#SCodeEmp").val(),
            OrgStructureID: checkedNodes.join(','),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            IsExcludeQuitEmp: document.getElementById('@Html.FieldIdFor(model => model.IsExcludeQuitEmp)').checked,
            WorkingPlace: value.join(','),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
            IsExport: isExport,
            ValueFields: $("#valueFieldsGrid").val()

        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    };

    $("#btnSearch").click(function () {
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        var grid = $('#gridSal_HoldSalary').data("kendoGrid");
        grid.dataSource.read();
        selectedIds = [];
    });

    $("#btnExport").click(function () {
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = true;
        var isAccess = checkPermission(PrivilegeType.Export, '@HRM.Infrastructure.Security.ConstantPermission.Hre_ReportHCSeniority');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + '/Sal_GetData/ReportSalaryTable',
            data: filterFieldInfo(true),
            dataType: 'json',
            success: function (returnValue) {

                var strSplit = returnValue.indexOf(',');
                var status = "";
                var fullPath = "";
                if (strSplit > 0) {
                    status = returnValue.substring(0, strSplit);
                    if (status == "Success") {
                        fullPath = returnValue.substring(strSplit + 1, returnValue.length);
                        window.location = '@_hrm_Main_Web' + fullPath;
                        ShowNotificationProcessor(status);
                    }
                } else {
                    ShowNotificationProcessor(returnValue);
                }
                @*var url = '@_hrm_Main_Web' + returnValue;
                window.location = url;*@
            }
        });
    });

    $("#btnCreateTemplate").click(function () {

        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = true;
        CreateTemplate('@_hrm_Hr_Service' + '/Sal_GetData/ReportSalaryTable', filterFieldInfo(true));

    });
    $('#btnApproved').click(function (e) {

        e.preventDefault();
        var grid = $('#gridSal_HoldSalary').data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        if (selectedItem != null) {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: '@Html.Raw(@ConstantDisplay.Hrm_Notification.TranslateString())',
                message: '@Html.Raw(@ConstantDisplay.HRM_Message_AreYouSureWantToChangeStatus.TranslateString())',
                icon: "k-ext-warning",
                width: "355px",
                height: "105px"
            })
                ).done(function (response) {

                    if (response.button == "OK") {
                        DoActionData("gridSal_HoldSalary", '@_hrm_Hr_Service' + "Sal_GetData/ActionApprovedHoldSalary/", selectedIds, '@EnumDropDown.HoldSalaryStatus.E_APPROVED.ToString()');
                    }
                    else if (response.button == "Cancel") {
                        return false;
                    }
                });
        }
        else {
            ErrorMessages('@Html.Raw(@ConstantDisplay.HRM_Message_PleaseSelectData.TranslateString())');
        }
        return false;
    });

    // Hàm xử lý dữ liệu được chọn trên lưới và xử lý bên dưới
    // vd: Xử lý thay đổi trạng thái
    function DoActionData(gridName, actionURL, parameter, status) {

        $.ajax({
            url: actionURL,
            data: { selectedIds: parameter, status: status },
            type: 'POST',
            traditional: true,
            success: function (data) {

                selectedIds = [];
                ReadGrid(gridName);
                ShowNotificationProcessor('@Html.Raw(@ConstantDisplay.Hrm_Change_Status_Succeed.TranslateString())');
            },
            error: function (data) {
                alert('Lỗi hàm DoActionData trong hrm-8.0.js');//Chưa dịch
            }
        });
    };

    @*$("#btnAnalyze").click(function () {
        KendoRouteMapping('#Hrm_Main_Web/Sal_AnalyzeHoldSalary/Index/', 'Hrm_Main_Web', '@_hrm_Main_Web');
    });*@

    //Xử lý nút tính giữ lương
    function ClickComputeHoldSalary() {
        if (selectedIds != '') {
            KendoRouteMapping('#Hrm_Main_Web/Sal_HoldSalary/ComputeHoldSalary?ids=' + selectedIds.join(','), 'Hrm_Main_Web', '@_hrm_Main_Web');
        }
        else {
            Notification('@ConstantDisplay.HRM_Message_PleaseSelectData.TranslateString()','@NotificationType.Warning.ToString()');
        }
    };

    $("#btnExportSelected").click(function () {

        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportHoldSalarySelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@HRM.Infrastructure.Security.ConstantPermission.Sal_HoldSalary');
    });

    $("#btnExportAll").click(function () {

        var grid = $('#gridSal_HoldSalary').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportAllHoldSalaryList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@HRM.Infrastructure.Security.ConstantPermission.Sal_HoldSalary');
    });

    $(document).ready(function () {
        document.getElementById("IsExcludeQuitEmp").checked = true;
    });
</script>

@Html.Hidden("valueFields")
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div class="hrm_box">
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.ProfileName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBox("SProfileName", "width:200px")
                        </div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.CodeEmp)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBox("SCodeEmp", "width:200px")
                        </div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OrgStructureID)
                        </div>
                        <div class="FieldValue">
                            @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                </div>
                <div class="hrm_box">
                    <div id="div5">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.WorkingPlace)
                        </div>
                        <div class="FieldValue">
                            @{
                                var WorkingPlace = new MultiSelectBuilderInfo()
                                {
                                    // Name = "SShopID",
                                    DataTextField = "WorkPlaceName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiWorkPlace",
                               };
                            }
                            @Html.VnrMultiSelectFor(model => model.WorkingPlace, WorkingPlace)
                        </div>
                    </div>
                    <div id="div5">
                        <div class="FieldTitle150">
                        </div>
                        <div class="FieldValue">
                            @{
                                var IsExcludeQuitEmp = new CheckBoxBuilderInfo()
                               {

                               };
                            }
                            @Html.VnrCheckBoxFor(model => model.IsExcludeQuitEmp, IsExcludeQuitEmp)
                            @Html.VnrLabelFor(mode => mode.IsExcludeQuitEmp)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @*@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnAnalyze", Content = ConstantAction.HRM_Common_Compute_HoldSalary.TranslateString(), ImageUrl = ConstantPath.IconComputePath })*@
    @Html.VnrButton(new ButtonBuilderInfo()
{
    EventClick = "ClickComputeHoldSalary",
    Name = "ClickComputeHoldSalary",
    Content = ConstantDisplay.HRM_Payroll_HoldSalary
        .TranslateString(),
    ImageUrl = ConstantPath.IconComputePath
})
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnApproved", Content = ConstantAction.HRM_Common_Approved.TranslateString(), ImageUrl = ConstantPath.IconApprovePath })

    <div style="float:right">
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnHoldSalary", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
    </div>
    <div class="clear"></div>
</div>

<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Payroll.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridSal_HoldSalary_Name + "__Sal_HoldSalary_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridSal_HoldSalary_Name,
            ReadActionUrl = @_hrm_Hr_Service + "Sal_GetData/GetHoldSalaryList/",
            ReadData = "filterFieldInfo",
            ShowEditIcon = false,
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {

            grid.ForeignKey = new Dictionary<object, object[]>()
            {
                    {Sal_HoldSalaryModel.FieldNames.Status,new object[]
                       { "Value", "Text", listSalaryStatus, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},
            };

            grid.ValueFields = new string[]
            {
                Sal_HoldSalaryModel.FieldNames.CodeEmp,
                Sal_HoldSalaryModel.FieldNames.CodeAttendance,
                Sal_HoldSalaryModel.FieldNames.ProfileName,
                Sal_HoldSalaryModel.FieldNames.EmployeeTypeName,
                Sal_HoldSalaryModel.FieldNames.WorkPlaceName,
                Sal_HoldSalaryModel.FieldNames.IDNo,
                Sal_HoldSalaryModel.FieldNames.DayLeave,
                Sal_HoldSalaryModel.FieldNames.IsLeaveContinuous,
                Sal_HoldSalaryModel.FieldNames.Terminate,
                Sal_HoldSalaryModel.FieldNames.DateComeBack,
                Sal_HoldSalaryModel.FieldNames.MonthSalary,
                Sal_HoldSalaryModel.FieldNames.MonthEndSalary,
                Sal_HoldSalaryModel.FieldNames.AmountSalary,
                Sal_HoldSalaryModel.FieldNames.AmountSalaryAfterTax,
                Sal_HoldSalaryModel.FieldNames.Status,


            };
            grid.SizeFields = new Dictionary<string, int>()
            {

                {Sal_HoldSalaryModel.FieldNames.CodeEmp, 110},
                {Sal_HoldSalaryModel.FieldNames.CodeAttendance, 110},
                {Sal_HoldSalaryModel.FieldNames.ProfileName, 100},
                {Sal_HoldSalaryModel.FieldNames.EmployeeTypeName, 110},
                {Sal_HoldSalaryModel.FieldNames.WorkPlaceName, 100},
                {Sal_HoldSalaryModel.FieldNames.IDNo, 90},
                {Sal_HoldSalaryModel.FieldNames.DayLeave, 100},
                {Sal_HoldSalaryModel.FieldNames.IsLeaveContinuous, 110},
                {Sal_HoldSalaryModel.FieldNames.Terminate, 90},
                {Sal_HoldSalaryModel.FieldNames.MonthSalary, 120},
                {Sal_HoldSalaryModel.FieldNames.DateComeBack, 120},
                {Sal_HoldSalaryModel.FieldNames.MonthEndSalary, 120},
                {Sal_HoldSalaryModel.FieldNames.AmountSalary, 120},
                {Sal_HoldSalaryModel.FieldNames.AmountSalaryAfterTax, 120},
                {Sal_HoldSalaryModel.FieldNames.Status, 90},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {

                {Sal_HoldSalaryModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Sal_HoldSalary_CodeEmp},
                {Sal_HoldSalaryModel.FieldNames.CodeAttendance, ConstantDisplay.HRM_Sal_HoldSalary_CodeAttendance},
                {Sal_HoldSalaryModel.FieldNames.ProfileName, ConstantDisplay.HRM_Sal_HoldSalary_ProfileName},
                {Sal_HoldSalaryModel.FieldNames.EmployeeTypeName, ConstantDisplay.HRM_Sal_HoldSalary_EmployeeName},
                {Sal_HoldSalaryModel.FieldNames.WorkPlaceName, ConstantDisplay.HRM_Sal_HoldSalary_WorkingPlaceName},
                {Sal_HoldSalaryModel.FieldNames.IDNo, ConstantDisplay.HRM_Sal_HoldSalary_IDNo},
                {Sal_HoldSalaryModel.FieldNames.DayLeave, ConstantDisplay.HRM_Sal_HoldSalary_DayLeave},
                {Sal_HoldSalaryModel.FieldNames.IsLeaveContinuous, ConstantDisplay.HRM_Sal_HoldSalary_IsLeaveContinuous},
                {Sal_HoldSalaryModel.FieldNames.Terminate, ConstantDisplay.HRM_Sal_HoldSalary_Terminate},
                {Sal_HoldSalaryModel.FieldNames.DateComeBack, ConstantDisplay.HRM_HR_Profile_DateComeBack},
                {Sal_HoldSalaryModel.FieldNames.MonthSalary, ConstantDisplay.HRM_Sal_HoldSalary_MonthSalary},
                {Sal_HoldSalaryModel.FieldNames.MonthEndSalary, ConstantDisplay.HRM_Sal_HoldSalary_MonthEndSalary},
                {Sal_HoldSalaryModel.FieldNames.AmountSalary, ConstantDisplay.HRM_Sal_HoldSalary_AmountSalary},
                {Sal_HoldSalaryModel.FieldNames.AmountSalaryAfterTax, ConstantDisplay.HRM_Sal_HoldSalary_AmountSalary},
                {Sal_HoldSalaryModel.FieldNames.Status, ConstantDisplay.HRM_Sal_HoldSalary_IsHoldSal},

            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
    //var grid = new GridBuilderInfo
    //{
    //    Name = "gridSal_HoldSalary",
    //    ValueFields = valueFields,
    //    SizeFields = sizeFields,
    //    DisplayFields = displayFields,
    //    ReadActionUrl = @_hrm_Hr_Service + "Sal_GetData/GetHoldSalaryList/",
    //    ReadData = "filterFieldInfo",
    //    ShowEditIcon = false,
    //    ForeignKey=foreignKey
    //    // EventDataBound = "changePageGird",
    //};
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Sal_HoldSalaryModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnHoldSalary", "Sal_HoldSalaryModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>

@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)






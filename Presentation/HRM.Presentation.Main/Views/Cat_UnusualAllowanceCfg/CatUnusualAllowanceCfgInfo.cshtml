@using System.Collections
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Category.Models.Cat_UnusualAllowanceCfgModel

@{
    ViewBag.Title = "catUnusualAllowanceCfg";
    Layout = null;
    //var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    IList<SelectListItem> listEDType = Enum.GetValues(typeof(EDType))
   .Cast<EDType>()
   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
   .ToList();

    IList<SelectListItem> listUnusualEDType = Enum.GetValues(typeof(EnumDropDown.UnusualEDType))
   .Cast<EnumDropDown.UnusualEDType>()
   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
   .ToList();


    var allowanceID = Guid.Empty;
    if (Model != null && Model.ID != Guid.Empty)
    {
        allowanceID = Model.ID;
    }
}


<script>
    SetFieldRequired();



    function onSave() {
        //var Amount
        var _Amount = $("#CatUnusaualAllowanceICfgInfro_Amount").val();
        if (_Amount == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Số Tiền] Không Thể Bỏ Trống", "k-block k-info-colored");//Chưa dịch!
            return;
        }

        //  if (validate()) {
        onSaveAndContinue($('#form_cat_unusualAllowanceCfg'), '@_hrm_Hr_Service', 'api/Cat_UnusualAllowanceCfg/', '@ConstantControlName.HRM_Category_UnusualAllowanceCfg_Grid_Name', 'CatUnusualAllowanceCfgInfo'); return false;
        //  }
        return false;
    }
    function onSaveClose() {
        // if (validate()) {
        var _Amount = $("#CatUnusaualAllowanceICfgInfro_Amount").val();
        if (_Amount == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Số Tiền] Không Thể Bỏ Trống", "k-block k-info-colored");//Chưa dịch!
            return;
        }
        onSaveAndClose($('#form_cat_unusualAllowanceCfg'), '@_hrm_Hr_Service', 'api/Cat_UnusualAllowanceCfg/', '@ConstantControlName.HRM_Category_UnusualAllowanceCfg_Grid_Name', 'CatUnusualAllowanceCfgInfo'); return false;
        //  }
        return false;
    }
    function onSaveDataPopUp() {
        // if (validate) {
        var _Amount = $("#CatUnusaualAllowanceICfgInfro_Amount").val();
        if (_Amount == "") {
            ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "[Số Tiền] Không Thể Bỏ Trống", "k-block k-info-colored");//Chưa dịch!
            return;
        }

        onlySave($('#form_cat_unusualAllowanceCfg'), '@_hrm_Hr_Service', 'api/Cat_UnusualAllowanceCfg/', '@ConstantControlName.HRM_Category_UnusualAllowanceCfg_Grid_Name', 'CatUnusualAllowanceCfgInfo'); return false;
        //   }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_unusualAllowanceCfg" }))
{
    @Html.HiddenFor(model => model.ID)

    <table>
        <tr>
            <td>
                @*<div class="hrm_box">*@
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Code = new TextBoxBuilderInfo()
                            {
                                Width = 300,
                                Name = "CatUnusualAllowanceCfgInfo_Code"
                            };
                            if (Model != null)
                            {
                                _Code.Value = Model == null ? string.Empty : Model.Code;
                            }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code, _Code)
                    </div>
                </div>

                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.UnusualAllowanceCfgName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.UnusualAllowanceCfgName, "width:300px;")
                    </div>
                </div>

                <div id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.EDType)
                    </div>
                    <div class="FieldValue">
                        @{
                            var dropdownEDType = new DropDownListBuilderInfo()
                            {
                                Name = "CatUnusaualAllowanceICfgInfro_EDType",
                                DataTextField = "Text",
                                DataValueField = "Value",
                                BindTo = listEDType,
                                OptionLabel = @ConstantDisplay.HRM_Category_SelectType.TranslateString(),
                                StyleCss = "width:300px"
                            };
                        }
                        @(Html.VnrDropDownListFor(mode => mode.EDType, dropdownEDType))
                    </div>
                    <br />
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Amount)
                    </div>
                    <div class="FieldValue">
                        @{
                            var numericTextBoxAmount = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Name = "CatUnusaualAllowanceICfgInfro_Amount",
                                Format = ConstantFormat.HRM_Format_Int,
                                Value = Model == null ? 0 : Model.Amount
                            };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.Amount, numericTextBoxAmount)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Type)
                    </div>
                    <div class="FieldValue">
                        @{
    var UnusualEDType = new DropDownListBuilderInfo()
    {
        Name = "CatUnusaualAllowanceICfgInfro_Type",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listUnusualEDType,
        StyleCss = "width:300px"
    };
                        }
                        @(Html.VnrDropDownListFor(mode => mode.Type, UnusualEDType))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.IsChargePIT)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.IsChargePIT)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.IsAddToHourlyRate)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.IsAddToHourlyRate)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.IsExcludePayslip)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.IsExcludePayslip)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Formula)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Formula, "width:500px;height:100px;")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Comment)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Comment, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-CatUnusualAllowanceCfg", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-CatUnusualAllowanceCfg", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-CatUnusualAllowanceCfg", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
    </table>
}


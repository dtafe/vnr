@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Security;
@using HRM.Presentation.Category.Models;
@using HRM.Presentation.Main.Controllers;
@using HRM.Presentation.Hr.Models
@model Hre_ProfileModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Att_ProfileNotApplyGrade_Title.TranslateString();
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    Layout = null;
}
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_Attendance_ProfilenotGrade_PopUp_Name,
        Visible = false,
        Width = 500,
        LoadContentFrom = @_hrm_Main_Web + "Att_ProfileNotGrade/Att_ProfileNotGradeInfo/",
    };
}
@(Html.VnrWindow(window))
<script>
    //Biến để lưu id của các dòng đã check chọn
    var selectedIds = [];
    var gridName = '@ConstantControlName.HRM_Attendance_ProfilenotGrade_Grid_Name';
    var popUpName = '@ConstantControlName.HRM_Attendance_ProfilenotGrade_PopUp_Name';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Att_ProfileNotApplyGrade_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Att_ProfileNotApplyGrade_PopUp_Create_Title.TranslateString())';

    $(document).ready(function () {

        //Ẩn hiện div chứa các input tìm kiếm
        ShowHidePanel();
        //Xử lý sự kiện click button tìm kiếm
        $("#btnSearch").click(function () {

            ReadGrid(gridName);
        });

        EditGridPopUp(gridName, popUpName, '@_hrm_Main_Web' + "Att_ProfileNotGrade/ProfileNotGradeInfo/", '@ConstantPermission.Att_ProfileNotGrade', titleEditPopUp);



    });
    //Lấy dữ liệu khi tìm kiếm
    function filterFieldInfo() {
        return {
            CodeEmp: $('#ProfileID1').val(),
            ProfileName: $('#ProfileName1').val(),
            IsExport: false,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    //Xử lý khi check chọn các dòng trên lưới thì lưu id của các dòng đó cào biến selectedIds ở trên
    GridCheckbox(gridName);
    //Tạo mới ngân hàng
    $("#btnApplyGrade").click(function () {
        debugger;
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Att_ProfileNotGrade');
        if (!isAccess) {
            return;
        }
        PopUpCreate("@ConstantControlName.HRM_Attendance_ProfilenotGrade_PopUp_Name", titleEditPopUp, '@ConstantPermission.Att_ProfileNotGrade_Appy');
    });

    $("#btnExportAll").click(function () {
        debugger;
        var urlGetData = '@_hrm_Hre_Service' + "Hre_GetData/ExportAllProfileNotGrade/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Att_ProfileNotGrade_Export');
    });
    
</script>
<div id="idControl" class="k-content"></div>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(model => model.CodeEmp)
                    </div>
                    <div class="FieldValue" id="aaa">
                        @{
                            var txtProfileCode = new TextBoxBuilderInfo()
                            {
                               
                                Name = "ProfileID1"
                            };
                        }
                        @Html.VnrTextBox(txtProfileCode)

                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(model => model.ProfileName)
                    </div>
                    <div class="FieldValue">
                        @{
                            var txtProfileName = new TextBoxBuilderInfo()
                            {
                                Name = "ProfileName1"
                            };
                        }
                        @Html.VnrTextBox(txtProfileName)
                    </div>
                </div>
                
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnApplyGrade", Content = ConstantAction.HRM_Common_Sal_ProfileNotApplyGrade_Apply.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div style="float:right">
        @*<div class="HideExportCate">
                @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_Export.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            </div>*@
        
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnProfileNotGrade", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
    </div>
    <div class="clear"></div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_Attendance_ProfilenotGrade_Grid_Name + "__Att_ProfileNotGrade_Index";
        Sys_ColumnModeController control = new Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_Attendance_ProfilenotGrade_Grid_Name,
            ShowCommand = false,
            ReadActionUrl = @_hrm_Hre_Service + "Hre_GetData/Get_Att_ProfileNotGrade/",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new[]
            {
                Hre_ProfileModel.FieldNames.CodeEmp,
                Hre_ProfileModel.FieldNames.ProfileName,
              
            };

            grid.SizeFields = new Dictionary<string, int>()
            {
                {Hre_ProfileModel.FieldNames.CodeEmp,100},
                {Hre_ProfileModel.FieldNames.ProfileName,140},
              
            };

            grid.Filterable = new Dictionary<string, bool>()
            {
                { Hre_ProfileModel.FieldNames.CodeEmp,true},
                {Hre_ProfileModel.FieldNames.ProfileName,true},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {

                { Hre_ProfileModel.FieldNames.CodeEmp,ConstantDisplay.HRM_Att_ProfileNotApplyGrade_CodeEmp},
                {Hre_ProfileModel.FieldNames.ProfileName,ConstantDisplay.HRM_Att_ProfileNotApplyGrade_ProfileName},
               
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
    }

    @(Html.VnrGrid<Hre_ProfileModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnProfileNotGrade", "Hre_ProfileModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Recruitment.Models;
@model Rec_JobConditionModel

@{
    Layout = null;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    string valuebool = "False";
    string strDisease = "";
    string strEducationLevel = "";
    string strProvinces = "";
    if (Model != null)
    {
        if (Model.ConditionName == ConditionName.E_DISEASEIDS.ToString() && !string.IsNullOrEmpty(Model.Value1))
        {
            strDisease = Model.Value1;
        }
        if (Model.ConditionName == ConditionName.E_EDUCATIONLEVEL.ToString() && !string.IsNullOrEmpty(Model.Value1))
        {
            strEducationLevel = Model.Value1;
        }
        if (Model.ConditionName == ConditionName.E_CANDIDATEP_PPROVINCE.ToString() && !string.IsNullOrEmpty(Model.Value1))
        {
            strProvinces = Model.Value1;
        }
        if ((Model.ConditionName == ConditionName.E_SPECIALISATION.ToString() || Model.ConditionName == ConditionName.E_GRADUATESCHOOL.ToString())
            && !string.IsNullOrEmpty(Model.Value1)
            )
        {
            Model.Value1_Text = Model.Value1;
        }
        try
        {
            Model.Value1_Number = double.Parse(Model.Value1);
        }
        catch
        {
        }
        if (Model.Value1 == "True")
        {
            valuebool = "True";
        }
    }
    IList<SelectListItem> lstConditionBrand = Enum.GetValues(typeof(ConditionBrand))
      .Cast<ConditionBrand>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
      .ToList();

    IList<SelectListItem> lstEntityType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.EnumDropDown.EntityType))
      .Cast<HRM.Infrastructure.Utilities.EnumDropDown.EntityType>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
      .ToList();

    IList<SelectListItem> lstValueType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.ValueType))
    .Cast<HRM.Infrastructure.Utilities.ValueType>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text).ToList();

    IList<SelectListItem> lstGender = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.EnumDropDown.GenderType))
      .Cast<HRM.Infrastructure.Utilities.EnumDropDown.GenderType>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text).ToList();
    IList<SelectListItem> lstConditionName = Enum.GetValues(typeof(ConditionName))
      .Cast<ConditionName>()
      .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text).ToList();

}
<script>
    SetFieldRequired();
    function LoadDisease() {

        $("#DiseaseIDs").data("kendoMultiSelect");
        if ('@strDisease' != '' && $("#DiseaseIDs").data("kendoMultiSelect") != undefined) {
            var arr = '@strDisease'.split(",");
            $("#DiseaseIDs").data("kendoMultiSelect").value(arr);
        }
    }

    function LoadEducationLevel() {

        $("#EducationLevelIDs").data("kendoMultiSelect");
        if ('@strEducationLevel' != '' && $("#EducationLevelIDs").data("kendoMultiSelect") != undefined) {
            var arr = '@strEducationLevel'.split(",");
            $("#EducationLevelIDs").data("kendoMultiSelect").value(arr);
        }

    }

    function LoadProvince() {
        debugger;
        $("#PProvinceIDs").data("kendoMultiSelect");
        if ('@strProvinces' != '' && $("#PProvinceIDs").data("kendoMultiSelect") != undefined) {
            var arr = '@strProvinces'.split(",");
            $("#PProvinceIDs").data("kendoMultiSelect").value(arr);
        }

    }


    $(document).ready(function () {
        setTimeout(function () { LoadDisease(); }, 1000);
        setTimeout(function () { LoadEducationLevel(); }, 1000);
        setTimeout(function () { LoadProvince(); }, 1000);
        $(".number1").hide();
        $(".bool").hide();
        $(".Gender").hide();
        $(".EducationLevel").hide();
        $(".Disease").hide();
        $(".Div_text").hide();
        $(".PProvince").hide();
        ChangeAppear();
        if ('@valuebool' == "True") {
            $('#Value1_bool').attr('checked', true);
        }
    });
    function onSaveNew() {
        SetValue();
        onSaveAndContinue($('#form_Rec_JobCondition'), '@_hrm_Hre_Service', 'api/Rec_JobCondition/', '@ConstantControlName.HRM_Rec_JobCondition_Grid_Name', '@ConstantControlName.HRM_Rec_JobCondition_PopUp_Name');
        //ReadGrid('@ConstantControlName.HRM_Rec_JobCondition_Grid_Name');

        return false;
    }

    function onSaveClose() {
        SetValue();
        onSaveAndClose($('#form_Rec_JobCondition'), '@_hrm_Hre_Service', 'api/Rec_JobCondition/', '@ConstantControlName.HRM_Rec_JobCondition_Grid_Name', '@ConstantControlName.HRM_Rec_JobCondition_PopUp_Name');
        return false;
    }
    function onSaveDataPopUp() {
        SetValue();
        onlySave($('#form_Rec_JobCondition'), '@_hrm_Hre_Service', 'api/Rec_JobCondition/', '@ConstantControlName.HRM_Rec_JobCondition_Grid_Name');
        return false;
    }

    function SetValue() {

        var ConditionName = $("#ConditionName").val();
        if (ConditionName == '@ConditionName.E_HEIGHT.ToString()' || ConditionName == '@ConditionName.E_WEIGHT.ToString()' ||
            ConditionName == '@ConditionName.E_LEVELEYES.ToString()' || ConditionName == '@ConditionName.E_LEVERIGHTLEYES.ToString()'
            || ConditionName == '@ConditionName.E_DURATIONFAILPREVIOUS.ToString()' || ConditionName == '@ConditionName.E_AGE.ToString()'
            || ConditionName == '@ConditionName.E_GENERALHEALTH.ToString()' ||
            ConditionName == '@ConditionName.E_WRITETEST.ToString()' || ConditionName == '@ConditionName.E_INTERVIEW.ToString()'
             || ConditionName == '@ConditionName.E_SCORE1.ToString()' || ConditionName == '@ConditionName.E_SCORE2.ToString()'
            || ConditionName == '@ConditionName.E_SCORE3.ToString()'
            || ConditionName == '@ConditionName.E_MUSCULOSKELETAL.ToString()' || ConditionName == '@ConditionName.E_BLOODPRESSURE.ToString()'
            || ConditionName == '@ConditionName.E_HEARTBEAT.ToString()' || ConditionName == '@ConditionName.E_YEAROFEXPERIENCE.ToString()') {
            $("#Value1").val($("#Value1_Number").val());

        }
        if (ConditionName == '@ConditionName.E_ISTERMINATEINCOMPANY.ToString()') {

            $("#Value1").val($("#Value1_bool").val());
        }
        if (ConditionName == '@ConditionName.E_DISEASEIDS.ToString()') {
            var DiseaseListIDs = $("#DiseaseIDs").val();
            if (DiseaseListIDs != "") {
                $("#DiseaseIDs").val(DiseaseListIDs.join(','));
                $("#Value1").val(DiseaseListIDs.join(','));
            }
        }
        if (ConditionName == '@ConditionName.E_EDUCATIONLEVEL.ToString()') {
            var lstEducationLevelIDs = $("#EducationLevelIDs").val();
            if (lstEducationLevelIDs != "") {
                $("#EducationLevelIDs").val(lstEducationLevelIDs.join(','));
                $("#Value1").val(lstEducationLevelIDs.join(','));
            }
        }
        if (ConditionName == '@ConditionName.E_CANDIDATEP_PPROVINCE.ToString()') {
            var lstProvincesIDs = $("#PProvinceIDs").val();
            if (lstProvincesIDs != "") {
                $("#PProvinceIDs").val(lstProvincesIDs.join(','));
                $("#Value1").val(lstProvincesIDs.join(','));
            }
        }
        if (ConditionName == '@ConditionName.E_GENDER.ToString()') {
            $("#Value1").val($("#Gender").val());
        }

        if (ConditionName == '@ConditionName.E_SPECIALISATION.ToString()' || ConditionName == '@ConditionName.E_GRADUATESCHOOL.ToString()') {
            $("#Value1").val($("#Value1_Text").val());
        }
    }
    function ChangeAppear() {
        var ConditionName = $("#ConditionName").val();
        if (ConditionName == '@ConditionName.E_HEIGHT.ToString()' || ConditionName == '@ConditionName.E_WEIGHT.ToString()' ||
            ConditionName == '@ConditionName.E_LEVELEYES.ToString()' || ConditionName == '@ConditionName.E_LEVERIGHTLEYES.ToString()' || ConditionName == '@ConditionName.E_DURATIONFAILPREVIOUS.ToString()' ||
            ConditionName == '@ConditionName.E_AGE.ToString()' || ConditionName == '@ConditionName.E_GENERALHEALTH.ToString()' ||
            ConditionName == '@ConditionName.E_WRITETEST.ToString()' || ConditionName == '@ConditionName.E_INTERVIEW.ToString()'
             || ConditionName == '@ConditionName.E_SCORE1.ToString()' || ConditionName == '@ConditionName.E_SCORE2.ToString()'
            || ConditionName == '@ConditionName.E_SCORE3.ToString()'
             || ConditionName == '@ConditionName.E_MUSCULOSKELETAL.ToString()' || ConditionName == '@ConditionName.E_BLOODPRESSURE.ToString()'
            || ConditionName == '@ConditionName.E_HEARTBEAT.ToString()' || ConditionName == '@ConditionName.E_YEAROFEXPERIENCE.ToString()') {
            $(".number1").show();
            $(".bool").hide();
            $(".Gender").hide();
            $(".EducationLevel").hide();
            $(".Disease").hide();
            $(".Div_text").hide();
            $("#Value1").val($("#Value1_Number").val());
            $(".PProvince").hide();

        }
        if (ConditionName == '@ConditionName.E_ISTERMINATEINCOMPANY.ToString()') {
            $(".number1").hide();
            $(".bool").show();
            $(".Gender").hide();
            $(".EducationLevel").hide();
            $(".Disease").hide();
            $(".Div_text").hide();
            $(".PProvince").hide();

            if ('@valuebool' == "True") {
                $('#Value1_bool').attr('checked', true);
            }
            $("#Value1").val($("#Value1_bool").val());

        }
        if (ConditionName == '@ConditionName.E_DISEASEIDS.ToString()') {
            $(".number1").hide();
            $(".bool").hide();
            $(".Gender").hide();
            $(".EducationLevel").hide();
            $(".Disease").show();
            $(".Div_text").hide();

        }

        if (ConditionName == '@ConditionName.E_GENDER.ToString()') {
            $(".number1").hide();
            $(".bool").hide();
            $(".Gender").show();
            $(".EducationLevel").hide();
            $(".Disease").hide();
            $("#Value1").val($("#Gender").val());
            $(".Div_text").hide();
            $(".PProvince").hide();

        }
        if (ConditionName == '@ConditionName.E_EDUCATIONLEVEL.ToString()') {
            $(".number1").hide();
            $(".bool").hide();
            $(".Gender").hide();
            $(".EducationLevel").show();
            $(".Disease").hide();
            $("#Value1").val($("#EducationLevelIDs").val());
            $(".Div_text").hide();
            $(".PProvince").hide();
        }
        if (ConditionName == '@ConditionName.E_SPECIALISATION.ToString()' || ConditionName == '@ConditionName.E_GRADUATESCHOOL.ToString()') {
            $(".number1").hide();
            $(".bool").hide();
            $(".Gender").hide();
            $(".EducationLevel").hide();
            $(".Disease").hide();
            $("#Value1").val($("#Value1_Text").val());
            $(".Div_text").show();
            $(".PProvince").hide();
        }

        if (ConditionName == '@ConditionName.E_CANDIDATEP_PPROVINCE.ToString()') {
            $(".number1").hide();
            $(".bool").hide();
            $(".Gender").hide();
            $(".EducationLevel").hide();
            $(".Disease").hide();
            $("#Value1").val($("#PProvinceIDs").val());
            $(".Div_text").hide();
            $(".PProvince").show();
        }
    }

    function SelectChangeConditionName() {
        ChangeAppear();
    }

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Rec_JobCondition" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>
                <div style="display:block">
                    <fieldset>
                        <legend>
                            @ConstantDisplay.HRM_Rec_JobCondition_ConditionName.TranslateString()
                        </legend>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Code)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(mode => mode.Code, "width: 300px")
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.HiddenFor(mode => mode.Value1, "width: 300px")
                                @Html.HiddenFor(mode => mode.Value2, "width: 300px")
                                @Html.VnrLabelFor(mode => mode.ConditionName)
                            </div>
                            <div class="FieldValue">
                                @{
    var _ConditionName = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = lstConditionName,
        Value = Model != null ? Model.ConditionName : null,
        EventChange = "SelectChangeConditionName"
    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.ConditionName, _ConditionName)
                            </div>
                        </div>

                        <div class="Div_text">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Value1_Text = new TextBoxBuilderInfo()
{
    Name = "Value1_Text",
    Value = Model != null && Model.Value1_Text != null ? Model.Value1_Text : null
};
                                }
                                @Html.VnrTextBoxFor(mode => mode.Value1_Text, _Value1_Text)
                            </div>
                        </div>


                        <div class="number1">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Value1_Number = new NumericTextBoxBuilderInfo<double>()
{
    StyleCss = "width:120px",
    Name = "Value1_Number",
    Value = Model != null && Model.Value1_Number.HasValue ? Model.Value1_Number.Value : 0

};
                                }
                                @Html.VnrNumericTextBoxFor(mode => mode.Value1_Number, _Value1_Number)
                            </div>
                        </div>
                        <div class="bool">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Value1_bool = new CheckBoxBuilderInfo()
{
    Id = "Value1_bool",
};
                                }
                                @Html.VnrCheckBoxFor(mode => mode.Value1_bool, _Value1_bool)
                                <script>
                                    $('#Value1_bool').change(function () {
                                        if ($(this).is(":checked") == true) {
                                            $(this).val("True");
                                        }
                                        else {
                                            $(this).val("False");
                                        }

                                    });
                                </script>
                            </div>
                        </div>
                        <div class="EducationLevel">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var EducationLev = new MultiSelectBuilderInfo()
    {
        Width = 300,
        Name = "EducationLevelIDs",
        DataTextField = "NameEntityName",
        DataValueField = "Code",
        Url = _hrm_Hre_Service + "Cat_GetData/GetMultiEducationLevel",
        Placeholder = ConstantDisplay.HRM_Rec_JobCondition_SelectEducationLevels.TranslateString(),
    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.EducationLevelIDs, EducationLev)
                                @Html.HiddenFor(mode => mode.EducationLevelIDs)
                            </div>
                        </div>
                        <div class="PProvince">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var _PProvince = new MultiSelectBuilderInfo()
    {
        Width = 300,
        Name = "PProvinceIDs",
        DataTextField = "ProvinceName",
        DataValueField = "Code",
        Url = _hrm_Hre_Service + "Cat_GetData/GetMultiProvince",
        Placeholder = ConstantDisplay.HRM_Category_SelectProvince.TranslateString(),
    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.PProvinceIDs, _PProvince)
                                @Html.HiddenFor(mode => mode.PProvinceIDs)
                            </div>
                        </div>

                        <div class="Gender">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _gender = new DropDownListBuilderInfo()
                                    {
                                        StyleCss = "width:300px",
                                        Name = "Gender",
                                        DataTextField = "Text",
                                        DataValueField = "Value",
                                        BindTo = lstGender,
                                        Value = Model != null ? Model.Value1 : null,
                                    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.Value1, _gender)
                            </div>
                        </div>
                        <div class="Disease">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.Value1)
                            </div>
                            <div class="FieldValue">
                                @{
    var Disease = new MultiSelectBuilderInfo()
    {
        Width = 300,
        Name = "DiseaseIDs",
        DataTextField = "NameEntityName",
        DataValueField = "ID",
        Url = _hrm_Hre_Service + "Cat_GetData/GetMultiDiseList",
        Placeholder = ConstantDisplay.HRM_Rec_JobCondition_SelectDiseases.TranslateString(),
    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.DiseaseIDs, Disease)
                                @Html.HiddenFor(mode => mode.DiseaseIDs)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ConditionBrand)
                            </div>
                            <div class="FieldValue">
                                @{
    var _ConditionBrand = new DropDownListBuilderInfo()
{
    StyleCss = "width:300px",
    DataTextField = "Text",
    DataValueField = "Value",
    BindTo = lstConditionBrand,
    Value = Model != null ? Model.ConditionBrand : null,
};
                                }
                                @Html.VnrDropDownListFor(mode => mode.ConditionBrand, _ConditionBrand)
                            </div>
                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ValueType)
                            </div>
                            <div class="FieldValue">
                                @{
    var _ValueType = new DropDownListBuilderInfo()
    {
        StyleCss = "width:300px",
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = lstValueType,
        Value = Model != null ? Model.ValueType : null,
    };
                                }
                                @Html.VnrDropDownListFor(mode => mode.ValueType, _ValueType)
                            </div>

                        </div>
                        <div>
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Note)
                            </div>
                            <div class="FieldValue">

                                @Html.VnrTextAreaFor(mode => mode.Note, "width:500px;height:100px;")
                            </div>

                        </div>
                    </fieldset>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-JobCondition", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-JobCondition", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-JobCondition", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models
@using HRM.Presentation.UI.Controls.Kendo
@using System.Collections;
@using HRM.Infrastructure.Security

@model HRM.Presentation.Payroll.Models.Sal_UnusualAllowanceModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    Guid profileID = Guid.Empty;

}


<script>
    //SetFieldRequired();
    SetFieldRequiredByScreenName("HealthInsuranceAndOrtherInfo")
    document.getElementById("HealthInsuranceAndOrtherInfo_RelativeTypeName").readOnly = true;
   // document.getElementById("HealthInsuranceAndOrtherInfo_Amount").readOnly = true;
    
    function onSaveType(saveType)
    {
        debugger;
        var _saveType = saveType;
        $("#HealthInsuranceAndOrtherInfo_TypeUnusual_new").val("E_HEALTHINSURANCEANDORTHER");
        $("#HealthInsuranceAndOrtherInfo_Type_new").val("E_HEALTHINSURANCEANDORTHER");
        var _profileid = $('#HealthInsuranceAndOrtherInfo_ProfileID').val();
        var IsActive = false;
        if (_profileid  != null)
        {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + 'Hre_GetData/CheckProfileStoWorked',
                data: { profileid: _profileid[0] },
                dataType: 'json',
                async: false,
                success: function (data) {
                    debugger;
                    if (data == "error")
                    {
                        IsActive = false;
                        return IsActive;
                    }
                    else
                    {
                        IsActive = true;
                        return IsActive;
                    }
                },
            });
        }
        else
        {
            onlySave($('#form_sal_HealthInsuranceAndOrtherInfo'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_Grid_Name'); return false;
        }
        if (IsActive == false)
        {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "Thông Báo",
                message: '@ConstantDisplay.HRM_HR_ProfileStopWorkedDoYouWantToContinue.TranslateString()',
                icon: "k-ext-warning",
                width: "355px",
                height: "105px"
            })
               ).done(function (response) {
                   //e.preventDefault();
                   if (response.button == "OK")
                   {
                       debugger;
                       if (_saveType == "saveContinue")
                        {
                           onSaveAndContinue($('#form_sal_HealthInsuranceAndOrtherInfo'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_Grid_Name', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_PopUp_Name');
                           return false;
                       }
                       else if (_saveType == "saveClose")
                       {
                           onSaveAndClose($('#form_sal_HealthInsuranceAndOrtherInfo'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_Grid_Name', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_PopUp_Name');
                           return false;
                       }
                       else if(_saveType == "save")
                       {
                           onlySave($('#form_sal_HealthInsuranceAndOrtherInfo'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_Grid_Name'); return false;
                       }
                    }
                   if (response.button == "Cancel")
                   {
                       IsActive = false;
                       return false;
                   }
               });
        }

        if (IsActive == true)
        {
            if (_saveType == "saveContinue") {
                onSaveAndContinue($('#form_sal_HealthInsuranceAndOrtherInfo'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_Grid_Name', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_PopUp_Name');
                return false;
            }
            else if (_saveType == "saveClose") {
                onSaveAndClose($('#form_sal_HealthInsuranceAndOrtherInfo'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_Grid_Name', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_PopUp_Name');
                return false;
            }
            else if (_saveType == "save") {
                onlySave($('#form_sal_HealthInsuranceAndOrtherInfo'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Sal_HealthInsuranceAndOrther_Grid_Name'); return false;
            }
        }
        else
        {
            return false;
        }
    }
    function onSaveUnusualAllowance() {
        @*debugger;
        onSaveAndContinue($('#form_sal_UnusualAllowance'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Category_UnusualAllowance_Grid_Name', '@ConstantControlName.HRM_Category_UnusualAllowance_PopUp_Name');
        return false;*@
        onSaveType("saveContinue");
    }

    function onSaveCloseUnusualAllowance() {
        @*$("#HealthInsuranceAndOrtherInfo_TypeUnusual_new").val("E_ExcludePayslip");
        $("#HealthInsuranceAndOrtherInfo_Type_new").val("E_ ExcludePayslip");
        onSaveAndClose($('#form_sal_UnusualAllowance'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Category_UnusualAllowance_Grid_Name', '@ConstantControlName.HRM_Category_UnusualAllowance_PopUp_Name');
        return false;*@
        onSaveType("saveClose");
    }
    function onSaveDataPopUpUnusualAllowance() {
        @*$("#HealthInsuranceAndOrtherInfo_TypeUnusual_new").val("E_ExcludePayslip");
        $("#HealthInsuranceAndOrtherInfo_Type_new").val("E_ ExcludePayslip");
        onlySave($('#form_sal_UnusualAllowance'), '@_hrm_Hr_Service', 'api/Sal_UnusualAllowance/', '@ConstantControlName.HRM_Category_UnusualAllowance_Grid_Name'); return false;*@
        onSaveType("save");
    }

    function showPrice() {

        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetMultiAmountByUnusualAllowanceCfgid',
            data: { unusualedtypeid: $("#HealthInsuranceAndOrtherInfo_UnusualEDTypeID").val(), amountFilter: "" },
            dataType: 'json',
            async: false,
            success: function (data) {
                var numerictextbox = $("#HealthInsuranceAndOrtherInfo_Amount").data("kendoNumericTextBox");
                numerictextbox.value(data[0].Amount);
            }
        });
    }
    function showRelativeType(e) {
        var relativeidchange = e.sender._old;
        SelectRelativeTypeName(relativeidchange);
    };

    function SelectRelativeTypeName(e) {
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeTypeByRelativeId',
            data: { relativeid: e, relativetypeFilter: "" },
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data.length > 0) {
                    $("#HealthInsuranceAndOrtherInfo_RelativeTypeName").val(data[0].RelativeTypeName);
                    $("#HealthInsuranceAndOrtherInfo_RelativeTypeID").val(data[0].ID);
                }
            }
        });
    };

    function showRelative(e) {
        var profileID = e.sender._old;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeByProfileId',
            data: { profileid: profileID[0] },
            dataType: 'json',
            async: false,
            success: function (data) {
                var relativeCombo = $("#HealthInsuranceAndOrtherInfo_RelativeID").data("kendoDropDownList");
                relativeCombo.setDataSource(data);
                relativeCombo.refresh();
            }
        });
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetDateHireForProfile',
            data: { profileid: profileID[0] },
            dataType: 'json',
            async: false,
            success: function (data) {
                var datepicker = $("#HealthInsuranceAndOrtherInfo_DateHire").data("kendoDatePicker");
                datepicker.value(data);
            }
        });
    };

    //Thêm mới người thân
    function CreateUnusualAllowance_Relative() {
        debugger;
        var profileid = $("#HealthInsuranceAndOrtherInfo_ProfileID").data("kendoMultiSelect");
        if (profileid._dataItems.length != 0) {
            profileID = profileid._dataItems[0].ID;
            var url = '@_hrm_Main_Web' + "Sal_UnusualAllowance/Sal_UnusualAllowanceRelativeInfo/";
            PopUpEdit('@ConstantControlName.HRM_HR_Relative_PopUp_Name', url, profileID, '@Html.Raw(ConstantDisplay.HRM_HR_Relative_PopUp_Create_Title.TranslateString())');
        }
        else {
            ShowNotificationProcessor('@ConstantDisplay.HRM_Recruitment_UnusualAllowance_NotSelectProfile.TranslateString()');
            return;
        }
    };
    //Reload Control Dropdownlist
    function ReloadDropDownList_UnusualAllowance(e) {
        var multiselect = $("#HealthInsuranceAndOrtherInfo_ProfileID").data("kendoMultiSelect");
        var profileID = multiselect.value();
        if (profileID != null) {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeByProfileId',
                data: { profileid: profileID[0] },
                dataType: 'json',
                async: false,
                success: function (data) {
                    var relativeCombo = $("#" + e).data("kendoDropDownList");
                    relativeCombo.setDataSource(data);
                    relativeCombo.refresh();
                    relativeCombo.select(relativeCombo.ul.children().eq(1));
                    SelectRelativeTypeName(relativeCombo.value());
                }
            });
        }
    };
    function EvenClosePopup() {
        ReloadDropDownList_UnusualAllowance('HealthInsuranceAndOrtherInfo_RelativeID')
    };

    function SelectDefalutValue()
    {
        var combobox = $("#HealthInsuranceAndOrtherInfo_UnusualEDTypeID").data("kendoComboBox");

        combobox.select(combobox.ul.children().eq(0));
    };

</script>
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_HR_Relative_PopUp_Name,
        Visible = false,
        LoadContentFrom = @_hrm_Main_Web + "Sal_UnusualAllowance/Sal_UnusualAllowanceRelativeInfo?profileID=" + profileID,
        EvenClose = "EvenClosePopup",
    };
}
@(Html.VnrWindow(window))

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_sal_HealthInsuranceAndOrtherInfo" }))
{
    @Html.HiddenFor(model => model.ID, new { id = "UnusualAllowanceID" })
    @Html.HiddenFor(model => model.TypeUnusual, new { id = "HealthInsuranceAndOrtherInfo_TypeUnusual_new" })
    @Html.HiddenFor(model => model.Type, new { id = "HealthInsuranceAndOrtherInfo_Type_new" })
    @Html.HiddenFor(model => model.RelativeTypeID, new { id = "HealthInsuranceAndOrtherInfo_RelativeTypeID" })
    @*@Html.HiddenFor(model => model.Amount, new { id = "Amount" })*@
    <table>
        <tr>
            <td>

                <div id="div1">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProfileName)
                        @Html.HiddenFor(mode => mode.ID)
                    </div>
                    <div class="FieldValue">

                        @{
    IEnumerable valueProfile = new string[] { };
    if (Model != null)
    {
        valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
    }
                        }
                        @{
    var _Profile = new MultiSelectBuilderInfo()
    {
        Name = "HealthInsuranceAndOrtherInfo_ProfileID",
        DataTextField = "ProfileName",
        DataValueField = "ID",
        Url = @_hrm_Hr_Service + "Hre_GetData/GetAllMultiProfile",
        Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
        MaxSelectedItems = 1,
        Value = valueProfile,
        Width = 300,
        EventChange = "showRelative"
    };
                        }
                        @(Html.VnrMultiSelectFor(mode => mode.ProfileID, _Profile))

                    </div>

                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.RelativeID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _relativeName = new DropDownListBuilderInfo()
       {
           Name = "HealthInsuranceAndOrtherInfo_RelativeID",
           StyleCss = "Width: 300px",
           DataTextField = "RelativeName",
           DataValueField = "ID",
           ServerFilter = true,
           //FilterType = FilterType.Contains,
           EventChange = "showRelativeType",
           ShowButtonCreate = true,
           EvenClickButtonCreate = "CreateUnusualAllowance_Relative",
           EvenClickButtonReload = "ReloadDropDownList_UnusualAllowance",
           
           // Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiRelatives",
           //Value = Model == null ? string.Empty : Model.RelativeID.ToString()
       };
                        }
                        @Html.VnrDropDownListFor(model => model.RelativeID, _relativeName)
                    </div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.RelativeTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _UsRelativeTypeName = new TextBoxBuilderInfo()
    {
        Name = "HealthInsuranceAndOrtherInfo_RelativeTypeName",
        CssStyle = "background-color:WhiteSmoke;Width:300px"
    };
    if (Model != null)
    {
        _UsRelativeTypeName.Value = Model.RelativeTypeName != null ? Model.RelativeTypeName.ToString() : string.Empty;
    }
                        }
                        @Html.VnrTextBoxFor(model => model.RelativeTypeName, _UsRelativeTypeName)
                    </div>
                </div>

                <div id="div5">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.UnusualEDTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _UnusualEDTypeName = new ComboBoxBuilderInfo()
 {
     Name = "HealthInsuranceAndOrtherInfo_UnusualEDTypeID",
     DataTextField = "UnusualAllowanceCfgName",
     DataValueField = "ID",
     Url = _hrm_Hr_Service + "Sal_GetData/GetMultiHealthInsuranceAndOrther",
     StyleCss = "width:300px;",
     //Value = Model == null ? string.Empty : Model.UnusualEDTypeID.ToString(),
     Autobind=true,
     EventDataBound="SelectDefalutValue",
     //Enable=false,
     //EventChange = "showPrice"
 };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.UnusualEDTypeID, _UnusualEDTypeName))

                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.Amount)

                    </div>

                    <div class="FieldValue">
                        @{
    var text = new NumericTextBoxBuilderInfo<double>()
    {
        Name = "HealthInsuranceAndOrtherInfo_Amount",
        StyleCss = "width:300px",
        Format = ConstantFormat.HRM_Format_Money.ToString()
    };
    //if (Model != null)
    //{
    //    text.Value = Model != null ? Model.Amount != null?Model.Amount : null:null;
    //}
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Amount, text)
                        @{
    string valueCurr = string.Empty;
    if (Model == null || Model.CurrencyID == null)
    {
        valueCurr = "VND";
    }
                        }
                        @{
    var _UnusuaCurrencyName = new ComboBoxBuilderInfo()
     {
         Name = "HealthInsuranceAndOrtherInfo_CurrencyID",
         DataTextField = "CurrencyName",
         DataValueField = "ID",
         Index = 0,
         Url = _hrm_Hr_Service + "Sal_GetData/GetMultiCurrency",
         StyleCss = "width:70px;",
         Value = valueCurr,
         Autobind = true,
     };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID, _UnusuaCurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.DateHire)
                    </div>

                    <div class="FieldValue">
                        @{
    var _datepickerDateHire = new DatePickerBuilderInfo()
    {
        Name = "HealthInsuranceAndOrtherInfo_DateHire",
        StyleCss = "width:120px",
        //Enable=false,

    };
                        }
                        @Html.VnrDatePickerFor(model => model.DateHire, _datepickerDateHire)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.DateOccur)
                    </div>

                    <div class="FieldValue">
                        @{
    var _datepickerDateOccur = new DatePickerBuilderInfo()
    {
        Name = "HealthInsuranceAndOrtherInfo_DateOccur",
        StyleCss = "width:120px"
    };
                        }
                        @Html.VnrDatePickerFor(model => model.DateOccur, _datepickerDateOccur)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.MonthStart)
                    </div>

                    <div class="FieldValue">
                        @{
    var _datepickerMonthStart = new DatePickerBuilderInfo()
    {
        Name = "HealthInsuranceAndOrtherInfo_MonthStart",
        StyleCss = "width:120px",
        //Value=Model!=null?Model.MonthStart.ToString("dd/MM/yyyy"):"",
    };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthStart, _datepickerMonthStart)
                    </div>
                </div>



                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Notes)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Notes, "width:500px;height:100px;")
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUpUnusualAllowance", Name = "save-HealthInsuranceAndOrtherInfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveUnusualAllowance", Name = "save-continue-HealthInsuranceAndOrtherInfo", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveCloseUnusualAllowance", Name = "save-close-HealthInsuranceAndOrtherInfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
    </table>
}

<div>

    <script>
        $(document).ready(function () {
            var DateHire = $("#HealthInsuranceAndOrtherInfo_DateHire").data("kendoDatePicker");
            DateHire.readonly();
        });

    </script>

    @{
        if (Model != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var profileID = $("#HealthInsuranceAndOrtherInfo_ProfileID").val();

                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeByProfileId',
                        data: { profileid: profileID[0] },
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                            debugger;
                            var relativeCombo = $("#HealthInsuranceAndOrtherInfo_RelativeID").data("kendoDropDownList");
                            relativeCombo.setDataSource(data);
                            relativeCombo.refresh();

                            relativeCombo.select(function (dataItem) {
                                return dataItem.ID === "@Model.RelativeID";
                            });
                        }
                    });

                });
            </script>
        }

    }
</div>
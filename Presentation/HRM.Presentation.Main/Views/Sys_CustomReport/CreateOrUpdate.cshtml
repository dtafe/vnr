@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo
@model HRM.Presentation.HrmSystem.Models.Rep_MasterModel
@{
    Layout = null;
    var _hrm_Att_Web = ConstantPathWeb.Hrm_Att_Web;
    var _hrm_Att_Service = ConstantPathWeb.Hrm_Att_Service;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Cat_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    IList<SelectListItem> List_Module = Enum.GetValues(typeof(ModuleName))
.Cast<ModuleName>()
.Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
.ToList();


}

<script type="text/javascript">

    function EvenCheckedNodes(e) {
        debugger;
        if (e.node.children.length <= 1)
        {
            var treeviewID = $("#CustomReportTreeViewResult").getKendoTreeView().dataItem(e.node).id;
            debugger;
            ShowHre_ProgressBar();
            debugger;
            $.ajax({
                url: "@_hrm_Sys_Service" + "Sys_GetData/GetMultResourceResult",
                data: { id: treeviewID },
                type: 'POST',
                success: function (data) {
                    var treeview = $("#CustomReportTreeViewResult").data("kendoTreeView");
                    var ParentNode=treeview.findByText(e.node.textContent);
                    for (var i = 0; i < data.length; i++) {
                        e.sender.append({ id: data[i].id, Name: data[i].Name, hasChildren: data[i].hasChildren }, ParentNode);
                    }
                    CloseHre_ProgressBar();
                },
                error: function (data) {
                    alert('error');
                    CloseHre_ProgressBar();
                }
            });
        }
        debugger;
    };

    //sự kiện selectnodes treeview total
    function SelectNodes(e) {
        var treeView = $("#CustomReportTreeView").data("kendoTreeView");
        //Expand khi node chưa đc expand để lấy dữ liệu con bên trong
        treeView.expand(e.node);
        treeView.collapse(e.node);
    };

   
</script>


@Html.HiddenFor(m => m.ID, new { name = "MasterID", id = "IDMaster" })
@Html.HiddenFor(m => m.ObjectMain)
<div class="VnRMain">
    <div>
        <div class="contendSearchWidge">
                <div style="float:left; width:400px">
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.ReportName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(mode => mode.ReportName)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.ReportStoreModule)
                        </div>
                        <div class="FieldValue">
                            @{
                                var combobox = new DropDownListBuilderInfo()
                                {
                                    BindTo = List_Module,
                                    DataValueField = "Value",
                                    DataTextField = "Text",
                                    Name = "ReportStoreModule",
                                };
                            }
                            @Html.VnrDropDownListFor(m=>m.ReportStoreModule,combobox)
                        </div>
                    </div>
                   
                </div>
            <div style="float:left; width:450px">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Description)
                    </div>
                </div>
            </div>
            </div>
    </div>
    <div style="margin:5px;">
        <div id="tabstrip">
            <ul>
                <li class="k-state-active">Chọn Cột Hiển Thị</li>@*Chưa Dịch!*@
                <li>Điệu Kiện Lọc</li>@*Chưa Dịch!*@
                <li>Chọn Loại Control</li>@*Chưa Dịch!*@
                <li>Kiểm Tra Dữ Liệu</li>@*Chưa Dịch!*@
            </ul>
            <div>
                <div style="width: 200px; float: left;">
                    <label style="margin:5px;"><strong>Chọn Đối Tượng Chính</strong></label>@*Chưa Dịch !*@
                    <div style="box-shadow:inset 0px 0px 10px #b0acac">
                        @(Html.TextBox("txtSearchTreeView", null, new
                    {
                        @class = "k-textbox",
                        placeholder = "Search....",
                        onkeyup = "SearchTreeView(value);",
                        style = "width:250px;"
                    }))
                        <div style="width:250px;height:350px;overflow-y:scroll">
                            @{
                                var treeivew = new TreeViewBuilderInfo()
                                {
                                    Name = "CustomReportTreeView",
                                    Url = @_hrm_Sys_Service + "Sys_GetData/GetMultResource",
                                    DataTextField = "Name",
                                    Icon = "IconPath",
                                    ShowCheckbox = false,
                                    EventSelect = "SelectNodes",
                                };
                            }
                            @Html.VnrTreeView(treeivew)
                        </div>
                    </div>
                </div>

                <div style="margin:70px 10px 0px 10px; width: 30px; float: left;">
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnNext", Content = "", ImageUrl = ConstantPath.IconNext })
                    @*@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnPrev", Content = "", ImageUrl = ConstantPath.IconPrev })*@
                    @*@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnClear", Content = "", ImageUrl = ConstantPath.IconClear })*@
                </div>

                <div style="width: 200px; float: left;">
                    <label style="margin:5px;"><strong>Chọn Cột Hiển Thị</strong></label>@*Chưa Dịch !*@
                    <div style="box-shadow:inset 0px 0px 10px #b0acac">
                        @(Html.TextBox("txtSearchTreeViewResult", null, new
                    {
                        @class = "k-textbox",
                        placeholder = "Search....",
                        onkeyup = "SearchTreeViewResult(value);",
                        style = "width:250px;"
                    }))
                        <div style="width:250px;height:350px;overflow-y:scroll">
                            @{
                                var treeivew1 = new TreeViewBuilderInfo()
                                {
                                    Name = "CustomReportTreeViewResult",
                                    Url = Model != null ? @_hrm_Sys_Service + "Sys_GetData/GetDisplayTable?id=" + Model.ID.ToString() : @_hrm_Sys_Service + "Sys_GetData/GetDisplayTable",
               
                                    DataTextField = "Name",
                                    Icon = "IconPath",

                                };
                            }
                            @Html.VnrTreeView(treeivew1).Events(m => m.Expand("EvenCheckedNodes"))
                        </div>
                    </div>
                </div>

                <div style="margin:70px 10px 0px 10px; width: 30px; float: left;">
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnNextListView", Content = "", ImageUrl = ConstantPath.IconNext })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnPrevListView", Content = "", ImageUrl = ConstantPath.IconPrev })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnClearListView", Content = "", ImageUrl = ConstantPath.IconClear })
                </div>

                <div style="width: 200px; float: left;">
                    <label style="margin:5px;"><strong>Các Cột Hiển Thị Được Chọn</strong></label>@*Chưa Dịch !*@
                    <div style="box-shadow:inset 0px 0px 10px #b0acac">
                        @(Html.TextBox("txtSearchTreeViewColumn", null, new
                    {
                        @class = "k-textbox",
                        placeholder = "Search....",
                        onkeyup = "SearchTreeViewColumnItem(value);",
                        style = "width:200px;"
                    }))
                        <div style="width:250px;height:350px;overflow-y:scroll">
                            @{
                                var treeivew2 = new TreeViewBuilderInfo()
                                {
                                    Name = "CustomReportTreeViewColumnItem",
                                
                                    DataTextField = "Name",
                                    Icon = "IconPath",
                                    //ShowCheckbox = false,
                                    Url = Model != null ? @_hrm_Sys_Service + "Sys_GetData/GetDisplayColumn?id=" + Model.ID.ToString() : @_hrm_Sys_Service + "Sys_GetData/GetDisplayColumn",
                                };
                            }
                            @Html.VnrTreeView(treeivew2)
                        </div>
                    </div>
                </div>

                <div style="margin:70px 10px 0px 10px; width: 30px; float: left;">
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnTopListView", Content = "", ImageUrl = ConstantPath.IconNext })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnBotListView", Content = "", ImageUrl = ConstantPath.IconPrev })
                </div>
            </div>
            <div>
                @Html.Partial("ConditionItem", Model)
            </div>
            <div>
                @Html.Action("RenderControlIndex")
            </div>
            <div>
                @Html.Partial("GeneralData")
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $("#tabstrip").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            }
        });

        if ($("#IDMaster").val() == "") {
            var tabStrip = $("#tabstrip").kendoTabStrip().data("kendoTabStrip");
            tabStrip.disable(tabStrip.tabGroup.children().eq(1));
            var tabStrip = $("#tabstrip").kendoTabStrip().data("kendoTabStrip");
            tabStrip.disable(tabStrip.tabGroup.children().eq(2));
            var tabStrip = $("#tabstrip").kendoTabStrip().data("kendoTabStrip");
            tabStrip.disable(tabStrip.tabGroup.children().eq(3));
        }
    });

    //tìm kiếm ko phân biệt hoa thường
    jQuery.expr[':'].contains = function (a, i, m) {
        return jQuery(a).text().toUpperCase()
            .indexOf(m[3].toUpperCase()) >= 0;
    };

    //tìm kiếm cho treeview tổng
    function SearchTreeView(value) {
        if (value !== "") {
            $("#CustomReportTreeView .k-item").closest("li").hide();
            $("#CustomReportTreeView .k-mid .k-in:contains(" + value + ")").each(function () {
                $(this).closest("ul").show();
                $(this).closest("li").show();
            });
            $("#CustomReportTreeView .k-top .k-in:contains(" + value + ")").each(function () {
                $(this).closest("ul").show();
                $(this).closest("li").show();
            });
            $("#CustomReportTreeView .k-bot .k-in:contains(" + value + ")").each(function () {
                $(this).closest("ul").show();
                $(this).closest("li").show();
            });
        } else {
            $("#CustomReportTreeView .k-group").find("ul").hide();
            $("#CustomReportTreeView .k-group").find("li").show();
        }
    };

    //tìm kiếm cho treeview select
    function SearchTreeViewResult(value) {
        if (value !== "") {
            $("#CustomReportTreeViewResult").data("kendoTreeView").expand(".k-item");
            $("#CustomReportTreeViewResult .k-group .k-group .k-in").closest("li").hide();
            $("#CustomReportTreeViewResult .k-group .k-group .k-in:contains(" + value + ")").each(function () {

                $(this).parents("ul, li").each(function () {
                    $(this).show();
                });
            });
        } else {
            $("#CustomReportTreeViewResult .k-group").find("ul").hide();
            $("#CustomReportTreeViewResult .k-group").find("li").show();
            $("#CustomReportTreeViewResult").data("kendoTreeView").collapse('.k-item');
        }
    };

    //tìm kiếm cho treeview select
    function SearchTreeViewColumnItem(value) {
        if (value !== "") {
            $("#CustomReportTreeViewColumnItem .k-item").closest("li").hide();
            $("#CustomReportTreeViewColumnItem .k-mid .k-in:contains(" + value + ")").each(function () {
                $(this).closest("ul").show();
                $(this).closest("li").show();
            });
            $("#CustomReportTreeViewColumnItem .k-bot .k-in:contains(" + value + ")").each(function () {
                $(this).closest("ul").show();
                $(this).closest("li").show();
            });
            $("#CustomReportTreeViewColumnItem .k-top .k-in:contains(" + value + ")").each(function () {
                $(this).closest("ul").show();
                $(this).closest("li").show();
            });
        } else {
            $("#CustomReportTreeViewColumnItem .k-group").find("ul").hide();
            $("#CustomReportTreeViewColumnItem .k-group").find("li").show();
        }
    };

    //Biến lưu giá trị đang select
    var selectNodes = [];

    //lấy ID của các node được select
    function SelectCheckNodeTreeView(nodes, selectNodes) {
        debugger;
        for (var i = 0; i < nodes.length; i++) {
            var _tmp = nodes[i].children.view();
            for (var j = 0; j < _tmp.length; j++)
            {
                if (_tmp[j].checked)
                {
                    selectNodes.push(nodes[i].id + "," + _tmp[j].id + "," + _tmp[j].Name);
                }
            }
        }
    };

    //lấy giá trị select qua bảng result
    function AddItemResult(TreeFrom,TreeTo) {
        var treeView = $("#"+TreeFrom).data("kendoTreeView");
        var treeViewResult = $("#" + TreeTo).data("kendoTreeView");

        //claer data for treeview result
        treeViewResult.setDataSource(new kendo.data.HierarchicalDataSource({
            data: [
            ]
        }));

        select = treeView.select();
        item = treeView.dataItem(select);

        //gán node cho treeview result
       
        if (item.hasChildren) {
            treeViewResult.append({ id: item.id, Name: item.Name, hasChildren: true });
        }
        else {
            //ko biết tại sao lại phải chấm 2 cái parent mới lấy đc parent, có thể do kendo sai, có nguy cơ lỗi khi update kendo
            item = item.parent().parent();
            treeViewResult.append({ id: item.id, Name: item.Name, hasChildren: true });
        }
        debugger;

        //lưu vào biến ObjectMain là bảng chính
        $("#ObjectMain").val(item.id);

        for (var i = 0; i < item.items.length; i++) {
            treeViewResult.append({ id: item.items[i].id, Name: item.items[i].Name, hasChildren: true });
        }

        //clear
        selectNodes = [];
    };

    //lấy giá trị select qua bảng Column
    function AddItemColumn(TreeFrom, TreeTo) {
        var treeView = $("#" + TreeFrom).data("kendoTreeView");
        var treeViewResult = $("#" + TreeTo).data("kendoTreeView");

        //claer data for treeview result
        treeViewResult.setDataSource(new kendo.data.HierarchicalDataSource({
            data: [
            ]
        }));

        SelectCheckNodeTreeView(treeView.dataSource.view(), selectNodes);

        //gán node cho treeview column
        //treeViewResult.append({ id: item.id, Name: item.Name, hasChildren: true });
        for (var i = 0; i < selectNodes.length; i++) {
            treeViewResult.append({ id: selectNodes[i].split(",")[0] + "," + selectNodes[i].split(",")[1], Name: selectNodes[i].split(",")[2], hasChildren: false });
        }

        //clear
        selectNodes = [];
    };

    //Hàm xóa các nodes được select
    function RemoveTreeItemSelect(treeViewName) {
        var treeView = $('#' + treeViewName).data("kendoTreeView");
        $('#' + treeViewName).find('input:checkbox:checked').each(function () {
            treeView.remove($(this).closest('.k-item'));
        });
    };

    //next qua bảng result
    $("#btnNext").click(function () {
        AddItemResult("CustomReportTreeView", "CustomReportTreeViewResult");
    });

    //next qua bảng column
    $("#btnNextListView").click(function () {
    
        AddItemColumn("CustomReportTreeViewResult", "CustomReportTreeViewColumnItem");
   
    });

    //xóa item trong bảng column
    $("#btnPrevListView").click(function () {
        RemoveTreeItemSelect("CustomReportTreeViewColumnItem");

    });

    //clear select column
    $("#btnClearListView").click(function () {
        var treeViewResult = $("#CustomReportTreeViewColumnItem").data("kendoTreeView");
        //claer data for treeview result
        treeViewResult.setDataSource(new kendo.data.HierarchicalDataSource({
            data: [
            ]
        }));
    });

    //Move item top
    $("#btnTopListView").click(function () {
        var treeView = $("#CustomReportTreeViewColumnItem").data("kendoTreeView");
        var select = treeView.select();
       
        if (select != undefined)
        {
            var item = treeView.dataItem(select);
            var index = item.index;
            if (index > 0)
            {
                debugger;
                var DataSource = treeView.dataSource.view();
                var TempID = DataSource[index - 1].id;
                var TempName = DataSource[index - 1].Name;

                DataSource[index - 1].id = DataSource[index].id;
                DataSource[index - 1].Name = DataSource[index].Name;

                DataSource[index].id = TempID;
                DataSource[index].Name = TempName;

                treeView.dataSource.data(DataSource);

                var bar = treeView.findByText(DataSource[index - 1].Name);
                treeView.select(bar);
            }
        }
    });

    //Move item bottom
    $("#btnBotListView").click(function () {
        var treeView = $("#CustomReportTreeViewColumnItem").data("kendoTreeView");
        var select = treeView.select();

        if (select != undefined) {
            var item = treeView.dataItem(select);
            var index = item.index;
            if (index < treeView.dataSource.view().length - 1) {
                debugger;
                var DataSource = treeView.dataSource.view();
                var TempID = DataSource[index + 1].id;
                var TempName = DataSource[index + 1].Name;

                DataSource[index + 1].id = DataSource[index].id;
                DataSource[index + 1].Name = DataSource[index].Name;

                DataSource[index].id = TempID;
                DataSource[index].Name = TempName;

                treeView.dataSource.data(DataSource);

                var bar = treeView.findByText(DataSource[index + 1].Name);
                treeView.select(bar);
            }
        }
    });
</script>
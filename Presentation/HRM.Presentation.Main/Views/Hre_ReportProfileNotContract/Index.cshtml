@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Hr.Models;
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Infrastructure.Security
@model Hre_ReportProfileNotContractModel
@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    IList<SelectListItem> ilGender = Enum.GetValues(typeof(EnumDropDown.Gender))
          .Cast<EnumDropDown.Gender>()
          .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
          .ToList();
}
@{
    var window1 = new WindowBuilderInfo
    {
        Name = "windowProfileNotContract",
        Visible = false,
        Width = 1000,
        LoadContentFrom = @_hrm_Main_Web + "Hre_ReportProfileNotContract/ProfileNotContractInfo",
    };
}
@(Html.VnrWindow(window1))
<script>

    var titleCreatePopUpContract = '@Html.Raw(ConstantDisplay.HRM_HR_Contract_AddNew.TranslateString())';
    var checkedNodes = [];
    function filterFieldInfo(isExport) {
        var elementPara = {
            DateHireFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#R_DateFrom").val()),
            DateHireTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#R_DateTo").val()),
            OrgStructureID: checkedNodes.join(','),
            JobTitleID: $("#R_JobTitleID").val() ? $("#R_JobTitleID").val()[0] : null,
            PositionID: $("#R_PositionID").val() ? $("#R_PositionID").val()[0] : null,
            EmpTypeID: $("#R_EmpTypeID").val() ? $("#R_EmpTypeID").val()[0] : null,
            Gender: $('#@Html.FieldIdFor(model => model.Gender)').val(),
            ValueFields: $('#valueFieldsGrid').val()
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }
    GridCheckbox("gridAtt_ReportProfileNotContract")
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {

        //Show Hide Panel
        ShowHidePanel();
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");

            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes)
            var grid = $('#gridAtt_ReportProfileNotContract').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
            checkedNodes = [];
        });
    });

    $('#btnCreate_Contract').click(function (e) {
        e.preventDefault();
        if (selectedIds == "") {
            ErrorMessages('@Html.Raw(@ConstantDisplay.HRM_Message_PleaseSelectData.TranslateString())');
            return;
        }
        var url = '@_hrm_Main_Web' + "Hre_ReportProfileNotContract/ProfileNotContractInfo/";
        PopData('windowProfileNotContract', url, selectedIds.join(','), '@Html.Raw(ConstantAction.HRM_Common_CreateContract.TranslateString())');
    });

    function PopData(idWindow, url, parameter, titlePopUp) {

        var window = $("#" + idWindow).data("kendoWindow");
        window.refresh({
            url: url,
            data: { selectedItems: parameter }
        }).center().open().title(titlePopUp);
    }
    $("#btnExport").click(function () {
        var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_ReportProfileNotContract');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Hre_GetData/GetReportProfileNotContract";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload);
        checkedNodes = [];
    });
</script>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div>
                    <div style="float:left; width:450px">
                        @*@Html.HiddenFor(model=>model.ProfileID)*@
                        @Html.Hidden("SProfileID")
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.OrgStructureID)
                            </div>
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            </div>
                        </div>
                        <div id="div5">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.JobTitleID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var JobTitleName = new MultiSelectBuilderInfo
                                    {
                                        Name = "R_JobTitleID",
                                        DataTextField = "JobTitleName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiJobTitle",
                                        MaxSelectedItems = 1,
                                        Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
                                    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.JobTitleID, JobTitleName)
                            </div>
                        </div>
                        <div id="div6">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.PositionID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var PositionName = new MultiSelectBuilderInfo
                                    {
                                        Name = "R_PositionID",
                                        DataTextField = "PositionName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
                                        MaxSelectedItems = 1,
                                        Placeholder = ConstantDisplay.HRM_Category_SelectPosition.TranslateString(),
                                    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.PositionID, PositionName)
                            </div>
                        </div>
                    </div>
                    <div style="width:450px; display:block; float:left">
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateHire)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var DateFrom = new DatePickerBuilderInfo()
                                    {
                                        Name = "R_DateFrom",
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString()
                                    };
                                }
                                @Html.VnrDatePickerFor(mode => mode.DateHireFrom, DateFrom)
                                @{
                                    var DateTo = new DatePickerBuilderInfo()
                                    {
                                        Name = "R_DateTo",
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString()
                                    };
                                }
                                @Html.VnrDatePickerFor(mode => mode.DateHireTo, DateTo)
                            </div>

                            <div style="clear: both;"></div>
                        </div>
                        <div id="div8">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.EmpTypeID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var empTypeID = new DropDownListBuilderInfo()
                                    {
                                        Name = "R_EmpTypeID",
                                        DataTextField = "EmployeeTypeName",
                                        DataValueField = "ID",
                                        StyleCss = "Width: 205px",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiEmployeeType",
                                        OptionLabel = ConstantDisplay.HRM_Category_SelectEmployeeType.TranslateString(),
                                        Autobind = false
                                    };
                                }
                                @(Html.VnrDropDownListFor(mode => mode.EmpTypeID, empTypeID))
                                <div style="clear: both;"></div>
                            </div>
                            <div>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate_Contract", Content = ConstantAction.HRM_Common_Create_Contract.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)

            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnReportProfileNotContract", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        </div>
    </div>
</div>
<script>
    @*function clickProfile(id) {
        KendoRouteMapping('#Hrm_Hre_Web/Hre_Profile/Edit/'+id, 'Hrm_Hre_Web', '@_hrm_Main_Web');
    }*@
    function clickProfile(id) {
        KendoRouteMapping('#Hrm_Hre_Web/GeneralProfile/Index/' + id, 'Hrm_Hre_Web', '@_hrm_Main_Web');
    }
</script>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridAtt_ReportProfileNotContract_Name + "__Hre_ReportProfileNotContract_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridAtt_ReportProfileNotContract_Name,
            ShowNextPrevious = true,
            PageSize = 20,
            ShowPageNumber = true,
            ReadActionUrl = _hrm_Hre_Service + "Hre_GetData/GetReportProfileNotContract",
            ReadData = "filterFieldInfo",
            ShowCheckbox = true,
            ShowEditIcon = false,
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
                                {
                                    Hre_ReportProfileNotContractModel.FieldNames.CodeEmp,
                                    Hre_ReportProfileNotContractModel.FieldNames.ProfileName,
                                    Hre_ReportProfileNotContractModel.FieldNames.E_UNIT,
                                    Hre_ReportProfileNotContractModel.FieldNames.E_DIVISION,
                                    Hre_ReportProfileNotContractModel.FieldNames.E_DEPARTMENT,
                                    Hre_ReportProfileNotContractModel.FieldNames.E_TEAM,
                                    Hre_ReportProfileNotContractModel.FieldNames.E_SECTION,
                                    Hre_ReportProfileNotContractModel.FieldNames.CodeAttendance,
                                    Hre_ReportProfileNotContractModel.FieldNames.DateHire,
                                    Hre_ReportProfileNotContractModel.FieldNames.DateEndProbation,
                                    Hre_ReportProfileNotContractModel.FieldNames.Gender,
                                    Hre_ReportProfileNotContractModel.FieldNames.CellPhone,
                                    Hre_ReportProfileNotContractModel.FieldNames.E_DEPARTMENT,
                                    Hre_ReportProfileNotContractModel.FieldNames.PositionName,
                                    Hre_ReportProfileNotContractModel.FieldNames.JobTitleName,
                                    Hre_ReportProfileNotContractModel.FieldNames.EmployeeTypeName,
                                    Hre_ReportProfileNotContractModel.FieldNames.DateUpdate,

                                };
            grid.SizeFields = new Dictionary<string, int>()
                                {
                                    {Hre_ReportProfileNotContractModel.FieldNames.CodeEmp,80},
                                    {Hre_ReportProfileNotContractModel.FieldNames.ProfileName,140},
                                    {Hre_ReportProfileNotContractModel.FieldNames.CodeAttendance,120},
                                    {Hre_ReportProfileNotContractModel.FieldNames.DateHire,100},
                                    {Hre_ReportProfileNotContractModel.FieldNames.DateEndProbation,125},
                                    {Hre_ReportProfileNotContractModel.FieldNames.Gender,70},
                                    {Hre_ReportProfileNotContractModel.FieldNames.CellPhone,130},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_DEPARTMENT,135},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_DIVISION,135},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_SECTION,135},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_TEAM,135},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_UNIT,135},
                                    {Hre_ReportProfileNotContractModel.FieldNames.PositionName,100},
                                    {Hre_ReportProfileNotContractModel.FieldNames.JobTitleName,100},
                                    {Hre_ReportProfileNotContractModel.FieldNames.EmployeeTypeName,140},
                                    {Hre_ReportProfileNotContractModel.FieldNames.DateUpdate,100},

                                };

            grid.DisplayFields = new Dictionary<string, string>()
                                {
                                    {Hre_ReportProfileNotContractModel.FieldNames.CodeEmp,ConstantDisplay.HRM_HR_Profile_CodeEmp},
                                    {Hre_ReportProfileNotContractModel.FieldNames.ProfileName,ConstantDisplay.HRM_HR_Profile_ProfileName},
                                    {Hre_ReportProfileNotContractModel.FieldNames.CodeAttendance,ConstantDisplay.HRM_HR_Profile_CodeAttendance},
                                    {Hre_ReportProfileNotContractModel.FieldNames.DateHire,ConstantDisplay.HRM_HR_Profile_DateHire},
                                    {Hre_ReportProfileNotContractModel.FieldNames.DateEndProbation,ConstantDisplay.HRM_HR_Profile_DateEndProbation},
                                    {Hre_ReportProfileNotContractModel.FieldNames.Gender,ConstantDisplay.HRM_HR_Profile_Gender},
                                    {Hre_ReportProfileNotContractModel.FieldNames.CellPhone,ConstantDisplay.HRM_HR_Profile_BusinessPhone},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_UNIT, ConstantDisplay.HRM_Hre_Report_E_UNIT},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_DIVISION, ConstantDisplay.HRM_Hre_Report_E_DIVISION},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_DEPARTMENT, ConstantDisplay.HRM_Hre_Report_E_DEPARTMENT},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_SECTION, ConstantDisplay.HRM_Hre_Report_E_SECTION},
                                    {Hre_ReportProfileNotContractModel.FieldNames.E_TEAM, ConstantDisplay.HRM_Hre_Report_E_TEAM},
                                    {Hre_ReportProfileNotContractModel.FieldNames.PositionName,ConstantDisplay.HRM_HR_Profile_PositionName},
                                    {Hre_ReportProfileNotContractModel.FieldNames.JobTitleName,ConstantDisplay.HRM_HR_Profile_JobTitleName},
                                    {Hre_ReportProfileNotContractModel.FieldNames.EmployeeTypeName,ConstantDisplay.HRM_HR_Profile_EmployeeTypeName},
                                    {Hre_ReportProfileNotContractModel.FieldNames.DateUpdate,ConstantDisplay.HRM_HR_Profile_DateUpdate},
                                };
            grid.HyperlinkFields = new Dictionary<string, string>()
                                    {
                                        {Hre_ProfileModel.FieldNames.ProfileName,"clickProfile,ID"},
                                    };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
    //var grid = new GridBuilderInfo
    //{
    //    Name = "gridAtt_ReportProfileNotContract",
    //    ValueFields = valueFields,
    //    SizeFields = sizeFields,
    //    DisplayFields = displayFields,
    //    ShowNextPrevious = true,
    //    PageSize = 20,
    //    ShowPageNumber = true,
    //    ReadActionUrl = _hrm_Hre_Service + "Hre_GetData/GetReportProfileNotContract",
    //    ReadData = "filterFieldInfo",
    //    ShowCheckbox = true,
    //    ShowEditIcon = false,
    //    HyperlinkFields = hyperlinkFields
    //};
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Hre_ReportProfileNotContractModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnReportProfileNotContract", "Hre_ReportProfileNotContractModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
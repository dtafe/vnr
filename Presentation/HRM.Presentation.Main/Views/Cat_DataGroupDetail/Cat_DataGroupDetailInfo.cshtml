@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models
@using HRM.Presentation.Category.Models

@model Cat_DataGroupDetailModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

}

<script>
    SetFieldRequiredByScreenName("Cat_DataGroupDetailinfo");

    function onSave() {
        $("#DataGroupID").val($("#DataGroup_ID").val());
        onSaveAndContinue($('#form_Cat_DataGroupDetail'), '@_hrm_Hr_Service', 'api/Cat_DataGroupDetail/', 'grid_DataGroupDetail_info', 'windownCat_DataGroupDetail');
        return false;
    }

    function onSaveClose() {
        $("#DataGroupID").val($("#DataGroup_ID").val());
        onSaveAndClose($('#form_Cat_DataGroupDetail'), '@_hrm_Hr_Service', 'api/Cat_DataGroupDetail/', 'grid_DataGroupDetail_info', 'windownCat_DataGroupDetail');
        return false;
    }

    function onSaveDataPopUp() {
        $("#DataGroupID").val($("#DataGroup_ID").val());
        onlySave($('#form_Cat_DataGroupDetail'), '@_hrm_Hr_Service', 'api/Cat_DataGroupDetail/', 'grid_DataGroupDetail_info'); return false;
    }


   

    function showFieldName(e) {

        var objectName = e.sender._old;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Cat_GetData/GetMultiChildField',
            data: { objectNameRoot: objectName, objectName: objectName },
            dataType: 'json',
            async: false,
            success: function (data) {
                debugger;
                var fieldNameCombo = $("#CatDataGroupDetail_FieldName").data("kendoComboBox");
                fieldNameCombo.setDataSource(data);
                fieldNameCombo.refresh();
                fieldNameCombo.value("");
                
            }
        });
        var childFieldNameCombo = $("#CatDataGroupDetail_ChildFieldName").data("kendoComboBox");
        childFieldNameCombo.value("");
    }

    function showChildFieldName(e) {
        debugger;
        var objectName1 = $("#CatDataGroupDetail_ObjectName").val();
        var fieldName = e.sender._old;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Cat_GetData/GetMultiChildField',
            data: { objectNameRoot: objectName1, objectName: fieldName },
            dataType: 'json',
            async: false,
            success: function (data) {
                debugger;
                var childFieldNameCombo = $("#CatDataGroupDetail_ChildFieldName").data("kendoComboBox");
                childFieldNameCombo.setDataSource(data);
                childFieldNameCombo.refresh();
                childFieldNameCombo.value("");
                
            }
        });
        var childFieldNameCombo = $("#CatDataGroupDetail_ChildFieldName").data("kendoComboBox");
        childFieldNameCombo.value("");
    }
    

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_DataGroupDetail" }))
{
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(mode => mode.DataGroupID)
    <table>
        <tr>
            <td>
                <div id="div4" class="DivContentTitleValue">
                    <div id="div4">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.ObjectName)
                        </div>
                        <div class="FieldValue">

                            @*@(Html.VnrTextBoxFor(model => model.ObjectName))*@
                            @{
                            var _objectName = new ComboBoxBuilderInfo()
                            {
                                Name = "CatDataGroupDetail_ObjectName",
                                DataTextField = "Name",
                                DataValueField = "Name",
                                Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiObjectName",
                                Placeholder = ConstantDisplay.HRM_Category_Cat_Import_ObjectName.TranslateString(),
                                StyleCss = "Width:200px",
                                //Value = Model == null ? string.Empty : Model.ObjectName,
                                EventChange = "showFieldName",
                            };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.ObjectName, _objectName))



                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div4">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.FieldName)
                        </div>
                        <div class="FieldValue">

                            @{
                             var _FieldName = new ComboBoxBuilderInfo()
                                {
                                    Name = "CatDataGroupDetail_FieldName",
                                    DataTextField = "Name",
                                    DataValueField = "Name",
                                    //Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiObjectName",
                                    StyleCss = "Width:200px",
                                    Value = Model == null ? string.Empty : Model.FieldName,
                                    EventChange="showChildFieldName"
                                };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.FieldName, _FieldName))

                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div4">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.ForeignKey)
                        </div>
                        <div class="FieldValue">
                            <script>
                                function foreignKeyData() {
                                    debugger;
                                    
                                    var ON = $("#CatDataGroupDetail_ObjectName").data("kendoComboBox").text();
                                    var FN = $("#CatDataGroupDetail_FieldName").data("kendoComboBox").text();
                                    @*if (ON == null) {
                                        ErrorMessages("Vui Lòng Chọn "+ @ConstantDisplay.HRM_Category_DataGroupDetai_DataGroupID.TranslateString());
                                        return false;
                                    }
                                    if (FN == null) {
                                        ErrorMessages("Vui Lòng Chọn "+ @ConstantDisplay.HRM_Category_DataGroupDetai_FieldName.TranslateString());
                                        return false;
                                    }*@
                                return {
                                    text: $("#CatDataGroupDetail_ForeignKey").data("kendoComboBox").text()
                                        + "|" + FN
                                        + "|" + ON
                                    };
                                }
                            </script>
                               @{
                             var _ForeignKey = new ComboBoxBuilderInfo()
                                {
                                    Name = "CatDataGroupDetail_ForeignKey",
                                    DataTextField = "COLUMN_NAME",
                                    DataValueField = "COLUMN_NAME",
                                    Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiForeignKey",
                                    StyleCss = "Width:200px",
                                    Autobind = false,
                                    Data = "foreignKeyData"                                    
                                };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.ForeignKey, _ForeignKey))
                        </div>
                        <div style="clear: both;"></div>
                    </div>


                    <div id="div4">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.ChildFieldName)
                        </div>
                        <div class="FieldValue">

                            @{
                                var _ChildFieldName = new ComboBoxBuilderInfo()
                                {
                                    Name = "CatDataGroupDetail_ChildFieldName",
                                    DataTextField = "Name",
                                    DataValueField = "Name",
                                    //Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiObjectName",
                                    StyleCss = "Width:200px",
                                    Value = Model == null ? string.Empty : Model.ChildFieldName,
                             
                                };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.ChildFieldName, _ChildFieldName))
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(model => model.ChildFieldName1)
                        </div>
                        <div class="FieldValue">
                            @{
                        var _ChildFieldName1 = new TextBoxBuilderInfo()
                        {
                            Width = 250
                        };
                            }
                            @Html.VnrTextBoxFor(model => model.ChildFieldName1)
                        </div>
                    </div>

                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(model => model.Value)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _Value = new TextBoxBuilderInfo()
                                {
                                    Width = 250
                                };
                            }
                            @Html.VnrTextBoxFor(model=>model.Value)
                        </div>
                    </div>
                    <div>
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(model => model.Exclusions)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _Exclusions = new TextBoxBuilderInfo()
                                {
                                    Width = 250
                                };
                            }
                            @Html.VnrTextBoxFor(model => model.Exclusions)
                        </div>
                    </div>

                    </div>


</td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>

                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-CatDataGroupDetailinfo", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-CatDataGroupDetailinfo", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-CatDataGroupDetailinfo", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
        @Html.HiddenFor(model => model.ID)
    </table>
}
@*<div>
    @{
        if (Model != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var objectName = $("#CatDataGroupDetail_ObjectName").val();
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + 'Cat_GetData/GetMultiChildField',
                         data: { objectNameRoot: objectName, objectName: objectName },
                        dataType: 'json',
                        async: false,
                        success: function (data) {

                            debugger;
                            var relativeCombo = $("#CatDataGroupDetail_FieldName").data("kendoComboBox");
                            relativeCombo.setDataSource(data);
                            relativeCombo.refresh();
                        }
                    });

                });
            </script>
        }
        if (Model != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var objectName = $("#CatDataGroupDetail_FieldName").val();
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + 'Cat_GetData/GetMultiChildField',
                         data: { objectNameRoot: objectName, objectName: objectName },
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                            debugger;
                            var relativeCombo = $("#CatDataGroupDetail_ChildFieldName").data("kendoComboBox");
                            relativeCombo.setDataSource(data);
                            relativeCombo.refresh();
                        }
                    });

                });
            </script>
        }
    }

</div>*@




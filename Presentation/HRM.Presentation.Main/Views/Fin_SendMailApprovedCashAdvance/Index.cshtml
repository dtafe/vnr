@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.UI.Controls.Kendo

@model FIN_ApprovedTravelRequestSearchModel
@{
    ViewBag.Title = HRM.Infrastructure.Utilities.ConstantDisplay.HRM_HR_Contract.TranslateString();
    Layout = null;
    string[] valueFields = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
   // var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
  //  var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var screen = controller + "/" + action;
    
  //  IList<SelectListItem> listGender = Enum.GetValues(typeof(EnumDropDown.Gender))
  //.Cast<EnumDropDown.Gender>()
  //.Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
  //.ToList();

  //  IList<SelectListItem> listSta = Enum.GetValues(typeof(EnumDropDown.WorkdayStatus))
  //        .Cast<EnumDropDown.WorkdayStatus>()
  //        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
  //        .ToList();
}
@{
    var windowApproved = new WindowBuilderInfo
    {
        Name = "windowTravelRequest",
        Visible = false,
        LoadContentFrom = @_hrm_Main_Web + "Fin_ApprovedTravelRequest/TravelRequestApprovedInfo/",
    };
}
@(Html.VnrWindow(windowApproved))

@{
    var windowReject = new WindowBuilderInfo
    {
        Name = "windowTravelRequest_Reject",
        Visible = false,
        LoadContentFrom = @_hrm_Main_Web + "Fin_ApprovedTravelRequest/TravelRequestRejectInfo/",
    };
}
@(Html.VnrWindow(windowReject))


<script type="text/javascript">
    var checkedNodes = [];

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        var elementPara = {
            UserApproveID: $("#UserLoginId").val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        ShowHidePanel();
    });
        function checkedNodeIds(nodes, checkedNodes) {
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].checked) {
                    checkedNodes.push(nodes[i].id);
                }
                if (nodes[i].hasChildren) {
                    checkedNodeIds(nodes[i].children.view(), checkedNodes);
                }
            }
        }
        GridCheckbox("gridHre_Contract");
    //GridCheckbox("grid_ApprovedTravelRequest");
        //"Delete (selected)" button
        $('#btnDelete').click(function (e) {
            if (selectedIds.length == 0) {
                DeleteFail();
                return;
            }
            var grid = $('#grid_ApprovedTravelRequest').data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());
            DeleteSelected("grid_ApprovedTravelRequest", '@_hrm_Main_Web' + "Hre_Contract/RemoveSelected/", selectedIds, '@ConstantPermission.Hre_Contract');
            return false;
        });
    $('#btnApproved').click(function (e) {
        
        if (selectedIds.length == 0) {
            ShowNotificationProcessor("Error,Vui Lòng Chọn 1 Chi Phí Công Tác Để Duyệt");
            return;
        }

        var url = '@_hrm_Main_Web' + "Fin_ApprovedTravelRequest/TravelRequestApprovedInfo/";
        PopUpEdit("windowTravelRequest", url, selectedIds[0], "Duyệt Chi Phí Công Tác");

    });
    $('#btnReject').click(function (e) {
        
        if (selectedIds.length == 0) {
            ShowNotificationProcessor("Error,Vui Lòng Chọn 1 Chi Phí Công Tác Để Từ Chối");
            return;
        }

        var url = '@_hrm_Main_Web' + "Fin_ApprovedTravelRequest/TravelRequestRejectInfo/";
        PopUpEdit("windowTravelRequest_Reject", url, selectedIds[0], "Từ Chối Chi Phí Công Tác");
    });

    $("#btnView_TravelReques").click(function () {
        if (selectedIds.length > 1 || selectedIds.length == 0)
        {
            ShowNotificationProcessor("Error,Vui Lòng Chọn 1 Chi Phí Công Tác");
            return;
        }
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Hre_Contract');
        if (!isAccess) {
            return;
        }
        
        var x = selectedIds;
        KendoRouteMapping('#Hrm_Main_Web/Fin_ApprovedTravelRequest/DetailTravelRequest/' + x, 'Hrm_Main_Web', '@_hrm_Main_Web', true);
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
        </div>
    </div>
</div>

<div class="commandToolBarWidge">
    <div>

        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnView_TravelReques", Content = ConstantAction.HRM_Common_ViewDetail.TranslateString(), ImageUrl = ConstantPath.IconApprovedPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnApproved", Content = ConstantAction.HRM_Common_Approve.TranslateString(), ImageUrl = ConstantPath.IconApprovedPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnReject", Content = ConstantAction.HRM_Common_Reject.TranslateString(), ImageUrl = ConstantPath.IconRejectPath })
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
    </div>
</div>

<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        valueFields = new[]
        {
            FIN_TravelRequestModel.FieldNames.ProfileName,
            FIN_TravelRequestModel.FieldNames.AccountCode,
            FIN_TravelRequestModel.FieldNames.TravelRequestName,
            FIN_TravelRequestModel.FieldNames.UserApprovedName,
            FIN_TravelRequestModel.FieldNames.TravelRequestCode,
            FIN_TravelRequestModel.FieldNames.Status
        };

        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
        {
            {FIN_TravelRequestModel.FieldNames.ProfileName, 130},
            {FIN_TravelRequestModel.FieldNames.AccountCode, 130},
            {FIN_TravelRequestModel.FieldNames.TravelRequestName, 130},
            {FIN_TravelRequestModel.FieldNames.UserApprovedName, 130},
            {FIN_TravelRequestModel.FieldNames.TravelRequestCode, 130},
            {FIN_TravelRequestModel.FieldNames.Status, 90},
        };

        Dictionary<string, string> displayFields = new Dictionary<string, string>()
        {
            {FIN_TravelRequestModel.FieldNames.ProfileName, ConstantDisplay.HRM_Att_AllowLimitOvertime_ProfileID},
            {FIN_TravelRequestModel.FieldNames.AccountCode, ConstantDisplay.HRM_FIN_Claim_AccountCode},
            {FIN_TravelRequestModel.FieldNames.TravelRequestName, ConstantDisplay.HRM_FIN_Claim_TravelRequestName},
            {FIN_TravelRequestModel.FieldNames.UserApprovedName, ConstantDisplay.HRM_Fin_PurchaseRequest_UserApprovedID},
            {FIN_TravelRequestModel.FieldNames.TravelRequestCode, ConstantDisplay.HRM_FIN_Claim_TravelRequestCode},
            {FIN_TravelRequestModel.FieldNames.Status, ConstantDisplay.HRM_Att_Report_Status},
        };
        
        var grid = new GridBuilderInfo
        {
            Name = "grid_ApprovedTravelRequest",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            AutoBind = true,
            DisplayFields = displayFields,
            ShowEditIcon = false,
            ReadActionUrl = _hrm_Hr_Service + "Hre_GetData/GetApprovedFIN_TravelRequestList",
            ReadData = "filterFieldInfo",

        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<HRM.Presentation.Hr.Models.FIN_TravelRequestModel>(grid))
</div>

@{
    var valueFields1 = string.Empty;
    for (int i = 0; i < valueFields.Count(); i++)
    {
        valueFields1 += "," + valueFields[i];
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)




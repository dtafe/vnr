@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models;
@using HRM.Infrastructure.Security;

@model Cat_HDTJobGroupModel

@{
  //  var _hrm_Main_Web = ConstantPathWeb._hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    Layout = null;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
}


@{
    var window = new WindowBuilderInfo
    {
        Name = "windowHDTJobGroup",
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Cat_HDTJobGroup/CatHDTJobGroupInfo/",
    };
}
@(Html.VnrWindow(window))

<script>
    var gridName = '@ConstantControlName.HRM_Category_HDTJobGroup_Grid_Name';
    var popUpName = '@ConstantControlName.HRM_Category_HDTJobGroup_PopUp_Name';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Category_HDTJobGroup_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Category_HDTJobGroup_PopUp_Create_Title.TranslateString())';


    //Data khi tìm kiếm
    function filterFieldInfo() {
        return {
            HDTJobGroupName: $('#HDTJobGroupName1').val(),
            IsExport: false,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();
        //Jump Anchor
        jumpAnchor("anchor");
        $("#btnSearch").click(function () {
            ReadGrid(gridName);
        });

        //Xử lý Edit popup
        var url = '@_hrm_Main_Web' + "Cat_HDTJobGroup/CatHDTJobGroupInfo/";
        EditGridPopUp("@ConstantControlName.HRM_Category_HDTJobGroup_Grid_Name", "windowHDTJobGroup", url, '@ConstantPermission.Cat_HDTJobGroup', titleEditPopUp);
    });

    //Xử lý Create
    $("#btnCreate").click(function () {
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Cat_HDTJobGroup');
        if (!isAccess) {
            return;
        }
        PopUpCreate("windowHDTJobGroup", titleCreatePopUp, '@ConstantPermission.Cat_HDTJobGroup');
    });

    //Xử Lý grid
    GridCheckbox(gridName);

    //Xử Lý button delete
    $('#btnDelete').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelected('@ConstantControlName.HRM_Category_HDTJobGroup_Grid_Name', '@_hrm_Main_Web' + "Cat_HDTJobGroup/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Cat_HDTJobGroup');
        return false;
    });

    $(document).ready(function () {
        ShowHidePanel();
    });

    $("#btnExportSelected").click(function () {

        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportHDTJobGroupSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Cat_HDTJobGroup');
    });

    $("#btnExportAll").click(function () {
        @*var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Hre_ProfileQuit');
        if (!isAccess) {
            return;
        }*@
        var grid = $('#@ConstantControlName.HRM_Category_HDTJobGroup_Grid_Name').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportAllHDTJobGroupList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Cat_HDTJobGroup');
    });
    $("#btnImportData").click(function () {
        debugger;
        SetTempData('@_hrm_Main_Web' + "Home/SetTempData", '@controller');
        debugger;
        setCookie("PreController", '@controller');
        KendoRouteMapping('#Hrm_Main_Web/Cat_Import/Import_List#NewTab', 'Hrm_Main_Web', '@_hrm_Main_Web');

    });

    $('#btn_ApprovedHDTJob').click(function (e) {
        if (selectedIds.length == 0) {
            DeleteFail();
            return;
        }
        var grid = $('#gridHDTJobGroup').data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        ShowHre_ProgressBar();
        if (selectedIds != '' && selectedIds != null) {
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "Thông Báo",
                message: "Bạn có chắc chắn muốn Duyệt?",
                icon: "k-ext-warning"
            })
            ).done(function (response) {
                if (response.button == "OK") {
                    $.ajax({
                        traditional: true,
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + "Cat_GetData/ChangeStatusListHDTJobGroup/",
                        dataType: 'html',
                        data: { selectedIds: selectedIds.join(','), Status: '@EnumDropDown.Status.E_APPROVED.ToString()' },
                        success: function (data) {
                            CloseHre_ProgressBar();
                            selectedIds = [];
                            ReadGrid("gridHDTJobGroup");
                            window.ShowNotificationProcessor("Success");
                        },
                        error: function (data) {
                            window.ShowNotificationProcessor(data.responseText);
                        }
                    });
                }
            });
        } else {
            window.ShowNotificationProcessor("Không có dữ lệu nào được chọn.");
            CloseHre_ProgressBar();
        }
        return false;
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div>
                    <div class="FieldTitle200">
                        @Html.VnrLabel(ConstantDisplay.HRM_Category_HDTJobGroup_HDTJobGroupName.TranslateString())
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBox("HDTJobGroupName1", "width:200px;")
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnImportData", Content = ConstantAction.HRM_Common_ImportData.TranslateString(), ImageUrl = ConstantPath.IconCopyPath })
    </div>
    <div style="float:right">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btn_ApprovedHDTJob", Content = ConstantAction.HRM_Common_Approve.TranslateString(), ImageUrl = ConstantPath.IconApprovedPath })
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeHDTJobGroup", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_Category_HDTJobGroup_Grid_Name + "__Cat_HDTJobGroup_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_Category_HDTJobGroup_Grid_Name,
            ShowCommand = false,
            ReadActionUrl = _hrm_Hr_Service + "Cat_GetData/GetHDTJobGroupList/",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new[]
            {
                Cat_HDTJobGroupModel.FieldNames.Code,
                Cat_HDTJobGroupModel.FieldNames.HDTJobGroupName,
                Cat_HDTJobGroupModel.FieldNames.Type,
                Cat_HDTJobGroupModel.FieldNames.Description,
                Cat_HDTJobGroupModel.FieldNames.StatusView
            };

            grid.SizeFields = new Dictionary<string, int>()
            {
                {Cat_HDTJobGroupModel.FieldNames.Code,110},
                {Cat_HDTJobGroupModel.FieldNames.HDTJobGroupName,160},
                {Cat_HDTJobGroupModel.FieldNames.Type,100},
                {Cat_HDTJobGroupModel.FieldNames.Description,130},
                {Cat_HDTJobGroupModel.FieldNames.StatusView,130}
            };

            grid.Filterable = new Dictionary<string, bool>()
            {
                {Cat_HDTJobGroupModel.FieldNames.HDTJobGroupName,true},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Cat_HDTJobGroupModel.FieldNames.Code,ConstantDisplay.HRM_Category_HDTJobGroup_Code},
                {Cat_HDTJobGroupModel.FieldNames.HDTJobGroupName,ConstantDisplay.HRM_Category_HDTJobGroup_HDTJobGroupName},
                {Cat_HDTJobGroupModel.FieldNames.Type,ConstantDisplay.HRM_Category_UnitPrice_JobTypeID},
                {Cat_HDTJobGroupModel.FieldNames.Description,ConstantDisplay.HRM_Category_SalaryClass_Description},
                 {Cat_HDTJobGroupModel.FieldNames.StatusView,ConstantDisplay.HRM_System_DynamicColumn_Status},
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = ConstantControlName.HRM_Category_HDTJobGroup_Grid_Name,
        //    ValueFields = valueFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    Filterable = filterable,
        //    ShowCommand = false,
        //    ReadActionUrl = _hrm_Hr_Service + "Cat_GetData/GetHDTJobGroupList/",
        //    ReadData = "filterFieldInfo",
        //};
    }

    @(Html.VnrGrid<Cat_HDTJobGroupModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeHDTJobGroup", "Cat_HDTJobGroupModel");
        $(document).ready(function() {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
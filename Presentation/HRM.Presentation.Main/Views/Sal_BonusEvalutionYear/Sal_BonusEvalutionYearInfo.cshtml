@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.HrmSystem.Models

@model HRM.Presentation.Payroll.Models.Sal_UnusualAllowanceModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;



}

<script>
    SetFieldRequired();

    function Pagrameter() {
        var UnusualEDTypeID = $("#Bonus_UnusualEDTypeID").data("kendoComboBox").value();
        var CurrencyID = $("#Bonus_CurrencyID").data("kendoComboBox").value();
        var Element = $("#Bonus_Element").data("kendoMultiSelect");
        var checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
       
        return {
            OrgStructureID: checkedNodes.join(','),
            MonthStart: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#Bonus_MonthStart").val()),
            MonthEnd: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#Bonus_MonthEnd").val()),
            UnusualEDTypeID: UnusualEDTypeID,
            CurrencyID: CurrencyID,
            Element: Element.value()[0],
        };
    };

    function onSave() {
       
        $.ajax({
            url: '@_hrm_Hr_Service' + 'Sal_GetData/ComputeBonus',
            data: Pagrameter(),
            type: 'POST',
            async: false,
            success: function (data) {
                ShowNotificationProcessor('@ConstantDisplay.Hrm_Succeed.TranslateString()');
            },
            error: function (data) {
                ShowNotificationProcessor('@ConstantDisplay.HRM_UpdateFail.TranslateString()');
            }
        });
    };

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Sal_BonusEvalutionYear" }))
{
    <table>
        <tr>
            <td>

                <div id="div4">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.OrgStructureID)
                    </div>
                    <div class="FieldValue">
                        @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(model => model.MonthStart)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _ds = new DatePickerBuilderInfo()
                            {
                                Name = "Bonus_MonthStart",
                                StyleCss = "Width: 100px",
                                Placeholder = ConstantDisplay.HRM_Att_Report_DateFrom.TranslateString(),
                         
                            };
                        }
                        @Html.VnrDatePickerFor(mode => mode.MonthStart, _ds)

                        @{
                            var _de = new DatePickerBuilderInfo()
                            {
                                Name = "Bonus_MonthEnd",
                                StyleCss = "Width: 100px",
                                Placeholder = ConstantDisplay.HRM_Att_Report_DateTo.TranslateString(),
                            
                            };
                        }
                        @Html.VnrDatePickerFor(mode => mode.MonthEnd, _de)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.UnusualEDTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var ddlUnusualEDType = new ComboBoxBuilderInfo()
                            {
                                Name="Bonus_UnusualEDTypeID",
                                DataTextField = "UnusualAllowanceCfgName",
                                DataValueField = "ID",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUnusualAllowanceCfg",
                            };
                        }
                        @(Html.VnrComboBoxFor(model => model.UnusualEDTypeID, ddlUnusualEDType))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.CurrencyID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var ddlCurrency = new ComboBoxBuilderInfo()
                            {
                                Name = "Bonus_CurrencyID",
                                StyleCss = "width:60px;",
                                DataTextField = "CurrencyName",
                                DataValueField = "ID",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                            };
                        }
                        @(Html.VnrComboBoxFor(model => model.CurrencyID, ddlCurrency))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Element)
                    </div>
                    <div class="FieldValue">

                        @{
    var _ElementName = new MultiSelectBuilderInfo
    {
        Name = "Bonus_Element",
        DataTextField = "ElementName",
        DataValueField = "ID",
        Url = @_hrm_Cat_Service + "Cat_GetData/GetElementType",
        MaxSelectedItems = 1,
        Placeholder = ConstantDisplay.HRM_Category_SelectElementType.TranslateString(),
    };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.Element, _ElementName)
                    </div>
                </div>

                @*<div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Formula)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(m=>m.Formula)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        <label>Các Phần Tử</label>
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextArea("Example")
                    </div>
                </div>*@
            </td>
        </tr>
        <tr>
            <td>
                <hr />
                <div>
                    <div class="FieldTitle">
                    </div>
                    <div class="FieldValue">
                        @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-ConfigElement", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-ConfigElement", Content = ConstantAction.HRM_Common_ComputeBonus.TranslateString(), ImageUrl = ConstantPath.IconComputePath })
                        @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-ConfigElement", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
                    </div>
                </div>
            </td>
        </tr>
    </table>

    
}

@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Canteen.Models


@model HRM.Presentation.Canteen.Models.Can_CateringModel
@{
    var _hrm_Can_Service = ConstantPathWeb.Hrm_Hre_Service;
    Layout = null;
    var cateringId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
<script>
    var data = SetCharacteFieldRequired();

    function checkDuplicationCatering() {
         
        var code = $("#CateringCode").val();
        var id = '@cateringId';
        var data = { tableName: "Can_Catering", columnName: "CateringCode", keyword: code, id: id };
        var isduplicate = checkDuplicate('@_hrm_Sys_Service', 'Sys_GetData', 'CheckDuplicate', data, "CateringCode");
        return isduplicate;
    }

    function onSaveAndContinuePopUp() {
        if (CheckValidate(data)) {
            if (!checkDuplicationCatering()) {
                 
                onSaveAndContinue($('#form_can_cantering'), '@_hrm_Can_Service', 'api/Can_Catering/', '@ConstantControlName.HRM_Canteen_Catering_Grid_Name', 'windowCanTering'); return false;
            }
        }
    }

    function onSaveClosePopUp() {
         
        if (CheckValidate(data)) {
            if (!checkDuplicationCatering()) {
                onSaveAndClose($('#form_can_cantering'), '@_hrm_Can_Service', 'api/Can_Catering/', '@ConstantControlName.HRM_Canteen_Catering_Grid_Name', 'windowCanTering'); return false;
            }
        }
    }

    function onSaveDataPopUp() {
         
        if (CheckValidate(data)) {
            if (!checkDuplicationCatering()) {
                onlySave($('#form_can_cantering'), '@_hrm_Can_Service', 'api/Can_Catering/', '@ConstantControlName.HRM_Canteen_Catering_Grid_Name'); return false;
            }
        }
    }
</script>
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_can_cantering" }))
{
    @Html.HiddenFor(model => model.ID)
        <div id="div3">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.CateringName)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(model => model.CateringName,"width:300px")
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div3">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.CateringCode)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(model => model.CateringCode,"width:300px")
            @Html.HiddenFor(model => model.ID)
        </div>
        <div style="clear: both;"></div>
    </div>

    <div id="div5">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.Note)
        </div>
        <div class="FieldValue">
            @Html.VnrTextAreaFor(model => model.Note, "width:500px;height:100px;")
        </div>
    </div>
    <div>
        <div class="FieldTitle150"></div>
        <div class="FieldValue">
            <div style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </div>
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-canCanTering", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveAndContinuePopUp", Name = "save-continue-canCanTering", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClosePopUp", Name = "save-close-canCanTering", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
    </div>
}



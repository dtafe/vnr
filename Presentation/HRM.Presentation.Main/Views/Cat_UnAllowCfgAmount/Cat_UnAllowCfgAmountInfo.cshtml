@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Category.Models.Cat_UnAllowCfgAmountModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
}

<script>
    //var Validator = CheckValidate();
    SetFieldRequired();

    function onSave() {
      //  if (CheckValidate(data)) {
        onSaveAndContinue($('#form_Cat_UnAllowCfgAmount'), '@_hrm_Hr_Service', 'api/Cat_UnAllowCfgAmount/', "gridCat_UnAllowCfgAmount", "windowUnAllowCfgAmount");
       // }
        return false;
    }

    function onSaveClose() {
      //  if (CheckValidate(data)) {
        onSaveAndClose($('#form_Cat_UnAllowCfgAmount'), '@_hrm_Hr_Service', 'api/Cat_UnAllowCfgAmount/', "gridCat_UnAllowCfgAmount", "windowUnAllowCfgAmount");
       // }
        return false;
    }
    function onSaveDataPopUp() {

        //    if (CheckValidate(data)) {
        //   if (!checkDuplicationCode()) {
        onlySave($('#form_Cat_UnAllowCfgAmount'), '@_hrm_Hr_Service', 'api/Cat_UnAllowCfgAmount/', "gridCat_UnAllowCfgAmount"); return false;
        //    }
        // }
    }

</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_UnAllowCfgAmount" }))
{
    @Html.HiddenFor(model => model.ID)
    <table>
        <tr>
            <td>

                <div id="div5">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.UnusualAllowanceID)
                    </div>
                    <div class="FieldValue">
                        @{
                         var _UnusualAllowanceID = new ComboBoxBuilderInfo()
                         {
                             Name = "UnAllowCfgAmountInfo_UnusualAllowanceID",
                             DataTextField = "UnusualAllowanceCfgName",
                             DataValueField = "ID",
                             Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUnusualAllowanceCfg",
                             StyleCss = "width:300px;",
                             Value = Model == null ? string.Empty : Model.UnusualAllowanceID.ToString(),
                             ServerFilter=true,
                          
                         };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.UnusualAllowanceID, _UnusualAllowanceID).Text(Model == null ? string.Empty : Model.UnusualAllowanceCfgName))

                    </div>
                    <div style="clear: both;"></div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.Amount)

                    </div>

                    <div class="FieldValue">
                        @{
                         var text = new NumericTextBoxBuilderInfo<double>()
                         {
                             Name = "Amount",
                             //StyleCss = "background-color:WhiteSmoke",
                             Format = ConstantFormat.HRM_Format_Money.ToString(),
                             StyleCss="Width:150px"
                         };
                         //if (Model != null)
                         //{
                         //    text.Value = Model != null ? Model.Amount != null?Model.Amount : null:null;
                         //}
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Amount, text)
                        @*@{
                         string valueCurr = string.Empty;
                         if (Model == null || Model.CurrencyID == null)
                         {
                             valueCurr = "VND";
                         }
                        }
                        @{
                            var _UnusuaCurrencyName = new ComboBoxBuilderInfo()
                             {
                                 Name = "UnusualAllowance_CurrencyID",
                                 DataTextField = "CurrencyName",
                                 DataValueField = "ID",
                                 Index = 0,
                                 Url = _hrm_Hr_Service + "Sal_GetData/GetMultiCurrency",
                                 StyleCss = "width:70px;",
                                 Value = valueCurr,
                                 Autobind = true,
                             };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.CurrencyID, _UnusuaCurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName))*@
                    </div>
                </div>





                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.FromDate)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _FromDate = new DatePickerBuilderInfo()
                           {
                               Name = "UnAllowCfgAmountInfo_FromDate",
                               StyleCss = "width:120px",
                               //Enable=false,

                           };
                        }
                        @Html.VnrDatePickerFor(model => model.FromDate, _FromDate)
                    </div>

                </div>
               
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model=>model.ToDate)
                    </div>
                    <div class="FieldValue">
                        @{
                        var _ToDate = new DatePickerBuilderInfo()
                        {
                            Name = "UnAllowCfgAmountInfo_ToDate",
                            StyleCss = "width:120px",
                            //Enable=false,

                        };
                        }
                        @Html.VnrDatePickerFor(model => model.ToDate, _ToDate)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-UnAllowCfgAmount", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-UnAllowCfgAmount", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-UnAllowCfgAmount", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
    </table>
}
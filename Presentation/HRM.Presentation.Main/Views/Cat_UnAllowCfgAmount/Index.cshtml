@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models;
@using HRM.Infrastructure.Security;

@model Cat_UnAllowCfgAmountSearchModel

@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Layout = null;
}

@{
    var window = new WindowBuilderInfo
    {
        Name = "windowUnAllowCfgAmount",
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Cat_UnAllowCfgAmount/Cat_UnAllowCfgAmountInfo/",
    };
}
@(Html.VnrWindow(window))

<script>

    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Category_UnAllowCfgAmount_Update_Title.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Category_UnAllowCfgAmount_Create_Title.TranslateString())';


    //Data khi tìm kiếm
    function filterFieldInfo() {
        return {
            UnusualAllowanceID: $('#@Html.FieldIdFor(model => model.UnusualAllowanceID)').val(),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            IsExport: false,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();
        //Jump Anchor
        jumpAnchor("anchor");
        $("#btnSearch").click(function () {
            ReadGrid("gridCat_UnAllowCfgAmount");
        });

        //Xử lý Edit popup
        var url = '@_hrm_Main_Web' + "Cat_UnAllowCfgAmount/Cat_UnAllowCfgAmountInfo/";
        EditGridPopUp("gridCat_UnAllowCfgAmount", "windowUnAllowCfgAmount", url, '@ConstantPermission.Cat_UnAllowCfgAmount', titleEditPopUp);
    });

    //Xử lý Create
    $("#btnCreate").click(function () {
        var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Cat_UnAllowCfgAmount');
        if (!isAccess) {
            return;
        }
        PopUpCreate("windowUnAllowCfgAmount", titleCreatePopUp, '@ConstantPermission.Cat_UnAllowCfgAmount');
    });

    //Xử Lý grid
    GridCheckbox("gridCat_UnAllowCfgAmount");

    //Xử Lý button delete
    $('#btnDelete').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }

        e.preventDefault();
        DeleteSelected("gridCat_UnAllowCfgAmount", '@_hrm_Main_Web' + "Cat_UnAllowCfgAmount/RemoveSelected/", selectedIds, '@ConstantPermission.Cat_UnAllowCfgAmount');
        return false;
    });

    $(document).ready(function () {
        ShowHidePanel();
    });

    $("#btnExportSelected").click(function () {

        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportUnAllowCfgAmountSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Cat_UnAllowCfgAmount');
    });

    $("#btnExportAll").click(function () {

        debugger;
        var grid = $('#gridCat_UnAllowCfgAmount').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportAllUnAllowCfgAmountList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Cat_UnAllowCfgAmount');
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div class="hrm_box">
                    <div id="div5">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.UnusualAllowanceID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _UnusualAllowanceID = new ComboBoxBuilderInfo()
                                {
                                    DataTextField = "UnusualAllowanceCfgName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hr_Service + "Cat_GetData/GetMultiUnusualAllowanceCfg",
                                 StyleCss = "width:200px;",
                                 Value = Model == null ? string.Empty : Model.UnusualAllowanceID.ToString(),
                             };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.UnusualAllowanceID, _UnusualAllowanceID))

                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.FromDate)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _FromDate = new DatePickerBuilderInfo()
                                {
                                    StyleCss = "width:100px;",
                                    Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                };
                            }
                            @Html.VnrDatePickerFor(model => model.FromDate, _FromDate)
                            @{
                                var _DateTo = new DatePickerBuilderInfo()
                                {
                                    StyleCss = "width:100px;",
                                    Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                };
                            }
                            @Html.VnrDatePickerFor(model => model.ToDate, _DateTo)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div style="float:right">
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnCat_UnAllowCfgAmount", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>

<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = "gridCat_UnAllowCfgAmount" + "__Cat_UnAllowCfgAmount_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            ShowCommand = false,
            Name = "gridCat_UnAllowCfgAmount",
            ReadActionUrl = @_hrm_Hr_Service + "Cat_GetData/GetUnAllowCfgAmountList",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new[]
            {

                Cat_UnAllowCfgAmountModel.FieldNames.UnusualAllowanceCfgName,
            Cat_UnAllowCfgAmountModel.FieldNames.FromDate,
            Cat_UnAllowCfgAmountModel.FieldNames.ToDate,
            Cat_UnAllowCfgAmountModel.FieldNames.Amount,

            };

            grid.SizeFields = new Dictionary<string, int>()
            {

                
                {Cat_UnAllowCfgAmountModel.FieldNames.UnusualAllowanceCfgName, 140},
            {Cat_UnAllowCfgAmountModel.FieldNames.FromDate, 90},
            {Cat_UnAllowCfgAmountModel.FieldNames.ToDate, 90},
           {Cat_UnAllowCfgAmountModel.FieldNames.Amount, 140},
            };

            var filterable = new Dictionary<string, bool>()
            {
               {Cat_UnAllowCfgAmountModel.FieldNames.UnusualAllowanceCfgName,true},
                {Cat_UnAllowCfgAmountModel.FieldNames.FromDate,true},
                      {Cat_UnAllowCfgAmountModel.FieldNames.ToDate,true},
                           {Cat_UnAllowCfgAmountModel.FieldNames.Amount,true},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {


                   {Cat_UnAllowCfgAmountModel.FieldNames.UnusualAllowanceCfgName, ConstantDisplay.HRM_Payroll_UnusualED_UnusualEDTypeID},
            {Cat_UnAllowCfgAmountModel.FieldNames.FromDate, ConstantDisplay.HRM_Category_UnAllowCfgAmount_FromDate},
            {Cat_UnAllowCfgAmountModel.FieldNames.ToDate, ConstantDisplay.HRM_Category_UnAllowCfgAmount_ToDate},
            {Cat_UnAllowCfgAmountModel.FieldNames.Amount, ConstantDisplay.HRM_Category_UnAllowCfgAmount_Amount},

            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
    //var grid = new GridBuilderInfo
    //{
    //    Name = ConstantControlName.HRM_Category_TypeOfTransfer_Grid_Name,
    //    ValueFields = valueFields,
    //    SizeFields = sizeFields,
    //    DisplayFields = displayFields,
    //    Filterable = filterable,
    //    ShowCommand = false,
    //    ReadActionUrl = @_hrm_Hre_Service + "Cat_GetData/GetTypeOfTransferList/",
    //    ReadData = "filterFieldInfo",
    //};
    }

    @(Html.VnrGrid<Cat_UnAllowCfgAmountModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnCat_UnAllowCfgAmount", "Cat_UnAllowCfgAmountModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>

@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)

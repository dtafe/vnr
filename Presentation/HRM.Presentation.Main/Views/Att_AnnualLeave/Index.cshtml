@model HRM.Presentation.Attendance.Models.Att_AnnualLeaveSearchModel
@using HRM.Infrastructure.Utilities;
@using HRM.Infrastructure.Security


@{
    ViewBag.Title = HRM.Infrastructure.Utilities.ConstantDisplay.HRM_HR_HDTJob.TranslateString();
    Layout = null;
    //string[] valueFields = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();

       
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
}
@Html.Hidden("Screen", screen)
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_gridAtt_AnnualLeave_PopUp_Name,
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Att_AnnualLeave/CreateOrUpdate/",
    };
}
@(Html.VnrWindow(window))
<script type="text/javascript">
    var titleCreate = '@Html.Raw(ConstantDisplay.HRM_Attendance_AnnualLeave_AddNew.TranslateString())';
    var titleUpdate = '@Html.Raw(ConstantDisplay.HRM_Attendance_AnnualLeave_Edit.TranslateString())';

    var checkedNodes = [];

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        return {
            OrgStructureID: checkedNodes.join(','),
            ProfileName: $('#@Html.FieldIdFor(model => model.ProfileName)').val(),
            CodeEmp: $('#@Html.FieldIdFor(model => model.CodeEmp)').val(),
            Year: $('#@Html.FieldIdFor(model => model.Year)').val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();

        //
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
            var grid = $('#gridAtt_AnnualLeave').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
            checkedNodes = [];
        });
        //Xử lý nút Edit
        var url = '@_hrm_Main_Web' + "Att_AnnualLeave/CreateOrUpdate/";
        EditGridPopUp("gridAtt_AnnualLeave", '@ConstantControlName.HRM_gridAtt_AnnualLeave_PopUp_Name', url, '@ConstantPermission.Att_AnnualLeave', titleUpdate);
    });

    //Xử Lý Grid
    GridCheckbox("gridAtt_AnnualLeave");
    //Xử lý nút Delete
    $('#btnDelete').click(function (e) {
        if (selectedIds.length == 0) {
            DeleteFail();
            return;
        }
        e.preventDefault();
        DeleteSelectedConfirm("gridAtt_AnnualLeave", '@_hrm_Main_Web' + "Att_AnnualLeave/RemoveSelected/", selectedIds, '@ConstantPermission.Att_AnnualLeave');
        return false;
    });
    //Xử lý nút Create
    $("#btnCreate").click(function () {
        @*KendoRouteMapping('#Hrm_Main_Web/Hre_StopWorking/Create/', 'Hrm_Main_Web', '@_hrm_Main_Web');*@
        PopUpCreate('@ConstantControlName.HRM_gridAtt_AnnualLeave_PopUp_Name', titleCreate, '@ConstantPermission.Cat_Unit');
    });


    $("#btnExportAll").click(function () {
        var grid = $('#gridAtt_AnnualLeave').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }

        var urlGetData = '@_hrm_Hre_Service' + "Att_GetData/ExportAnnualLeaveList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Att_AnnualLeave');
    });

    $("#btnExportSelected").click(function () {
        if (selectedIds.length == 0) {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Att_GetData/ExportAnnualLeaveSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds;
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Att_AnnualLeave');
    });

    $("#btnImportData").click(function () {
        debugger;
        SetTempData('@_hrm_Main_Web' + "Home/SetTempData", '@controller');
        debugger;
        KendoRouteMapping('#Hrm_Main_Web/Cat_Import/Import_List#NewTab', 'Hrm_Main_Web', '@_hrm_Main_Web');
    });

</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div style="float:left; width:500px">
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.ProfileName)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.ProfileName)
                        </div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.CodeEmp)
                        </div>
                        <div class="FieldValue">
                            @Html.VnrTextBoxFor(model => model.CodeEmp)
                        </div>
                    </div>
                  
                </div>
                <div style="width:550px; display:block; float:left">
                    <div id="div14">
                        <div class="FieldTitle" style="width:100px;">
                            @Html.VnrLabelFor(mode => mode.OrgStructureID)
                        </div>
                        <div class="FieldValue">
                            @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                        </div>

                    </div>
                    <div id="div2">
                        <div class="FieldTitle" style="width:100px;">
                            @Html.VnrLabelFor(mode => mode.Year)
                        </div>
                        <div class="FieldValue">
                          @Html.VnrTextBoxFor(mode => mode.Year, "width:100px")
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnImportData", Content = ConstantAction.HRM_Common_ImportData.TranslateString(), ImageUrl = ConstantPath.IconCopyPath })
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown" >
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeAnnualLeave", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>

</div>
<script>
    function clickProfile(id) {

        KendoRouteMapping('#Hrm_Main_Web/GeneralProfile/Index/' + id,'Hrm_Hre_Web', '@_hrm_Main_Web');
    }
</script>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Attendance.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
         var columnMode = string.Empty;
         var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridAtt_AnnualLeave_Grid_Name + "__Att_AnnualLeaveIndex";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridAtt_AnnualLeave_Grid_Name,
            ReadActionUrl = @_hrm_Hre_Service + "Att_GetData/GetAnnualLeaveList/",
            ReadData = "filterFieldInfo",
            EventDataBound = "changePageGird",
            ShowCommand = false
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
            {
                Att_AnnualLeaveModel.FieldNames.CodeEmp,
                Att_AnnualLeaveModel.FieldNames.ProfileName,
                Att_AnnualLeaveModel.FieldNames.Year,
                Att_AnnualLeaveModel.FieldNames.InitAnlValue,
                Att_AnnualLeaveModel.FieldNames.InitSickValue,
                Att_AnnualLeaveModel.FieldNames.InitSaveSickValue,
            };
            grid.SizeFields = new Dictionary<string, int>()
            {
                {Att_AnnualLeaveModel.FieldNames.CodeEmp, 75},
                {Att_AnnualLeaveModel.FieldNames.ProfileName, 135},
                {Att_AnnualLeaveModel.FieldNames.Year, 50},
                {Att_AnnualLeaveModel.FieldNames.InitAnlValue, 138},
                {Att_AnnualLeaveModel.FieldNames.InitSickValue, 142},
                {Att_AnnualLeaveModel.FieldNames.InitSaveSickValue, 150},
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Att_AnnualLeaveModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Attendance_CodeEmp},
                {Att_AnnualLeaveModel.FieldNames.ProfileName, ConstantDisplay.HRM_Attendance_AnnualLeave_ProfileName},
                {Att_AnnualLeaveModel.FieldNames.Year, ConstantDisplay.HRM_Attendance_AnnualLeave_Year},
                {Att_AnnualLeaveModel.FieldNames.InitAnlValue, ConstantDisplay.HRM_Attendance_AnnualLeave_InitAnlValue},
                {Att_AnnualLeaveModel.FieldNames.InitSickValue, ConstantDisplay.HRM_Attendance_AnnualLeave_InitSickValue},
                {Att_AnnualLeaveModel.FieldNames.InitSaveSickValue, ConstantDisplay.HRM_Attendance_AnnualLeave_InitSaveSickValue},
            };

            grid.FormatFields = new Dictionary<string, string>()
            {
                {Att_AnnualLeaveModel.FieldNames.Year, ConstantFormat.HRM_Format_Number_Integer},
                {Att_AnnualLeaveModel.FieldNames.InitAnlValue, ConstantFormat.HRM_Format_Number_Integer},
                {Att_AnnualLeaveModel.FieldNames.InitSickValue, ConstantFormat.HRM_Format_Number_Integer},
                {Att_AnnualLeaveModel.FieldNames.InitSaveSickValue, ConstantFormat.HRM_Format_Number_Integer},
            };

            grid.HyperlinkFields = new Dictionary<string, string>()
            {
                {Att_AnnualLeaveModel.FieldNames.ProfileName,"clickProfile,ProfileID"},
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = "gridAtt_AnnualLeave",
        //    ValueFields = valueFields,
        //    FormatFields = formatFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    ReadActionUrl = @_hrm_Hre_Service + "Att_GetData/GetAnnualLeaveList/",
        //    ShowCommand = false,
        //    ReadData = "filterFieldInfo",
        //    EventDataBound = "changePageGird",
        //    HyperlinkFields = hyperlinkFields
        //};

    }

    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<HRM.Presentation.Attendance.Models.Att_AnnualLeaveModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeAnnualLeave", "Att_AnnualLeaveModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>

@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)





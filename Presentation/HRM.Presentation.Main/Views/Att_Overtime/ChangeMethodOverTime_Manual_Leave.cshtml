@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect

@using HRM.Infrastructure.Utilities
@using System.Collections;
@model HRM.Presentation.Attendance.Models.Att_OvertimeModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
}

<script type="text/javascript">

    $(document).ready(function () {

        $("#btnAnalysis").click(function () {
            
            var grid = $('#gridAtt_OvertimeLeave').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
        });

    });

    function filterFieldInfo(isExport) {
        var x = isExport;
        
        var elementPara = {
            ID: $('#hID').val(),
            ProfileID: $('#hProfileID').val(),
            WorkDate: $('#OTWorkDate').val(),
            LeaveDay1: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#LeaveDay1").val()),
            LeaveDay2: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#LeaveDay2").val()),
            IsExport: false,
            ValueFields: $('#valueFieldsGrid').val(),
        };
        return elementPara;
    }


    function onSaveClose() {
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Att_GetData/ChangeMethodOverTime_Manual_Leave',
            data: filterFieldInfo(false),
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data[0] == "error") {
                    ShowNotificationProcessor(data[1]);
                }
                else {
                    ShowNotificationProcessor("Lưu Thành Công !");//Chưa Dịch
                    $("#windowAtt_ChangeMethodOverTime_Manual").data("kendoWindow").close();
                    ReadGrid("gridAtt_Overtime");
                }
            },
            error: function (data) {
                ShowNotificationProcessor("Lỗi !");//Chưa Dịch
                $("#windowAtt_ChangeMethodOverTime_Manual").data("kendoWindow").close();
            }
        });
    }
    function onSaveDataPopUp() {
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Att_GetData/ChangeMethodOverTime_Manual_Leave',
            data: filterFieldInfo(false),
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data[0] == "error") {
                    ShowNotificationProcessor(data[1]);
                }
                else {
                    ShowNotificationProcessor("Lưu Thành Công !");//Chưa Dịch
                    ReadGrid("gridAtt_Overtime");
                }
            },
            error: function (data) {
                ShowNotificationProcessor("Lỗi !");//Chưa Dịch
                $("#windowAtt_ChangeMethodOverTime_Manual").data("kendoWindow").close();
            }
        });
        
    }


</script>

@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Att_OvertimeModel" }))
{
    @Html.ValidationSummary(false)
    @Html.AntiForgeryToken()
    @Html.Hidden("hID", Model.ID)
    @Html.Hidden("hProfileID", Model.ProfileID)
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.ProfileID)
    @Html.HiddenFor(model => model.OvertimeTypeID)
    
    <div class="VnRMain">
        <table style="width:100%">
            <tbody>
                <tr>
                    <td class="Box_Top_Left"></td>
                    <td valign="middle" class="Box_Top_Mid"></td>
                    <td class="Box_Top_Right"></td>
                </tr>
                <tr>
                    <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                    <td valign="top" style="float:left;background-color: #ffffff;">
                        <div>
                            <div id="div9">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ProfileName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrLabel(Model.ProfileName)
                                </div>
                            </div>
                            <div id="div8">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(m => m.WorkDate)
                                </div>
                                <div class="FieldValue">
                                    @{
    DatePickerBuilderInfo WorkDate = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px",
        Name = "OTWorkDate",   
        Value = Model.WorkDate.ToString(),
        Enable = false,
        Format = ConstantFormat.HRM_Format_DayMonthYear
    };
                                    }
                                    @Html.VnrDatePickerFor(m => m.WorkDate, WorkDate)
                                </div>
                            </div>
                            <div id="div7">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.OvertimeTypeName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrLabel(Model.OvertimeTypeName)
                                </div>
                                <br />
                            </div>
                        </div>
                    </td>
                    <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                    <td>
                        <div>
                            <div id="div44">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.LeaveDay1)
                                    @*Ngày Nghỉ Bù*@
                                </div>
                                <div class="FieldValue">
                                    @{
    DatePickerBuilderInfo LeaveDay1 = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px",
    };
                                    }
                                    @Html.VnrDatePickerFor(m => m.LeaveDay1, LeaveDay1)
                                </div>
                            </div>
                            <div id="div44">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.LeaveDay2)
                                    @*Ngày Nghỉ Bù Tiếp Theo*@
                                </div>
                                <div class="FieldValue">
                                    @{
    DatePickerBuilderInfo LeaveDay2 = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px",
    };
                                    }
                                    @Html.VnrDatePickerFor(m => m.LeaveDay2, LeaveDay2)
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="padding-top:2px; padding-bottom:10px;">
                        <div class="LineFooterCommandEdit">
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                    <td valign="top" style="float:left;background-color: #ffffff;">
                        
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="commandToolBarWidge">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnAnalysis", Content = ConstantAction.HRM_Common_Analysis.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div>
        <!--Khai báo các thông tin cho Grid-->
        @using HRM.Presentation.Attendance.Models
        @{
    var valueFields = new string[]
        {
            Att_OvertimeModel.FieldNames.CodeEmp,
            Att_OvertimeModel.FieldNames.ProfileName,
            Att_OvertimeModel.FieldNames.OrgStructureName,
            Att_OvertimeModel.FieldNames.WorkDate,
            Att_OvertimeModel.FieldNames.InTime,
            Att_OvertimeModel.FieldNames.OutTime,
            Att_OvertimeModel.FieldNames.ShiftName,
            Att_OvertimeModel.FieldNames.AnalyseHour,
            Att_OvertimeModel.FieldNames.ApproveHours,
            Att_OvertimeModel.FieldNames.OvertimeTypeName,
            Att_OvertimeModel.FieldNames.MethodPayment,
            Att_OvertimeModel.FieldNames.ReasonOT,
            Att_OvertimeModel.FieldNames.UserApproveName1,
            Att_OvertimeModel.FieldNames.UserApproveName2,
            Att_OvertimeModel.FieldNames.IsNonOvertime
        };

    Dictionary<string, int> sizeFields = new Dictionary<string, int>()
        {
            {Att_OvertimeModel.FieldNames.CodeEmp, 70},
            {Att_OvertimeModel.FieldNames.ProfileName, 135},
            {Att_OvertimeModel.FieldNames.OrgStructureName, 100},
            {Att_OvertimeModel.FieldNames.WorkDate, 80},
            {Att_OvertimeModel.FieldNames.InTime,65},
            {Att_OvertimeModel.FieldNames.OutTime,65},
            {Att_OvertimeModel.FieldNames.ShiftName, 70},
            {Att_OvertimeModel.FieldNames.AnalyseHour, 75},
            {Att_OvertimeModel.FieldNames.ApproveHours, 72},
            {Att_OvertimeModel.FieldNames.OvertimeTypeName, 90},
            {Att_OvertimeModel.FieldNames.MethodPayment, 104},
            {Att_OvertimeModel.FieldNames.ReasonOT, 99},
            {Att_OvertimeModel.FieldNames.IsNonOvertime, 100}
        };

    Dictionary<string, string> displayFields = new Dictionary<string, string>()
        {
            {Att_OvertimeModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Attendance_Overtime_ProfileID},
            {Att_OvertimeModel.FieldNames.ProfileName, ConstantDisplay.HRM_Attendance_Overtime_ProfileName},

            {Att_OvertimeModel.FieldNames.OrgStructureName, ConstantDisplay.HRM_Category_OrgStructure_OrgStructureName},
            {Att_OvertimeModel.FieldNames.WorkDate, ConstantDisplay.HRM_Attendance_Overtime_WorkDate},
            {Att_OvertimeModel.FieldNames.InTime, ConstantDisplay.HRM_Attendance_Overtime_InTime},
            {Att_OvertimeModel.FieldNames.OutTime, ConstantDisplay.HRM_Attendance_Overtime_OutTime},
            {Att_OvertimeModel.FieldNames.AnalyseHour, ConstantDisplay.HRM_Attendance_Overtime_AnalyseHour},
            {Att_OvertimeModel.FieldNames.ApproveHours, ConstantDisplay.HRM_Attendance_Overtime_ApproveHours},
            {Att_OvertimeModel.FieldNames.OvertimeTypeName, ConstantDisplay.HRM_Attendance_Overtime_OvertimeTypeID},
            {Att_OvertimeModel.FieldNames.MethodPayment, ConstantDisplay.HRM_Attendance_Overtime_MethodPayment},
            {Att_OvertimeModel.FieldNames.ReasonOT, ConstantDisplay.HRM_Attendance_Overtime_ReasonOT},
            {Att_OvertimeModel.FieldNames.UserApproveName2, ConstantDisplay.HRM_Attendance_Overtime_UserApproveID2}
        };

    Dictionary<string, string> formatFields = new Dictionary<string, string>()
        {
            {Att_OvertimeModel.FieldNames.WorkDate, ConstantFormat.HRM_Format_DayMonthYear},
            {Att_OvertimeModel.FieldNames.InTime, ConstantFormat.HRM_Format_HourMinSecond},
            {Att_OvertimeModel.FieldNames.OutTime, ConstantFormat.HRM_Format_HourMinSecond}
        };

    var grid = new GridBuilderInfo
    {
        Name = "gridAtt_OvertimeLeave",
        ValueFields = valueFields,
        SizeFields = sizeFields,
        DisplayFields = displayFields,
        ReadActionUrl = @_hrm_Hr_Service + "Att_GetData/GetOvertimeManualLeave/",
        ReadData = "filterFieldInfo",
        FormatFields = formatFields,
        GridHeight = 300,
        EventDataBound = "changePageGird",
    };
        }

        <!--Khởi tạo Grid-->
        @(Html.VnrGrid<HRM.Presentation.Attendance.Models.Att_OvertimeModel>(grid))
        @{
    var valueFields1 = string.Empty;
    for (int i = 0; i < valueFields.Count(); i++)
    {
        valueFields1 += "," + valueFields[i];
    }
        }
        @Html.Hidden("valueFieldsGrid", valueFields1)
    </div>

    <div id="div9">
        <div class="FieldTitle150">

        </div>
        <div class="FieldValue">
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-OrgStructure", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catOrgStructure", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
        <div class="Box_Mid_Left"></div>

    </div>
}

@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Attendance.Models

@model Att_OvertimeAnalysisModel
@{
    ViewBag.Title = "Index AttOvertime";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    IList<SelectListItem> listMethodPayment = Enum.GetValues(typeof(EnumDropDown.MethodPayment))
         .Cast<EnumDropDown.MethodPayment>()
         .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
         .ToList();

    IList<SelectListItem> listStatus = Enum.GetValues(typeof(EnumDropDown.OverTimeStatus))
       .Cast<EnumDropDown.OverTimeStatus>()
       .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
       .ToList();

    IList<SelectListItem> listOTDurationType = Enum.GetValues(typeof(EnumDropDown.OvertimeDurationType))
        .Cast<EnumDropDown.OvertimeDurationType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p=>p.Text)
        .ToList();
}

<script>
    var userLG = $('#UserLoginId').val();
    var h = 0;
    // var data = SetCharacteFieldRequired();
    SetFieldRequired();
    function eventParaData() {
        debugger;
        var _profileID = $('#@Html.FieldIdFor(model => model.ProfileID)').val() != null ? $('#@Html.FieldIdFor(model => model.ProfileID)').val().join(',') : $('#@Html.FieldIdFor(model => model.ProfileID)').val();
        var _dateTime = $('#@Html.FieldIdFor(model => model.WorkDate)').val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $('#@Html.FieldIdFor(model => model.WorkDate)').val()) : null;
        var _shiftID = $('#@Html.FieldIdFor(model => model.ShiftID)').val() != null ? $('#@Html.FieldIdFor(model => model.ShiftID)').val() : null;
        var _overtimeType = $('#SOvertimeTypeID').val() != null ? $('#SOvertimeTypeID').val() : null;
        var _registerHours = $('#SRegisterHours').val() != null ? $('#SRegisterHours').val() : null;
        var _methodPayment = $('#SMethodPayment').val() != null ? $('#SMethodPayment').val() : null;
        var _userApproveID = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').val() : null;
        var _userApproveID2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').val() : null;
        var _userApproveName = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').data("kendoComboBox").text() : null;
        var _userApproveName2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').data("kendoComboBox").text() : null;
        var _userApproveID3 = $('#UserApproveID_UserApproveID3').val() != null ? $('#UserApproveID_UserApproveID3').val() : null;
        var _userApproveName3 = $('#UserApproveID_UserApproveID3').val() != null ? $('#UserApproveID_UserApproveID3').data("kendoComboBox").text() : null;


        var _reasonOT = $('#SReasonOT').val() != null ? $('#SReasonOT').val() : null;
        var _durationType = $('#@Html.FieldIdFor(model => model.DurationType)').val() != null ? $('#@Html.FieldIdFor(model => model.DurationType)').val() : null;
        var _time = $('#Vnr_MaskedTextBox_Time').val();
        var _status = $('#@Html.FieldIdFor(model => model.Status)').val();

        var param = {
            ProfileID: _profileID,
            WorkDate: _dateTime,
            WorkDateTime: _time,
            ShiftID: _shiftID,
            OvertimeTypeID: _overtimeType,
            RegisterHours: _registerHours,
            MethodPayment: _methodPayment,
            UserApproveID: _userApproveID,
            UserApproveID2: _userApproveID2,
            UserApproveName: _userApproveName,
            UserApproveName2: _userApproveName2,
            DurationType: _durationType,
            UserLoginID: userLG,
            Status: _status,
            ReasonOT: _reasonOT,
            UserApproveID3: _userApproveID3,
            UserApproveName3: _userApproveName3
        };
        return param;
    }

    function paramSave() {

        var _profileID = $('#@Html.FieldIdFor(model => model.ProfileID)').val() != null ? $('#@Html.FieldIdFor(model => model.ProfileID)').val().join(',') : $('#@Html.FieldIdFor(model => model.ProfileID)').val();
        var _dateTime = $('#@Html.FieldIdFor(model => model.WorkDate)').val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $('#@Html.FieldIdFor(model => model.WorkDate)').val()) : null;
        var _shiftID = $('#@Html.FieldIdFor(model => model.ShiftID)').val() != null ? $('#@Html.FieldIdFor(model => model.ShiftID)').val() : null;
        var _overtimeType = $('#SOvertimeTypeID').val() != null ? $('#SOvertimeTypeID').val() : null;
        var _registerHours = $('#SRegisterHours').val() != null ? $('#SRegisterHours').val() : null;
        var _methodPayment = $('#SMethodPayment').val() != null ? $('#SMethodPayment').val() : null;
        var _userApproveID = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').val() : null;
        var _userApproveID2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').val() : null;
        var _userApproveName = $('#UserApproveID_1').val() != null ? $('#UserApproveID_1').data("kendoComboBox").text() : null;
        var _userApproveName2 = $('#UserApproveID_2').val() != null ? $('#UserApproveID_2').data("kendoComboBox").text() : null;

        var _userApproveID3 = $('#UserApproveID_UserApproveID3').val() != null ? $('#UserApproveID_UserApproveID3').val() : null;
        var _userApproveName3 = $('#UserApproveID_UserApproveID3').val() != null ? $('#UserApproveID_UserApproveID3').data("kendoComboBox").text() : null;

        var _reasonOT = $('#SReasonOT').val() != null ? $('#SReasonOT').val() : null;
        var _durationType = $('#@Html.FieldIdFor(model => model.DurationType)').val() != null ? $('#@Html.FieldIdFor(model => model.DurationType)').val() : null;
        var _time = $('#Vnr_MaskedTextBox_Time').val();
        var _status = $('#@Html.FieldIdFor(model => model.Status)').val();

        var param = {
            ProfileID: _profileID,
            WorkDate: _dateTime,
            WorkDateTime: _time,
            ShiftID: _shiftID,
            OvertimeTypeID: _overtimeType,
            RegisterHours: _registerHours,
            MethodPayment: _methodPayment,
            UserApproveID: _userApproveID,
            UserApproveID2: _userApproveID2,
            UserApproveName: _userApproveName,
            UserApproveName2: _userApproveName2,
            DurationType: _durationType,
            ReasonOT: _reasonOT,
            Status: _status,
            UserApproveID3: _userApproveID3,
            UserApproveName3: _userApproveName3
        };
        return param;
    }

    $(document).ready(function () {
        $.ajax({
            type: 'POST',
            url: '@_hrm_Sys_Service' + 'Sys_GetData/GetPermissionApproved',
            data: { userID: userLG, permissionCheck: '@ApproveType.E_OVERTIME.ToString()' },
            success: function (data) {
                debugger;
                var dropdownlist = $("#Status").data("kendoDropDownList");
                if (data == '@Boolean.TrueString') {
                    dropdownlist.readonly(false);
                    dropdownlist.value('@AttendanceDataStatus.E_APPROVED.ToString()');
                } else {
                    dropdownlist.readonly(true);
                }
            }
        });

        $("#Vnr_MaskedTextBox_Time").kendoMaskedTextBox({
            mask: "~!:&#:$%",
            rules: {
                "~": function (char) {
                    if (char == 0 || char == 1 || char == 2) {
                        h = char;
                        return char;
                    }
                    return "";
                },
                "!": function (char) {
                    if (h == 2) {
                        if (char > 3)
                            return "";
                    }
                    return char;
                },
                "&": function (char) {
                    if (char > 5)
                        return "";
                    return char;
                },
                "#": function (char) {
                    return char;
                },
                "$": function (char) {
                    if (char > 5)
                        return "";
                    return char;
                },
                "%": function (char) {
                    return char;
                },
            }
        });

        $(document).on("change", "#Vnr_MaskedTextBox_TimeIn", function () {
            UpdateRegisterHours();
        });

        $(document).on("change", "#Vnr_MaskedTextBox_TimeOut", function () {
            UpdateRegisterHours();
        });

        $("#Vnr_MaskedTextBox_TimeIn").kendoMaskedTextBox({
            mask: "~!:&#",
            rules: {
                "~": function (char) {
                    if (char == 0 || char == 1 || char == 2) {
                        h = char;
                        return char;
                    }
                    return "";
                },
                "!": function (char) {
                    if (h == 2) {
                        if (char > 3)
                            return "";
                    }
                    return char;
                },
                "&": function (char) {
                    if (char > 5)
                        return "";
                    return char;
                },
                "#": function (char) {
                    return char;
                },
            }
        });

        $("#Vnr_MaskedTextBox_TimeOut").kendoMaskedTextBox({
            mask: "~!:&#",
            rules: {
                "~": function (char) {
                    if (char == 0 || char == 1 || char == 2) {
                        h = char;
                        return char;
                    }
                    return "";
                },
                "!": function (char) {
                    if (h == 2) {
                        if (char > 3)
                            return "";
                    }
                    return char;
                },
                "&": function (char) {
                    if (char > 5)
                        return "";
                    return char;
                },
                "#": function (char) {
                    return char;
                },
            }
        });

        $("#btnAnalysis").click(function () {
            //if (window.CheckValidate(data)) {

            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + 'Att_GetData/AnalysisOvertimeListValidate',
                data: eventParaData(),
                dataType: 'json',
                async: false,
                success: function (data) {

                    if (data[0] == "error") {
                        ShowNotificationProcessor(data[1]);
                    } else if (data[0] == "errorRegisterHours") {
                        ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Số Giờ ĐK Vượt Mức Số Giờ ĐK Quy Định", "k-block k-info-colored");
                    } else if (data[0] == "errorPregnancy") {
                        ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Nhân Viên Đang Hưởng Chế Độ Thai Sản Không Cho Phép Tăng Ca", "k-block k-info-colored");
                    }
                    else {
                        var grid = $('#gridAtt_OvertimeAnalysis').data("kendoGrid");
                        grid.dataSource.read();
                    }
                    return false;
                }
            });
        });
    });

    $("#btnDelete").click(function () {
        if (selectedIds.length == 0) {
            DeleteFail();
            return;
        }
        var grid = $("#gridAtt_OvertimeAnalysis").data("kendoGrid");
        var currentDataItem = grid.dataItem(grid.select());
        var dataRow = grid.dataSource.getByUid(currentDataItem.uid);
        grid.dataSource.remove(dataRow);
    });

    //[Hien.Nguyen] Save All data
    $("#btnSaveChange").click(function () {
        var dataResut = false;
        debugger;

        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Att_GetData/AnalysisOvertimeListValidate',
            data: eventParaData(),
            dataType: 'json',
            async: false,
            success: function (data) {

                if (data[0] == "error") {
                    ShowNotificationProcessor(data[1]);
                    dataResut = true;
                }
                else if (data[0] == "errorRegisterHours") {
                    ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Số Giờ ĐK Vượt Mức Số Giờ ĐK Quy Định", "k-block k-info-colored");
                    dataResut = true;
                }
                else if (data[0] == "errorPregnancy") {
                    ShowNotification('@Html.Raw(ConstantMessages.Notification.TranslateString())', "Nhân Viên Đang Hưởng Chế Độ Thai Sản Không Cho Phép Tăng Ca", "k-block k-info-colored");
                    dataResut = true;
                }
            }
        });
        if (dataResut) {
            return;
        }

        var grid = $("#gridAtt_OvertimeAnalysis").data("kendoGrid");
        parameterMap = grid.dataSource.transport.parameterMap;
        var data = {};
        var dataTemp = {};

        var currentData = grid.dataSource.data();
        if (currentData.length <= 0) {
            $.ajax({
                url: '@_hrm_Hr_Service' + "Att_GetData/GetConfig_AllowCut",
                type: "POST",
                async: false,
                error: function () {
                    //Handle the server errors using the approach from the previous example
                },
                success: function (result) {

                    if (result == "True") {
                        ShowNotificationProcessor("Chưa Có Dữ Liệu Phân Tích Hợp Lệ!");
                        dataResut = true;
                    } else {
                        dataTemp = paramSave();
                    }
                }
            });
        }
        if (dataResut) {
            return;
        }

        var updatedRecords = [];
        var newRecords = [];

        //get all record

        for (var i = 0; i < currentData.length; i++) {
            updatedRecords.push(currentData[i].toJSON());
        }

        if ($.isEmptyObject(dataTemp)) {
            $.extend(data, parameterMap({ models: updatedRecords, params: [] }));
        }
        else {
            $.extend(data, parameterMap({ models: [], params: dataTemp }));
        }

        //check duplicate
        $.ajax({
            url: '@_hrm_Hr_Service' + "Att_GetData/AnalysisOvertime_Duplicate",
            data: data,
            type: "POST",
            async: false,
            error: function () {
                //Handle the server errors using the approach from the previous example
            },
            success: function (dataResult1) {

                if (dataResult1.ActionStatus == 'Error') {
                    ShowNotificationProcessor("Dữ Liệu Tăng Ca Đã Tồn Tại");
                    return false;
                } else {
                    //Map record
                    $.ajax({
                        url: '@_hrm_Main_Web' + "Att_ComputeOvertime/CreateAnalysis",
                        data: data,
                        type: "POST",
                        error: function () {
                            //Handle the server errors using the approach from the previous example
                        },
                        success: function (dataResult2) {

                            if (dataResult2.ActionStatus == 'Success') {
                                ShowNotificationProcessor("Thêm Mới Thành Công");
                            } else if (dataResult2.ActionStatus == 'Locked') {
                                ShowNotificationProcessor(dataResult2.ActionStatus);
                            } else {
                                ShowNotificationProcessor("Thêm Mới Thất Bại");

                            }


                        }
                    });
                }
            }
        });



    });

    function loadHighSupervisor() {
        debugger;
        var pro = $('#ProfileID').val() != null ? $('#ProfileID').val()[0] : null;
        var _
       
        if (pro != null) {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + 'Hre_GetData/GetHighSupervisor',
                data: { ProfileID: pro },
                datatype: 'JSON',
                success: function (result) {
                    debugger;
                    var multiUserApproveID = $("#UserApproveID_1").data("kendoComboBox");
                    var multiUserApproveID2 = $("#UserApproveID_2").data("kendoComboBox");

                    if (result.SupervisorID != null) {
                        multiUserApproveID.dataSource.add({ UserInfoName: result.SupervisorName, ID: result.SupervisorID });
                        multiUserApproveID.refresh();

                        multiUserApproveID.value(result.SupervisorID);
                    } else {
                        multiUserApproveID.refresh();
                        multiUserApproveID.value(null);
                    }

                    if (result.HighSupervisorID != null) {
                        multiUserApproveID2.dataSource.add({ UserInfoName: result.HighSupervisorName, ID: result.HighSupervisorID });
                        multiUserApproveID2.refresh();

                        multiUserApproveID2.value(result.HighSupervisorID);
                    } else {
                        multiUserApproveID2.refresh();
                        multiUserApproveID2.value(null);
                    }
                }
            });
     
        } else {
            var multiUserApproveID = $("#UserApproveID_1").data("kendoComboBox");
            var multiUserApproveID2 = $("#UserApproveID_2").data("kendoComboBox");
            multiUserApproveID.refresh();
            multiUserApproveID.value(null);
            multiUserApproveID2.refresh();
            multiUserApproveID2.value(null);
        }
    };

    //update lại số giờ đăng ký
    function UpdateRegisterHours() {
        var RegisterHours = $('#SRegisterHours').data("kendoNumericTextBox");
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Att_GetData/UpdateRegisterHours',
            data: { timeStart: $("#Vnr_MaskedTextBox_TimeIn").val(), timeEnd: $("#Vnr_MaskedTextBox_TimeOut").val() },
            dataType: 'json',
            success: function (data) {
                RegisterHours.value(data);
            }
        });
    };
    function ShowPaymentMethod() {
        debugger;
        var pro = $('#ProfileID').val() != null ? $('#ProfileID').val()[0] : null;
        var _dateTime = $('#@Html.FieldIdFor(model => model.WorkDate)').val() != "" ? ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $('#@Html.FieldIdFor(model => model.WorkDate)').val()) : null;
        if(pro!=null)
        {
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + "Att_GetData/GetPaymentMethodByProfileID",
                data: { ProfileID: pro, WorkDate: _dateTime },
                dataType: 'json',
                success: function (data) {
                    debugger;
                    if (data != "") {
                        var _methodPayment = $('#SMethodPayment').data("kendoDropDownList");
                        _methodPayment.value(data);
                    }
                }
            });
        }
    }

</script>

<div>
    @ViewBag.MsgInsert
</div>
<div>
    @Html.HiddenFor(mode => mode.UserLoginID)
    @Html.HiddenFor(mode => mode.UserCreate)
    @Html.HiddenFor(mode => mode.UserRegister)
</div>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <div class="section-header">
                <div class="title">
                    <img src="@ConstantPath.Att_OvertimeIconPath" alt="" width="20" height="20" />
                    @ConstantDisplay.HRM_Attendance_Overtime_Create.TranslateString()
                    @Html.ActionLink("(" + ConstantDisplay.HRM_Attendance_Back_To_Overtime_List.TranslateString() + ")", "/Index")
                </div>
            </div>
            <div class="VnRMain">
                <div class="contendSearchWidge">
                    <div>
                        <div style="float:left; width:450px">
                            <div id="div2">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ProfileID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var mtsProfile = new MultiSelectBuilderInfo()
                                        {
                                            DataTextField = "ProfileName",
                                            DataValueField = "ID",
                                            Url = @_hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                                            Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                            Value = new string[] { @Html.DisplayFor(mode => mode.ProfileID).ToString() },
                                            EventChange = "loadHighSupervisor",
                                            
                                        };

                                        if (Model != null)
                                        {
                                            if (Model.ID != Guid.Empty)
                                            {
                                                mtsProfile.MaxSelectedItems = 1;
                                            }
                                        }
                                    }
                                    @(Html.VnrMultiSelectFor(mode => mode.ProfileID, mtsProfile))
                                </div>
                            </div>
                            <div id="div3">
                                <div class="FieldTitle150">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Attendance_Overtime_StartOT.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _WorkDate = new DatePickerBuilderInfo()
                                        {
                                            Value = @Html.DisplayFor(mode => mode.WorkDate).ToString(),
                                            Placeholder = ConstantDisplay.HRM_Attendance_DateTo.TranslateString(),
                                            StyleCss = "width:110px",
                                            EventSelect="ShowPaymentMethod"
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.WorkDate, _WorkDate)

                                    @*&nbsp;*@

                                    @(Html.TextBoxFor(mode => mode.WorkDateTime, new { id = "Vnr_MaskedTextBox_Time", style = "width:88px" }))
                                </div>
                            </div>
                            <div id="div4">
                                <div class="FieldTitle150">
                                    @Html.Raw(ConstantDisplay.HRM_Attendance_InOut_InTime.TranslateString()) / 
                                    @Html.Raw(ConstantDisplay.HRM_Attendance_InOut_OutTime.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @(Html.TextBoxFor(mode => mode.WorkDateTime, new { id = "Vnr_MaskedTextBox_TimeIn", style = "width:110px" }))
                                    @(Html.TextBoxFor(mode => mode.WorkDateTime, new { id = "Vnr_MaskedTextBox_TimeOut", style = "width:88px" }))
                                </div>
                            </div>
                            <div id="div4">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ShiftID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var dropdownShiftID = new DropDownListBuilderInfo()
                                        {
                                            DataTextField = "ShiftName",
                                            DataValueField = "ID",
                                            Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiShift",
                                            OptionLabel = @ConstantDisplay.HRM_Attendance_SelectShift.TranslateString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrDropDownListFor(mode => mode.ShiftID, dropdownShiftID))
                                </div>
                            </div>

                            <div id="div5">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.RegisterHours)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var numericTextBoxRegisterHours = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            Name = "SRegisterHours",
                                            StyleCss = "width:200px",
                                            Format = ConstantFormat.HRM_Format_Number_Double
                                        };
                                    }
                                    @Html.VnrNumericTextBoxFor(model => model.RegisterHours, numericTextBoxRegisterHours)
                                </div>
                            </div>
                            <div id="div6">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.DurationType)
                                </div>
                                <div class="FieldValue">
                                    <script>
                                        function getText_DurationType(e) {
                                            return {
                                                text: "OvertimeDurationType" + "|" + $("#DurationType").data("kendoDropDownList")._prev
                                            };
                                        }
                                    </script>

                                    @{
                                        var DurationType = new DropDownListBuilderInfo()
                                        {
                                            Url = _hrm_Sys_Service + "Sys_GetData/GetEnum",
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            Data = "getText_DurationType",
                                            OptionLabel = ConstantDisplay.HRM_Category_SelectType.TranslateString(),
                                            StyleCss = "width:200px",
                                        };
                                    }
                                    @Html.VnrDropDownListFor(mode => mode.DurationType, DurationType)

                                    @*@{
                                        var dropdownOvertimeDurationType = new DropDownListBuilderInfo()
                                        {
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = listOTDurationType,
                                            OptionLabel = ConstantDisplay.HRM_Attendance_SelectType.TranslateString(),
                                            StyleCss = "width:170px"
                                        };
                                    }
                                    @(Html.VnrDropDownListFor(mode => mode.DurationType, dropdownOvertimeDurationType))*@
                                </div>
                            </div>
                            <div id="div9">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.OvertimeTypeID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var dropdownOvertimeTypeID = new DropDownListBuilderInfo()
                                        {

                                            Name = "SOvertimeTypeID",
                                            DataTextField = "OvertimeTypeName",
                                            DataValueField = "ID",
                                            Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiOvertimeType",
                                            Value = @Html.DisplayFor(mode => mode.OvertimeTypeID).ToString(),
                                            OptionLabel = @ConstantDisplay.HRM_Attendance_SelectOvertimeType.TranslateString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrDropDownListFor(mode => mode.OvertimeTypeID, dropdownOvertimeTypeID))
                                </div>

                            </div>
                        </div>
                        <div style="display: block; float: left; width: 580px">


                            <div id="div6">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.MethodPayment)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var dropdownMethodPayment = new DropDownListBuilderInfo()
                                        {
                                            Name = "SMethodPayment",
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = listMethodPayment,
                                            OptionLabel = ConstantDisplay.HRM_Attendance_SelectMethodPayment.TranslateString(),
                                          //  Value = EnumDropDown.MethodPayment.E_CASHOUT.ToString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrDropDownListFor(mode => mode.MethodPayment, dropdownMethodPayment))
                                </div>
                            </div>
                            <div id="div9">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.UserApproveID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var multiSelectUserApproveID1 = new ComboBoxBuilderInfo()
                                        {
                                            Name = "UserApproveID_1",
                                            DataTextField = "UserInfoName",
                                            DataValueField = "ID",
                                            //Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUser",
                                            Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_" + ApproveType.E_OVERTIME.ToString(),
                                            Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @Html.VnrComboBoxFor(mode => mode.UserApproveID, multiSelectUserApproveID1)
                                </div>
                            </div>
                            <div id="idUserApproveID3" hidden="hidden">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.UserApproveID3)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _UserApproveID3 = new ComboBoxBuilderInfo()
                                        {
                                            Name = "UserApproveID_UserApproveID3",
                                            DataTextField = "UserInfoName",
                                            DataValueField = "ID",
                                            //Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUser",
                                            Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_" + ApproveType.E_OVERTIME.ToString(),
                                            Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @Html.VnrComboBoxFor(mode => mode.UserApproveID3, _UserApproveID3)
                                </div>
                            </div>
                            <div id="div10">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.UserApproveID2)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var multiSelectUserApproveID2 = new ComboBoxBuilderInfo()
                                        {
                                            Name = "UserApproveID_2",
                                            DataTextField = "UserInfoName",
                                            DataValueField = "ID",
                                            Url = @_hrm_Sys_Service + "Sys_GetData/GetMultiUserApproved_" + ApproveType.E_OVERTIME.ToString(),
                                            Placeholder = ConstantDisplay.HRM_System_SelectUserApprove.TranslateString(),
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @Html.VnrComboBoxFor(mode => mode.UserApproveID2, multiSelectUserApproveID2)
                                </div>
                            </div>
                            <div id="div11">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ReasonOT)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _area = new TextAreaBuilderInfo()
                                        {
                                            Name = "SReasonOT",
                                            CssStyle = "width:300px"
                                        };
                                    }
                                    @Html.VnrTextAreaFor(model => model.ReasonOT, _area)
                                </div>
                            </div>
                            <div id="div12">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Status)
                                </div>
                                <div class="FieldValue">
                                    @{
    var Status = new DropDownListBuilderInfo()
    {
        BindTo = listStatus,
        DataTextField = "Text",
        DataValueField = "Value",
        Value = AttendanceDataStatus.E_SUBMIT.ToString()
    };
}
@Html.VnrDropDownListFor(mode => mode.Status, Status)
                                </div>
                            </div>
                            <div id="div12" style="float:left">
                                <div class="FieldTitle150">
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnAnalysis", Content = ConstantDisplay.HRM_Common_AnalysisAndSaveTemp.TranslateString(), ImageUrl = ConstantPath.IconComputePath })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="commandToolBarWidge">
        <div style="float:left">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSaveChange", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
        <div class="clear"></div>
    </div>
    <div class="section-header">
        <div>
            @{
                Dictionary<object, object[]> foreignKey = new Dictionary<object, object[]>()
        {

               {Att_OvertimeModel.FieldNames.Status,new object[]
               { "Value", "Text", listStatus, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},

               {Att_OvertimeModel.FieldNames.DurationType,new object[]
               { "Value", "Text", listOTDurationType, ConstantDisplay.HRM_Category_OvertimeType_TypeTemp,""}},

               {Att_OvertimeModel.FieldNames.OvertimeTypeID,new object[]
               { "ID", "OvertimeTypeName",   ViewData["Cat_OvertimeType"], ConstantDisplay.HRM_Attendance_Overtime_Status,""}},

               {Att_OvertimeModel.FieldNames.MethodPayment,new object[]
               { "Value", "Text", listMethodPayment, ConstantDisplay.HRM_Attendance_Overtime_MethodPayment,""}},

               {Att_OvertimeModel.FieldNames.UserApproveID,new object[]
               { "ID", "UserInfoName",  ViewData["Sys_User"], ConstantDisplay.HRM_Attendance_Overtime_UserApproveID,""}},
               
               {Att_OvertimeModel.FieldNames.UserApproveID3,new object[]
               { "ID", "UserInfoName",  ViewData["Sys_User"], ConstantDisplay.HRM_Attendance_Overtime_UserApproveID3,""}},
               
               
               {Att_OvertimeModel.FieldNames.UserApproveID2,new object[]
               { "ID", "UserInfoName",  ViewData["Sys_User"], ConstantDisplay.HRM_Attendance_Overtime_UserApproveID2,""}},


        };
                string[] valueFields = new string[]
                        {
                            Att_OvertimeModel.FieldNames.CodeEmp,
                            Att_OvertimeModel.FieldNames.ProfileName,
                            Att_OvertimeModel.FieldNames.WorkDate,
                            Att_OvertimeModel.FieldNames.ShiftName,
                            Att_OvertimeModel.FieldNames.OvertimeTypeID,
                            Att_OvertimeModel.FieldNames.DurationType,
                            Att_OvertimeModel.FieldNames.WorkDateTime,
                            Att_OvertimeModel.FieldNames.RegisterTimeOut,
                            Att_OvertimeModel.FieldNames.RegisterHours,
                            Att_OvertimeModel.FieldNames.Status,
                            Att_OvertimeModel.FieldNames.MethodPayment,
                            Att_OvertimeModel.FieldNames.ReasonOT,
                            Att_OvertimeModel.FieldNames.UserApproveID,
                            Att_OvertimeModel.FieldNames.UserApproveID3,
                            
                            Att_OvertimeModel.FieldNames.UserApproveID2
                        };
                Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                        {
                            {Att_OvertimeModel.FieldNames.ProfileName, 140},
                            {Att_OvertimeModel.FieldNames.CodeEmp, 70},
                            {Att_OvertimeModel.FieldNames.WorkDate, 85},
                            {Att_OvertimeModel.FieldNames.ShiftName, 100},
                            {Att_OvertimeModel.FieldNames.OvertimeTypeID, 100},
                            {Att_OvertimeModel.FieldNames.DurationType, 100},
                            {Att_OvertimeModel.FieldNames.WorkDateTime, 100},
                            {Att_OvertimeModel.FieldNames.RegisterTimeOut, 100},
                            {Att_OvertimeModel.FieldNames.RegisterHours, 80},
                            {Att_OvertimeModel.FieldNames.Status, 90},
                            {Att_OvertimeModel.FieldNames.MethodPayment, 110},
                            {Att_OvertimeModel.FieldNames.ReasonOT, 110},
                            {Att_OvertimeModel.FieldNames.UserApproveID, 115},
                            {Att_OvertimeModel.FieldNames.UserApproveID3, 115},
                            
                            {Att_OvertimeModel.FieldNames.UserApproveID2, 115}
                        };

                Dictionary<string, string> displayFields = new Dictionary<string, string>()
                        {
                            {Att_OvertimeModel.FieldNames.ProfileName, ConstantDisplay.HRM_Attendance_Overtime_ProfileName},
                            {Att_OvertimeModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Attendance_Overtime_ProfileID},
                            {Att_OvertimeModel.FieldNames.WorkDate, ConstantDisplay.HRM_Attendance_Overtime_WorkDate},
                            {Att_OvertimeModel.FieldNames.ShiftName, ConstantDisplay.HRM_Attendance_Overtime_ShiftID},
                            {Att_OvertimeModel.FieldNames.OvertimeTypeID, ConstantDisplay.HRM_Attendance_Overtime_OvertimeTypeID},
                            {Att_OvertimeModel.FieldNames.DurationType, ConstantDisplay.HRM_Category_OvertimeType_TypeTemp},
                            {Att_OvertimeModel.FieldNames.WorkDateTime, ConstantDisplay.HRM_Attendance_HoursFrom},
                            {Att_OvertimeModel.FieldNames.RegisterTimeOut, ConstantDisplay.HRM_Attendance_HoursTo},
                            {Att_OvertimeModel.FieldNames.RegisterHours, ConstantDisplay.HRM_Attendance_Overtime_RegisterHours},
                            {Att_OvertimeModel.FieldNames.Status, ConstantDisplay.HRM_Attendance_Overtime_Status},
                            {Att_OvertimeModel.FieldNames.MethodPayment, ConstantDisplay.HRM_Attendance_Overtime_MethodPayment},
                            {Att_OvertimeModel.FieldNames.ReasonOT, ConstantDisplay.HRM_Attendance_Overtime_ReasonOT},
                            {Att_OvertimeModel.FieldNames.UserApproveID, ConstantDisplay.HRM_Attendance_Overtime_UserApproveID},
                            {Att_OvertimeModel.FieldNames.UserApproveID3, ConstantDisplay.HRM_Attendance_Overtime_UserApproveID3},
                            
                            {Att_OvertimeModel.FieldNames.UserApproveID2, ConstantDisplay.HRM_Attendance_Overtime_UserApproveID2}
                        };
                string[] disableFields = new string[]
                    {
                            Att_OvertimeModel.FieldNames.ProfileID,
                            Att_OvertimeModel.FieldNames.ProfileName,
                            Att_OvertimeModel.FieldNames.CodeEmp,
                            Att_OvertimeModel.FieldNames.ShiftName,
                            Att_OvertimeModel.FieldNames.DurationType,
                            Att_OvertimeModel.FieldNames.WorkDate,
                            Att_OvertimeModel.FieldNames.Status,
                        };
                string[] hidenFields = new string[]
                        {
                            Att_OvertimeModel.FieldNames.UserApproveID3
                        };

                var grid = new GridBuilderInfo
                {
                    Name = "gridAtt_OvertimeAnalysis",
                    ValueFields = valueFields,
                    SizeFields = sizeFields,
                    DisplayFields = displayFields,
                    DisableFields = disableFields,
                    HiddenFields=hidenFields,
                    ReadActionUrl = _hrm_Hr_Service + "Att_GetData/AnalysisOvertimeList",
                    Batch = true,
                    EditMode = GridEditMode.InCell,
                    EvenEdit = "onEdit",
                    ReadData = "eventParaData",
                    CreateActionUrl = _hrm_Main_Web + "Att_ComputeOvertime/Create",
                    EditActionUrl = _hrm_Main_Web + "Att_ComputeOvertime/CreateAnalysis",
                    ShowEditIcon = false,
                    ServerOperation = false,
                    EventDataBound = "changePageGird",
                    Navigatable = true,
                    ForeignKey = foreignKey,
                    //ShowCheckbox = false
                };
            }
            <!--Khởi tạo Grid-->
            @(Html.VnrGrid<Att_OvertimeModel>(grid))
        </div>
        @Html.HiddenFor(mode => mode.ID)
    </div>
</div>
<div>
    @{
        if (Model == null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var x = location.href.split('/');
                    var arrGradePayrollID = x[x.length - 1];
                    var gradePayrollID = arrGradePayrollID.split('#');

                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + 'Hre_GetData/GetProfileNameByProfileID',
                        data: { profileIds: gradePayrollID[0] },
                        dataType: 'json',
                        success: function (data) {
                            debugger;
                            var Profilemultiselect = $("#ProfileID").data("kendoMultiSelect");
                            Profilemultiselect.dataSource.filter({});
                            Profilemultiselect.value(data[0].ID);

                            if (data[0].ID != null) {
                                $.ajax({
                                    type: 'POST',
                                    url: '@_hrm_Hr_Service' + 'Hre_GetData/GetHighSupervisor',
                                    data: { ProfileID: data[0].ID },
                                    datatype: 'JSON',
                                    success: function (result) {
                                        debugger;
                                        var multiUA1 = $("#UserApproveID_1").data("kendoComboBox");
                                        var multiUA2 = $("#UserApproveID_2").data("kendoComboBox");

                                        if (result.SupervisorID != null) {
                                            multiUA1.dataSource.add({ UserInfoName: result.SupervisorName, ID: result.SupervisorID });
                                            multiUA1.refresh();

                                            multiUA1.value(result.SupervisorID);
                                        } else {
                                            multiUA1.refresh();
                                            multiUA1.value(null);
                                        }

                                        if (result.HighSupervisorID != null) {
                                            multiUA2.dataSource.add({ UserInfoName: result.HighSupervisorName, ID: result.HighSupervisorID });
                                            multiUA2.refresh();

                                            multiUA2.value(result.HighSupervisorID);
                                        } else {
                                            multiUA2.refresh();
                                            multiUA2.value(null);
                                        }
                                    }
                                });
                            }
                            }
                        
                    });
                });
            </script>
        }
    }
</div>
<script>
    debugger;
    $(document).ready(function () {
        $.ajax({
        type: 'POST',
        url: '@_hrm_Hr_Service' + 'Att_GetData/GetConfigAproveOverTime',
        data:{},
        dataType: 'json',
        success: function (data) {
            debugger;
            if(data!='' && data>2)
            {
                $("#idUserApproveID3").show();
            }
            else
            {
                $("#idUserApproveID3").hide();
            }
        }
        });
    });
</script>
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.Category.Models
@using HRM.Infrastructure.Utilities

@using HRM.Infrastructure.Utilities

@model CatElementModel
@{
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    //var _hrm_Main_Web = ConstantPathWeb.Hrm_Cat_Web;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    IList<SelectListItem> List_CatElementType = Enum.GetValues(typeof(CatElementType))
        .Cast<CatElementType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();


    IList<SelectListItem> List_CatElementLevel = Enum.GetValues(typeof(DisplayTypeBasicSalary))
    .Cast<DisplayTypeBasicSalary>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();

    IList<SelectListItem> List_CatElementDataType = Enum.GetValues(typeof(HRM.Infrastructure.Utilities.EnumDropDown.ElementDataType))
    .Cast<HRM.Infrastructure.Utilities.EnumDropDown.ElementDataType>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();
    
    IList<SelectListItem> List_MethodPayroll = Enum.GetValues(typeof(MethodPayroll))
    .Cast<MethodPayroll>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();
}

<script type="text/javascript">
    var ListGridName = ['@CatElementType.AdvancePayment.ToString()',
          '@CatElementType.Attendance.ToString()',
          '@CatElementType.Allowances.ToString()',
          '@CatElementType.AllowancesOut.ToString()',
          'Grid_Emun'
    ];


    function changeGradePayroll() {
        for (var i = 0; i < ListGridName.length - 1; i++) {
            ReadGrid(ListGridName[i]);
        }
    };

</script>

@Html.HiddenFor(m => m.ID)
@Html.HiddenFor(m => m.MethodPayroll, MethodPayroll.E_ADNVANCE_PAYMENT.ToString())
<div class="VnRMain">
    <div class="contendSearchWidge">
        <div style="float:left; width:450px">
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.ElementCode)
                </div>
                <div class="FieldValue">
                    @Html.VnrTextBoxFor(mode => mode.ElementCode, "width:200px;")
                </div>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.ElementName)
                </div>
                <div class="FieldValue">
                    @Html.VnrTextBoxFor(mode => mode.ElementName, "width:200px;")
                </div>
                <div style="clear: both;"></div>
            </div>

            <div class="FieldTitle">
                @Html.VnrLabelFor(mode => mode.Description)
            </div>
            <div class="FieldValue">
                @Html.VnrTextAreaFor(mode => mode.Description)
            </div>


            @*<div id="div2">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ElementType)
                    </div>
                    <div class="FieldValue">
                        @{
                            var drop_CatElementType = new DropDownListBuilderInfo
                            {
                                DataTextField = "Text",
                                DataValueField = "Value",
                                BindTo = List_CatElementType,
                                Autobind=true,
                                StyleCss = "width:200px",
                                Value= @Html.DisplayFor(mode => mode.ElementType).ToString()
                            };
                        }
                        @Html.VnrDropDownListFor(m => m.ElementType, drop_CatElementType)
                    </div>
                    <div style="clear: both;"></div>
                </div>*@



        </div>

        <div style="width:500px; display:block; float:left">
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.GradePayrollID)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_CatGradePayroll = new ComboBoxBuilderInfo
                        {
                            DataTextField = "GradeCfgName",
                            DataValueField = "ID",
                            Url = _hrm_Hr_Service + "Cat_GetData/GetMultiGradePayroll",
                            StyleCss = "width:200px",
                            Autobind = true,
                            Placeholder = "Vui lòng chọn...",
                            Value = Model == null ? string.Empty : Model.GradePayrollID.ToString(),
                            EventChange = "changeGradePayroll",
                        };
                    }
                    @Html.VnrComboBoxFor(m => m.GradePayrollID, drop_CatGradePayroll).Text(Model == null ? string.Empty : Model.GradeCfgName)
                                    </div>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.Type)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_CatElementDataType = new DropDownListBuilderInfo
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = List_CatElementDataType,
                            Autobind = true,
                            StyleCss = "width:200px",
                            Value = @Html.DisplayFor(mode => mode.Type).ToString()
                        };
                    }
                    @Html.VnrDropDownListFor(m => m.Type, drop_CatElementDataType)
                </div>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.ElementLevel)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_CatElementLevel = new DropDownListBuilderInfo
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = List_CatElementLevel,
                            Autobind = true,
                            StyleCss = "width:200px",
                            Value = @Html.DisplayFor(mode => mode.ElementLevel).ToString()
                        };
                    }
                    @Html.VnrDropDownListFor(m => m.ElementLevel, drop_CatElementLevel)
                </div>
                <div style="clear: both;"></div>
            </div>
            @*<div id="div2">
                <div class="FieldTitle">
                    @Html.VnrLabelFor(mode => mode.MethodPayroll)
                </div>
                <div class="FieldValue">
                    @{
                        var drop_MethodPayroll = new DropDownListBuilderInfo
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = List_MethodPayroll,
                            Autobind = true,
                            StyleCss = "width:200px",
                            Value = @Html.DisplayFor(mode => mode.MethodPayroll).ToString()
                        };
                    }
                    @Html.VnrDropDownListFor(m => m.MethodPayroll, drop_MethodPayroll)
                </div>
                <div style="clear: both;"></div>
            </div>*@
            <div id="div2">
                <label>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Invisible)
                    </div>
                    <div class="FieldValue">
                        @*@{
                                CheckBoxBuilderInfo checkbox = new CheckBoxBuilderInfo()
                                {
                                    Value = (Model == null ? true : Model.Invisible == null ? false : (bool)Model.Invisible),
                                };
                            }*@
                        @Html.VnrCheckBoxFor(mode => mode.Invisible)
                    </div>
                </label>
                <div style="clear: both;"></div>
            </div>
            <div id="div2">
                <label>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.IsBold)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrCheckBoxFor(mode => mode.IsBold)
                    </div>
                </label>
                <div style="clear: both;"></div>
            </div>


            <div id="div2">

                <div style="clear: both;"></div>
            </div>
        </div>


    </div>
</div>

<div class="VnRMain">
    <table class="table">
        <tr>
            <td style="width:350px;">
                <div id="TabsTrip_CatElement" style="max-height:300px;">
                    <ul style="margin: 0 0 3px 0;">
                        <li class="k-state-active">@EnumDropDown.GetEnumDescription(CatElementType.AdvancePayment)</li>
                        @*<li>@EnumDropDown.GetEnumDescription(CatElementType.Payroll)</li>*@
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.Attendance)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.Allowances)</li>
                        <li>@EnumDropDown.GetEnumDescription(CatElementType.AllowancesOut)</li>
                        <li>Phần Tử Enum</li>@*Chưa Dịch!*@
                    </ul>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.AdvancePayment.ToString())
                    </div>
                    @*<div>
                        @Html.Partial("GridCatElement", CatElementType.Payroll.ToString())
                    </div>*@
                   
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.Attendance.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.Allowances.ToString())
                    </div>
                    <div>
                        @Html.Partial("GridCatElement", CatElementType.AllowancesOut.ToString())
                    </div>
                    <div>
                        @{
                            //Thông tin hiển column hiển thị
                            var valueFields = new string[]
        {
            CatElementModel.FieldNames.ElementCode,
            CatElementModel.FieldNames.ElementName,
            CatElementModel.FieldNames.Formula,
            //CatElementModel.FieldNames.Description,
            //CatElementModel.FieldNames.Cat_ElementType,
        };

                            //Set độ rộng cho từng column
                            var sizeFields = new Dictionary<string, int>()
        {
            {CatElementModel.FieldNames.ElementName, 200},
             {CatElementModel.FieldNames.Description, 300},
        };

                            //Thông tin hiển thị được dịch
                            var displayFields = new Dictionary<string, string>()
        {
            {CatElementModel.FieldNames.ElementName , ConstantDisplay.HRM_Category_Element_ElementName },
        };
                            var hiddenFields = new string[]
        {
            //CatElementModel.FieldNames.ElementCode,
           // CatElementModel.FieldNames.ElementName,
            CatElementModel.FieldNames.Formula,
            //CatElementModel.FieldNames.Cat_ElementType,
        };

                            var grid = new GridBuilderInfo
                           {
                               Name = "Grid_Emun",
                               ValueFields = valueFields,
                               SizeFields = sizeFields,
                               HiddenFields = hiddenFields,
                               DisplayFields = displayFields,
                               ShowCheckbox = false,
                               ShowEditIcon = false,
                               GridHeight = 300,
                               AutoBind = true,
                               ReadActionUrl = _hrm_Hr_Service + "Cat_GetData/GetElementInEnum",
                           };
                        }
                        <!--Khởi tạo Grid-->
                        @(Html.VnrGrid<CatElementModel>(grid))
                    </div>
                </div>
            </td>
            <td style="width:30px;">
                <div style="height:30px;"></div>
                <div>
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnNext", Content = "", ImageUrl = ConstantPath.IconNext })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnPrev", Content = "", ImageUrl = ConstantPath.IconPrev })
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnClear", Content = "", ImageUrl = ConstantPath.IconClear })
                </div>
            </td>

            <td style="width:700px;">
                <div style="margin-bottom:5px;">
                    <div>
                        @{
                            var ElementSearch = new MultiSelectBuilderInfo()
                            {
                                Name = "CatElementSearch",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCatElement",
                                Autobind = false,
                                MaxSelectedItems = 1,
                                DataTextField = "ElementName",
                                DataValueField = "ElementCode",
                                ServerFiltering = true,
                                Width = 200,
                            };
                        }
                        @Html.VnrMultiSelect(ElementSearch)
                    </div>
                    <div>
                        @*@Html.VnrTextBox("CatElementSearch","width:200px")*@
                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "SelectFormula", Content = "Chọn", ImageUrl = ConstantPath.IconAddNewPath }) @*Chưa Dịch!*@
                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "CheckFormula", Content = "Kiểm Tra Công Thức", ImageUrl = ConstantPath.IconCheckError })
                    </div>
                </div>
                <div>
                    @*@Html.HiddenFor(m => m.Formula)
                        <div id="FormulaValue" class="k-textbox" style="width: 420px; height: 340px;" contenteditable="true">
                            @if (Model != null)
                            {
                                @Model.Formula
                            }
                        </div>*@

                    @Html.VnrTextAreaFor(m => m.Formula, "width: 420px; height: 340px;")

                </div>

                @*<div>@Html.TextArea("displayFormula", new { style = "width:420px;", @class = "k-textbox", @readonly = "readonly" })</div>*@

            </td>
        </tr>
    </table>
</div>

<div>
    @{
        if (Model == null)
        {
            var aa = 0;
            //if(Model.ID != Guid.Empty){
            <script>
                $(document).ready(function () {
                    
                    var x = location.href.split('/');
                    var arrGradePayrollID = x[x.length - 1];
                    var gradePayrollID = arrGradePayrollID.split('#');
                    var ddlGradePayroll = $("#GradePayrollID").data("kendoComboBox");
                    var payrollID = gradePayrollID[0].split('?');

                    if (gradePayrollID[0] != "") {
                        ddlGradePayroll.value(gradePayrollID[0]);
                        //setTimeout(function () {
                        //    changeGradePayroll();
                        //}, 500);
                    }
                });
            </script>
            //}

        }
    }
</div>

<script type="text/javascript">
    //Init Tabstrip
    $("#TabsTrip_CatElement").kendoTabStrip({
        animation: { open: { effects: "fadeIn" } },
        @*contentUrls: [
                     '@_hrm_Main_Web' + 'Cat_Element/GridCatElement',
                        '@_hrm_Main_Web' + 'Cat_Element/GridCatElement?type=' + '@CatElementType.Attendance.ToString()',
                       '@_hrm_Main_Web' + 'Cat_Element/GridCatElement?type=' + '@CatElementType.Allowances.ToString()',
                       '@_hrm_Main_Web' + 'Cat_Element/GridCatElement?type=' + '@CatElementType.AllowancesOut.ToString()',
        ]*@
    }).data('kendoTabStrip');


    $(document).ready(function () {

        CloseHre_ProgressBar();
        

        //set value for Formula
        function AddItemFormula(value) {
            var Formula = $("#Formula").val();
            if (value != "") {
                $("#Formula").val(Formula + '[' + value + ']');
            }
        };

        //Chọn phầm tử vào formula
        $("#btnNext").click(function () {
            
            var index = $("#TabsTrip_CatElement").data("kendoTabStrip").select().index();

            var grid = $("#" + ListGridName[index]).data("kendoGrid");

            var selectedItem = grid.dataItem(grid.select());

            if (selectedItem == null) {
                ShowNotificationProcessor("Vui lòng chọn phần tử !");//Chưa Dịch!
                return;
            }
            AddItemFormula(selectedItem.ElementCode);

        });

        //claer all formula
        $("#btnClear").click(function () {
            $("#Formula").val("");
        });

        //Xóa 1 phần tử trong formula
        $("#btnPrev").click(function () {
            
            var formula = $('#Formula').val();
            var value = $('#Formula').val();
            var IsItem = false;//Kiểm tra xem phần tử cuối cùng là phần tử lương hay là số
            for (var i = formula.length - 1; i >= 0; i--) {
                
                if (i == formula.length - 1 && formula[i] == "]") {
                    IsItem = true;
                }
                if (IsItem == true && formula[i] == "[") {
                    value = value.substring(0, value.length - 1);
                    break;
                }
                if (IsItem == false && formula[i] == "]") {
                    break;
                }
                if (value == "") {
                    ShowNotificationProcessor("Hế phần tử !");//Chưa Dịch!
                    break;
                }
                value = value.substring(0, value.length - 1);
            }
            $("#Formula").val(value);

        });

        //select value for multiple select
        $("#SelectFormula").click(function () {

            var multi = $("#CatElementSearch").data("kendoMultiSelect");

            AddItemFormula(multi.value().join(","));

            multi.value("");
            multi.input.blur();
        });

        //Check Is Formula
        $("#CheckFormula").click(function () {
            CheckFormula();
        });


        function InsertFormula(gridName) {
            var grid = $("#" + gridName).data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            

            AddItemFormula(selectedItem.ElementCode);
        };

        function DisplayFormula(gridName) {
            var grid = $("#" + gridName).data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            
            $("#displayFormula").val(selectedItem.Formula);
        };


        //Xử lý sự kiện dblclick cho các grid
        $("#" + '@CatElementType.AdvancePayment.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.AdvancePayment.ToString()');
        });
        $("#" + '@CatElementType.Allowances.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.Allowances.ToString()');
        });
        $("#" + '@CatElementType.Attendance.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.Attendance.ToString()');
        });
        $("#" + '@CatElementType.AllowancesOut.ToString()').on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('@CatElementType.AllowancesOut.ToString()');
        });
        $("#Grid_Emun").on("dblclick", "tr.k-state-selected", function () {
            InsertFormula('Grid_Emun');
        });

        //Xử lý hiển thị formula lên text box
        $("#" + '@CatElementType.AdvancePayment.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.AdvancePayment.ToString()');
        });
        $("#" + '@CatElementType.Allowances.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.Allowances.ToString()');
        });
        $("#" + '@CatElementType.Attendance.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.Attendance.ToString()');
        });
        $("#" + '@CatElementType.AllowancesOut.ToString()').on("click", "tr.k-state-selected", function () {
            DisplayFormula('@CatElementType.AllowancesOut.ToString()');
        });
        $("#Grid_Emun").on("click", "tr.k-state-selected", function () {
            DisplayFormula('Grid_Emun');
        });
    });



</script>
@using System.Collections
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models
@model CatImportItemModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Category_ImportItem.TranslateString();
    Layout = null;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
}
<script>
    SetCharacteFieldRequired();

    function onSave() {
        fnSaveData();
        return false;
    }

    function onSaveClose() {
        fnSaveData();
        var window = $("#windowCatImportInImportItem").data("kendoWindow");
        window.refresh();
        window.close();
        return false;
    }

    function dataParameter() {
        
        var _AllowNull = document.getElementById("AllowNull");
        if (_AllowNull.checked) {
            _AllowNull = true;
        } else {
            _AllowNull = false;
        }

        var _AllowDuplicate = document.getElementById("AllowDuplicate");
        if (_AllowDuplicate.checked) {
            _AllowDuplicate = true;
        } else {
            _AllowDuplicate = false;
        }

        var _IsDefaultValue = document.getElementById("IsDefaultValue");
        if (_IsDefaultValue.checked) {
            _IsDefaultValue = true;
        } else {
            _IsDefaultValue = false;
        }

        var param = {

            Code: $("#Code").val(),
            ChildFieldLevel1: $("#ChildFieldLevel1").val(),
            ChildFieldLevel2: $("#ChildFieldLevel2").val(),
            DuplicateGroup: $("#DuplicateGroup").val(),
            AllowDuplicate: _AllowDuplicate,
            IsDefaultValue: _IsDefaultValue,
            ExcelField: $("#ExcelField123").val(),
            DefaultValue: $("#DefaultValue").val(),
            AllowNull: _AllowNull,
            ImportID: $("#ID").val()
        };
        return param;
    }

    $(document).ready(function () {
        var objectName = $("#pr_objectName").val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Cat_GetData/GetMultiChildField',
            data: {objectNameRoot :objectName, objectName: objectName },
            type: 'Get',
            success: function (data) {
                $("#ChildFieldLevel1").kendoComboBox({
                    dataTextField: "Name",
                    dataValueField: "Name",
                    change: childField1_Changing,
                    dataSource: data
                });

                var dataChildFieldLevel2 = [];
                $("#ChildFieldLevel2").kendoComboBox({
                    dataTextField: "Name",
                    dataValueField: "Name",
                    dataSource: dataChildFieldLevel2
                });
            }
        });
    });

    function childField1_Changing() {
        var objectName = $("#pr_objectName").val();
        var child1 = $("#ChildFieldLevel1").val();
        $.ajax({
            url: '@_hrm_Hre_Service' + 'Cat_GetData/GetMultiChildField',
            data: {objectNameRoot :objectName, objectName: child1 },
            type: 'Get',
            success: function (data) {
                $("#ChildFieldLevel2").kendoComboBox({
                    dataTextField: "Name",
                    dataValueField: "Name",
                    dataSource: data
                });
            }
        });
    }

    function fnSaveData() {
        
        $.ajax({
            url: '@_hrm_Hre_Service' + 'api/CatImportItem/',
            data: dataParameter(),
            type: 'Post',
            success: function (data) {
                var window = $("#windowCatImportInImportItem").data("kendoWindow");
                window.refresh();
                var grid = $("#grid_Cat_ImportItem").data("kendoGrid");
                grid.dataSource.read();
            }
        });
    }


    $("input[name=IsDefaultValue]").on('change', function () {

        var radioItem = $("input[name=IsDefaultValue]");
        for (var i = 0; i < radioItem.length; i++) {
            debugger;
            if (radioItem[i].checked) {
                $("#div_DefaultValue").show();
                radioItem[i].value = true;

            }
            else {
                $("#div_DefaultValue").hide();
                radioItem[i].value = false;
            }
        }
    });
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_ImportItem" }))
{
       @Html.HiddenFor(model => model.ID)
     <table>
        <tr>
            <td>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ChildFieldLevel1)
                    </div>
                    <div class="FieldValue">
                        <input id="ChildFieldLevel1" style="width: 300px;" />
                    </div>
                </div>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ChildFieldLevel2)
                    </div>
                    <div class="FieldValue">
                        <input id="ChildFieldLevel2" style="width: 300px;" />
                    </div>
                </div>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.DuplicateGroup)
                    </div>
                    <div class="FieldValue">
                        @{
    var displayIndex = new NumericTextBoxBuilderInfo<Int64>() { StyleCss = "width:150px", Min = 1 };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.DuplicateGroup, displayIndex)
                    </div>
                </div>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.AllowDuplicate)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _AllowDuplicate = new CheckBoxBuilderInfo()
                            {
                            };
                        }
                        @Html.VnrCheckBoxFor(model => model.AllowDuplicate, _AllowDuplicate)
                    </div>
                </div>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.AllowNull)
                    </div>
                    <div class="FieldValue">
                        @{
                                var _AllowNull = new CheckBoxBuilderInfo()
                                {
                                };
                        }
                        @Html.VnrCheckBoxFor(model => model.AllowNull, _AllowNull)
                    </div>
                </div>
                <div id="div4">
                    <div class="FieldTitle150">
                        @Html.Label("ExcelField123", ConstantDisplay.HRM_Category_Cat_ImportItem_ExcelField.TranslateString())
                    </div>
                    <div class="FieldValue">
                        @Html.TextBox("ExcelField123", null, new { @maxLength = "2", @class = "k-textbox"})
                    </div>
                    
                </div>
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.IsDefaultValue)
                    </div>
                    <div class="FieldValue">
                        @{
    var _IsDefaultValue = new CheckBoxBuilderInfo()
    {
    };
                        }
                        @Html.VnrCheckBoxFor(model => model.IsDefaultValue, _IsDefaultValue)
                    </div>
                </div>
                <div id="div_DefaultValue">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.DefaultValue)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextBoxFor(model => model.DefaultValue)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catImportItem", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catImportItem", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
 </table>
}

<script>
    $(document).ready(function () {
        var _IsDefaultValue = document.getElementById("IsDefaultValue");
        if (_IsDefaultValue.checked)
        {
            $("#div_DefaultValue").show();
        }
        else
        {
            $("#div_DefaultValue").hide();
        }
    });
</script>
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Utilities

@model CatImportModel
@{
    ViewBag.Title = "InsertCatImport";
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
}

@{
    string objectName = Model == null ? string.Empty : Model.ObjectName;
    var window = new WindowBuilderInfo
    {
        Name = "windowCatImportInImportItem",
        Visible = false,
        Width = 700,
        Title = @ConstantDisplay.HRM_Category_ImportItem.TranslateString(),
        LoadContentFrom = _hrm_Main_Web + "Cat_Import/ImportItemInfo?objectName=" + objectName,
    };
}
@(Html.VnrWindow(window))
@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = "Thông Báo Lỗi",
        Content = "<br><br><center><b>Vui Lòng Lưu nhập Dữ Liệu Trước Khi Tạo Mới Dữ Liệu Nhập Chi Tiết!!!</b></center>"
    };
}
@(Html.VnrWindow(windowError))

<script type="text/javascript">
    SetFieldRequired();
    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo() {
        return {
            ImportID: $('#@Html.FieldIdFor(model => model.ID)').val()
        };
    }

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            var grid = $('#grid_Cat_ImportItem').data("kendoGrid");
            grid.dataSource.read();
        });
    });

    $("#btnCreateItem").click(function () {
        
        debugger;
        var x = $('#@Html.FieldIdFor(model => model.ID)').val();
     
       
        var objectName = $("#ObjectName").val();
        if (objectName != undefined) {
            $("#pr_objectName").val(objectName);
        }
        
        if (x == '') {
            PopUpCreate("windowError");
        }
        else {
            PopUpCreate("windowCatImportInImportItem");
        }
    });

    function onEditExportItemInExport(e) {
        
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@_hrm_Main_Web' + "Cat_Import/ImportItemInfo/";
        PopUpEdit("windowCatImportInImportItem", url, dataItem.ID);
    }

    

    function select(e) {
        
       
        // var dataItem = this.dataSource.view()[e.item.index()];
        var dataItem = this.dataSource.view()[e.sender.selectedIndex];
        var rs = dataItem.Name;
        var objectID = dataItem.uid;
        $('#pr_objectName').val(rs);
    };


    function onSaveImport(e) {
        //If current value is null (replace EmployeeId with your property name)
        if (e.model.ChildFieldLevel1!="") {
            //change the model value
            e.model.ChildFieldLevel1 = null;
            //get the currently selected value from the DDL
            var currentlySelectedValue = $(e.container.find('[data-role=dropdownlist]')[0]).data().kendoDropDownList.value();
            //set the value to the model
            e.model.set('ChildFieldLevel1', currentlySelectedValue);
        }
        if (e.model.ChildFieldLevel2!="") {
            //change the model value
            e.model.ChildFieldLevel2 = null;
            //get the currently selected value from the DDL
            var currentlySelectedValue = $(e.container.find('[data-role=dropdownlist]')[1]).data().kendoDropDownList.value();
            //set the value to the model
            e.model.set('ChildFieldLevel2', currentlySelectedValue);
        }
    }


    $(document).ready(function () {
        $("#FollowData").click(function () {
            
            var _isFollowData = document.getElementById("FollowData");
            var _isStartColumnIndex = document.getElementById("isStartColumnIndex");
            if (_isFollowData.checked) {
                _isStartColumnIndex.hidden = true;
            } else {
                _isStartColumnIndex.hidden = false;
            }
            
        });
    });
  
</script>

<div class="VnRMain">
    <table style="width:100%">
        @Html.HiddenFor(mode => mode.ID)
        @Html.Hidden("pr_objectName", Model == null ? string.Empty : Model.ObjectName)
        @Html.Hidden("ImportIdCreate", Model == null ? Guid.Empty : Model.ID)
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div>
                        <div style="overflow:hidden">
                            <div style="float:left; width:530px">
                               
                                <div id="div2">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.ImportCode)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.ImportCode, "width:150px")
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div3">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.ImportName)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrTextBoxFor(model => model.ImportName, "width:250px"))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div4">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.ObjectName)
                                    </div>
                                    <div class="FieldValue">
                                    
                                        @*@(Html.VnrTextBoxFor(model => model.ObjectName))*@
                                        @{
                                            var _objectName = new ComboBoxBuilderInfo()
                                            {
                                                Name="objectName",
                                                DataTextField = "Name",
                                                DataValueField = "Name",
                                                Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiObjectName",
                                                Placeholder = ConstantDisplay.HRM_Category_Cat_Import_ObjectName.TranslateString(),
                                                StyleCss = "Width:250px",
                                                Value = Model == null ? string.Empty : Model.ObjectName,
                                                EventChange = "select",
                                            };
                                        }
                                        @(Html.VnrComboBoxFor(mode => mode.ObjectName, _objectName))
                                     
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                      
                                <div id="div6">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.SheetIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var nbrSheet = new NumericTextBoxBuilderInfo<Int64>() {
                                                Format = "n0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.SheetIndex, nbrSheet))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div7">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.StartRowIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var nbrStartRowIndex = new NumericTextBoxBuilderInfo<Int64>() {
                                            Format = "n0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.StartRowIndex, nbrStartRowIndex))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                               
                                <div id="isStartColumnIndex">
                                    <div id="div8">
                                        <div class="FieldTitle170">
                                            @Html.VnrLabelFor(mode => mode.StartColumnIndex)
                                        </div>
                                        <div class="FieldValue">
                                            @{
                                                var nbrStartColumnIndex = new NumericTextBoxBuilderInfo<Int64>()
                                                {
                                                    Format = "n0",
                                                };
                                            }
                                            @(Html.VnrNumericTextBoxFor(model => model.StartColumnIndex, nbrStartColumnIndex))
                                        </div>
                                        <div style="clear: both;"></div>
                                    </div>
                                </div>
                                
                            </div>
                            <div style="width:550px; display:block; float:left">
                                <div id="div9">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.TemplateFile)
                                    </div>
                                    <div class="FieldValue">
                                        <script>
                                            function onSuccess(e) {
                                                var responseTxt = jQuery.parseJSON(e.XMLHttpRequest.responseText);
                                                var status = responseTxt.Status;
                                                var srcValue = responseTxt.FileUrl;
                                                if (status == true) {
                                                    //value null
                                                    $("#TemplateFile").val('');
                                                    //set value
                                                    $("#TemplateFile").val(responseTxt.FileName);
                                                } else {
                                                    $("#TemplateFile").val('');
                                                }
                                            }
                                        </script>
                                        @Html.HiddenFor(model => model.TemplateFile)
                                        <input type="file" name="files" id="UploadTemplateFile1" />
                                        <script>
                                            var vnrUpload = VnrUploadBuilder;
                                            vnrUpload.Id = "UploadTemplateFile1";
                                            vnrUpload.Host = '@_hrm_Main_Web';
                                            vnrUpload.Files = '@Html.DisplayFor(model => model.TemplateFile)';
                                            vnrUpload.Field = "TemplateFile";
                                            vnrUpload.AutoUpload = true;
                                            vnrUpload.Multiple = true;
                                            vnrUpload.AutoReNameFile = true;
                                            VnrUpload(vnrUpload);
                                        </script>
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div10">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.IsProtected)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrCheckBoxFor(model => model.IsProtected))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelForNoneIcon(model => model.FollowData)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var isFollowData = new CheckBoxBuilderInfo()
                                            {

                                            };
                                        }
                                        @Html.VnrCheckBoxFor(model => model.FollowData, isFollowData)
                                    </div>
                                </div>

                                <div id="div11">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.Description)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrTextAreaFor(model => model.Description))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="commandToolBarWidge">
                            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateItem", Content = ConstantAction.HRM_Common_Create.TranslateString() , ImageUrl = ConstantPath.IconAddNewPath})
                        </div>
                        <div>
                            <!--Khai báo các thông tin cho Grid-->
                            @using HRM.Presentation.Category.Models
                            @using HRM.Presentation.UI.Controls.Kendo
                            @{
                                
                                Dictionary<object, object[]> foreignKey = new Dictionary<object, object[]>()
                                {
                                      {CatImportItemModel.FieldNames.ChildFieldLevel1 ,new object[]
                                            { "Name", "Name",  new List<CatImportItemModel>(), ConstantDisplay.HRM_Category_Cat_ImportItem_ChildFieldLevel1,"ChildFieldLevel1"}},
                                             {CatImportItemModel.FieldNames.ChildFieldLevel2 ,new object[]
                                            { "Name", "Name",  new List<CatImportItemModel>(), ConstantDisplay.HRM_Category_Cat_ImportItem_ChildFieldLevel2,"ChildFieldLevel2"}},
                                    // {"ChildFieldLevel1",new object[] { "Name", "Name",ViewData["Cat_OvertimeType"], ConstantDisplay.HRM_Category_Cat_ImportItem_ChildFieldLevel1,"ChildFieldLevel1"}},
                                     // {"ChildFieldLevel2",new object[] { "ID", "Name",null, ConstantDisplay.HRM_Category_Cat_ImportItem_ChildFieldLevel2,"ChildFieldLevel2"}},
                                   //   {"udLeaveTypeCode",new object[] { "Code", "Code",  ViewData["Cat_LeaveDayType"], ConstantDisplay.HRM_Attendance_udLeaveTypeCode,""}},
                              //      {"OvertimeTypeID",new object[] { "ID", "OvertimeTypeName",  ViewData["Cat_OvertimeType"], ConstantDisplay.HRM_Attendance_Overtime_OvertimeTypeID,""}},
                                };
                                //Thông tin hiển column hiển thị
                                string[] valueFields = new string[]
                                {
                                    CatImportItemModel.FieldNames.ChildFieldLevel1,
                                    CatImportItemModel.FieldNames.ChildFieldLevel2,
                                    CatImportItemModel.FieldNames.ExcelField,
                                    CatImportItemModel.FieldNames.DuplicateGroup,
                                    CatImportItemModel.FieldNames.AllowNull, 
                                    CatImportItemModel.FieldNames.AllowDuplicate,
                                    CatImportItemModel.FieldNames.IsDefaultValue,
                                    CatImportItemModel.FieldNames.DefaultValue,
                                };

                                //Set độ rộng cho từng column
                                Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                                {
                                    {CatImportItemModel.FieldNames.ChildFieldLevel1, 200},
                                    {CatImportItemModel.FieldNames.ChildFieldLevel2, 200},
                                    {CatImportItemModel.FieldNames.ExcelField , 100},
                                    {CatImportItemModel.FieldNames.DuplicateGroup, 100},
                                    {CatImportItemModel.FieldNames.AllowNull, 100},
                                    {CatImportItemModel.FieldNames.AllowDuplicate, 120},
                                    {CatImportItemModel.FieldNames.IsDefaultValue, 120},
                                    {CatImportItemModel.FieldNames.DefaultValue, 120},

                                };

                                //Thông tin hiển thị được dịch
                                Dictionary<string, string> displayFields = new Dictionary<string, string>()
                                {
                                    {CatImportItemModel.FieldNames.ChildFieldLevel1, ConstantDisplay.HRM_Category_Cat_ImportItem_ChildFieldLevel1},
                                    {CatImportItemModel.FieldNames.ChildFieldLevel2 , ConstantDisplay.HRM_Category_Cat_ImportItem_ChildFieldLevel2 },
                                    {CatImportItemModel.FieldNames.ExcelField, ConstantDisplay.HRM_Category_Cat_ImportItem_ExcelField },
                                    {CatImportItemModel.FieldNames.DuplicateGroup, ConstantDisplay.HRM_Category_Cat_ImportItem_DuplicateGroup },
                                    {CatImportItemModel.FieldNames.AllowNull, ConstantDisplay.HRM_Category_Cat_ImportItem_AllowNull },
                                    {CatImportItemModel.FieldNames.AllowDuplicate, ConstantDisplay.HRM_Category_Cat_ImportItem_AllowDuplicate },
                                    {CatImportItemModel.FieldNames.IsDefaultValue, ConstantDisplay.HRM_Category_Cat_ImportItem_IsDefaultValue},
                                    {CatImportItemModel.FieldNames.DefaultValue, ConstantDisplay.HRM_Category_Cat_ImportItem_DefaultValue}
                                };
                                Dictionary<string, string> formatFields = new Dictionary<string, string>()
                                {
                                
                                    {CatImportItemModel.FieldNames.DuplicateGroup, ConstantFormat.HRM_Format_Number_Double },

                                };

                                var grid = new GridBuilderInfo
                                {
                                    Name = "grid_Cat_ImportItem",
                                    ValueFields = valueFields,
                                    DisplayFields = displayFields,
                                    SizeFields = sizeFields,
                                    FormatFields=formatFields,
                                    ShowCommand = true,
                                    ShowDeleteButton = true,
                                    ShowEditButton = true,
                                    ShowEditIcon =false,
                                    EditActionUrl = _hrm_Main_Web + "/Cat_ImportItem/Create/",
                                    DeleteActionUrl = _hrm_Main_Web + "/Cat_ImportItem/Delete/",
                                    AutoBind = true,
                                    EditMode = GridEditMode.InLine,
                                    ReadActionUrl = _hrm_Hre_Service + "Cat_GetData/GetImportItemByImportIDList",
                                    ReadData = "filterFieldInfo",
                                    ForeignKey = foreignKey,
                                    
                                  //  ShowSaveButton = true,
                                   // Batch = true,
                                };
                            }
                            <!--Khởi tạo Grid-->
                            @(Html.VnrGrid<CatImportItemModel>(grid).Events(e => e.Save("onSaveImport"))
                                  .HtmlAttributes(new { style = "height:400px" })
                                  .DataSource(dataSource => dataSource
                                      .Ajax()
                                      .Model(model => model.Field(o => o.ImportName).Editable(false))
                                  )
                            )
                        </div>

                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>
        </tbody>
    </table>
    @Html.HiddenFor(model => model.ID)
</div>


<script type="text/javascript">

    function filterChildFieldLevel1() {
        var objectNameValue = $("#pr_objectName").val();
        
        return {
            text: '',
            objectName: objectNameValue,
            objectNameRoot: objectNameValue
            
            //objectName:"abcde"
        };
    };
    function filterChildFieldLevel2() {
        var objectNameValue = $("#pr_objectName").val();
        
        return {
            text: '',
            objectName: $("#ChildFieldLevel1").data("kendoDropDownList").value(),
            objectNameRoot: objectNameValue
            //objectName:"abcde"
        };
    };


</script>


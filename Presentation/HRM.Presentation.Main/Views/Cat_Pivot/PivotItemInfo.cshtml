@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models
@using System.Collections
@model Cat_PivotItemModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Category_ExportItem.TranslateString();
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    Guid? ExportID = Guid.Empty;
}

<script>
    var data = SetCharacteFieldRequired();
    $(document).ready(function () {
        $("#PivotID").val($("#ID").val());
    });

    //function dataParam() {
        
    //    var param = {
    //        DataField: $("#DataField").val(),
    //        ExcelField: $("#ExcelField").val(),
    //        FormatString: $("#FormatString").val(),
    //        Description: $("#Description").val(),
    //        GroupOrder: $("#GroupOrder").val(),
    //        SubTotal: _SubTotal,
    //        IsFixedCell: _IsFixedCell,
    //        ExportID: $("#ExportID").val()
    //    };
    //    return param;
    //}
    //function reload() {
        
    //    $.ajax({
    //        data: dataParam(),
    //        type: 'Post',
    //        success: function (data) {
                
    //            var window = $("#windowPivotInExportItem").data("kendoWindow");
    //            window.refresh();
    //            var grid = $("#grid_Cat_PivotItem").data("kendoGrid");
    //            grid.dataSource.read();
    //        }
    //    });
    //}

    function onSave() {
   
        onSaveAndContinue($('#form_Cat_PivotItem'), '@_hrm_Hr_Service', 'api/Cat_PivotItem/', 'grid_Cat_PivotItem', 'windowPivotInExportItem');
        return false;
    }

    function onSaveClose() {
        
    
        onSaveAndClose($('#form_Cat_PivotItem'), '@_hrm_Hr_Service', 'api/Cat_PivotItem/', 'grid_Cat_PivotItem', 'windowPivotInExportItem');
        return false;
    }

    function onSaveDataPopUp() {
  
        onlySave($('#form_Cat_PivotItem'), '@_hrm_Hr_Service', 'api/CatExportItem/', 'grid_Cat_ExportItem');
        return false;
    }

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_PivotItem" }))
{ 
    @*@Html.HiddenFor(model => model.ID)*@
    <div id="div4">
        <div class="FieldTitle150">
            @Html.HiddenFor(mode => mode.PivotID)
            <script>
                $("#PivotID").val($("#PivotIdForItem").val())
            </script>
            @Html.VnrLabelFor(mode => mode.Code)
        </div>
        <div class="FieldValue">
            @(Html.VnrTextBoxFor(model => model.Code))
        </div>
        <div style="clear: both;"></div>
    </div>
    
    
     <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.PivotSheetIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var nbrSheet = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_PivotSheetIndex",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.PivotSheetIndex, nbrSheet))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                             <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.PivotHeaderRowIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                        var PivotHeaderRowIndex = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_PivotHeaderRowIndex",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.PivotHeaderRowIndex, PivotHeaderRowIndex))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
     <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.PivotColumnStart)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var PivotColumnStart = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_PivotColumnStart",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.PivotColumnStart, PivotColumnStart))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
     <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.PivotColumnEnd)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var PivotColumnEnd = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_PivotColumnEnd",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.PivotColumnEnd, PivotColumnEnd))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
     <div id="div8">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.PivotColumnName)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(model => model.PivotColumnName)
        </div>
        <div style="clear: both;"></div>
    </div>
     <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.StartRowIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var StartRowIndex = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_StartRowIndex",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.StartRowIndex, StartRowIndex))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
    <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.StartColumnIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var StartColumnIndex = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_StartColumnIndex",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.StartColumnIndex, StartColumnIndex))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
    <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.SkipRowNumbers)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var SkipColumnNumber = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_SkipRowNumbers",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.SkipRowNumbers, SkipColumnNumber))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
    <div id="div6">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.TargetSheetIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
    var TargetSheetIndex = new NumericTextBoxBuilderInfo<int>()
                                            {
                                                Name = "PivotItemInfo_TargetSheetIndex",
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.TargetSheetIndex, TargetSheetIndex))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
    <div id="div8">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.TargetSheetName)
        </div>
        <div class="FieldValue">
            @Html.VnrTextBoxFor(model => model.TargetSheetName)
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div8">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.Description)
        </div>
        <div class="FieldValue">
            @Html.VnrTextAreaFor(model => model.Description, "width:500px;height:100px;")
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div9">
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <br />
    </div>
    <div id="div10">
        <div class="FieldTitle150150"></div>
        <div class="FieldValue">
            @*<input type="button" id="btnSave" value="@ConstantAction.HRM_Common_Save.TranslateString()" onclick="onCreateOrEditGrid($('#form_Cat_ExportItem'), '@_hrm_Hr_Service', 'api/CatExportItem/', 'grid_Cat_ExportItem'); return false;" class="k-button" />*@
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-PivotItem", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-PivotItem", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-PivotItem", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
    </div>
}

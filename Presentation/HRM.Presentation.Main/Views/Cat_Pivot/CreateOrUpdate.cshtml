@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.NumericTextBox
@using HRM.Infrastructure.Utilities

@model HRM.Presentation.Category.Models.Cat_PivotModel
@{
    ViewBag.Title = "InsertCatExport";
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    //var _hrm_Main_Web = ConstantPathWeb.Hrm_Cat_Web;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
}

@{
    var window = new WindowBuilderInfo
    {
        Name = "windowPivotInExportItem",
        Visible = false,
        Width = 700,
        Title = @ConstantDisplay.HRM_Category_PivotItem.TranslateString(),
        LoadContentFrom = _hrm_Main_Web + "Cat_Pivot/PivotItemInfo/",
    };
}
@(Html.VnrWindow(window))
@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = "Thông Báo Lỗi",
        Content = "<br><br><center><b>Vui Lòng Lưu  Tách Dữ Liệu Trước Khi Tạo Mới Dữ Liệu Tách Dữ Liệu Chi Tiết!!!</b></center>"
    };
}
@(Html.VnrWindow(windowError))

<script type="text/javascript">
    SetFieldRequired();
    function param() {
      

        
        return {
            ID: $('#@Html.FieldIdFor(model => model.ID)').val(),
            PivotName: $('#@Html.FieldIdFor(model => model.PivotName)').val(),
            Code: $('#@Html.FieldIdFor(model => model.Code)').val(),
            
            IsProtected: $('#@Html.FieldIdFor(model => model.IsProtected)').val(),
            IsReadOnly: $('#@Html.FieldIdFor(model => model.IsReadOnly)').val(),
         
        };
    }

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo() {
        var paramValue = {
            PivotID: $('#PivotIdForItem').val() == null ? null : $('#PivotIdForItem').val()
        };
        
        return paramValue;
    }
    @*function downloadFileTemplate() {
        window.location = '@_hrm_Main_Web' + "/Downloads/" + '@Html.DisplayFor(model=>model.TemplateFile)';
    }*@
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            var grid = $('#grid_Cat_PivotItem').data("kendoGrid");
            grid.dataSource.read();
        });
    });

    $("#btnCreateItem").click(function () {
        
        var x = $('#PivotIdForItem').val();
        if (x == '' || x == undefined) {
            PopUpCreate("windowError");
        }
        else {
            PopUpCreate("windowPivotInExportItem");
        }

    });

    function onEditExportItemInExport(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@_hrm_Main_Web' + "Cat_Pivot/PivotItemInfo/";
        PopUpEdit("windowPivotInExportItem", url, dataItem.ID);
    }

    $('input[type=radio]').change(function () {
        if ($(this).is(':checked')) {
            $(this).val('true');
        } else {
            $(this).val('false');
        }
    });

    $('input[type=checkbox]').change(function () {
        if ($(this).is(':checked')) {
            $(this).val('true');
        } else {
            $(this).val('false');
        }
    });
</script>

<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            @Html.Hidden("PivotIdForItem", Html.DisplayFor(model => model.ID))
            @Html.HiddenFor(mode => mode.ID)
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div>
                        <div style="overflow:hidden">
                            <div style="float:left; width:550px">
                                <div id="div3">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.PivotName)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrTextBoxFor(model => model.PivotName, "width:300px"))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div2">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.Code)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.Code)
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                             
                                <div id="div10">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.IsProtected)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var IsProtected = new CheckBoxBuilderInfo()
                                            {

                                            };
                                            if (Model != null)
                                            {
                                                if (Model.IsProtected == true)
                                                {
                                                    IsProtected.Value = true;
                                                }
                                                else
                                                {
                                                    IsProtected.Value = false;
                                                }
                                            }
                                        }
                                        @(Html.VnrCheckBoxFor(model => model.IsProtected, IsProtected))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="dvIsReadOnly">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.IsReadOnly)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var isReadOnly = new CheckBoxBuilderInfo()
                                            {
                                            };
                                            if (Model != null)
                                            {
                                                if (Model.IsReadOnly == true)
                                                {
                                                    isReadOnly.Value = true;
                                                }
                                                else
                                                {
                                                    isReadOnly.Value = false;
                                                }
                                            }
                                        }
                                        @(Html.VnrCheckBoxFor(model => model.IsReadOnly, isReadOnly))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>

                                
                               
                            </div>
                           
                        </div>
                        <br />
                       
                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>
        </tbody>
    </table>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateItem", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        //Thông tin hiển column hiển thị
        string[] valueFields = new string[]
                            {
                                Cat_PivotItemModel.FieldNames.Code,
                                Cat_PivotItemModel.FieldNames.PivotSheetIndex,
                                Cat_PivotItemModel.FieldNames.PivotHeaderRowIndex,
                                Cat_PivotItemModel.FieldNames.PivotColumnStart,
                                Cat_PivotItemModel.FieldNames.PivotColumnEnd,
                                Cat_PivotItemModel.FieldNames.PivotColumnName,
                                Cat_PivotItemModel.FieldNames.StartRowIndex,
                                Cat_PivotItemModel.FieldNames.StartColumnIndex,
                                Cat_PivotItemModel.FieldNames.SkipRowNumbers,
                                Cat_PivotItemModel.FieldNames.TargetSheetIndex,
                                Cat_PivotItemModel.FieldNames.TargetSheetName,
                                

                            };

        //Set độ rộng cho từng column
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {Cat_PivotItemModel.FieldNames.Code, 125},
                                {Cat_PivotItemModel.FieldNames.PivotSheetIndex, 100},
                                {Cat_PivotItemModel.FieldNames.PivotHeaderRowIndex, 115},
                                {Cat_PivotItemModel.FieldNames.PivotColumnStart, 100},
                                {Cat_PivotItemModel.FieldNames.PivotColumnEnd, 95},
                                {Cat_PivotItemModel.FieldNames.PivotColumnName, 120},
                                {Cat_PivotItemModel.FieldNames.StartRowIndex, 150},
                                {Cat_PivotItemModel.FieldNames.StartColumnIndex, 150},
                                {Cat_PivotItemModel.FieldNames.SkipRowNumbers, 150},
                                {Cat_PivotItemModel.FieldNames.TargetSheetIndex, 150},
                                {Cat_PivotItemModel.FieldNames.TargetSheetName, 150},


                            };

        //Thông tin hiển thị được dịch
        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                            {
                                {Cat_PivotItemModel.FieldNames.Code, ConstantDisplay.HRM_Category_ExportItem_Code },
                                {Cat_PivotItemModel.FieldNames.PivotSheetIndex, ConstantDisplay.HRM_Category_Pivot_PivotSheetIndex },
                                {Cat_PivotItemModel.FieldNames.PivotHeaderRowIndex, ConstantDisplay.HRM_Category_Pivot_PivotHeaderRowIndex },
                                {Cat_PivotItemModel.FieldNames.PivotColumnStart, ConstantDisplay.HRM_Category_Pivot_PivotColumnStart },
                                {Cat_PivotItemModel.FieldNames.PivotColumnEnd, ConstantDisplay.HRM_Category_Pivot_PivotColumnEnd},
                                {Cat_PivotItemModel.FieldNames.StartRowIndex, ConstantDisplay.HRM_Category_Pivot_StartRowIndex},
                                
                                {Cat_PivotItemModel.FieldNames.StartColumnIndex, ConstantDisplay.HRM_Category_Pivot_StartColumnIndex},
                                {Cat_PivotItemModel.FieldNames.PivotColumnName, ConstantDisplay.HRM_Category_Pivot_PivotColumnName},
                                {Cat_PivotItemModel.FieldNames.SkipRowNumbers, ConstantDisplay.HRM_Category_Pivot_SkipColumnNumber},
                                {Cat_PivotItemModel.FieldNames.TargetSheetIndex, ConstantDisplay.HRM_Category_Pivot_TargetSheetIndex},
                                {Cat_PivotItemModel.FieldNames.TargetSheetName, ConstantDisplay.HRM_Category_Pivot_TargetSheetName},
                                                                                                                                
                            };
                            
                            // string[] hiddenField = new string[]
                            //{
                            //     Cat_PivotItemModel.FieldNames.ExportID,

                            //};


        var grid = new GridBuilderInfo
        {
            Name = "grid_Cat_PivotItem",
            ValueFields = valueFields,
            DisplayFields = displayFields,
            SizeFields = sizeFields,
          //  HiddenFields=hiddenField,
            ShowEditIcon = false,
            ShowCheckbox = false,
            ShowCommand = true,
            ShowDeleteButton = true,
            ShowEditButton = true,
            EditActionUrl = _hrm_Main_Web + "Cat_PivotItem/Create/",
            DeleteActionUrl = _hrm_Main_Web + "Cat_PivotItem/Delete/",
            AutoBind = true,
            EditMode = GridEditMode.InLine,
            ReadActionUrl = _hrm_Hr_Service + "Cat_GetData/GetPivotItemByPivotIDList",
            ReadData = "filterFieldInfo",

        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Cat_PivotItemModel>(grid)
                                .HtmlAttributes(new { style = "height:400px" })
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    //.Model(model => model.Field(o => o.p).Editable(false))
                                    )
    )
</div>
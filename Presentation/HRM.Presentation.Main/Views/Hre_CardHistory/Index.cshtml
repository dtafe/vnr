
@using HRM.Infrastructure.Utilities;
@using HRM.Infrastructure.Security
@using System.Collections
@model Hre_CardHistorySearchModel
@{
    ViewBag.Title = HRM.Infrastructure.Utilities.ConstantDisplay.HRM_Hr_CardHistory_Title.TranslateString();
    Layout = null;
    //string[] valueFields = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}
<script type="text/javascript">
    var checkedNodes = [];

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        var jobTitleID = $('#@Html.FieldIdFor(model => model.JobTitleID)').val();
        var positionID = $('#@Html.FieldIdFor(model => model.PositionID)').val();
        var dataParameter = {
            ProfileName: $('#@Html.FieldIdFor(model => model.ProfileName)').val(),
            CodeEmp: $('#@Html.FieldIdFor(model => model.CodeEmp)').val(),
            OrgStructureID: checkedNodes.join(','),
            JobTitleID: $('#@Html.FieldIdFor(model => model.JobTitleID)').val() ? $('#@Html.FieldIdFor(model => model.JobTitleID)').val()[0] : null,
            PositionID: $('#@Html.FieldIdFor(model => model.PositionID)').val() ? $('#@Html.FieldIdFor(model => model.PositionID)').val()[0] : null,
            DateStart: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateStart").val()),
            DateEnd: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateEnd").val()),
            CardCode: $('#@Html.FieldIdFor(model => model.CardCode)').val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
        return dataParameter;
    }

    function checkedNodeIds(nodes, checkedNodes) {
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                checkedNodes.push(nodes[i].id);
            }
            if (nodes[i].hasChildren) {
                checkedNodeIds(nodes[i].children.view(), checkedNodes);
            }
        }
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes)
            var grid = $('#gridHre_CardHistory').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
            checkedNodes = [];
        });
    });

    GridCheckbox("gridHre_CardHistory");
    //"Delete (selected)" button
    $('#btnDelete').click(function (e) {
        var isAccess = checkPermission(PrivilegeType.Delete, '@ConstantPermission.Hre_CardHistory');
        if (!isAccess) {
            return;
        }
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();

        DeleteSelected("gridHre_CardHistory", '@_hrm_Main_Web' + "Hre_CardHistory/RemoveSelected/", selectedIds);

        return false;
    });
    $("#btnExportAll").click(function () {
        var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_CardHistory');
        if (!isAccess) {
            return;
        }
        var grid = $('#gridHre_CardHistory').data("kendoGrid");
        var count = grid.dataSource._data.toJSON().length;
        if (count == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Hre_GetData/ExportCardHistoryList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload);
    });
    // Nút export selected
    $("#btnExportSelected").click(function () {
        var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Hre_CardHistory');
        if (!isAccess) {
            return;
        }
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Hre_GetData/ExportCardHistorySelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload);
    });
</script>
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            @*<form id="form-search">*@
            <div class="contendSearchWidge" style="overflow:visible">
                <div>
                    <div class="hrm_box">
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.ProfileName)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.ProfileName, "width:200px;")
                            </div>
                        </div>
                        <div id="div2">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.CodeEmp)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.CodeEmp, "width:200px")
                            </div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.OrgStructureID)
                            </div>
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            </div>
                            <div style="clear: both;"></div>
                        </div>                
                    </div>
                    <div class="hrm_box">
                        <div id="div5">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.JobTitleID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var JobTitleName = new MultiSelectBuilderInfo
                                    {
                                        DataTextField = "JobTitleName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiJobTitle",
                                        MaxSelectedItems = 1,
                                        Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
                                    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.JobTitleID, JobTitleName)
                            </div>
                        </div>
                        <div id="div6">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.PositionID)
                            </div>

                            <div class="FieldValue">
                                @{
                                    var PositionName = new MultiSelectBuilderInfo
                                    {
                                        DataTextField = "PositionName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
                                        MaxSelectedItems = 1,
                                        Placeholder = ConstantDisplay.HRM_Category_SelectPosition.TranslateString(),
                                    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.PositionID, PositionName)
                            </div>
                        </div>
                    </div>
                    <div class="hrm_box">
                        <div id="div2" style="float:left">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(model => model.CardCode)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.CardCode, "width:200px")
                            </div>
                        </div>
                        <div id="div3">
                            <div class="FieldTitle150">
                                @Html.VnrLabel(ConstantDisplay.HRM_Hr_CardHistory_DateEffect.TranslateString())
                            </div>
                            <div class="FieldValue">
                                @{
                                    var datepickerDateStart = new DatePickerBuilderInfo()
                                    {
                                        Value = @Html.DisplayFor(mode => mode.DateStart).ToString(),
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                        Format = ConstantFormat.HRM_Format_DayMonthYear.TranslateString()
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateStart, datepickerDateStart)

                                @Html.ValidationMessageFor(model => model.DateStart)
                                @{
                                    var datepickerDateEnd = new DatePickerBuilderInfo()
                                    {
                                        Value = @Html.DisplayFor(mode => mode.DateEnd).ToString(),
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                        Format = ConstantFormat.HRM_Format_DayMonthYear.TranslateString()
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateEnd, datepickerDateEnd)
                                @Html.ValidationMessageFor(model => model.DateEnd)
                            </div>
                            <br />
                        </div>

                    </div>
                </div>
            </div>
            @*</form>*@
        </div>
    </div>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeCardHistory", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Hr.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridHre_CardHistory_Grid_Name + "__Hre_CardHistoryIndex";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridHre_CardHistory_Grid_Name,
            ReadActionUrl = _hrm_Hr_Service + "Hre_GetData/GetCardHistoryList",
            ReadData = "filterFieldInfo",
            //EventDataBound = "onDataBoundGrid",
            //EventDataBound = "changePageGird",
            AutoBind = false,
            ShowEditIcon = false,
            ShowDeleteButton = false,
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new[]
            {
                Hre_CardHistoryModel.FieldNames.CodeEmp,
                Hre_CardHistoryModel.FieldNames.ProfileName,
              Hre_CardHistoryModel.FieldNames.E_UNIT,
                       Hre_CardHistoryModel.FieldNames.E_DIVISION,
                Hre_CardHistoryModel.FieldNames.E_DEPARTMENT,
                 Hre_CardHistoryModel.FieldNames.E_TEAM,
                Hre_CardHistoryModel.FieldNames.E_SECTION,


                Hre_CardHistoryModel.FieldNames.JobTitleName,
                Hre_CardHistoryModel.FieldNames.PositionName,
                Hre_CardHistoryModel.FieldNames.CardCode,
                Hre_CardHistoryModel.FieldNames.DateEffect
            };
            grid.SizeFields = new Dictionary<string, int>()
            {
                {Hre_CardHistoryModel.FieldNames.ProfileName, 140},
                {Hre_CardHistoryModel.FieldNames.CodeEmp, 80},
            {Hre_CardHistoryModel.FieldNames.E_DEPARTMENT,135},
                {Hre_CardHistoryModel.FieldNames.E_DIVISION,135},
                {Hre_CardHistoryModel.FieldNames.E_SECTION,135},
                {Hre_CardHistoryModel.FieldNames.E_TEAM,135},
                {Hre_CardHistoryModel.FieldNames.E_UNIT,135},

                {Hre_CardHistoryModel.FieldNames.JobTitleName, 105},
                {Hre_CardHistoryModel.FieldNames.PositionName,105},
                {Hre_CardHistoryModel.FieldNames.CardCode, 105},
                {Hre_CardHistoryModel.FieldNames.DateEffect, 100}
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Hre_CardHistoryModel.FieldNames.ProfileName, ConstantDisplay.HRM_Hr_CardHistory_ProfileName},
                {Hre_CardHistoryModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Hr_CardHistory_ProfileID},
                            {Hre_CardHistoryModel.FieldNames.E_UNIT, ConstantDisplay.HRM_Hre_Report_E_UNIT},
                {Hre_CardHistoryModel.FieldNames.E_DIVISION, ConstantDisplay.HRM_Hre_Report_E_DIVISION},
                {Hre_CardHistoryModel.FieldNames.E_DEPARTMENT, ConstantDisplay.HRM_Hre_Report_E_DEPARTMENT},
                {Hre_CardHistoryModel.FieldNames.E_SECTION, ConstantDisplay.HRM_Hre_Report_E_SECTION},
                {Hre_CardHistoryModel.FieldNames.E_TEAM, ConstantDisplay.HRM_Hre_Report_E_TEAM},

                {Hre_CardHistoryModel.FieldNames.JobTitleName, ConstantDisplay.HRM_Category_JobTitle_JobTitleName},
                {Hre_CardHistoryModel.FieldNames.PositionName, ConstantDisplay.HRM_Category_Position_PositionName},
                {Hre_CardHistoryModel.FieldNames.CardCode, ConstantDisplay.HRM_Hr_CardHistory_CardCode},
                {Hre_CardHistoryModel.FieldNames.DateEffect, ConstantDisplay.HRM_Hr_CardHistory_DateEffect}

            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = "gridHre_CardHistory",
        //    ValueFields = valueFields,
        //    ShowDeleteButton = false,
        //    ShowEditIcon = false,
        //    ReadActionUrl = _hrm_Hr_Service + "Hre_GetData/GetCardHistoryList",
        //    AutoBind = false,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    ReadData = "filterFieldInfo"
        //};
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<HRM.Presentation.Hr.Models.Hre_CardHistoryModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeCardHistory", "Hre_CardHistoryModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)



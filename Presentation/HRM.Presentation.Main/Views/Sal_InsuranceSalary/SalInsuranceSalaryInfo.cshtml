@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Payroll.Models
@using System.Collections
@model Sal_InsuranceSalaryModel
@{
    //ViewBag.Title = "Sal Cost Centre";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;


}

<script>
    SetFieldRequired();

    function changeRateMoney(e) {
        $("#Rate").val(e.sender._value);
    };


    function onSave() {
        debugger;
        var _IsSocialIns = document.getElementById("IsSocialIns");
        var IsMedicalIns = document.getElementById("IsMedicalIns");
        var IsUnimploymentIns = document.getElementById("IsUnimploymentIns");
        if (_IsSocialIns != null && _IsSocialIns.checked) {
            $("#IsSocialIns").val("true");
        } else {
            $("#IsSocialIns").val("false");
        }

        if (IsMedicalIns != null && IsMedicalIns.checked) {
            $("#IsMedicalIns").val("true");
        } else {
            $("#IsMedicalIns").val("false");
        }

        if (IsUnimploymentIns != null && IsUnimploymentIns.checked) {
            $("#IsUnimploymentIns").val("true");
        } else {
            $("#IsUnimploymentIns").val("false");
        }

        @*var ProfileID = $('#SalInsuranceSalaryInfo_ProfileID').val();
        ProfileID != null ? $('#@Html.FieldIdFor(model => model.ProfileIDs)').val(ProfileID.join(',')) : null;
        checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        checkedNodes != null ? $('#@Html.FieldIdFor(model => model.OrgStructureID)').val(checkedNodes.join(',')) : null;
        $("#OrgStructureID").val(checkedNodes.join(','));*@

        onSaveAndContinue($('#form_sal_insurance_salary'), '@_hrm_Hr_Service', 'api/Sal_InsuranceSalary/', 'gridSal_InsuranceSalary', 'windowSalInsuranceSalary');

        return false;
    }
    function onSaveClose() {
        var _IsSocialIns = document.getElementById("IsSocialIns");
        var IsMedicalIns = document.getElementById("IsMedicalIns");
        var IsUnimploymentIns = document.getElementById("IsUnimploymentIns");
        if (_IsSocialIns != null && _IsSocialIns.checked) {
            $("#IsSocialIns").val("true");
        } else {
            $("#IsSocialIns").val("false");
        }

        if (IsMedicalIns != null && IsMedicalIns.checked) {
            $("#IsMedicalIns").val("true");
        } else {
            $("#IsMedicalIns").val("false");
        }

        if (IsUnimploymentIns != null && IsUnimploymentIns.checked) {
            $("#IsUnimploymentIns").val("true");
        } else {
            $("#IsUnimploymentIns").val("false");
        }

        @*var ProfileID = $('#SalInsuranceSalaryInfo_ProfileID').val();
        ProfileID != null ? $('#@Html.FieldIdFor(model => model.ProfileIDs)').val(ProfileID.join(',')) : null;
        checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        checkedNodes != null ? $('#@Html.FieldIdFor(model => model.OrgStructureID)').val(checkedNodes.join(',')) : null;
        $("#OrgStructureID").val(checkedNodes.join(','));*@
        onSaveAndClose($('#form_sal_insurance_salary'), '@_hrm_Hr_Service', 'api/Sal_InsuranceSalary/', 'gridSal_InsuranceSalary', 'windowSalInsuranceSalary');
        return false;
    }
    function onSaveDataPopUp() {
        var _IsSocialIns = document.getElementById("IsSocialIns");
        var _IsMedicalIns = document.getElementById("IsMedicalIns");
        var _IsUnimploymentIns = document.getElementById("IsUnimploymentIns");
        if (_IsSocialIns != null && _IsSocialIns.checked) {
            $("#IsSocialIns").val("true");
        } else {
            $("#IsSocialIns").val("false");
        }

        if (IsMedicalIns != null && IsMedicalIns.checked) {
            $("#IsMedicalIns").val("true");
        } else {
            $("#IsMedicalIns").val("false");
        }

        if (IsUnimploymentIns != null && IsUnimploymentIns.checked) {
            $("#IsUnimploymentIns").val("true");
        } else {
            $("#IsUnimploymentIns").val("false");
        }
        @*var ProfileID = $('#SalInsuranceSalaryInfo_ProfileID').val();
        ProfileID != null ? $('#@Html.FieldIdFor(model => model.ProfileIDs)').val(ProfileID.join(',')) : null;
        checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        checkedNodes != null ? $('#@Html.FieldIdFor(model => model.OrgStructureID)').val(checkedNodes.join(',')) : null;
        $("#OrgStructureID").val(checkedNodes.join(','));*@
        onlySave($('#form_sal_insurance_salary'), '@_hrm_Hr_Service', 'api/Sal_InsuranceSalary/', 'gridSal_InsuranceSalary'); return false;

    }

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_sal_insurance_salary" }))
{
    @Html.HiddenFor(model => model.ID)


    <table>
        <tr>
            <td>
                <div id="div1">
                    <div class="FieldTitle150">
                        @(Html.HiddenFor(model => model.IsCreateByProfile, new { @Value = Model != null ? true : false }))
                        @(Html.HiddenFor(model => model.ProfileIDs))
                        @(Html.HiddenFor(model => model.ProfileID))
                        @(Html.HiddenFor(model => model.OrgStructureID))
                        @(Html.HiddenFor(m => m.ProfileIDsExclude))
                        @*@Html.VnrLabel(ConstantDisplay.HRM_Rec_Interview_CandidateName.TranslateString())*@
                        @Html.VnrLabelFor(model => model.ProfileName)
                    </div>
                    <div class="FieldValue">
                        @{
    IEnumerable valuepro = new string[] { };
    if (Model != null)
    {
        valuepro = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
    }

    var _ProfileIDs1 = new MultiSelectBuilderInfo
    {

        DataTextField = "ProfileName",
        DataValueField = "ID",
        Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
        //  MaxSelectedItems = 1,
        Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
        Value = valuepro
    };
                        }
                        @{
    var ProfileOrOrgStructure = new HRM.Presentation.UI.Controls.VnrSelectProfileOrOrgStructure()
    {
        Name = "SelectProfileOrOrgStructureInsurance",
        ProfileMultiSelect = _ProfileIDs1,
        BindingProfileForField = "ProfileIDs",
        BindingOrgStructureForField = "OrgStructureID",
        BindingExclusionProfileForField = "ProfileIDsExclude"

    };
                        }
                        @Html.Partial("EditorTemplates/SelectProfileOrOrgStructure", ProfileOrOrgStructure)
                    </div>
                    <div style="clear: both;"></div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.DecisionNo)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.DecisionNo, "width: 300px")

                    </div>
                </div>

                <div id="div9" class="DivContentTitleValue">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.DateEffect)
                    </div>
                    <div class="FieldValue">
                        @{
    var _DateStart = new DatePickerBuilderInfo()
    {
        Name = "SalInsurcaneSalaryInfo_DateEffect",
        StyleCss = "width:120px"
    };
                        }
                        @Html.VnrDatePickerFor(model => model.DateEffect, _DateStart)
                    </div>
                </div>

                <div id="div4" class="DivContentTitleValue">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.InsuranceAmount)
                    </div>

                    <div class="FieldValue">

                        @{
    var number = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Name = "SalInsurcaneSalaryInfo_InsuranceAmount",
        Format = ConstantFormat.HRM_Format_Int
    };
                        }
                        @Html.VnrNumericTextBoxFor(m => m.InsuranceAmount, number)
                        @{
    var ddlCurrency = new ComboBoxBuilderInfo()
    {
        Name = "SalInsurcaneSalaryInfo_CurrencyID",
        StyleCss = "width:150px;",
        DataTextField = "CurrencyName",
        DataValueField = "ID",
        Url = _hrm_Cat_Service + "Cat_GetData/GetMultiCurrency",
        Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
        // OptionLabel =string.Empty,
        //  OptionLabel = ConstantDisplay.HRM_Category_Currency.TranslateString(),
    };
                        }
                        @(Html.VnrComboBoxFor(model => model.CurrencyID, ddlCurrency).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>

                </div>

                <div id="div4" class="DivContentTitleValue">
                    <div class="FieldTitle150">
                        @Html.VnrLabel("BHXH")
                    </div>
                    <div class="FieldValue">
                        @Html.VnrLabelFor(mode => mode.IsSocialIns)
                        @{
    var _IsSocialIns = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        _IsSocialIns.Value = Model != null ? Model.IsSocialIns.Value : false;
    }
                        }
                        @Html.VnrCheckBoxFor(model => model.IsSocialIns)

                        @Html.VnrLabelFor(mode => mode.IsMedicalIns)
                        @{
    var _IsMedicalIns = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        _IsMedicalIns.Value = Model != null ? Model.IsMedicalIns.Value : false;
    }
                        }
                        @Html.VnrCheckBoxFor(model => model.IsMedicalIns)

                        @Html.VnrLabelFor(mode => mode.IsUnimploymentIns)
                        @{
    var _IsUnimploymentIns = new CheckBoxBuilderInfo()
    {
    };
    if (Model != null)
    {
        _IsUnimploymentIns.Value = Model != null ? Model.IsUnimploymentIns ?? false : false;
    }
                        }
                        @Html.VnrCheckBoxFor(model => model.IsUnimploymentIns)

                    </div>

                </div>



                @*<div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.Code)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                    var _CostCentreCode = new TextBoxBuilderInfo()
                    {
                        Name = "SalCostCentre_Code",

                    };
                    if (Model != null)
                    {
                        _CostCentreCode.Value = Model.Code == null ? string.Empty : Model.Code;
                    }
                                        }
                                        @Html.VnrTextBoxFor(mode => mode.Code, _CostCentreCode)

                                    </div>
                                </div>

                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.CostCentreName)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.CostCentreName)

                                    </div>
                                </div>

                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.GroupCost)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.GroupCost)
                                    </div>
                                </div>
                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.Description)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextAreaFor(mode => mode.Description)
                                    </div>
                                </div>*@
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>

                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-InsuranceSalary", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-InsuranceSalary", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-InsuranceSalary", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

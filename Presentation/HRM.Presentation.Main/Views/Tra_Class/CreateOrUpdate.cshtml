@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect

@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.Payroll.Models;
@using HRM.Presentation.Hr.Models;
@using HRM.Presentation.Training.Models;
@using HRM.Infrastructure.Security
@model Tra_ClassModel

@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    IList<SelectListItem> listClassType = Enum.GetValues(typeof(EnumDropDown.ClassStatus))
     .Cast<EnumDropDown.ClassStatus>()
     .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p=>p.Text)
     .ToList();
    var ClassID = Guid.Empty;
    if (Model != null)
    {
        ClassID = Model.ID;
    }
    string strTrainerOtherList = "";
}
@{
    var window = new WindowBuilderInfo
    {
        Name = "windowTrainee",
        Visible = false,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),
        Width = 1000,
        LoadContentFrom = _hrm_Main_Web + "Tra_Class/TraineeInfo?ContractD=" + ClassID,
    };
}
@(Html.VnrWindow(window))
@{
    var windowCertificate = new WindowBuilderInfo
    {
        Name = "windowTraineeCertificate",
        Visible = false,
        Width = 700,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),

        LoadContentFrom = _hrm_Main_Web + "Tra_Class/TraineeCertificateInfo"
    };
}
@(Html.VnrWindow(windowCertificate))

@{
    var windowFilterTrainee = new WindowBuilderInfo
    {
        Name = "windowAddListTrainee",
        Visible = false,
        Width = 700,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),

        LoadContentFrom = _hrm_Main_Web + "Tra_Class/AddTraineeIntoClass"
    };
}
@(Html.VnrWindow(windowFilterTrainee))

@{
    var windowTranferTrainee = new WindowBuilderInfo
    {
        Name = "windowTransferTrainee",
        Visible = false,
        Width = 700,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),

        LoadContentFrom = _hrm_Main_Web + "Tra_Class/TransferTraineeInfo"
    };
}
@(Html.VnrWindow(windowTranferTrainee))

@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = ConstantDisplay.MessageError.TranslateString(),
        Content = ConstantDisplay.YouMustSaveClassFirst.TranslateString()
    };
}
@(Html.VnrWindow(windowError))
<script>
    SetFieldRequired();
    


    function LoadDisease() {
        debugger;
        $("#TrainerOtherList").data("kendoMultiSelect");
        if ($("#TrainerOtherList").data("kendoMultiSelect") != undefined) {
            var arr = '@strTrainerOtherList'.split(",");
            $("#TrainerOtherList").data("kendoMultiSelect").value(arr);
        }

    }
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Tra_Trainee_AddNew.TranslateString())';
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Tra_Trainee_Update.TranslateString())';
    var titleEditCertificatePopUp = '@Html.Raw(ConstantDisplay.HRM_Tra_Certificate_Update_Title.TranslateString())';
    var titleCreateCertificatePopUp = '@Html.Raw(ConstantDisplay.HRM_Tra_Certificate_Create_Title.TranslateString())';
    var AddListTrainee = '@Html.Raw(ConstantDisplay.HRM_Tra_Trainee_AddListTrainee.TranslateString())';
    var TransferListTrainee = '@Html.Raw(ConstantDisplay.HRM_Tra_Trainee_TransferTrainee.TranslateString())';
    function filterFieldInfo() {
        debugger;

        if ($("#ClassIDTemp").val() != '') {
            $("#Class_ID").val($("#ClassIDTemp").val());
        }
        return {
            ClassID: $("#Class_ID").val()
        };
    }
    $("#btnCreateTrainee").click(function () {

        debugger;
        var x = $('#@Html.FieldIdFor(model => model.Class_ID)').val();

        if (x == '') {
            PopUpCreate("windowError");
        }
        else {
            var profileMulti = $("#ProfileID").data("kendoMultiSelect");
            setTimeout(function () {
                PopUpCreate("windowTrainee", titleCreatePopUp, '@ConstantPermission.Tra_Class')
            }, 1000)

            $("#ClassID").val($('#@Html.FieldIdFor(model => model.Class_ID)').val());
        }
    });

    $("#btnAddListTrainee").click(function () {
        var x = $('#@Html.FieldIdFor(model => model.Class_ID)').val();
        if (x == '') {
            PopUpCreate("windowError");
        }
        else {
            setTimeout(function () {
                PopUpCreate("windowAddListTrainee", AddListTrainee, '@ConstantPermission.Tra_Class')
            }, 1000)

            $("#ClassID").val($('#@Html.FieldIdFor(model => model.Class_ID)').val());
        }
    });

    $("#btnTranferTrainee").click(function () {

        if (selectedIds.length == 0) {
            var notificationWidget = $("#popupNotification").kendoNotification().data("kendoNotification");
            notificationWidget.show('Vui Lòng Chọn Học Viên Để Chuyển Lớp', 'warning');
            return;
        }

        @*var x = $('#@Html.FieldIdFor(model => model.Class_ID)').val();
        if (x == '') {
            PopUpCreate("windowError");
        }
        else {*@
        setTimeout(function () {
            PopUpCreate("windowTransferTrainee", TransferListTrainee, '@ConstantPermission.Tra_Class')
        }, 1000)

        $("#ClassID").val($('#@Html.FieldIdFor(model => model.Class_ID)').val());
        // }
    });

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        LoadDisease();
        //Show Hide Panel
        ShowHidePanel();

        //Xử lý Edit popup
        var url = '@_hrm_Main_Web' + "Tra_Class/TraineeInfo/";
        EditGridPopUp("grid_TraineeInClass", "windowTrainee", url, '@ConstantPermission.Tra_Class', titleEditPopUp);
    });
    $('#btnDelete').click(function (e) {

        if (selectedIds.length == 0) {
            DeleteFail();
            return;
        }
        //  e.preventDefault();
        DeleteSelected("grid_TraineeInClass", '@_hrm_Main_Web' + "Tra_Trainee/RemoveSelected/", selectedIds, '@ConstantPermission.Tra_Class');
        //selectedIds = [];
    });

    $("#btnCreateCertificate").click(function () {


        var x = $('#@Html.FieldIdFor(model => model.Class_ID)').val();

        if (x == '') {
            PopUpCreate("windowError");
        }
        else {
            var profileMulti = $("#ProfileID").data("kendoMultiSelect");
            setTimeout(function () {
                PopUpCreate("windowTraineeCertificate", titleCreateCertificatePopUp, '@ConstantPermission.Tra_Class')
            }, 1000)

            $("#ClassID").val($('#@Html.FieldIdFor(model => model.Class_ID)').val());
        }
    });

    GridCheckbox('grid_TraineeInClass');
    $("#btnRemoveCertificate").click(function () {
        DeleteSelected("grid_TraineeInClass", '@_hrm_Main_Web' + "Tra_Class/RemoveSelectedCertificate/", selectedIds, '@ConstantPermission.Tra_Class');
    });
    $("#btnUpdateCertificate").click(function () {
        debugger;
        var grid = $("#grid_TraineeInClass").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        var traineeCertificateID = selectedItem.TraineeCertificateID;
        var url = '@_hrm_Main_Web' + "Tra_Class/TraineeCertificateInfo/";
        PopUpEdit('windowTraineeCertificate', url, traineeCertificateID, titleEditCertificatePopUp);
    });

    //Open poup add Point
    function EvenClickAddPoint() {
        debugger;
        if (selectedIds.length == 0) {
            ShowNotification('Thông Báo', '@ConstantDisplay.PleaseChooseTrainee.TranslateString()', "k-block k-info-colored");
            return;
        }

        //grid đang lỗi, ko biết lỗi gì nên xử lý cứng 
        //var grid = $("#grid_TraineeInClass").data("kendoGrid");
        //var length = grid.dataSource.total();
        //selectedIds = selectedIds.slice(0, length);
        var window = $("#Popup_AddPoint");
        window.kendoWindow({
            width: "800",
            height: "500",
            title: "@ConstantAction.HRM_Common_Add_Point.TranslateString()",
            content: '@_hrm_Main_Web' + "/Tra_Trainee/AddPoint?ids=" + selectedIds,
            close: onClose
        });

        var onClose = function () {
            undo.show();
        }
        window.data("kendoWindow").open().center();
    };

    function onChanged(e) {

        //tạm thời chưa có cách xử lý nên call 3 hàm ajax cùng lúc de lay dữ liệu
        var _CourseID = e.sender._old;
        $.ajax({
            url: '@_hrm_Hr_Service' + "Tra_GetData/GetCertificateByCourseID",
            data: { CourseID: _CourseID },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                debugger;
                var strIDs = "";
                for (var i = 0; i < data.length; i++) {
                    strIDs += data[i].ID + ",";
                }
                var comboCertificate = $("#CertificateID").data("kendoMultiSelect");
                comboCertificate.readonly();
                comboCertificate.value(strIDs.substring(0, strIDs.length - 1).split(","));

            }

        });

        $.ajax({
            url: '@_hrm_Hr_Service' + "Tra_GetData/GetDataByCourseID",
            data: { CourseID: _CourseID },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                var _IsComplex = document.getElementById("IsComplex");
                var _IsNormal = document.getElementById("IsNormal");
                var _IsTypeHandleFomular = document.getElementById("IsTypeHandleFomular");
                var _IsTypeHandleFomularAuto = document.getElementById("IsTypeHandleFomularAuto");

                var _scoreToPass = $("#StandardScoreToPass").data("kendoNumericTextBox");

                debugger;
                if (data.IsComplex == true) {
                    _IsComplex.checked = true;
                } else {
                    _IsComplex.checked = false;
                }

                if (data.IsNormal == true) {
                    _IsNormal.checked = true;
                } else {
                    _IsNormal.checked = false;
                }
                if (data.IsTypeHandleFomular == true) {
                    _IsTypeHandleFomular.checked = true;
                } else {
                    _IsTypeHandleFomular.checked = false;
                }
                if (data.IsTypeHandleFomularAuto == true) {
                    _IsTypeHandleFomularAuto.checked = true;
                } else {
                    _IsTypeHandleFomularAuto.checked = false;
                }

                $("#Formula").val(data.Formula);
                $("#TopicName").val(data.strTopicCode);
                _scoreToPass.value(data.ScoreStandard);
                //ScoreStandard
            }
        });
    }

    function filterFieldInfo_Topic() {
        return {
            CourseID: $("#CourseID").val()
        };
    }


    function ComputePoint() {
        debugger;
        ShowHre_ProgressBar();

        var Result = [];
        var grid = $("#grid_TraineeInClass").data("kendoGrid");
        var currentData = grid.dataSource.data();

        for (var i = 0; i < currentData.length; i++) {
            if (selectedIds.indexOf(currentData[i].id) != -1) {
                Result.push(currentData[i].id + "," + currentData[i].ClassID);
            }
        }
        $.ajax({
            traditional: true,
            url: '@_hrm_Hr_Service' + "Tra_GetData/ComputePoint",
            data: { selectedIds: Result },
            type: 'POST',
            datatype: 'json',
            success: function (data) {
                debugger;
                if (data == "Success") {
                    CloseHre_ProgressBar();

                    ReadGrid('grid_TraineeInClass');
                }
            }
        });
    };

</script>
<div id="Popup_AddPoint"></div>
<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div>
                        <div style="float:left">

                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.PlanID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _PlanID = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "ItemForShopIfo_PlanID",
                                            DataTextField = "PlanName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Tra_GetData/GetMultiPlanName",
                                            ServerFilter = true,
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.PlanID, _PlanID).Text(Model == null ? string.Empty : Model.PlanName))
                                </div>
                            </div>
                            <div id="div2">
                                <div class="FieldTitle170">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_Training_Title.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrRadioButtonFor(mode => mode.IsTrainingInside, "IsTrainingOut")
                                    @Html.VnrLabelFor(mode => mode.IsTrainingInside)

                                    @Html.VnrRadioButtonFor(mode => mode.IsTrainingOut, "IsTrainingOut")
                                    @Html.VnrLabelFor(mode => mode.IsTrainingOut)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.CourseID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _CourseID = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "ItemForShopIfo_PlanID",
                                            DataTextField = "CourseName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Tra_GetData/GetMultiTraCourse",
                                            ServerFilter = true,
                                            StyleCss = "width:200px",
                                            EventChange = "onChanged"
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.CourseID, _CourseID).Text(Model == null ? string.Empty : Model.CourseName))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Code)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.Code)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ClassName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.ClassName)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Status)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _Type = new DropDownListBuilderInfo()
                                        {
                                            //  Name = "RevenueForProfileIfo_Type",
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = listClassType
                                        };
                                    }
                                    @Html.VnrDropDownListFor(model => model.Status, _Type)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.TrainingPlace)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.TrainingPlace)
                                </div>
                            </div>
                            @*<div id=" div1">
                                    <div class="FieldTitle170">
                                        @Html.VnrLabelFor(mode => mode.Teacher)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.Teacher)
                                    </div>
                                </div>*@


                            <div id="div4" class="DivContentTitleValue">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Teacher)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _TrainerOtherListCode = new MultiSelectBuilderInfo()
                                        {
                                            Name = "TraClass_TrainerOtherListCode",
                                            DataTextField = "ProfileName",
                                            DataValueField = "CodeEmp",
                                            Url = @_hrm_Hr_Service + "Hre_GetData/GetMultiProfile",
                                            //Url = @_hrm_Hr_Service + "Hre_GetData/GetProfileAllList",
                                            Value = (Model != null && Model.TrainerOtherList != null) ? Model.TrainerOtherList.Split(',').ToList() : new List<string>(),
                                            
                                        };
                                    }
                                    @Html.VnrMultiSelectFor(mode => mode.TrainerOtherListCode, _TrainerOtherListCode)
                                    @Html.HiddenFor(model => model.TrainerOtherList)
                                </div>
                            </div>


                            @*<div id="div4" class="DivContentTitleValue">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Teacher)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        IEnumerable valueProfile = new string[] { };
                                        
                                        if (Model != null)
                                        {
                                            valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } ,
                                            
                                            };
                                        }
                                    }
                                    @{
                                        var _TrainerOtherListCode = new MultiSelectBuilderInfo()
                                         {
                                             Name = "TraClass_TrainerOtherListCode",
                                             DataTextField = "ProfileName",
                                             DataValueField = "CodeEmp",
                                             Url = @_hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                                             Value = valueProfile,
                                         };
                                    }
                                    @Html.VnrMultiSelectFor(mode => mode.TrainerOtherListCode, _TrainerOtherListCode)
                                    @Html.HiddenFor(model => model.TrainerOtherList)
                                </div>

                            </div>*@





                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @*@Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_TimeTraining.ToString().TranslateString())*@
                                    @Html.VnrLabelFor(model => model.StartDate)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _DateFrom = new DatePickerBuilderInfo()
                                        {
                                            // Name = "RevenueForProfileIfo_DateFrom",
                                            StyleCss = "width:100px",
                                            Placeholder = ConstantDisplay.HRM_Tra_Class_StartDate.ToString().TranslateString()
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.StartDate, _DateFrom)



                                    @{
                                        var _DateTo = new DatePickerBuilderInfo()
                                        {
                                            //  Name = "RevenueForProfileIfo_DateTo",
                                            StyleCss = "width:100px",
                                            Placeholder = ConstantDisplay.HRM_Tra_Class_EndDate.ToString().TranslateString()
                                        };
                                    }
                                    @Html.VnrDatePickerFor(model => model.EndDate, _DateTo)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Schedule)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(model => model.Schedule)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ScheduleTimeStart)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _ScheduleTimeStart = new TimePickerBuilderInfo()
                                        {
                                            // Name = "RevenueForProfileIfo_DateFrom",
                                            StyleCss = "width:83px"
                                        };
                                    }
                                    @Html.VnrTimePickerFor(model => model.ScheduleTimeStart, _ScheduleTimeStart)

                                    @Html.VnrLabelFor(mode => mode.ScheduleTimeEnd)
                                    @{
                                        var _ScheduleTimeEnd = new TimePickerBuilderInfo()
                                        {
                                            // Name = "RevenueForProfileIfo_DateFrom",
                                            StyleCss = "width:83px"
                                        };
                                    }
                                    @Html.VnrTimePickerFor(model => model.ScheduleTimeEnd, _ScheduleTimeEnd)
                                    @*@(Html.TextBoxFor(mode => mode.ScheduleTimeEnd, new { id = "Vnr_MaskedTextBox_Time", style = "width:77px" }))*@
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.MassNumProfileAttendanced)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _MassNumProfileAttendanced = new NumericTextBoxBuilderInfo<int>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                            StyleCss = "width:82px"
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.MassNumProfileAttendanced, _MassNumProfileAttendanced))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ExpectedCost)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _ExpectedCost = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                            StyleCss = "width:130px"
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.ExpectedCost, _ExpectedCost))

                                    @{
                                        var CurrencyName = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "BasicSalaryInfo1_CurrencyID3",
                                            DataTextField = "CurrencyName",
                                            DataValueField = "ID",
                                            Url = _hrm_Cat_Service + "Cat_GetData/GetMultiCurrency",
                                            StyleCss = "width:60px;",
                                            // Index = 0,
                                            Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
                                            // Autobind = true,
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.CurrencyID, CurrencyName).Text(Model == null ? string.Empty : Model.CurrencyName1))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.TotalAmount)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _TotalAmount = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                            StyleCss = "width:130px"
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.TotalAmount, _TotalAmount))

                                    @{
                                        var CurrencyName1 = new ComboBoxBuilderInfo()
                                        {
                                            // Name = "BasicSalaryInfo1_CurrencyID3",
                                            DataTextField = "CurrencyName",
                                            DataValueField = "ID",
                                            Url = _hrm_Cat_Service + "Cat_GetData/GetMultiCurrency",
                                            StyleCss = "width:60px;",
                                            // Index = 0,
                                            Value = Model == null ? string.Empty : Model.CurrencyID2.ToString(),
                                            // Autobind = true,
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.CurrencyID2, CurrencyName1).Text(Model == null ? string.Empty : Model.CurrencyName2))
                                </div>
                            </div>

                        </div>
                        <div style="float:left;">
                            <div id="div2">
                                <div class="FieldTitle170">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_TotalScore_Title.TranslateString())
                                </div>
                                <div class="FieldValue" id="DivIsComplex">
                                    @Html.VnrRadioButtonFor(mode => mode.IsNormal, "IsComplex")
                                    @Html.VnrLabelFor(mode => mode.IsNormal)

                                    @Html.VnrRadioButtonFor(mode => mode.IsComplex, "IsComplex")
                                    @Html.VnrLabelFor(mode => mode.IsComplex)
                                </div>
                            </div>
                            <div id="div2">
                                <div class="FieldTitle170">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Tra_Class_Training_AddFormula.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrRadioButtonFor(mode => mode.IsTypeHandleFomular, "IsTypeHandleFomularAuto")
                                    @Html.VnrLabelFor(mode => mode.IsTypeHandleFomular)

                                    <div>
                                        @Html.VnrRadioButtonFor(mode => mode.IsTypeHandleFomularAuto, "IsTypeHandleFomularAuto")
                                        @Html.VnrLabelFor(mode => mode.IsTypeHandleFomularAuto)
                                    </div>

                                    @Html.HiddenFor(mode => mode.TypeHandleFomular)
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.Formula)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(model => model.Formula, "background-color:WhiteSmoke")
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.StandardScoreToPass)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _StandardScoreToPass = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            //    Name = "RevenueForProfileIfo_Actual",
                                            //Format = ConstantFormat.HRM_Format_Number_Double.ToString(),
                                            Format = ConstantFormat.HRM_Format_Int,
                                            StyleCss = "width:75px;background-color:WhiteSmoke;"
                                            
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.StandardScoreToPass, _StandardScoreToPass))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.RankingGroupID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _RankingGroupID = new ComboBoxBuilderInfo()
                                        {
                                            //  Name = "TraCourseInfo_RankingGroupID",
                                            DataTextField = "RankGroupName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Tra_GetData/GetMultiRankingGroup",
                                            ServerFilter = true,
                                            StyleCss = "width:200px"
                                        };
                                    }
                                    @(Html.VnrComboBoxFor(mode => mode.RankingGroupID, _RankingGroupID).Text(Model == null ? string.Empty : Model.RankGroupName))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.CertificateID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        IEnumerable valueJobTitle = new string[] { };
                                        if (Model != null)
                                        {
                                            valueJobTitle = new[] { new { CertificateName = Model.CertificateName, ID = Model.CertificateID } };
                                        }
                                    }
                                    @{
                                        var _CertificateID = new MultiSelectBuilderInfo()
                                        {
                                            // Name = "ItemForShopIfo_PlanID",
                                            DataTextField = "CertificateName",
                                            DataValueField = "ID",
                                            Url = _hrm_Hr_Service + "Tra_GetData/GetMultiCertificate",
                                            Autobind = true

                                        };
                                    }
                                    @(Html.VnrMultiSelectFor(mode => mode.CertificateID, _CertificateID))
                                </div>
                            </div>
                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.TopicID)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.TopicName, "background-color:WhiteSmoke")
                                    @*@{
                                            IEnumerable valueTopic = new string[] { };
                                            if (Model != null)
                                            {
                                                valueTopic = new[] { new { TopicName = Model.TopicName, ID = Model.TopicID } };
                                            }
                                        }
                                        @{
                                            var _TopicID = new MultiSelectBuilderInfo()
                                            {
                                                // Name = "ItemForShopIfo_PlanID",
                                                DataTextField = "TopicName",
                                                DataValueField = "ID",
                                                Url = _hrm_Hr_Service + "Tra_GetData/GetMultiTopicByCourseID",
                                                Autobind = true,
                                                ReadData = "filterFieldInfo_Topic"

                                            };
                                        }
                                        @(Html.VnrMultiSelectFor(mode => mode.TopicID, _TopicID))*@
                                </div>
                            </div>

                            <div id=" div1">
                                <div class="FieldTitle170">
                                    @Html.VnrLabelFor(mode => mode.ContentTraining)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(model => model.ContentTraining)
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
                @Html.HiddenFor(mode => mode.ID)
                @Html.HiddenFor(mode => mode.IsTrainingOut)
                @Html.HiddenFor(mode => mode.Class_ID)
                @Html.HiddenFor(mode => mode.ClassIDTemp)
            </tr>
        </tbody>
    </table>
</div>
<div class="commandToolBarWidge">
    <div class="GridTitle">
        @Html.VnrLabel(ConstantDisplay.HRM_Tra_Trainee_Title.TranslateString())

    </div>

    <div style="float:right">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnTranferTrainee", Content = ConstantAction.HRM_Common_TranferTrainee.TranslateString(), ImageUrl = ConstantPath.IconChangeInOut })
        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "EvenClickAddPoint", Name = "btnAddPoint", Content = ConstantAction.HRM_Common_Add_Point.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "ComputePoint", Name = "btnComputePoint", Content = ConstantAction.HRM_Common_ComputePoint.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @*@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnAddListTrainee", Content = ConstantAction.HRM_Common_AddListTrainee.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })*@
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTrainee", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateCertificate", Content = ConstantAction.HRM_Common_Create_Certificate.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @*@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnUpdateCertificate", Content = ConstantAction.HRM_Common_Edit_Certificate.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnRemoveCertificate", Content = ConstantAction.HRM_Common_Remove_Certificate.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })*@

        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var foreignKey = new Dictionary<object, object[]>()
            {
                {Tra_ClassModel.FieldNames.Status,new object[]
                   { "Value", "Text", listClassType, ConstantDisplay.HRM_Attendance_Overtime_Status,""}},
            };
        //Thông tin hiển column hiển thị
        string[] valueFields = new string[]
                            {
                                Tra_TraineeModel.FieldNames.TraineeCertificateID,
                                Tra_TraineeModel.FieldNames.CodeEmp,
                                Tra_TraineeModel.FieldNames.ProfileName,
                                Tra_TraineeModel.FieldNames.E_UNIT,
                                Tra_TraineeModel.FieldNames.E_DIVISION,
                                Tra_TraineeModel.FieldNames.E_DEPARTMENT,
                                Tra_TraineeModel.FieldNames.E_TEAM,
                                Tra_TraineeModel.FieldNames.E_SECTION,
                                Tra_TraineeModel.FieldNames.JobTitleName,
                                Tra_TraineeModel.FieldNames.CertificateName,
                                Tra_TraineeModel.FieldNames.DateCertificate,
                                Tra_TraineeModel.FieldNames.DateExpireCertificate,
                                Tra_TraineeModel.FieldNames.StatusView,
                                Tra_TraineeModel.FieldNames.RankingName,
                                Tra_TraineeModel.FieldNames.Score1,
                                Tra_TraineeModel.FieldNames.Score2,
                                Tra_TraineeModel.FieldNames.Score3,
                                Tra_TraineeModel.FieldNames.Status,
                                Tra_TraineeModel.FieldNames.Result,
                                Tra_TraineeModel.FieldNames.ClassID,
                                
                            };
        string[] hiddenFields = new string[]
                            {
                                Tra_TraineeModel.FieldNames.TraineeCertificateID,
                                Tra_TraineeModel.FieldNames.ClassID,
                                
                            };

        //Set độ rộng cho từng column
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {Tra_TraineeModel.FieldNames.TraineeCertificateID, 150},
                                {Tra_TraineeModel.FieldNames.CodeEmp, 150},
                                {Tra_TraineeModel.FieldNames.ProfileName, 150},
                                {Tra_TraineeModel.FieldNames.E_UNIT,135},
                                {Tra_TraineeModel.FieldNames.E_DIVISION,135},
                                {Tra_TraineeModel.FieldNames.E_DEPARTMENT,135},
                                {Tra_TraineeModel.FieldNames.E_TEAM,135},
                                {Tra_TraineeModel.FieldNames.E_SECTION,135},
                                {Tra_TraineeModel.FieldNames.JobTitleName, 130},
                                {Tra_TraineeModel.FieldNames.CertificateName, 130},
                                {Tra_TraineeModel.FieldNames.DateCertificate, 150},
                                {Tra_TraineeModel.FieldNames.DateExpireCertificate, 150},
                                {Tra_TraineeModel.FieldNames.RankingName, 120},
                                {Tra_ReportTraineeResultModel.FieldNames.Score1,100},
                                {Tra_ReportTraineeResultModel.FieldNames.Score2,100},
                                {Tra_ReportTraineeResultModel.FieldNames.Score3,100},
                                {Tra_TraineeModel.FieldNames.StatusView, 120},
                                {Tra_TraineeModel.FieldNames.Result, 120},
                            };

        //Thông tin hiển thị được dịch
        Dictionary<string, string> displayFields = new Dictionary<string, string>()
        {
            {Tra_TraineeModel.FieldNames.TraineeCertificateID, ConstantDisplay.HRM_Att_Report_CodeEmp},
            {Tra_TraineeModel.FieldNames.CodeEmp, ConstantDisplay.HRM_Att_Report_CodeEmp},
            {Tra_TraineeModel.FieldNames.ProfileName, ConstantDisplay.HRM_Tra_Trainee_ProfileID},
            {Tra_TraineeModel.FieldNames.E_UNIT, ConstantDisplay.HRM_Hre_Report_E_UNIT},
            {Tra_TraineeModel.FieldNames.E_DIVISION, ConstantDisplay.HRM_Hre_Report_E_DIVISION},
            {Tra_TraineeModel.FieldNames.E_DEPARTMENT, ConstantDisplay.HRM_Hre_Report_E_DEPARTMENT},
            {Tra_TraineeModel.FieldNames.E_SECTION, ConstantDisplay.HRM_Hre_Report_E_SECTION},
            {Tra_TraineeModel.FieldNames.E_TEAM, ConstantDisplay.HRM_Hre_Report_E_TEAM},
            {Tra_TraineeModel.FieldNames.JobTitleName, ConstantDisplay.HRM_Tra_Course_JobTitle},
            {Tra_TraineeModel.FieldNames.DateCertificate, ConstantDisplay.HRM_Tra_Trainee_CertificateDate},
            {Tra_TraineeModel.FieldNames.DateExpireCertificate, ConstantDisplay.HRM_Tra_Trainee_DateExpirationCertificate},
            {Tra_TraineeModel.FieldNames.RankingName, ConstantDisplay.HRM_Tra_Trainee_RankingName},
            {Tra_ReportTraineeResultModel.FieldNames.Score1,  ConstantDisplay.HRM_Tra_ReportTraineeResult_Score1},
            {Tra_ReportTraineeResultModel.FieldNames.Score2,  ConstantDisplay.HRM_Tra_ReportTraineeResult_Score2},
            {Tra_ReportTraineeResultModel.FieldNames.Score3,  ConstantDisplay.HRM_Tra_ReportTraineeResult_Score3},
            {Tra_TraineeModel.FieldNames.StatusView, ConstantDisplay.HRM_Tra_Trainee_Status},
            {Tra_TraineeModel.FieldNames.Result, ConstantDisplay.HRM_Tra_Trainee_Result},
        };

        var grid = new GridBuilderInfo
        {
            Name = "grid_TraineeInClass",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            ShowCommand = false,
            GridHeight = 200,
            AutoBind = true,
            ReadActionUrl = _hrm_Hr_Service + "Tra_GetData/GetTraineeByClassIDList",
            ReadData = "filterFieldInfo",
            HiddenFields = hiddenFields,
            ForeignKey = foreignKey,
        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Tra_TraineeModel>(grid))

</div>
<div>
    @{
        if (Model != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    $.ajax({
                        url: '@_hrm_Hr_Service' + "Tra_GetData/GetCertificateByCourseID",
                        data: { CourseID: '@Model.CourseID' },
                        type: 'POST',
                        datatype: 'json',
                        success: function (data) {
                            debugger;
                            var strIDs = "";
                            for (var i = 0; i < data.length; i++) {
                                strIDs += data[i].ID + ",";
                            }
                            var comboCertificate = $("#CertificateID").data("kendoMultiSelect");
                            comboCertificate.readonly();
                            comboCertificate.value(strIDs.substring(0, strIDs.length - 1).split(","));

                        }
                    });

                    var _outValue = '@Model.IsTrainingOut';
                    var _inValue = '@Model.IsTrainingInside';
                    var _out = document.getElementById("IsTrainingOut");
                    var _in = document.getElementById("IsTrainingInside");
                    if (_outValue == "False") {
                        _out.checked = false;
                    } else {
                        _out.checked = true;
                    }
                    if (_inValue == "True") {
                        _in.checked = true;
                    } else {
                        _in.checked = false;
                    }

                    $.ajax({
                        url: '@_hrm_Hr_Service' + "Tra_GetData/GetDataByCourseID",
                        data: { CourseID: '@Model.CourseID' },
                        type: 'POST',
                        datatype: 'json',
                        success: function (data) {
                            var _IsComplex = document.getElementById("IsComplex");
                            var _IsNormal = document.getElementById("IsNormal");
                            var _IsTypeHandleFomular = document.getElementById("IsTypeHandleFomular");
                            var _IsTypeHandleFomularAuto = document.getElementById("IsTypeHandleFomularAuto");
                            debugger;
                            if (data.IsComplex == true) {
                                _IsComplex.checked = true;
                            } else {
                                _IsComplex.checked = false;
                            }
                            if (data.IsNormal == true) {
                                _IsNormal.checked = true;
                            } else {
                                _IsNormal.checked = false;
                            }
                            if (data.IsTypeHandleFomular == true) {
                                _IsTypeHandleFomular.checked = true;
                            } else {
                                _IsTypeHandleFomular.checked = false;
                            }
                            if (data.IsTypeHandleFomularAuto == true) {
                                _IsTypeHandleFomularAuto.checked = true;
                            } else {
                                _IsTypeHandleFomularAuto.checked = false;
                            }

                            $("#Formula").val(data.Formula);
                        }
                    });
                });
            </script>
        }
    }
</div>

<script>
    $(document).ready(function () {
        debugger;
        var _isComplex = document.getElementById("IsComplex");
        var _isNormal = document.getElementById("IsNormal");
        _isComplex.disabled = true;
        _isNormal.disabled = true;
        var comboCertificate = $("#CertificateID").data("kendoMultiSelect");
        comboCertificate.readonly();
    });
</script>
<div>
    @{
        if (Model != null && Model.TrainerOtherList != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var _codeEmps='@Model.TrainerOtherList';
                    if(_codeEmps !='')
                    {
                        $.ajax({
                            type: 'POST',
                            url: '@_hrm_Hr_Service' + 'Hre_GetData/GetProfileByCodeEmps',
                            data: { codeemps: _codeEmps },
                            dataType: 'json',
                            async: false,
                            success: function(data)
                            {
                                var profileMulti = $("#TraClass_TrainerOtherListCode").data("kendoMultiSelect");
                                profileMulti.setDataSource(data);
                                profileMulti.refresh();
                            }
                        });
                    }
                });

            </script>
        }
    }
</div>
<script>
    document.getElementById("Formula").readOnly = true;
    document.getElementById("StandardScoreToPass").readOnly = true;
    document.getElementById("TopicName").readOnly = true;

</script>

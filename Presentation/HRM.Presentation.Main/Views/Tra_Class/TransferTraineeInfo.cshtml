@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Training.Models
@using System.Collections
@model HRM.Presentation.Training.Models.Tra_TraineeModel
@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ContractID = Guid.Empty;
    string aaa = ViewBag.contractID;
    if (!string.IsNullOrEmpty(aaa))
    {
        ContractID = Common.ConvertToGuid(aaa.ToString());
    }
    IList<SelectListItem> listTraineeStatus = Enum.GetValues(typeof(EnumDropDown.TraineeStatus))
 .Cast<EnumDropDown.TraineeStatus>()
 .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
 .ToList();
}


<script>
    //var Validator = CheckValidate();
    //SetFieldRequired();

    @*function onSave() {

        //  if (CheckValidate(data)) {
        onSaveAndContinue($('#form_Tra_Trainee'), '@_hrm_Hr_Service', 'api/Tra_Trainee/', 'grid_TraineeInClass', 'windowTrainee');
        // }
        return false;
    }

    function onSaveClose() {


        //  if (CheckValidate(data)) {
        onSaveAndClose($('#form_Tra_Trainee'), '@_hrm_Hr_Service', 'api/Tra_Trainee/', 'grid_TraineeInClass', 'windowTrainee');
        // }
        return false;
    }
    function onSaveDataPopUp() {


        onlySave($('#form_Tra_Trainee'), '@_hrm_Hr_Service', 'api/Tra_Trainee/', 'grid_TraineeInClass'); return false;

    }*@

    function ValidateTransferTrainee() {
        $.ajax({
            traditional: true,
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Tra_GetData/TransferTraineeForClassValidate/",
            data: { selectedIds: selectedIds, classID: $("#Class_ID").val(), tranferClassID: $("#TransferTraineeInfo_ClassID").val() },
            dataType: 'json',
            success: function (data) {
                debugger;
                if (data == "Success") {
                    TransferTrainee();
                }
                else {
                    debugger;
                    var _title = '@ConstantMessages.Notification.ToString().TranslateString()';
                    $.when(kendo.ui.ExtOkCancelDialog.show({
                        //title: _title,
                        title: "Thông Báo!",
                        message: '@ConstantMessages.DoYouWantToChooseFinishClass.TranslateString()',
                        icon: "k-ext-warning"
                    })
       ).done(function (response) {
           debugger;
           if (response.button == "OK") {
               TransferTrainee();
           } else {

           }
       });
                }
            }
        });
    };
    function TransferTrainee() {
        $.ajax({
            traditional: true,
            type: 'POST',
            url: '@_hrm_Hr_Service' + "Tra_GetData/TransferTraineeForClass/",
            data: { selectedIds: selectedIds, classID: $("#Class_ID").val(), tranferClassID: $("#TransferTraineeInfo_ClassID").val() },
            dataType: 'json',
            success: function (data) {
                debugger;
                if (data == "Success") {
                    ShowNotification('Thông Báo', '@ConstantDisplay.Hrm_Succeed.TranslateString()', "k-block k-success-colored");
                    ReadGrid('grid_TraineeInClass');
                    var window = $("#windowTransferTrainee").data("kendoWindow");
                    window.refresh().close();
                }
                @*if (data == '@Html.Raw(ConstantMessages.WarningProfileNotDependantOrgStructure.TranslateString())') {
                    ShowNotification('Thông Báo', '@ConstantMessages.WarningTraineeOverLimit.TranslateString()', "k-block k-info-colored");
                    ReadGrid('grid_TraineeInClass');
                }
                if (data == '@Html.Raw(ConstantMessages.WarningTraineeOverLimit.TranslateString())') {
                    ShowNotification('Thông Báo', '@ConstantMessages.WarningProfileNotDependantOrgStructure.TranslateString()', "k-block k-info-colored");
                    ReadGrid('grid_TraineeInClass');
                }*@
            }
        });
    };

    function ReadDataTrainneInfo() {
        debugger;
        var _TransferTraineeInfo_ClassID = $('#TransferTraineeInfo_ClassID');

        var pagram = {
            text: _TransferTraineeInfo_ClassID.data("kendoMultiSelect").input.val(),
            ClassID: $("#Class_ID").val()
        }
        return pagram;

    };
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Tra_Trainee" }))
{
    @Html.HiddenFor(model => model.ID)
    @*if (Model != null)
    {
        @Html.HiddenFor(mode => mode.ClassID)
    }
    else
    {
         @Html.HiddenFor(mode => mode.ClassID, ContractID)
    }*@
    <table>
        <tr>
            <td>
             
                <div >
                    <div style="float: left; width: 500px">
                        
                        <div id="div4" class="DivContentTitleValue">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.ClassID)
                            </div>
                            <div class="FieldValue">

                              @{
    var _Class = new MultiSelectBuilderInfo()
     {
         Name="TransferTraineeInfo_ClassID",
         DataTextField = "ClassName",
         DataValueField = "ID",
         Url = @_hrm_Hr_Service + "Tra_GetData/GetMultiClassByClassId",
         Placeholder = ConstantDisplay.HRM_Category_SelectClass.TranslateString(),
         MaxSelectedItems = 1,
         Width = 300,
         ReadData="ReadDataTrainneInfo"
         //ActionName = "doLoadTrainee"

     };
     }

                            @*@{
                            var _Class = new ComboBoxBuilderInfo
                            {
                                StyleCss = "width:300px",
                                Name = "TransferTraineeInfo_ClassID",
                                DataTextField = "ClassName",
                                DataValueField = "ID",
                                Url = _hrm_Hr_Service + "Tra_GetData/GetMultiClass",
                                Placeholder = ConstantDisplay.HRM_Category_SelectClass.TranslateString(),
                                ReadData = "ReadDataTrainneInfo"
                            };
                                }*@
                                @Html.VnrMultiSelectFor(mode => mode.ClassID, _Class)
                            </div>
                      
                        </div>
                    </div>
                    
                    </div>

</td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @*@Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Tra_Trainee", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-Tra_Trainee", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "ValidateTransferTrainee", Name = "save-close-Tra_TransferTrainee", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })

                    </div>
                </div>
            </td>
        </tr>
    </table>
}

@using HRM.Infrastructure.Security
@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.Category.Models;


@model Att_RosterSearchModel
@{
    ViewBag.Title = ConstantDisplay.HRM_Attendance_Roster_Title.TranslateString();
    Layout = null;
    //string[] valueFields = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    IList<SelectListItem> listStatus = Enum.GetValues(typeof(AttendanceDataStatus))
    .Cast<AttendanceDataStatus>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();
    IList<SelectListItem> listRosterType = Enum.GetValues(typeof(RosterType))
   .Cast<RosterType>()
   .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
   .ToList();
    IList<SelectListItem> IlistShift = ((List<CatShiftMultiModel>)ViewData["Cat_Shift"])
                                        .Select(x => new SelectListItem { Value = x.ID.ToString(), Text = x.ShiftName })
                                        .ToList();

}

<script type="text/javascript">
    var userLG = $('#UserLoginId').val();
    var checkedNodes = [];

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {

        var _status = $('#list_Status').val() != null ? $('#list_Status').val().join(',') : $('#list_Status').val();
        var _type = $('#list_RosterType').val() != null ? $('#list_RosterType').val().join(',') : $('#list_RosterType').val();
        var profileName = $('#@Html.FieldIdFor(model => model.ProfileName)').val();
        var codeEmp = $('#@Html.FieldIdFor(model => model.CodeEmp)').val();
        var type = $('#@Html.FieldIdFor(model => model.Type)').val();
        var dateStart = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateStart").val());
        var dateEnd = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateEnd").val());
        var status = $('#@Html.FieldIdFor(model => model.Status)').val();
        var strOrgIds = checkedNodes.join(',');
        var workplace = $('#@Html.FieldIdFor(model => model.WorkPlace)').val();
        return {
            ProfileName: profileName,
            CodeEmp: codeEmp,
            Type: _type,
            DateStart: dateStart,
            DateEnd: dateEnd,
            Status: _status,
            OrgStructureID: strOrgIds,
            WorkPlace: workplace,
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Xử lý show hide form tìm kiếm
        ShowHidePanel();
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);

            var grid = $('#gridAtt_Roster').data("kendoGrid");
            grid.dataSource.read();
            checkedNodes = [];
            selectedIds = [];
        });

        //Xử Lý Grid
        GridCheckbox("gridAtt_Roster");
        //Xử lý nút Delete
        $('#btnDelete').click(function (e) {
            if (selectedIds.length == 0) {
                DeleteFail();
                return;
            }

            var recordids = [];
            for (var i = 0; i < selectedIds.length; i++) {
                recordids.push(selectedIds[i]);
            }
            var IsActive = true;
            var grid = $("#gridAtt_Roster").data("kendoGrid");
            if (selectedIds.length == 1) {
                var selectedItem = grid.dataItem(grid.select());
                if (selectedItem.Status == "Duyệt" || selectedItem.Status == "E_APPROVED") {
                    ErrorMessages("Ca Làm Việc Đã Duyệt Không Được Phép Xóa");
                    return;
                }
            }
            else {
                var currentSource = grid.dataSource.data();

                $.ajax({
                    type: 'POST',
                    url: '@_hrm_Hr_Service' + 'Att_GetData/GetConfig_Allow',
                    // data: filterFieldInfo(),
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        for (var i = 0; i < currentSource.length; i++) {
                            if (selectedIds.indexOf(currentSource[i].id) != -1) {
                                if (currentSource[i].Status == "Duyệt" || currentSource[i].Status == "E_APPROVED") {
                                    if (data == true) {
                                        ErrorMessages("Dữ Liệu Có Trạng Thái Duyệt Không Được Xóa");
                                        IsActive = false;
                                        return IsActive;
                                    }
                                    else {
                                        selectedIds.splice(selectedIds.indexOf(currentSource[i].id), 1);

                                    }
                                }
                            }
                        }
                    }
                });
                if (!IsActive) {
                    return;
                }
            }
            e.preventDefault();
            if (recordids.length == selectedIds.length) {
                DeleteSelectedConfirm("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/RemoveSelected/", selectedIds, '@ConstantPermission.Att_Roster');
                return;
            }

            DeleteSelecteds("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/RemoveSelected/", selectedIds, recordids, '@ConstantPermission.Att_Roster');
            return false;
        });



        $('#btnApprove').click(function (e) {
            var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Att_Roster_Approve', false);
            if (!isAccess) {
                ShowNotificationProcessor('@string.Format(ConstantDisplay.HRM_Common_PermissionNotAllow.TranslateString(), ConstantAction.HRM_Common_Approve.TranslateString())');
                return;
            }
            if (selectedIds.length == 0) {
                ErrorMessages("Không Có Dòng Dữ Liệu Nào Được Chọn!");
                return;
            }


            var recordids = [];
            for (var i = 0; i < selectedIds.length; i++) {
                recordids.push(selectedIds[i]);
            }
            var IsActive = true;
            var grid = $("#gridAtt_Roster").data("kendoGrid");
            if (selectedIds.length == 1) {
                var selectedItem = grid.dataItem(grid.select());
                if (selectedItem.Status == "Từ Chối" || selectedItem.Status == "E_REJECTED") {
                    ErrorMessages("Trạng Thái Từ Chối Không Thể Chuyển Thành Duyệt!");
                    return;
                }
                if (selectedItem.Status == "Duyệt" || selectedItem.Status == "E_APPROVED") {
                    ErrorMessages("Dữ Liệu Đã Ở Trạng Thái Duyệt!");
                    return;
                }
            }
            else {
                var currentSource = grid.dataSource.data();

                $.ajax({
                    type: 'POST',
                    url: '@_hrm_Hr_Service' + 'Att_GetData/GetConfig_Allow',
                    // data: filterFieldInfo(),
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        for (var i = 0; i < currentSource.length; i++) {
                            if (selectedIds.indexOf(currentSource[i].id) != -1) {
                                if (currentSource[i].Status == "Từ Chối" || currentSource[i].Status == "E_REJECTED") {
                                    if (data == true) {
                                        ErrorMessages("Dữ Liệu Có Trạng Thái Từ Chối Không Thể Chuyển Thành Duyệt!");
                                        IsActive = false;
                                        return IsActive;
                                    }
                                    selectedIds.splice(selectedIds.indexOf(currentSource[i].id), 1);
                                }
                                else {

                                    if (currentSource[i].Status == "Duyệt" || currentSource[i].Status == "E_APPROVED") {
                                        selectedIds.splice(selectedIds.indexOf(currentSource[i].id), 1);
                                    }
                                }
                            }
                        }
                    }
                });
                if (!IsActive) {
                    return;
                }
            }
            if (selectedIds.length == 0) {
                ErrorMessages("Không Có Dữ Liệu Nào");
                return;
            }
            e.preventDefault();

            if (recordids.length == selectedIds.length) {
                $.when(kendo.ui.ExtOkCancelDialog.show({
                    title: "Thông Báo",
                    message: "Bạn có chắc chắn muốn Duyệt " + selectedIds.length + " dòng đã chọn?",
                    icon: "k-ext-warning",
                    width: "355px",
                    height: "105px"
                })
              ).done(function (response) {
                  debugger;
                  if (response.button == "OK") {
                      SetStatusSelectedWithPermission("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/SetStatusSelected/", selectedIds, '@AttendanceDataStatus.E_APPROVED.ToString()', userLG, 'Thay Đổi Trạng Thái Thành Công!');
                      selectedIds = [];
                      var grid = $('#gridAtt_Roster').data("kendoGrid");
                      grid.dataSource.read();
                      IsActive = false;
                      return IsActive;
                  }
                  if (response.button == "Cancel") {
                      IsActive = false;
                      return IsActive;
                  }
              });
                if (!isAccess) {
                    return;
                }
            }
            else {

                SetStatusSelecteds("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/SetStatusSelected/", selectedIds, recordids, "Duyệt", "Từ Chối", "", '@AttendanceDataStatus.E_APPROVED.ToString()', 'Thay Đổi Trạng Thái Thành Công!');
                return false;
            }
        });


        //Xử lý trường hợp những dòng dữ liệu được chọn có trường hợp không thỏa
        function SetStatusSelecteds(gridName, urlDelete, selectedIdsForMethod, recordids, statusbutton, stastusnotchange1, stastusnotchange2, status, notification) {
            var isAccess = true;
            if (selectedIds != '' && selectedIds != null) {
                $.when(kendo.ui.ExtOkCancelDialog.show({
                    title: "Thông Báo",
                    message: "Bạn có chắc chắn muốn " + statusbutton + " " + selectedIds.length + "/" + recordids.length + " dòng đã chọn? \n\n Dòng có trạng thái " + stastusnotchange1 + "," + stastusnotchange2 + " không thể chuyển sang trạng thái " + statusbutton + "!",
                    icon: "k-ext-warning",
                    width: "355px",
                    height: "105px"
                })

                    ).done(function (response) {

                        if (response.button == "OK") {
                            $.ajax({
                                traditional: true,
                                url: urlDelete,
                                data: { selectedIds: selectedIds, status: status, userApproved: userApproved },
                                type: 'POST',
                                success: function (data) {
                                    checkedNodes = [];
                                    selectedIds = [];
                                    ReadGrid(gridName);
                                    ShowNotificationProcessor(notification);
                                    selectedIds = [];
                                },
                                error: function (data) {
                                    alert('Error');
                                }
                            });
                            selectedIds = [];
                            var grid = $('#gridAtt_Roster').data("kendoGrid");
                            grid.dataSource.read();
                            return false;
                        }
                        else if (response.button == "Cancel") {
                            selectedIds = [];
                            selectedIdsForMethod = [];
                            for (var i = 0; i < recordids.length; i++) {
                                selectedIdsForMethod.push(recordids[i]);
                            }
                            selectedIds = selectedIdsForMethod;
                        }
                    });
            }
            else {

                window.ShowNotificationProcessor("Dữ Liệu Có Trạng Thái " + stastusnotchange1 + "," + stastusnotchange2 + " Không Thể Chuyển Thành Duyệt!");
                selectedIds = [];
                selectedIdsForMethod = [];
                for (var i = 0; i < recordids.length; i++) {
                    selectedIdsForMethod.push(recordids[i]);
                }
                selectedIds = selectedIdsForMethod;
            }
        }

        $('#btnReject').click(function (e) {
            var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Att_Roster_Rejected', false);
            if (!isAccess) {
                ShowNotificationProcessor('@string.Format(ConstantDisplay.HRM_Common_PermissionNotAllow.TranslateString(), ConstantAction.HRM_Common_Rejected.TranslateString())');
                return;
            }
            if (selectedIds.length == 0) {
                ErrorMessages("Không Có Dòng Dữ Liệu Nào Được Chọn!");
                return false;
            }
            $.when(kendo.ui.ExtOkCancelDialog.show({
                title: "Thông Báo",
                message: "Bạn có chắc chắn muốn Từ Chối " + selectedIds.length + " dòng đã chọn?",
                icon: "k-ext-warning",
                width: "355px",
                height: "105px"
            })
           ).done(function (response) {

               if (response.button == "OK") {
                   SetStatusSelectedWithPermission("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/SetStatusSelected/", selectedIds, '@AttendanceDataStatus.E_REJECTED.ToString()', userLG, 'Thay Đổi Trạng Thái Thành Công!');
                   selectedIds = [];
                   var grid = $('#gridAtt_Roster').data("kendoGrid");
                   grid.dataSource.read();
                   IsActive = false;
                   return IsActive;
               }
               if (response.button == "Cancel") {
                   IsActive = false;
                   return IsActive;
               }
           });
            if (!isAccess) {
                return;
            }
        });


        $('#btnWaiting').click(function (e) {

            var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Att_Roster_Wait_Approved', false);
            if (!isAccess) {
                ShowNotificationProcessor('@string.Format(ConstantDisplay.HRM_Common_PermissionNotAllow.TranslateString(), ConstantAction.HRM_Common_Waitting.TranslateString())');
                return;
            }
            if (selectedIds.length == 0) {
                ErrorMessages("Không Có Dòng Dữ Liệu Nào Được Chọn!");
                return false;
            }
            var recordids = [];
            for (var i = 0; i < selectedIds.length; i++) {
                recordids.push(selectedIds[i]);
            }
            var IsActive = true;
            var grid = $('#gridAtt_Roster').data("kendoGrid");
            if (selectedIds.length == 1) {
                var selectedItem = grid.dataItem(grid.select());
                if (selectedItem.Status == "Từ Chối" || selectedItem.Status == "E_REJECTED") {
                    ErrorMessages("Trạng Thái Từ Chối Không Thể Chuyển Thành Chờ Duyệt!");
                    return;
                }
                if (selectedItem.Status == "Duyệt" || selectedItem.Status == "E_APPROVED") {
                    ErrorMessages("Ca Làm Việc Đã Duyệt Không Được Phép Chỉnh Sửa!");
                    return;
                }
            }
            else {
                var currentSource = grid.dataSource.data();
                $.ajax({
                    type: 'POST',
                    url: '@_hrm_Hr_Service' + 'Att_GetData/GetConfig_Allow',
                    // data: filterFieldInfo(),
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        for (var i = 0; i < currentSource.length; i++) {
                            if (selectedIds.indexOf(currentSource[i].id) != -1) {
                                if (currentSource[i].Status == "Từ Chối" || currentSource[i].Status == "E_REJECTED" || currentSource[i].Status == "Duyệt" || currentSource[i].Status == "E_APPROVED") {
                                    if (data == true) {
                                        ErrorMessages("Dữ Liệu Có Trạng Thái Từ Chối Hay Duyệt Không Thể Chuyển Thành Chờ Duyệt!");
                                        IsActive = false;
                                        return IsActive;
                                    }
                                    else {
                                        selectedIds.splice(selectedIds.indexOf(currentSource[i].id), 1);
                                    }
                                }
                            }
                        }
                    }
                });
                if (!IsActive) {
                    return;
                }
            }
            if (recordids.length == selectedIds.length) {
                $.when(kendo.ui.ExtOkCancelDialog.show({
                    title: "Thông Báo",
                    message: "Bạn có chắc chắn muốn đổi trạng thái thành Chờ Duyệt " + selectedIds.length + " dòng đã chọn?",
                    icon: "k-ext-warning",
                    width: "355px",
                    height: "105px"
                })
              ).done(function (response) {

                  if (response.button == "OK") {
                      SetStatusSelectedWithPermission("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/SetStatusSelected/", selectedIds, '@AttendanceDataStatus.E_WAIT_APPROVED.ToString()', userLG, 'Thay Đổi Trạng Thái Thành Công!');
                      selectedIds = [];
                      var grid = $('#gridAtt_Roster').data("kendoGrid");
                      grid.dataSource.read();
                      IsActive = false;
                      return IsActive;
                  }
                  if (response.button == "Cancel") {
                      IsActive = false;
                      return IsActive;
                  }
              });
                if (!isAccess) {
                    return;
                }
            }
            else {

                SetStatusSelecteds("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/SetStatusSelected/", selectedIds, recordids, "Chờ Duyệt", "Từ Chối", "Duyệt", '@AttendanceDataStatus.E_WAIT_APPROVED.ToString()', 'Thay Đổi Trạng Thái Thành Công!');
                return false;
            }

        });

        $('#btnSubmit').click(function (e) {

            var isAccess = checkPermission(PrivilegeType.Create, '@ConstantPermission.Att_Roster_Submit', false);
            if (!isAccess) {
                ShowNotificationProcessor('@string.Format(ConstantDisplay.HRM_Common_PermissionNotAllow.TranslateString(), ConstantDisplay. HRM_Common_SendRequestApprove_Button.TranslateString())');
                return;
            }
            if (selectedIds.length == 0) {
                ErrorMessages("Không Có Dòng Dữ Liệu Nào Được Chọn!");
                return false;
            }

            var recordids = [];
            for (var i = 0; i < selectedIds.length; i++) {
                recordids.push(selectedIds[i]);
            }
            var IsActive = true;
            var grid = $('#gridAtt_Roster').data("kendoGrid");
            if (selectedIds.length == 1) {
                var selectedItem = grid.dataItem(grid.select());
                if (selectedItem.Status == "Từ Chối" || selectedItem.Status == "E_REJECTED") {
                    ErrorMessages("Trạng Thái Từ Chối Không Thể Chuyền Thành Yêu Cầu!");
                    return;
                }
                if (selectedItem.Status == "Chờ Duyệt" || selectedItem.Status == "E_WAIT_APPROVED") {
                    ErrorMessages("Trạng Thái Chờ Duyệt Không Thể Chuyền Thành Yêu Cầu!");
                    return;
                }
                if (selectedItem.Status == "Duyệt" || selectedItem.Status == "E_APPROVED") {
                    ErrorMessages("Ca Làm Việc Đã Duyệt Không Được Phép Chỉnh Sửa!");
                    return;
                }
            }
            else {

                var currentSource = grid.dataSource.data();
                $.ajax({
                    type: 'POST',
                    url: '@_hrm_Hr_Service' + 'Att_GetData/GetConfig_Allow',
                    // data: filterFieldInfo(),
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        for (var i = 0; i < currentSource.length; i++) {
                            if (selectedIds.indexOf(currentSource[i].id) != -1) {
                                if (currentSource[i].Status == "Từ Chối" || currentSource[i].Status == "E_REJECTED" || currentSource[i].Status == "Duyệt" || currentSource[i].Status == "E_APPROVED" || currentSource[i].Status == "Chờ Duyệt" || currentSource[i].Status == "E_WAIT_APPROVED") {
                                    if (data == true) {
                                        ErrorMessages("Dữ Liệu Có Trạng Thái Từ Chối Hay Duyệt Hay Chờ Duyệt Không Thể Chuyển Thành Yêu Cầu!");
                                        IsActive = false;
                                        return IsActive;
                                    }
                                    else {
                                        selectedIds.splice(selectedIds.indexOf(currentSource[i].id), 1);
                                    }
                                }
                            }
                        }
                    }
                });

                if (!IsActive) {
                    return;
                }
            }
            if (recordids.length == selectedIds.length) {
                $.when(kendo.ui.ExtOkCancelDialog.show({
                    title: "Thông Báo",
                    message: "Bạn có chắc chắn muốn đổi trạng thái thành Yêu Cầu " + selectedIds.length + " dòng đã chọn?",
                    icon: "k-ext-warning",
                    width: "355px",
                    height: "105px"
                })
              ).done(function (response) {

                  if (response.button == "OK") {
                      SetStatusSelectedWithPermission("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/SetStatusSelected/", selectedIds, '@AttendanceDataStatus.E_SUBMIT.ToString()', userLG, 'Thay Đổi Trạng Thái Thành Công!');
                      selectedIds = [];
                      var grid = $('#gridAtt_Roster').data("kendoGrid");
                      grid.dataSource.read();
                      IsActive = false;
                      return IsActive;
                  }
                  if (response.button == "Cancel") {
                      IsActive = false;
                      return IsActive;
                  }
              });
                if (!isAccess) {
                    return;
                }
            }
            else {

                SetStatusSelecteds("gridAtt_Roster", '@_hrm_Main_Web' + "Att_Roster/SetStatusSelected/", selectedIds, recordids, "Yêu Cầu", "Từ Chối", "Duyệt", '@AttendanceDataStatus.E_SUBMIT.ToString()', 'Thay Đổi Trạng Thái Thành Công!');
                return false;
            }
        });

        $("#btnCreate").click(function () {
            KendoRouteMapping('#Hrm_Main_Web/Att_Roster/Create/', 'Hrm_Main_Web', '@_hrm_Main_Web');
        });
        //Xử lý nút Edit

        $('#gridAtt_Roster').on("click", ".gridEditImgButton", function (e) {

            var isAccess = checkPermission(PrivilegeType.Modify, '@ConstantPermission.Att_Roster');
            if (!isAccess) {
                return;
            }

            var grid = $('#gridAtt_Roster').data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());
            if (selectedItem.Status == "Yêu Cầu" || selectedItem.Status == "E_SUBMIT") {
                KendoRouteMapping('#Hrm_Main_Web/Att_Roster/Edit/' + selectedItem.ID, 'Hrm_Main_Web', '@_hrm_Main_Web');
            } else {
                ShowNotificationProcessor('Error,Dữ Liệu Ở Trạng Thái Yêu Cầu Mới Được Chỉnh Sữa');
                return;
            }
        });

    });

    // Hàm xử lý dữ liệu được chọn trên lưới và xử lý bên dưới
    // vd: Xử lý thay đổi trạng thái
    function DoActionData(gridName, actionURL, parameter) {

        $.ajax({
            url: actionURL,
            data: { selectedIds: parameter },
            type: 'POST',
            success: function (data) {
                selectedIds = [];
                ReadGrid(gridName);
            },
            error: function (data) {
                alert('Lỗi hàm DoActionData trong hrm-8.0.js');
            }
        });
    }


    $("#btnExportAll").click(function () {
        var grid = $('#gridAtt_Roster').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Att_GetData/ExportRosterList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Att_Roster');
    });

    $("#btnExportSelected").click(function () {
        if (selectedIds.length == 0) {
            ExportSelectedFail();
            return;
        }

        var urlGetData = '@_hrm_Hr_Service' + "Att_GetData/ExportRosterSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds;
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Att_Roster');
    });

</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->

            <div class="contendSearchWidge" style="overflow:visible">
                <form id="form-search">
                    <div class="hrm_box">

                        <div id="div1">
                            <div class="FieldTitle">
                                @Html.Label(ConstantDisplay.HRM_Attendance_Roster_DateWork.TranslateString())
                            </div>
                            <div class="FieldValue">

                                @{
                                    var datepickerDateStart = new DatePickerBuilderInfo()
                                    {
                                        Value = DateTime.Today.ToShortDateString(),
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                                    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateStart, datepickerDateStart)

                                @{
                                    var datepickerDateEnd = new DatePickerBuilderInfo()
                                    {
                                        StyleCss = "width:100px;",
                                        Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                                    };
                                    if (DateTime.Now.Month + 1 > 12)
                                    {
                                        datepickerDateEnd.Value = new DateTime(DateTime.Now.Year + 1, (DateTime.Now.Month - 11), 1).AddDays(-1).ToShortDateString();
                                    }
                                    else
                                    {
                                        datepickerDateEnd.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month + 1, 1).AddDays(-1).ToShortDateString();
                                    }
                                }
                                @Html.VnrDatePickerFor(model => model.DateEnd, datepickerDateEnd)
                            </div>
                        </div>

                        <div id="div3">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(model => model.ProfileName)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.ProfileName)
                            </div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(model => model.CodeEmp)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.CodeEmp)
                            </div>
                        </div>


                    </div>
                    <div class="hrm_box">
                        <div id="div5">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.OrgStructureID)
                            </div>
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")

                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div7">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(model => model.WorkPlace)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.WorkPlace)
                            </div>
                        </div>

                    </div>
                    <div class="hrm_box">
                        <div id="div6">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Status)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _Status = new MultiSelectBuilderInfo()
                                    {
                                        Name = "list_Status",
                                        DataTextField = "Text",
                                        DataValueField = "Value",
                                        BindTo = listStatus,
                                        Placeholder = ConstantDisplay.HRM_Category_SelectStatus.TranslateString()
                                    };
                                }
                                @Html.VnrMultiSelectFor(model => model.Status, _Status)
                            </div>
                        </div>




                        <div id="div2">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.Type)
                            </div>
                            <div class="FieldValue">

                                @{
                                    var _Type = new MultiSelectBuilderInfo()
                                    {
                                        Name = "list_RosterType",
                                        DataTextField = "Text",
                                        DataValueField = "Value",
                                        BindTo = listRosterType,
                                        Placeholder = ConstantDisplay.HRM_Attendance_SelectType.TranslateString()
                                    };
                                }
                                @Html.VnrMultiSelectFor(model => model.Type, _Type)
                            </div>
                        </div>
                    </div>
                </form>
            </div>

        </div>
    </div>

</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float: right">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnWaiting", Content = ConstantAction.HRM_Common_Waitting.TranslateString(), ImageUrl = ConstantPath.IconApprovePath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnApprove", Content = ConstantAction.HRM_Common_Approve.TranslateString(), ImageUrl = ConstantPath.IconApprovePath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnReject", Content = ConstantAction.HRM_Common_Reject.TranslateString(), ImageUrl = ConstantPath.IconRejectPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSubmit", Content = ConstantDisplay.HRM_Common_SendRequestApprove_Button.TranslateString(), ImageUrl = ConstantPath.IconConfirmPath })
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeRoster", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<script>
    function clickProfile(id) {

        KendoRouteMapping('#Hrm_Hre_Web/GeneralProfile/Index/' + id, 'Hrm_Hre_Web', '@_hrm_Main_Web');
    }
</script>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Attendance.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridAtt_Roster_Grid_Name + "__Att_Roster_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridAtt_Roster_Grid_Name,
            ReadActionUrl = @_hrm_Hr_Service + "Att_GetData/GetRosterList/",
            ReadData = "filterFieldInfo",
            EventDataBound = "changePageGird",
            Batch = true,

        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ForeignKey = new Dictionary<object, object[]>()
            {

                {Att_RosterModel.FieldNames.Type,new object[]{ "Value", "Text", listRosterType, ConstantDisplay.HRM_Attendance_Roster_Type,""}},
                {Att_RosterModel.FieldNames.Status,new object[]{ "Value", "Text", listStatus, ConstantDisplay.HRM_Attendance_Roster_Status,""}},
                {"MonShiftID",new object[] { "Value", "Text", IlistShift, ConstantDisplay.HRM_Attendance_Roster_MonShiftID,""}},
                {"TueShiftID",new object[] { "Value", "Text", IlistShift, ConstantDisplay.HRM_Attendance_Roster_TueShiftID,""}},
                {"WedShiftID",new object[] { "Value", "Text", IlistShift, ConstantDisplay.HRM_Attendance_Roster_WedShiftID,""}},
                {"ThuShiftID",new object[] { "Value", "Text", IlistShift, ConstantDisplay.HRM_Attendance_Roster_ThuShiftID,""}},
                {"FriShiftID",new object[] { "Value", "Text", IlistShift, ConstantDisplay.HRM_Attendance_Roster_FriShiftID,""}},
                {"SatShiftID",new object[] { "Value", "Text", IlistShift, ConstantDisplay.HRM_Attendance_Roster_SatShiftID,""}},
                {"SunShiftID",new object[] { "Value", "Text", IlistShift, ConstantDisplay.HRM_Attendance_Roster_SunShiftID,""}},
            };




            grid.ValueFields = new string[]
            {
                Att_RosterModel.FieldNames.CodeEmp,
                Att_RosterModel.FieldNames.ProfileName,
                Att_RosterModel.FieldNames.DateStart,
                Att_RosterModel.FieldNames.DateEnd,
                Att_RosterModel.FieldNames.Type,
               "MonShiftID",
               "TueShiftID",
               "WedShiftID",
               "ThuShiftID",
               "FriShiftID",
               "SatShiftID",
               "SunShiftID",
                Att_RosterModel.FieldNames.Status,
                Att_RosterModel.FieldNames.UserApproveIDName,
                Att_RosterModel.FieldNames.UserApprove2IDName,
                "Comment",
            };
            grid.SizeFields = new Dictionary<string, int>()
            {
                 {Att_RosterModel.FieldNames.CodeEmp, 70},
                {Att_RosterModel.FieldNames.ProfileName, 135},

                {Att_RosterModel.FieldNames.DateStart, 95},
                {Att_RosterModel.FieldNames.DateEnd, 100},
                {Att_RosterModel.FieldNames.Type, 100},
                {"MonShiftID", 76},
                {"TueShiftID", 76},
                {"WedShiftID", 76},
                {"ThuShiftID", 76},
                {"FriShiftID", 76},
                {"SatShiftID", 76},
                {"SunShiftID", 76},
                {Att_RosterModel.FieldNames.Status, 100},
                {Att_RosterModel.FieldNames.UserApproveIDName, 115},
                {Att_RosterModel.FieldNames.UserApprove2IDName, 118},
                {"Comment", 150},
                
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Att_RosterModel.FieldNames.CodeEmp, ConstantDisplay.HRM_HR_Profile_CodeEmp},
                {Att_RosterModel.FieldNames.ProfileName, ConstantDisplay.HRM_HR_Profile_ProfileName},
                {Att_RosterModel.FieldNames.DateStart, ConstantDisplay.HRM_Attendance_Roster_DateStart},
                {Att_RosterModel.FieldNames.DateEnd, ConstantDisplay.HRM_Attendance_Roster_DateEnd},
                {Att_RosterModel.FieldNames.Type, ConstantDisplay.HRM_Attendance_Roster_Type},
                {"MonShiftID", ConstantDisplay.HRM_Attendance_Roster_MonShiftName},
                {"TueShiftID", ConstantDisplay.HRM_Attendance_Roster_TueShiftName},
                {"WedShiftID", ConstantDisplay.HRM_Attendance_Roster_WedShiftName},
                {"ThuShiftID", ConstantDisplay.HRM_Attendance_Roster_ThuShiftName},
                {"FriShiftID", ConstantDisplay.HRM_Attendance_Roster_FriShiftName},
                {"SatShiftID", ConstantDisplay.HRM_Attendance_Roster_SatShiftName},
                {"SunShiftID", ConstantDisplay.HRM_Attendance_Roster_SunShiftName},
                {Att_RosterModel.FieldNames.Status, ConstantDisplay.HRM_Attendance_Roster_Status},
                {Att_RosterModel.FieldNames.UserApproveIDName, ConstantDisplay.HRM_Attendance_Roster_UserApproveID},
                {Att_RosterModel.FieldNames.UserApprove2IDName, ConstantDisplay.HRM_Attendance_Roster_UserApproveID2},
            };
            grid.DisableFields = new string[]
                {
                     Att_RosterModel.FieldNames.CodeEmp,
                Att_RosterModel.FieldNames.ProfileName,

                Att_RosterModel.FieldNames.DateStart,
                Att_RosterModel.FieldNames.DateEnd,
                Att_RosterModel.FieldNames.Type,
                Att_RosterModel.FieldNames.UserApproveIDName,
                Att_RosterModel.FieldNames.UserApprove2IDName,
                };
            grid.HyperlinkFields = new Dictionary<string, string>()
            {
                {Att_RosterModel.FieldNames.ProfileName,"clickProfile,ProfileID"},
            };
            grid.ShowSaveButton = true;
            grid.ShowEditIcon = true;
            grid.EditActionUrl = ConstantPathWeb.Hrm_Main_Web + "Att_Roster/CreateInlineAdjust/";
            grid.EditMode = GridEditMode.InCell;
            grid.EvenEdit = "onEdit";
            // grid.Batch = true;
            //grid.ReadActionUrl = ConstantPathWeb.Hrm_Hre_Service + "Att_GetData/GetComputeWorkdayAdjust";
            // grid.ReadData = "filterFieldInfo";
            //grid.Navigatable = true;
            // grid.EventDataBound = "changePageGird";
            // grid.EventSaveChanges = "SaveChangeOnGrid";


            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
    //var grid = new GridBuilderInfo
    //{
    //    Name = "gridAtt_Roster",
    //    ValueFields = valueFields,
    //    SizeFields = sizeFields,
    //    DisplayFields = displayFields,
    //    ReadActionUrl = @_hrm_Hr_Service + "Att_GetData/GetRosterList/",
    //    ReadData = "filterFieldInfo",
    //    EventDataBound = "changePageGird",
    //    ForeignKey = foreignKey,
    @*//    HyperlinkFields = hyperlinkFields
        };*@
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<HRM.Presentation.Attendance.Models.Att_RosterModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeRoster", "Att_RosterModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>

@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)





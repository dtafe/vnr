@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.NumericTextBox
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Category.Models

@using System.Collections;
@model HRM.Presentation.Category.Models.CatContractTypeModel

@Html.ValidationSummary(false)
@Html.AntiForgeryToken()

@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Cat_Service = ConstantPathWeb.Hrm_Cat_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _hrm_Att_Service = ConstantPathWeb.Hrm_Att_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    IList<SelectListItem> listTypeContract1 = Enum.GetValues(typeof(EnumDropDown.TypeContract))
   .Cast<EnumDropDown.TypeContract>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p=>p.Text)
   .ToList();

    IList<SelectListItem> listUnitType1 = Enum.GetValues(typeof(EnumDropDown.UnitType))
   .Cast<EnumDropDown.UnitType>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() }).OrderBy(p=>p.Text)
   .ToList();
}
@{
    var windowTranferTrainee = new WindowBuilderInfo
    {
        Name = "windowConfigIns",
        Visible = false,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),

        LoadContentFrom = _hrm_Main_Web + "Cat_ContractType/InsuranceConfigInfo"
    };
}
@(Html.VnrWindow(windowTranferTrainee))
<script>
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Cat_ContractType_ConfigIns_Title.TranslateString())';
    //  var data = SetCharacteFieldRequired();
    //SetFieldRequiredByScreenName('Cat_ContractType');
    SetFieldRequired();
    $("#btnConfigIns").click(function () {
        PopUpCreate("windowConfigIns", titleCreatePopUp, '@HRM.Infrastructure.Security.ConstantPermission.Sal_ItemForShop');
    });
</script>

<span id="notification" style="display:none;"></span>
<div class="VnRMain">
    <table style="width:100%;">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">

                    <div style="width:450px; display:block; float:left">
                        <div id="div12">
                            <div id="div1">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Code)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var _ContractTypeCode = new TextBoxBuilderInfo()
                                        {
                                            Name = "ContractType_Code",
                                            CssStyle = "width:200px"
                                        };
                                        if (Model != null)
                                        {
                                            _ContractTypeCode.Value = Model.Code == null ? string.Empty : Model.Code;
                                        }
                                    }
                                    @Html.VnrTextBoxFor(mode => mode.Code, _ContractTypeCode)
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div id="div2">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ContractTypeName)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextBoxFor(mode => mode.ContractTypeName)
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                        </div>
                        <div id="div22">
                            <div id="div3">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Type)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var TypeContract1 = new DropDownListBuilderInfo()
                                        {
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = listTypeContract1
                                        };
                                    }
                                    @Html.VnrDropDownListFor(model => model.Type, TypeContract1)
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div id="div4">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ValueTime)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var ValueTime = new NumericTextBoxBuilderInfo<double>()
                                        {
                                            Format = "n0",
                                          StyleCss = "Width: 80px"
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.ValueTime, ValueTime))
                                    @{
                                        var UnitType1 = new DropDownListBuilderInfo()
                                        {
                                            DataTextField = "Text",
                                            DataValueField = "Value",
                                            BindTo = listUnitType1,
                                            OptionLabel = null,
                                          StyleCss = "Width: 115px"
                                        };
                                    }
                                    @Html.VnrDropDownListFor(model => model.UnitTime, UnitType1)
                                </div>
                                <div style="clear: both;"></div>
                            </div>

                            <div id="div2">
                                <div class="FieldTitle150">
                                    @Html.VnrLabel(ConstantDisplay.HRM_Category_ContractType_DateEnd_Title.TranslateString())
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrRadioButtonFor(mode => mode.NoneEndContract, "NoneEndContract")
                                    @Html.VnrLabelFor(mode => mode.NoneEndContract)

                                    <div>
                                        @Html.VnrRadioButtonFor(mode => mode.ComputeEndDateByFomular, "NoneEndContract")
                                        @Html.VnrLabelFor(mode => mode.ComputeEndDateByFomular)
                                    </div>
                                   

                                </div>
                            </div>
                            <div id="div8">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.Formula)
                                </div>
                                <div class="FieldValue">
                                    @Html.VnrTextAreaFor(mode => mode.Formula, "min-Width: 250px")
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div id="div6">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ContractNextID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        IEnumerable valueContractTypeName = new string[] { };
                                        if (Model != null)
                                        {
                                            valueContractTypeName = new[] { new { ContractTypeName = Model.ContractNextName, ID = Model.ContractNextID } };
                                        }
                                    }
                                    @{
                                        var multiContractNextID = new MultiSelectBuilderInfo()
                                        {
                                            DataTextField = CatContractTypeModel.FieldNames.ContractTypeName,
                                            DataValueField = CatContractTypeModel.FieldNames.ID,
                                            Url = @_hrm_Cat_Service + "Cat_GetData/GetMultiContractType",
                                            MaxSelectedItems = 1,
                                            Value = valueContractTypeName,
                                            Width = 200
                                        };
                                    }
                                    @(Html.VnrMultiSelectFor(mode => mode.ContractNextID, multiContractNextID))
                                </div>
                                <div style="clear: both;"></div>
                            </div>
                            <div id="div7">
                                <div class="FieldTitle150">
                                    @Html.VnrLabelFor(mode => mode.ExportID)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        IEnumerable valueExportName = new string[] { };
                                        if (Model != null)
                                        {
                                            valueExportName = new[] { new { ExportName = Model.ExportName, ID = Model.ExportID } };
                                        }
                                    }
                                    @{
                                        var ExportNameID = new MultiSelectBuilderInfo()
                                        {
                                            DataTextField = "ExportName",
                                            DataValueField = "ID",
                                            Url = _hrm_Cat_Service + "Cat_GetData/GetMultiExportWord",
                                            Value = valueExportName,
                                            MaxSelectedItems = 1,
                                            Width = 200
                                        };
                                    }
                                    @(Html.VnrMultiSelectFor(mode => mode.ExportID, ExportNameID))
                                </div>
                                <div style="clear: both;"></div>
                            </div>

                        </div>

                    </div>
                    <div style="width: 550px; display: block; float: left">
                        
                        
                        <div id="div2">
                            <div class="FieldTitle170">
                                @Html.VnrLabel(ConstantDisplay.HRM_Category_ContractType_Insurance_Title.TranslateString())
                            </div>
                            <div class="FieldValue">
                                <div>
                                    @Html.VnrRadioButtonFor(mode => mode.NoneTypeInsuarance, "NoneTypeInsuarance")
                                    @Html.VnrLabelFor(mode => mode.NoneTypeInsuarance)
                                    <div>
                                        @Html.VnrLabelFor(mode => mode.IsSocialInsurance)
                                        @{
                                            var IsSocialInsurance = new CheckBoxBuilderInfo()
                                            {

                                            };
                                            if (Model != null)
                                            {
                                                if (Model.IsSocialInsurance == true)
                                                {
                                                    IsSocialInsurance.Value = true;
                                                }
                                                else
                                                {
                                                    IsSocialInsurance.Value = false;
                                                }
                                            }
                                        }
                                        @(Html.VnrCheckBoxFor(model => model.IsSocialInsurance, IsSocialInsurance))

                                        @Html.VnrLabelFor(mode => mode.IsHealthInsurance)
                                        @{
                                            var IsHealthInsurance = new CheckBoxBuilderInfo()
                                            {

                                            };
                                            if (Model != null)
                                            {
                                                if (Model.IsHealthInsurance == true)
                                                {
                                                    IsHealthInsurance.Value = true;
                                                }
                                                else
                                                {
                                                    IsHealthInsurance.Value = false;
                                                }
                                            }
                                        }
                                        @(Html.VnrCheckBoxFor(model => model.IsHealthInsurance, IsHealthInsurance))

                                        @Html.VnrLabelFor(mode => mode.IsUnEmployInsurance)
                                        @{
                                            var IsUnEmployInsurance = new CheckBoxBuilderInfo()
                                            {

                                            };
                                            if (Model != null)
                                            {
                                                if (Model.IsUnEmployInsurance == true)
                                                {
                                                    IsUnEmployInsurance.Value = true;
                                                }
                                                else
                                                {
                                                    IsUnEmployInsurance.Value = false;
                                                }
                                            }
                                        }
                                        @(Html.VnrCheckBoxFor(model => model.IsUnEmployInsurance, IsUnEmployInsurance))
                                    </div>
                                </div>
                                

                                <div>
                                    @Html.VnrRadioButtonFor(mode => mode.NoneTypeInsuaranceAdvance, "NoneTypeInsuarance")
                                    @Html.VnrLabelFor(mode => mode.NoneTypeInsuaranceAdvance)
                                    <div id="advanceConfig" hidden="hidden">
                                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnConfigIns", Content = ConstantAction.HRM_Common_ConfigIns.TranslateString(), ImageUrl = "/Content/images/icons/submenu/menu/Config-icon.png" })
                                    </div>
                                </div>


                            </div>
                        </div>
                        <div id="div8">
                            <div class="FieldTitle170">
                                @Html.VnrLabelFor(mode => mode.Description)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextAreaFor(mode => mode.Description, "min-Width: 250px")
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div8">
                        </div>

                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>
        </tbody>
    </table>
    @Html.HiddenFor(mode => mode.ID)
</div>

<div>
    @{
        if(Model != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var _outValue = '@Model.NoneEndContract';
                    var _intValue = '@Model.ComputeEndDateByFomular';
                    var _outInsValue = '@Model.NoneTypeInsuarance';
                    var _inInsValue = '@Model.NoneTypeInsuaranceAdvance';

                    var _out = document.getElementById("NoneEndContract");
                    var _in = document.getElementById("ComputeEndDateByFomular");

                    var _outIns = document.getElementById("NoneTypeInsuarance");
                    var _inIns = document.getElementById("NoneTypeInsuaranceAdvance");


                    if (_outValue == 'True') {
                        _out.checked = true;
                    } else
                    {
                        _out.checked = false;
                    }

                    if (_intValue == 'True') {
                        _in.checked = true;
                    } else
                    {
                        _in.checked = false;
                    }

                    if (_outInsValue == 'True') {
                        _outIns.checked = true;
                    } else {
                        _outIns.checked = false;
                    }

                    if (_inInsValue == 'True') {
                        $("#advanceConfig").show();
                        _inIns.checked = true;
                    } else {
                        $("#advanceConfig").hide();
                        _inIns.checked = false;
                    }


                });
            </script>
        }
    }
</div>
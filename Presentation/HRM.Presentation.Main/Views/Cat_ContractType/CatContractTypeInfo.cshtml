@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models
@using System.Collections;
@model HRM.Presentation.Category.Models.CatContractTypeModel


@{
    ViewBag.Title = "CatContractTypeInfo";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;

    IList<SelectListItem> listTypeContract1 = Enum.GetValues(typeof(EnumDropDown.TypeContract))
   .Cast<EnumDropDown.TypeContract>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();

    IList<SelectListItem> listUnitType1 = Enum.GetValues(typeof(EnumDropDown.UnitType))
   .Cast<EnumDropDown.UnitType>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}

<script>
    // SetFieldRequired();
    function onSave() {
        //   if (!checkDuplicationCode()) {
        onSaveAndContinue($('#form_cat_ContractType'), '@_hrm_Hr_Service', 'api/CatContractType/', 'gridCatContractType', 'windowCatContractType');

        // }
        return false;
    }

    function onSaveClose() {

        //  if (!checkDuplicationCode()) {
        onSaveAndClose($('#form_cat_ContractType'), '@_hrm_Hr_Service', 'api/CatContractType/', 'gridCatContractType', 'windowCatContractType');

        // }
        return false;
    }
    function onSaveDataPopUp() {

        //   if (!checkDuplicationCode()) {
        onlySave($('#form_cat_ContractType'), '@_hrm_Hr_Service', 'api/CatContractType/', 'gridCatContractType'); return false;
        //   }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_ContractType" }))
{
    @Html.HiddenFor(model => model.ID)


    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
    var _ContractTypeCode = new TextBoxBuilderInfo()
    {
        Name = "ContractType_Code",
        CssStyle = "width:250px"
    };
    if (Model != null)
    {
        _ContractTypeCode.Value = Model.Code == null ? string.Empty : Model.Code;
    }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code, _ContractTypeCode)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ContractTypeName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.ContractTypeName)
                    </div>
                </div>
                
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Type)
                    </div>
                    <div class="FieldValue">
                        @{
    var TypeContract1 = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listTypeContract1
    };
                        }
                        @Html.VnrDropDownListFor(model => model.Type, TypeContract1)
                    </div>
                </div>

                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ValueTime)
                    </div>
                    <div class="FieldValue">
                        @{
    var ValueTime = new NumericTextBoxBuilderInfo<double>()
    {
        Format = "n0",
        StyleCss = "Width: 100px"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.ValueTime, ValueTime))
                        @{
    var UnitType1 = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listUnitType1,
        StyleCss = "Width: 100px"
    };
                        }
                        @Html.VnrDropDownListFor(model => model.UnitTime, UnitType1)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ContractNextID)
                    </div>
                    <div class="FieldValue">
                        @{
                                IEnumerable valueContractTypeName = new string[] { };
                                if (Model != null)
                                {
                                    valueContractTypeName = new[] { new { ContractTypeName = Model.ContractTypeName, ID = Model.ContractNextID } };
                                }
                        }
                        @{
                            var multiContractNextID = new MultiSelectBuilderInfo()
                            {
                                DataTextField = CatContractTypeModel.FieldNames.ContractTypeName,
                                DataValueField = CatContractTypeModel.FieldNames.ID,
                                Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiContractType",
                                MaxSelectedItems = 1,
                                Value = valueContractTypeName,
                                Width = 200
                            };
                        }
                        @(Html.VnrMultiSelectFor(mode => mode.ContractNextID, multiContractNextID))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ExportID)
                    </div>
                    <div class="FieldValue">
                        @{
                         IEnumerable valueExportName = new string[] { };
                            if (Model != null)
                            {
                                valueExportName = new[] { new { ExportName = Model.ExportName, ID = Model.ExportID } };
                            }
                        }
                        @{
                            var ExportNameID = new MultiSelectBuilderInfo()
                            {
                                DataTextField = "ExportName",
                                DataValueField = "ID",
                                Url = _hrm_Hr_Service + "Cat_GetData/GetMultiExportWord",
                                Value = valueExportName,
                                MaxSelectedItems = 1,
                                Width = 200
                            };
                        }
                        @(Html.VnrMultiSelectFor(mode => mode.ExportID, ExportNameID))
                    </div>
                </div>

                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Description, "min-Width: 250px")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-ContractType", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catContractType", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catContractType", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models
@using System.Collections;
@model HRM.Presentation.Category.Models.Cat_InsuranceConfigModel


@{
    ViewBag.Title = "CatContractTypeInfo";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;

    IList<SelectListItem> listTypeContract1 = Enum.GetValues(typeof(EnumDropDown.TypeContract))
   .Cast<EnumDropDown.TypeContract>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();

    IList<SelectListItem> listUnitType1 = Enum.GetValues(typeof(EnumDropDown.UnitType))
   .Cast<EnumDropDown.UnitType>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}

<script>
    // SetFieldRequired();
    function onSave() {
        var _IsSocial = document.getElementById("IsSocial");
        if (_IsSocial != null && _IsSocial.checked) {
            $("#IsSocial").val("true");
        } else {
            $("#IsSocial").val("false");
        }

        var _IsHealth = document.getElementById("IsHealth");
        if (_IsHealth != null && _IsHealth.checked) {
            $("#IsHealth").val("true");
        } else {
            $("#IsHealth").val("false");
        }

        var _IsUnEmploy = document.getElementById("IsUnEmploy");
        if (_IsUnEmploy != null && _IsUnEmploy.checked) {
            $("#IsUnEmploy").val("true");
        } else {
            $("#IsUnEmploy").val("false");
        }
        //   if (!checkDuplicationCode()) {
        onSaveAndContinue($('#form_cat_Insurance'), '@_hrm_Hr_Service', 'api/Cat_InsuranceConfig/', 'gridCatContractType', 'windowConfigIns');

        // }
        return false;
    }

    function onSaveClose() {
        var _IsSocial = document.getElementById("IsSocial");
        if (_IsSocial != null && _IsSocial.checked) {
            $("#IsSocial").val("true");
        } else {
            $("#IsSocial").val("false");
        }

        var _IsHealth = document.getElementById("IsHealth");
        if (_IsHealth != null && _IsHealth.checked) {
            $("#IsHealth").val("true");
        } else {
            $("#IsHealth").val("false");
        }

        var _IsUnEmploy = document.getElementById("IsUnEmploy");
        if (_IsUnEmploy != null && _IsUnEmploy.checked) {
            $("#IsUnEmploy").val("true");
        } else {
            $("#IsUnEmploy").val("false");
        }
        //  if (!checkDuplicationCode()) {
        onSaveAndClose($('#form_cat_Insurance'), '@_hrm_Hr_Service', 'api/Cat_InsuranceConfig/', 'gridCatContractType', 'windowConfigIns');

        // }
        return false;
    }
    function onSaveDataPopUp() {
        var _IsSocial = document.getElementById("IsSocial");
        if (_IsSocial != null && _IsSocial.checked) {
            $("#IsSocial").val("true");
        } else {
            $("#IsSocial").val("false");
        }

        var _IsHealth = document.getElementById("IsHealth");
        if (_IsHealth != null && _IsHealth.checked) {
            $("#IsHealth").val("true");
        } else {
            $("#IsHealth").val("false");
        }

        var _IsUnEmploy = document.getElementById("IsUnEmploy");
        if (_IsUnEmploy != null && _IsUnEmploy.checked) {
            $("#IsUnEmploy").val("true");
        } else {
            $("#IsUnEmploy").val("false");
        }
        //   if (!checkDuplicationCode()) {
        onlySave($('#form_cat_Insurance'), '@_hrm_Hr_Service', 'api/Cat_InsuranceConfig/', 'gridCatContractType'); return false;
        //   }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_Insurance" }))
{
    @Html.HiddenFor(model => model.ID)


    <table>
        <tr>
            <td>
                <div class="DivContentTitleValue" id="div33">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.ContractTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _ContractTypeID = new ComboBoxBuilderInfo()
     {
         DataTextField = "ContractTypeName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiContractType",
         Value = Model == null ? string.Empty : Model.ContractTypeID.ToString(),
     };
                        }
                        @(Html.VnrComboBoxFor(mode => mode.ContractTypeID, _ContractTypeID).Text(Model == null ? string.Empty : Model.ContractTypeName))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabel(ConstantDisplay.HRM_NumberOfMonthIn.TranslateString())
                    </div>
                    <div class="FieldValue">
                        @{
    var FromMonth = new NumericTextBoxBuilderInfo<int>() 
    { 
    Placeholder = ConstantDisplay.HRM_INS_RptD02TS_FromMonth.TranslateString()
    };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.FromMonth, FromMonth)
                        @{
    var ToMonth = new NumericTextBoxBuilderInfo<int>()
    {
        Placeholder = ConstantDisplay.HRM_INS_RptD02TS_ToMonth.TranslateString()
    };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.ToMonth, ToMonth)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                    </div>
                    <div class="FieldValue">
                     
                        
                            @{
    var IsHealth = new CheckBoxBuilderInfo()
    {
        
    };
    if (Model != null)
    {
        if (Model.IsHealth == true)
        {
            IsHealth.Value = true;
        }
        else
        {
            IsHealth.Value = false;
        }
    }

                            }
                            @Html.VnrCheckBoxFor(model => model.IsHealth, IsHealth)
                            @Html.VnrLabel(ConstantDisplay.HRM_Category_ContractType_IsHealthInsurance.TranslateString())
                        
                        
                            @{
    var IsSocial = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.IsSocial == true)
        {
            IsSocial.Value = true;
        }
        else
        {
            IsSocial.Value = false;
        }
    }

                            }
                            @Html.VnrCheckBoxFor(model => model.IsSocial, IsSocial)
                            @Html.VnrLabel(ConstantDisplay.HRM_Sal_InsuranceSalry_IsSocialIns.TranslateString())
                        
                      
                            @{
    var IsUnEmploy = new CheckBoxBuilderInfo()
    {

    };
    if (Model != null)
    {
        if (Model.IsUnEmploy == true)
        {
            IsUnEmploy.Value = true;
        }
        else
        {
            IsUnEmploy.Value = false;
        }
    }
                            }
                            @Html.VnrCheckBoxFor(model => model.IsUnEmploy, IsUnEmploy)
                            @Html.VnrLabel(ConstantDisplay.HRM_Sal_InsuranceSalry_IsUnimploymentIns.TranslateString())
                        
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-InsuranceConfig", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-InsuranceConfig", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-InsuranceConfig", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

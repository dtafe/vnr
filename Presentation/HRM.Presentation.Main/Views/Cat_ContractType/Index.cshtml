@using HRM.Infrastructure.Utilities

@using HRM.Infrastructure.Security
@model HRM.Presentation.Category.Models.CatContractTypeSearchModel

@{
    ViewBag.Title = HRM.Infrastructure.Utilities.ConstantDisplay.HRM_Category_ContractType;
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    string[] valueFields = null;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    
}
@{
    IList<SelectListItem> listTypeContract = Enum.GetValues(typeof(EnumDropDown.TypeContract))
   .Cast<EnumDropDown.TypeContract>()
   .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
   .ToList();
    var userLoginName = Session[SessionObjects.LoginUserName];
}
<script type="text/javascript">
    //Biến để lưu id của các dòng đã check chọn
    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Category_ContractType_Update_Title.TranslateString())';
    var titleCreatePopUp = '@Html.Raw(ConstantDisplay.HRM_Category_ContractType_Create_Title.TranslateString())';
     
    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        return {
            UserName: '@userLoginName',
            ContractTypeCode: $("#SCode").val(),
            ContractTypeName: $("#SContractTypeName").val(),
            Type: $("#dropdownType").val(),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }

    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        ShowHidePanel();
        //jumpAnchor("anchor");
        $("#btnSearch").click(function () {
            var grid = $('#gridCatContractType').data("kendoGrid");
            grid.dataSource.read();
        });

        //Xử lý nút Edit
        var url = '@_hrm_Main_Web' + "Cat_ContractType/CatContractTypeInfo/";
        @*EditGridPopUp("gridCatContractType", "windowCatContractType", url, '@ConstantPermission.Cat_ContractType', titleEditPopUp);*@
        EditGridNewPage("gridCatContractType", '#Hrm_Main_Web/Cat_ContractType/Edit/', 'Hrm_Main_Web', '@_hrm_Main_Web');
    });

    $("#btnCreate").click(function () {
        KendoRouteMapping('#Hrm_Main_Web/Cat_ContractType/Create/', 'Hrm_Main_Web', '@_hrm_Main_Web');
    });


    //Xử Lý Grid
    GridCheckbox("gridCatContractType");
    //Xử lý nút Delete
    $('#btnDelete').click(function (e) {
        if (selectedIds == "") {
            DeleteFail();
            return;
        }
        e.preventDefault();

        DeleteSelected("gridCatContractType", '@_hrm_Main_Web' + "Cat_ContractType/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Cat_ContractType');

        return false;
    });

    //Export
    $("#btnExportSelected").click(function () {
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportOrgStrucTypeSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Cat_ContractType');
    });

    $("#btnExportAll").click(function () {
        var grid = $('#gridCatContractType').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportAllContractTypeList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Cat_ContractType');
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div id="div1">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.ContractTypeName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBox("SContractTypeName", "width:200px")
                    </div>
                </div>
                <div id="div2">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.ContractTypeCode)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBox("SCode", "width:200px")
                    </div>
                </div>
                
                <div id="div3">
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Type)
                    </div>
                    <div class="FieldValue">
                        @{
                            var dropdownType = new DropDownListBuilderInfo()
                            {
                                Name = "dropdownType",
                                DataTextField = "Text",
                                DataValueField = "Value",
                                BindTo = listTypeContract,
                                OptionLabel = @ConstantDisplay.HRM_Category_SelectContractType.TranslateString(),
                                StyleCss = "width:200px"
                            };
                        }
                        @(Html.VnrDropDownListFor(mode => mode.Type, dropdownType))
                        @Html.ValidationMessageFor(model => model.Type)
                    </div>
                    <div style="clear: both;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float: right">
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnContractType", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridCatContractType_Name + "__Cat_ContractType_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridCatContractType_Name,
            ReadActionUrl = @_hrm_Hr_Service + "Cat_GetData/GetContractTypeList/",
            EventDataBound = "changePageGird",
            ReadData = "filterFieldInfo"
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
            {
                CatContractTypeModel.FieldNames.Code,
                CatContractTypeModel.FieldNames.ContractTypeName,
                CatContractTypeModel.FieldNames.TypeView,
                CatContractTypeModel.FieldNames.ValueTime,
                CatContractTypeModel.FieldNames.UnitTimeView,
                CatContractTypeModel.FieldNames.ContractNextName,
            };

            grid.SizeFields = new Dictionary<string, int>()
            {
                {CatContractTypeModel.FieldNames.Code,120},
                {CatContractTypeModel.FieldNames.ContractTypeName,210},
                {CatContractTypeModel.FieldNames.TypeView,120},
                {CatContractTypeModel.FieldNames.ValueTime,115},
                {CatContractTypeModel.FieldNames.UnitTimeView,115},
                {CatContractTypeModel.FieldNames.ContractNextName,120}
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {CatContractTypeModel.FieldNames.Code,ConstantDisplay.HRM_Category_ContractType_Code},
                {CatContractTypeModel.FieldNames.ContractTypeName,ConstantDisplay.HRM_Category_ContractType_ContractTypeName},
                {CatContractTypeModel.FieldNames.TypeView,ConstantDisplay.HRM_Category_ContractType_Type},
                {CatContractTypeModel.FieldNames.ValueTime,ConstantDisplay.HRM_Category_ContractType_ValueTime},
                {CatContractTypeModel.FieldNames.UnitTimeView,ConstantDisplay.HRM_Category_ContractType_UnitTime},
                {CatContractTypeModel.FieldNames.ContractNextName,ConstantDisplay.HRM_Category_ContractType_ContractNextID}
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<CatContractTypeModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnContractType", "CatContractTypeModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
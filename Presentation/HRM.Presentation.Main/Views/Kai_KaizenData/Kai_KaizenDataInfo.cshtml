@using System.Collections
@using HRM.Infrastructure.Utilities

@using HRM.Presentation.UI.Controls.Kendo
@model HRM.Presentation.Payroll.Models.Kai_KaizenDataModel

@{
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ProfileID = Guid.Empty;
    string profileid = ViewBag.profileID;
    if (!string.IsNullOrEmpty(profileid))
    {
        ProfileID = Common.ConvertToGuid(profileid.ToString());
    }
    Layout = null;
}
<script>
    SetFieldRequired();
    function onSaveKaizenData() {
        onSaveAndContinue($('#form_KaizenData_Model'), '@_hrm_Hr_Service', 'api/Kai_KaizenData/', 'grid_Kai_KaizenData', 'windowKaiKaizenData');
        return false;
    };
    function onSaveCloseKaizenData() {
        onSaveAndClose($('#form_KaizenData_Model'), '@_hrm_Hr_Service', 'api/Kai_KaizenData/', 'grid_Kai_KaizenData', 'windowKaiKaizenData');
        return false;
    };
    function onSaveDataPopUpKaizenData() {
        onlySave($('#form_KaizenData_Model'), '@_hrm_Hr_Service', 'api/Kai_KaizenData/', 'grid_Kai_KaizenData');
        return false;
    };

    function ChangeAccumulate() {
        var Accumulate = $("#kaizendata_Accumulate").data('kendoNumericTextBox');
        var AccumulateRevice = $("#kaizendata_AccumulateRevice").data('kendoNumericTextBox');
        AccumulateRevice.value(Accumulate.value());
    };

    function SumTotalMark() {
        var MarkIdea = $("#kaizendata_MarkIdea").data('kendoNumericTextBox');
        var MarkPerform = $("#kaizendata_MarkPerform").data('kendoNumericTextBox');
        var SumMark = $("#kaizendata_SumMark").data('kendoNumericTextBox');
        var Accumulate = $("#kaizendata_Accumulate").data('kendoNumericTextBox');
        var SumAmount = $("#kaizendata_SumAmount").data('kendoNumericTextBox');
        var AccumulateRevice = $("#kaizendata_AccumulateRevice").data('kendoNumericTextBox');


        Accumulate.value(MarkPerform.value());
        AccumulateRevice.value(Accumulate.value());
        SumMark.value(MarkIdea.value() + MarkPerform.value());

        $.ajax({
            url: '@_hrm_Hr_Service' + 'Sal_Getdata/GetMarkAmountKaizen',
            data: { MarkIdea: MarkIdea.value(), MarkPerform: MarkPerform.value() },
            type: 'POST',
            async: false,
            success: function (data) {
                if (data.TotalAmount != -1) {
                    SumAmount.value(data.TotalAmount);
                    $('#IsNotRankMask').val('false');
                }
                else {
                    SumAmount.value(0.00);
                    $('#IsNotRankMask').val('true');
                }
            },
            error: function (data) {
                SumAmount.value(0.00);
                $('#IsNotRankMask').val('true');
            }
        });

    };

    $(document).ready(function () {
        setTimeout(function () {
            var numerictextbox = $("#kaizendata_SumAmount").data("kendoNumericTextBox");
            numerictextbox.readonly();
        }, 1000);
    });



    function ChangeKaiZenCategory() {
        var Category = $("#KaiZen_CategoryID").data("kendoMultiSelect");
        var numerictextbox = $("#kaizendata_SumAmount").data("kendoNumericTextBox");
        debugger;
        // get data items for the selected options.
        var dataItem = Category.dataItems();
        if (dataItem[0] != undefined && dataItem[0]['Code'] == 'E_Dawn') {
            numerictextbox.readonly(true);
        }
        else {
            numerictextbox.readonly(false);
            numerictextbox.value(0);
        }
    };
</script>

@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_KaizenData_Model" }))
{
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ProfileName)
                        @Html.HiddenFor(mode => mode.ID)
                    </div>
                    <div class="FieldValue">
                        @{
    IEnumerable valueProfile = new string[] { };
    if (Model != null)
    {
        valueProfile = new[] { new { ProfileName = Model.ProfileName, ID = Model.ProfileID } };
    }
                        }
                        @{
    var _profilename = new MultiSelectBuilderInfo()
     {
         Name = "KaiKaizenDataInfo_ProfileID",
         DataTextField = "ProfileName",
         DataValueField = "ID",
         Url = @_hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
         Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
         MaxSelectedItems = 1,
         Width = 300,
         Value = valueProfile

     };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.ProfileID, _profilename)
                    </div>
                    @*<div class="FieldTitle150">
                            @Html.VnrLabelFor(model => model.ProfileID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _KaiZenDatamultiSelectProfileID = new MultiSelectBuilderInfo()
                                 {
                                     DataTextField = "ProfileName",
                                     DataValueField = "ID",
                                     MaxSelectedItems = 1,
                                     Url = _hrm_Hr_Service + "HrMultiSelect/GetMultiProfile",
                                     Placeholder = ConstantDisplay.HRM_HR_SelectProfile.TranslateString(),
                                     Width = 200
                                 };
                            }
                            @Html.VnrMultiSelectFor(mode => mode.ProfileID, _KaiZenDatamultiSelectProfileID)
                        </div>*@



                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.KaizenName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.KaizenName, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Month)
                    </div>
                    <div class="FieldValue">
                        @{
    var dateFrom = new DatePickerBuilderInfo()
    {
        StyleCss = "width:120px;",
    };
                        }
                        @Html.VnrDatePickerFor(model => model.Month, dateFrom)

                    </div>
                </div>
                <div>
                    @*<div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.CategoryID)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _CategoryID = new ComboBoxBuilderInfo()
                                {
                                    Name = "kaikaizenDataInfo_CategoryID",
                                    DataTextField = "CategoryName",
                                    DataValueField = "ID",
                                    Url = _hrm_Hr_Service + "Sal_GetData/GetMultiCategory",
                                    StyleCss = "width:200px;",
                                    Value = Model == null ? string.Empty : Model.CategoryList,
                                };
                            }
                            @(Html.VnrComboBoxFor(mode => mode.CategoryID, _CategoryID))
                        </div>*@
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.CategoryID)
                    </div>
                    <div class="FieldValue">
                        @{
    IEnumerable Category_Value = new string[] { };
    if (Model != null && Model.CategoryID != null)
    {
        Category_Value = new[] { new { CategoryName = Model.CategoryName, ID = Model.CategoryID } };
    }

    var _CategoryCodes = new MultiSelectBuilderInfo()
   {
       Width = 300,
       Name = "KaiZen_CategoryID",
       DataTextField = "CategoryName",
       DataValueField = "ID",
       Url = _hrm_Hr_Service + "Sal_GetData/GetMultiCategory",
       Value = Category_Value,
       MaxSelectedItems = 1,
       EventChange = "ChangeKaiZenCategory"
   };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.CategoryID, _CategoryCodes)
                        @*@Html.HiddenFor(model => model.CategoryList)*@

                    </div>

                    <div style="clear: both;"></div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.MarkIdea)
                    </div>
                    <div class="FieldValue">
                        @{
    var markidea = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Name = "kaizendata_MarkIdea",
        Format = ConstantFormat.HRM_Format_Int,
        EvenChange = "SumTotalMark"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.MarkIdea, markidea))
                    </div>


                </div>

            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.MarkPerform)
                    </div>
                    <div class="FieldValue">
                        @{
    var _markperform = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Name = "kaizendata_MarkPerform",
        Format = ConstantFormat.HRM_Format_Int,
        EvenChange = "SumTotalMark"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.MarkPerform, _markperform))
                    </div>


                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.SumMark)
                    </div>
                    <div class="FieldValue">
                        @{
    var _summark = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Name = "kaizendata_SumMark",
        Format = ConstantFormat.HRM_Format_Int,
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.SumMark, _summark))
                    </div>

                </div>
                <div>
                    <div id="div4">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.SumAmount)
                        </div>
                        <div class="FieldValue">
                            @{
    var SumAmount = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Name = "kaizendata_SumAmount",
        Format = ConstantFormat.HRM_Format_Int,
        //Enable = false,
    };
                            }
                            @(Html.VnrNumericTextBoxFor(model => model.SumAmount, SumAmount))
                        </div>
                    </div>
                </div>
                <div>
                    <div id="div4">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.Accumulate)
                        </div>
                        <div class="FieldValue">
                            @{
    var _Accumulate = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Name = "kaizendata_Accumulate",
        Format = ConstantFormat.HRM_Format_Int,

    };
                            }
                            @(Html.VnrNumericTextBoxFor(model => model.Accumulate, _Accumulate).Events(m => m.Change("ChangeAccumulate")))
                        </div>
                    </div>
                </div>
                <div>
                    <div id="div4">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.AccumulateRevice)
                        </div>
                        <div class="FieldValue">
                            @{
    var _AccumulateRevice = new NumericTextBoxBuilderInfo<double>()
    {
        StyleCss = "width:150px",
        Name = "kaizendata_AccumulateRevice",
        Format = ConstantFormat.HRM_Format_Int,
    };
                            }
                            @(Html.VnrNumericTextBoxFor(model => model.AccumulateRevice, _AccumulateRevice))
                        </div>
                    </div>
                </div>

            </td>
        </tr>
        <tr>
            <td>
                <div class="FieldTitle150">
                </div>
                <div class="FieldValue">
                    @Html.HiddenFor(m => m.IsNotRankMask)
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUpKaizenData", Name = "save-Kai_KaizenData", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveKaizenData", Name = "save-continue-Kai_KaizenData", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveCloseKaizenData", Name = "save-close-Kai_KaizenData", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                </div>
            </td>
        </tr>
    </table>
}


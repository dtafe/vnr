@using System.Collections
@using HRM.Infrastructure.Utilities

@using HRM.Presentation.UI.Controls.Kendo
@model HRM.Presentation.Payroll.Models.Kai_KaizenDataModel

@{
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Layout = null;
}
@if (1 != 1)
{
    <script src="~/Scripts/VnrJsFramework.js"></script>
}
<script type="text/javascript">
    SetFieldRequired();
    function GetDataValueCustomAccumulate() {
        var Accumulate = $("#CustomAccumulate_Accumulate").data('kendoNumericTextBox');
        var AccumulateRevice = $("#CustomAccumulate_AccumulateRevice").data('kendoNumericTextBox');
        return {
            AccumulateRevice: AccumulateRevice.value(),
            ID: $('#CustomAccumulateID').val(),
        };
    };

    function EvenSaveCustomAccumulate() {

        $.ajax({
            url: '@_hrm_Hr_Service' + 'Sal_Getdata/SaveCustomAccumulate',
            data: GetDataValueCustomAccumulate(),
            type: 'POST',
            traditional: true,
            success: function (data) {
                CloseHre_ProgressBar();
                if (data[0] != undefined && data[0] == 'error') {
                    Notification(data[1], '@NotificationType.Error.ToString()');
                }
                else {
                  
                    Notification(data.mess, '@NotificationType.Success.ToString()');
                    ReadGrid('@ConstantControlName.HRM_grid_Kai_KaizenData_Name');
                }
            },
            error: function (data) {
                CloseHre_ProgressBar();
                Notification('@ConstantDisplay.Hrm_Error.TranslateString()', '@NotificationType.Error.ToString()');
            }
        });
    };

    function EvenSaveCloseCustomAccumulate() {
        $.ajax({
            url: '@_hrm_Hr_Service' + 'Sal_Getdata/SaveCustomAccumulate',
            data: GetDataValueCustomAccumulate(),
            type: 'POST',
            traditional: true,
            success: function (data) {
                CloseHre_ProgressBar();
                if (data[0] != undefined && data[0] == 'error') {
                    Notification(data[1], '@NotificationType.Error.ToString()');
                }
                else {
                    var windows = new VnrWindow('windowwindowCustomAccumulate');
                    windows.Close();
                    //var dialog = $("#windowwindowCustomAccumulate").data("kendoWindow");
                    //setTimeout(function () {
                    //    dialog.close();
                    //}, 1000);
                    Notification(data.mess, '@NotificationType.Error.ToString()');
                    ReadGrid('@ConstantControlName.HRM_grid_Kai_KaizenData_Name');
                }
            },
            error: function (data) {
                CloseHre_ProgressBar();
                Notification('@ConstantDisplay.Hrm_Error.TranslateString()', '@NotificationType.Error.ToString()');
            }
        });
    };

</script>

@Html.HiddenFor(m => m.ID, new { id = "CustomAccumulateID" })

<table>
    <tr>
        <td>
            <div>
                <div id="div4">
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.Accumulate)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _Accumulate = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Name = "CustomAccumulate_Accumulate",
                                Format = ConstantFormat.HRM_Format_Int,
                                Value = Model != null && Model.Accumulate != null ? (double)Model.Accumulate : 0
                            };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.Accumulate, _Accumulate).Enable(false))
                    </div>
                </div>
            </div>
            <div>
                <div id="div4">
                    <div class="FieldTitle170">
                        @Html.VnrLabelFor(mode => mode.AccumulateRevice)
                    </div>
                    <div class="FieldValue">
                        @{
                            var _AccumulateRevice = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "width:150px",
                                Name = "CustomAccumulate_AccumulateRevice",
                                Format = ConstantFormat.HRM_Format_Int,
                                Value = Model != null && Model.AccumulateRevice != null ? (double)Model.AccumulateRevice : 0
                            };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.AccumulateRevice, _AccumulateRevice))
                    </div>
                </div>
            </div>
        </td>
    </tr>

    <tr>
        <td>
            <div class="FieldTitle150">
            </div>
            <div class="FieldValue">
                @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "EvenSaveCustomAccumulate", Name = "save-CustomAccumulate", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "EvenSaveCloseCustomAccumulate", Name = "save-close-CustomAccumulate", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                @*@Html.VnrButton(new ButtonBuilderInfo() { Name = "save-close-CustomAccumulate", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })*@
            </div>
        </td>
    </tr>
</table>
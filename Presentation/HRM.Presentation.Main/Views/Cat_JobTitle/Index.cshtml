@using HRM.Infrastructure.Utilities;
@using HRM.Presentation.Category.Models
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Infrastructure.Security;

@model HRM.Presentation.Category.Models.Cat_JobTitleSearchModel

@{
    ViewBag.Title = HRM.Infrastructure.Utilities.ConstantDisplay.HRM_Category_JobTitle.TranslateString();
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;

    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
    
}

@Html.Hidden("Screen", screen)
@{
    var window = new WindowBuilderInfo
    {
        Name = ConstantControlName.HRM_gridJobTitle_PopUp_Name,
        Visible = false,
        Width = 700,
        LoadContentFrom = @_hrm_Main_Web + "Cat_JobTitle/CreateOrUpdate/",
    };
}
@(Html.VnrWindow(window))
<script type="text/javascript">
    var titleCreate = '@Html.Raw(ConstantDisplay.HRM_Category_JobTitle_AddNew.TranslateString())';
    var titleUpdate = '@Html.Raw(ConstantDisplay.HRM_Category_JobTitle_Update.TranslateString())';
    var checkedNodes = [];
    var isCreateTemplate = false;
    var gridName = '@ConstantControlName.HRM_gridHre_SoftSkill_Grid_Name';
    var windowName = '@ConstantDisplay.HRM_HR_SoftSkill_AddNew';
    var isCreateTemplateForDynamicGrid = false;

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo(isExport) {
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        var jobTitleName = $('#SJobTitleName').val();
        var Code = $('#SCode').val();
        return {
            JobTitleName: jobTitleName,
            Code: Code,
            OrgStructureID: checkedNodes.join(","),
            IsExport: isExport,
            ValueFields: $('#valueFieldsGrid').val()
        };
    }

    function checkedNodeIds(nodes, checkedNodes) {
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                checkedNodes.push(nodes[i].id);
            }
            if (nodes[i].hasChildren) {
                checkedNodeIds(nodes[i].children.view(), checkedNodes);
            }
        }
    }
    //Hàm xử lý sự kiện edit trên lưới
    @*function eEditJobTitle(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var id = dataItem.Id;
        KendoRouteMapping('#Hrm_Cat_Web/Cat_JobTitle/Edit/' + id, 'Hrm_Cat_Web', '@_hrm_Main_Web');
    }*@

    $(document).ready(function () {
        //Jump Anchor
        jumpAnchor("anchor");
    });
    $(document).ready(function () {
        //Xử lý show hide form tìm kiếm
        ShowHidePanel();


        //Xử lý sự kiện click button tìm kiếm
        $("#btnSearch").click(function () {
            var treeView = $("#treeviewOrg").data("kendoTreeView");
            checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes)
            var grid = $('#gridJobTitle').data("kendoGrid");
            grid.dataSource.read();
            selectedIds = [];
            checkedNodes = [];
        });
        //Xử Lý Grid
        GridCheckbox("gridJobTitle");
        //Xử lý nút Edit


        var url = '@_hrm_Main_Web' + "Cat_JobTitle/CreateOrUpdate/";
        EditGridPopUp("gridJobTitle", '@ConstantControlName.HRM_gridJobTitle_PopUp_Name', url, '@ConstantPermission.Cat_JobTitle', titleUpdate);
    });
        //Xử lý nút Create
        $("#btnCreate").click(function () {
            @*KendoRouteMapping('#Hrm_Main_Web/Hre_StopWorking/Create/', 'Hrm_Main_Web', '@_hrm_Main_Web');*@
            PopUpCreate('@ConstantControlName.HRM_gridJobTitle_PopUp_Name', titleCreate, '@ConstantPermission.Cat_JobTitle');
        });

        $('#btnDelete').click(function (e) {
            if (selectedIds == "") {
                DeleteFail();
                return;
            }
            e.preventDefault();

            DeleteSelected("gridJobTitle", '@_hrm_Main_Web' + "Cat_JobTitle/RemoveSelected/", selectedIds.join(","), '@ConstantPermission.Cat_JobTitle');

            return false;
        });

    //Export
    $("#btnExportSelected").click(function () {
        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportOrgStrucTypeSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Cat_JobTitle');
    });

    $("#btnExportAll").click(function () {
        var grid = $('#gridJobTitle').data("kendoGrid");
        if (grid.dataSource.total() == 0) {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Cat_GetData/ExportAllJobTitleList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Cat_JobTitle');
    });
</script>


<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->

            <div class="contendSearchWidge">
                <form id="form-search">
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.JobTitleName)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _JobTitleName = new TextBoxBuilderInfo()
                                {
                                    Name = "SJobTitleName",
                                    Width = 200
                                };
                            }
                            @Html.VnrTextBoxFor(model => model.JobTitleName, _JobTitleName)
                        </div>
                    </div>
                    <div id="div2">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(model => model.Code)
                        </div>
                        <div class="FieldValue">
                            @{
                                var _Code = new TextBoxBuilderInfo()
                                {
                                    Name = "SCode",
                                    Width = 200
                                };
                            }
                            @Html.VnrTextBoxFor(model => model.Code, _Code)
                        </div>
                    </div>
                    <div id="div4">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OrgStructureID)
                        </div>
                        <div class="FieldValue">
                            @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            @*@{
                                    var buildInfo = new VnrOrgStructureInfo()
                                    {

                                    };
                                }
                                @Html.VnrOrgStructure(buildInfo)*@
                        </div>

                        <div style="clear: both;"></div>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float: right">
        @*<div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>*@
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnJobTitle", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @{
         var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_gridJobTitle_Name + "__Cat_JobTitle_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_gridJobTitle_Name,
            ReadActionUrl = @_hrm_Hr_Service + "Cat_GetData/GetJobTitleList/",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new string[]
            {
                Cat_JobTitleModel.FieldNames.Code,
                Cat_JobTitleModel.FieldNames.JobTitleName,
                Cat_JobTitleModel.FieldNames.JobTitleNameEn,
                Cat_JobTitleModel.FieldNames.OrgStructureName,
                Cat_JobTitleModel.FieldNames.CostCentreName,
                Cat_JobTitleModel.FieldNames.JobDescription,
                Cat_JobTitleModel.FieldNames.EmployeeTypeName,
                Cat_JobTitleModel.FieldNames.Notes
            };
            grid.SizeFields = new Dictionary<string, int>()
            {
                {Cat_JobTitleModel.FieldNames.Code,100},
                {Cat_JobTitleModel.FieldNames.JobTitleName,160},
                {Cat_JobTitleModel.FieldNames.JobTitleNameEn, 160},
                {Cat_JobTitleModel.FieldNames.OrgStructureName, 120},
                {Cat_JobTitleModel.FieldNames.CostCentreName, 90},
                {Cat_JobTitleModel.FieldNames.JobDescription, 200},
                {Cat_JobTitleModel.FieldNames.EmployeeTypeName, 140},
                {Cat_JobTitleModel.FieldNames.Notes, 250}
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                {Cat_JobTitleModel.FieldNames.Code, ConstantDisplay.HRM_Category_JobTitle_JobTitleCode},
                {Cat_JobTitleModel.FieldNames.JobTitleName, ConstantDisplay.HRM_Category_JobTitle_JobTitleName},
                {Cat_JobTitleModel.FieldNames.JobTitleNameEn, ConstantDisplay.HRM_Category_JobTitle_JobTitleNameEn},
                {Cat_JobTitleModel.FieldNames.OrgStructureName, ConstantDisplay.HRM_Category_JobTitle_OrgStructureName},
                {Cat_JobTitleModel.FieldNames.CostCentreName, ConstantDisplay.HRM_Category_JobTitle_CostCentreName},
                {Cat_JobTitleModel.FieldNames.JobDescription, ConstantDisplay.HRM_Category_JobTitle_JobDescription},
                {Cat_JobTitleModel.FieldNames.EmployeeTypeName, ConstantDisplay.HRM_HR_Profile_EmployeeTypeName},
                {Cat_JobTitleModel.FieldNames.Notes, ConstantDisplay.HRM_Category_JobTitle_Notes}
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = "gridJobTitle",
        //    ValueFields = valueFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    ReadActionUrl = @_hrm_Hr_Service + "Cat_GetData/GetJobTitleList/",
        //    ReadData = "filterFieldInfo"
        //};
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<HRM.Presentation.Category.Models.Cat_JobTitleModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnJobTitle", "Cat_JobTitleModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
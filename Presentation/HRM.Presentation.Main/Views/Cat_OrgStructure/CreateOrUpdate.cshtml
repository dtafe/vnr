@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.DropDownList
@using HRM.Presentation.Hr.Models
@using HRM.Presentation.Category.Models
@using HRM.Infrastructure.Security

@using HRM.Infrastructure.Utilities
@using System.Collections;
@model HRM.Presentation.Category.Models.CatOrgStructureModel
@{
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var _Hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;

    IList<SelectListItem> lstStatus = Enum.GetValues(typeof(RecruitmentCampaignStatus))
    .Cast<RecruitmentCampaignStatus>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).OrderBy(p => p.Text)
    .ToList();

    var OrgStructureID = Guid.Empty;
    if (Model != null)
    {
        OrgStructureID = Model.ID;
    }
}

<script>
    SetFieldRequired();
    $("#btnShowDetail").click(function () {
        $("#contentDetail").show();
        $("#Div_GridDetail").show();
    });
    $("#btnSave").click(function () {
        if ($("#ID").val() == "") {
            ShowNotificationProcessor('@ConstantDisplay.HRM_YouMustSaveOrgFirst.TranslateString()');
            result = false;
        }
        var _ContractFrom = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#ContractFrom").val());
        var _ContractTo = ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#ContractTo").val());

        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Cat_GetData/CreateAndUpdateOrgMoreInfo/',
            data: { orgID: $("#ID").val(), servicesType: $("#ServicesType").val(), contractFrom: _ContractFrom, contractTo: _ContractTo, billingCompanyName: $("#BillingCompanyName").val(), billingAddress: $("#BillingAddress").val(), taxCode: $("#TaxCode").val(), des: $("#DescriptionInfo").val(), durationPay: $("#DurationPay").val(), recipientInvoice: $("#RecipientInvoice").val(), tetePhone: $("#TelePhone").val(), cellPhone: $("#CellPhone").val(), email: $("#EmailInfo").val() },
            dataType: 'json',
            async: false,
            success: function (data) {
                if (data.ActionStatus == "Success") {
                    $("#OrgMoreInforID").val(data.ID);
                    CloseHre_ProgressBar();
                    ShowNotificationProcessor(data.ActionStatus);
                    result = false;
                }
            }
        });
    });
</script>


<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    @Html.HiddenFor(mode => mode.ID)
                    @Html.HiddenFor(mode => mode.OrgStructure_ID)
                    @Html.HiddenFor(mode => mode.OrderNumber)
                    <div class="hrm_box">
                        <div id="div6">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Code)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _OrgstructureCode = new TextBoxBuilderInfo()
                                    {
                                        Name = "OrgtructureInfo_Code",
                                        CssStyle = "width:300px",
                                    };
                                    if (Model != null)
                                    {
                                        _OrgstructureCode.Value = Model.Code == null ? string.Empty : Model.Code;
                                    }
                                }
                                @(Html.VnrTextBoxFor(model => model.Code, _OrgstructureCode))
                            </div>
                        </div>
                        <div id="div5">
                            <div class="FieldTitle150 ">
                                @Html.VnrLabelFor(mode => mode.OrgStructureName)
                            </div>
                            <div class="FieldValue">
                                @(Html.VnrTextBoxFor(model => model.OrgStructureName, "width: 300px"))
                            </div>
                        </div>
                        <div id="div5">
                            <div class="FieldTitle150 ">
                                @Html.VnrLabelFor(mode => mode.OrgFullName)
                            </div>
                            <div class="FieldValue">
                                @(Html.VnrTextBoxFor(model => model.OrgFullName, "width: 300px"))
                            </div>
                        </div>
                        <div id="div5">
                            <div class="FieldTitle150 ">
                                @Html.VnrLabelFor(mode => mode.OrgStructureNameEN)
                            </div>
                            <div class="FieldValue">
                                @(Html.VnrTextBoxFor(model => model.OrgStructureNameEN, "width: 300px"))
                            </div>
                        </div>

                        <div id="div2">
                            <div class="FieldTitle150 ">
                                @Html.VnrLabelFor(mode => mode.OrgStructureTypeID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    IEnumerable valueOrgStructureType = new string[] { };
                                    if (Model != null)
                                    {
                                        valueOrgStructureType = new[] { new { OrgStructureTypeName = Model.OrgStructureTypeName, ID = Model.OrgStructureTypeID } };
                                    }
                                }
                                @{
                                    var orgStructureType = new MultiSelectBuilderInfo()
                                    {
                                        Width = 300,
                                        Name = "CreateOrUpdateOrgStructure_OrgStructureTypeID",
                                        DataTextField = CatOrgStructureModel.FieldNames.OrgStructureTypeName,
                                        DataValueField = CatOrgStructureModel.FieldNames.ID,
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiOrgStructureType",
                                        Placeholder = ConstantDisplay.HRM_Category_SelectOrgStructureType.TranslateString(),
                                        MaxSelectedItems = 1,
                                        Value = valueOrgStructureType
                                    };
                                }
                                @(Html.VnrMultiSelectFor(mode => mode.OrgStructureTypeID, orgStructureType))
                            </div>
                        </div>
                        <div id="div6">
                            <div class="FieldTitle150 ">
                                @Html.VnrLabelFor(mode => mode.ParentID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var org = new TreeViewDropdDownBuilderInfo()
                                    {
                                        SetFieldID = "ParentID",
                                        SetFieldName = "ParentID",
                                        Value = Model != null ? Model.OrgStructureParentName : "",
                                        IsShowCheckBox = false,
                                    };
                                }
                                @Html.Partial("EditorTemplates/OrgTreeViewDropDown", org)

                                @Html.HiddenFor(model => model.ParentID)
                                @Html.HiddenFor(model => model.OrgStructureID)
                                @Html.HiddenFor(model => model.OrgStructureName)
                                @Html.HiddenFor(model => model.OrgStructureParentName)
                            </div>
                        </div>
                        @*<div id="div4">
                                <div class="FieldTitle150 ">
                                    @Html.VnrLabelFor(mode => mode.OrderNumber)
                                </div>
                                <div class="FieldValue">
                                    @{
                                        var OrderNumber = new NumericTextBoxBuilderInfo<int>()
                                        {
                                            StyleCss = "width:150px",
                                            Name = "OrgStructureInfo_OrderNumber",
                                            Enable=false,
                                            Format = "n0"
                                        };
                                    }
                                    @(Html.VnrNumericTextBoxFor(model => model.OrderNumber, OrderNumber))
                                </div>
                            </div>*@
                        <div id="div7">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.IsRoot)
                            </div>
                            <div class="FieldValue">
                                @(Html.EditorFor(model => model.IsRoot, "width: 300px"))
                            </div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.GroupCostCentreID)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var CostCentreName = new ComboBoxBuilderInfo()
                                    {
                                        DataTextField = "CostCentreName",
                                        DataValueField = "ID",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCostCentre",
                                        StyleCss = "width:300px;",
                                    };
                                    if (Model != null)
                                    {
                                        CostCentreName.Value = Model == null ? string.Empty : Model.GroupCostCentreID.ToString();
                                    }
                                }
                                @(Html.VnrComboBoxFor(mode => mode.GroupCostCentreID, CostCentreName).Text(Model == null ? string.Empty : Model.CostCentreName))
                            </div>
                        </div>
                        
                    </div>
                    <div class="hrm_box">
                        <div id="div4">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.RegionName)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _RegionID = new ComboBoxBuilderInfo()
                                    {
                                        Name = "CreateOrUpdate_RegionID",
                                        DataTextField = "RegionName",
                                        DataValueField = "ID",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiRegion",
                                        StyleCss = "width:300px;",
                                    };
                                    if (Model != null)
                                    {
                                        _RegionID.Value = Model == null ? string.Empty : Model.RegionID.ToString();
                                    }
                                }
                                @(Html.VnrComboBoxFor(mode => mode.RegionID, _RegionID).Text(Model == null ? string.Empty : Model.RegionName))
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.Phone)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.Phone, "width: 300px")
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.Fax)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.Fax, "width: 300px")
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.Website)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.Website, "width: 300px")
                            </div>
                        </div>
                        <div id="div13">
                            <div class="FieldTitle150">
                                @Html.VnrLabelForNoneIcon(model => model.Email)
                            </div>
                            <div class="FieldValue">
                                @Html.VnrTextBoxFor(model => model.Email, "width: 300px")
                            </div>
                        </div>
                        <div id="div8">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.Description)
                            </div>
                            <div class="FieldValue">
                                @(Html.VnrTextAreaFor(model => model.Description, "width:300px;height:100px;"))
                            </div>
                        </div>
                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>

            <tr>

                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td>
                    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnShowDetail", Content = ConstantDisplay.HRM_HR_Profile_Detail.TranslateString() })

                    <div hidden="hidden" id="contentDetail">
                        @Html.HiddenFor(mode => mode.OrgMoreInforID)
                        <fieldset>
                            <legend>
                                @ConstantDisplay.HRM_HR_Profile_Detail.TranslateString()
                            </legend>
                            <div style="float:left">
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.ServicesType)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.ServicesType, "width: 300px")
                                    </div>
                                </div>
                                <div>
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelFor(mode => mode.ContractFrom)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var ContractFrom = new DatePickerBuilderInfo()
                                            {
                                                StyleCss = "width:120px;",
                                            };
                                        }
                                        @Html.VnrDatePickerFor(mode => mode.ContractFrom, ContractFrom)

                                        @{
                                            var ContractTo = new DatePickerBuilderInfo()
                                            {
                                                StyleCss = "width:120px;",
                                            };
                                        }
                                        @Html.VnrDatePickerFor(mode => mode.ContractTo, ContractTo)
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.BillingCompanyName)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.BillingCompanyName, "width: 300px")
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.BillingAddress)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.BillingAddress, "width: 300px")
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.TaxCode)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.TaxCode, "width: 300px")
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.DescriptionInfo)
                                    </div>
                                    <div class="FieldValue">

                                        @Html.VnrTextAreaFor(model => model.DescriptionInfo)
                                    </div>
                                </div>
                            </div>
                            <div style="float:left">

                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.DurationPay)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.DurationPay, "width: 300px")
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.RecipientInvoice)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.RecipientInvoice, "width: 300px")
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.TelePhone)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.TelePhone, "width: 300px")
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.CellPhone)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(model => model.CellPhone, "width: 300px")
                                    </div>
                                </div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrLabelForNoneIcon(model => model.EmailInfo)
                                    </div>
                                    <div class="FieldValue">

                                        @Html.VnrTextBoxFor(model => model.EmailInfo, "width: 300px")
                                    </div>
                                </div>
                            </div>
                            <div>
                                <div id="div13">
                                    <div class="FieldTitle150">
                                        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSave", Content = ConstantAction.HRM_Common_SaveDetail.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                                    </div>
                                    <div class="FieldValue">
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                </td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>


        </tbody>
    </table>
</div>

@{
    var window = new WindowBuilderInfo
    {
        Name = "window_Cat_OrgMoreInforContract",
        Visible = false,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),
        Width = 610,
        LoadContentFrom = _Hrm_Main_Web + "Cat_OrgStructure/OrgMoreInforContractInfo/",
    };
}
@(Html.VnrWindow(window))

@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = ConstantDisplay.MessageError.TranslateString(),
        Content = "Bạn Phải Lưu Thông Tin Chi Tiết Trước"
    };
}
@(Html.VnrWindow(windowError))

<script type="text/javascript">
    var selectedIds = [];
    var gridCat_OrgMoreInforContract = '@ConstantControlName.HRM_Cat_OrgMoreInforContract_Grid_Name';
    var popUpCat_OrgMoreInforContract = '@ConstantControlName.HRM_Cat_OrgMoreInforContract_PopUp_Name';
    var titleEditPopUpOrgMoreInforContract = '@Html.Raw(ConstantDisplay.HRM_Cat_OrgMoreInforContract_PopUp_Edit_Title.TranslateString())';
    var titleCreatePopUpOrgMoreInforContract = '@Html.Raw(ConstantDisplay.HRM_Cat_OrgMoreInforContract_PopUp_Create_Title.TranslateString())';

    $(document).ready(function () {
        var url = '@_Hrm_Main_Web' + "Cat_OrgStructure/OrgMoreInforContractInfo/";
        EditGridPopUp("grid_Cat_OrgMoreInforContract", "window_Cat_OrgMoreInforContract", url, '@HRM.Infrastructure.Security.ConstantPermission.Cat_OrgMoreInforContract', titleEditPopUpOrgMoreInforContract);
    });

    function filterFieldInfo() {
        return {
            OrgStructureID: $("#OrgMoreInforID").val()
        };
    }

    $("#btnCreate_MoreInforContract").click(function () {

        debugger;
        var x = $('#OrgMoreInforID').val();

        if (x == '') {
            PopUpCreate("windowError");
        }
        else {
            setTimeout(function () {
                PopUpCreate("window_Cat_OrgMoreInforContract", titleCreatePopUpOrgMoreInforContract, '@HRM.Infrastructure.Security.ConstantPermission.Cat_OrgMoreInforContract')
            }, 1000)

        }
    });

    $('#btnDelete_MoreInforContract').click(function (e) {
        DeleteSelected(gridCat_OrgMoreInforContract, '@_Hrm_Main_Web' + "Cat_OrgMoreInforContract/RemoveSelected/", selectedIds, '@ConstantPermission.Cat_OrgMoreInforContract');
        return false;
    });
</script>

<div style="padding-top:3px" id="Div_GridDetail" hidden="hidden">
    <div class="commandToolBarWidge">
        <div class="GridTitle">
            @Html.VnrLabel(ConstantDisplay.HRM_HR_Discipline_ViolationExplain.TranslateString())
        </div>
        <div style="float:right">
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreate_MoreInforContract", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete_MoreInforContract", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
        </div>
        <div class="clear"></div>
    </div>
    <div>
        <!--Khai báo các thông tin cho Grid-->
        @using HRM.Presentation.Recruitment.Models
        @using HRM.Presentation.UI.Controls.Kendo
        @{
            //Thông tin hiển column hiển thị
            string[] valueFields = new string[]
                                {
                                    Cat_OrgMoreInforContractModel.FieldNames.ContactName,
                                    Cat_OrgMoreInforContractModel.FieldNames.Area,
                                    Cat_OrgMoreInforContractModel.FieldNames.Department,
                                    Cat_OrgMoreInforContractModel.FieldNames.Position,
                                    Cat_OrgMoreInforContractModel.FieldNames.Description,
                                    Cat_OrgMoreInforContractModel.FieldNames.TelePhone,
                                    Cat_OrgMoreInforContractModel.FieldNames.CellPhone,
                                    Cat_OrgMoreInforContractModel.FieldNames.Email,

                                };

            //Set độ rộng cho từng column
            Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                                {
                                    {Cat_OrgMoreInforContractModel.FieldNames.ContactName, 150},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Area, 150},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Department, 150},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Position, 150},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Description, 150},
                                    {Cat_OrgMoreInforContractModel.FieldNames.TelePhone, 150},
                                    {Cat_OrgMoreInforContractModel.FieldNames.CellPhone, 150},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Email, 150},
                                };

            //Thông tin hiển thị được dịch
            Dictionary<string, string> displayFields = new Dictionary<string, string>()
                                {
                                    {Cat_OrgMoreInforContractModel.FieldNames.ContactName, ConstantDisplay.HRM_Cat_OrgMoreInforContract_ContactName},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Area, ConstantDisplay.HRM_Cat_OrgMoreInforContract_Area},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Department, ConstantDisplay.HRM_Cat_OrgMoreInforContract_Department},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Position, ConstantDisplay.HRM_Cat_OrgMoreInforContract_Position},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Description, ConstantDisplay.HRM_Cat_OrgMoreInforContract_Description},
                                    {Cat_OrgMoreInforContractModel.FieldNames.TelePhone, ConstantDisplay.HRM_Cat_OrgMoreInforContract_Telephone},
                                    {Cat_OrgMoreInforContractModel.FieldNames.CellPhone, ConstantDisplay.HRM_Cat_OrgMoreInforContract_CellPhone},
                                    {Cat_OrgMoreInforContractModel.FieldNames.Email, ConstantDisplay.HRM_Cat_OrgMoreInforContract_Email},
                                };


            var grid = new GridBuilderInfo
            {
                Name = "grid_Cat_OrgMoreInforContract",
                ValueFields = valueFields,
                SizeFields = sizeFields,
                DisplayFields = displayFields,
                ShowCommand = false,
                GridHeight = 200,
                AutoBind = true,
                ReadActionUrl = _hrm_Hr_Service + "Hre_GetData/GetOrgMoreInforContractByOrgID",
                ReadData = "filterFieldInfo",
            };
        }
        @(Html.VnrGrid<Cat_OrgMoreInforContractModel>(grid))
    </div>
    @{
        var valueFields1 = string.Empty;
        for (int i = 0; i < valueFields.Count(); i++)
        {
            valueFields1 += "," + valueFields[i];
        }
    }
    @Html.Hidden("valueFieldsGrid", valueFields1)
</div>
<div>
    @{
        if (Model != null)
        {
            <script>
                debugger;
                $(document).ready(function () {
                    debugger;
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + 'Hre_GetData/GetOrgMoreInforContractByOrgID/',
                        data: { OrgStructureID: $("#ID").val() },
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                            debugger;
                            if (data.Total > 0) {
                                $("#contentDetail").show();
                                $("#Div_GridDetail").show();
                            }
                            else
                            {
                                $("#contentDetail").hide();
                                $("#Div_GridDetail").hide();
                            }
                        }
                    });

                });
            </script>
        }
    }
</div>

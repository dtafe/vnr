@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models;
@model Cat_NameEntityModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    IList<SelectListItem> ilType = Enum.GetValues(typeof(EnumDropDown.EntityType))
        .Cast<EnumDropDown.EntityType>()
        .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
        .ToList();
}
<script>
    //SetFieldRequiredByScreenName('Cat_NameEntity_LANGUAGE');
    $(document).ready(function () {


    });
    function onSaveNew() {
        debugger;
        var objName = "";
        var multiLockObj = $("#CatLockObjectInfo_ObjectName").data("kendoMultiSelect");
        for (var i = 0; i < multiLockObj._dataItems.length; i++) {
            objName += multiLockObj._dataItems[i].Name + ",";
        }

        $("#NameEntityType7").val("E_LOCKOBJECT");
        $("#Description7").val(objName.substring(0, objName.length - 1));
        //if (!checkDuplicationCode()) {
        onSaveAndContinue($('#form_Cat_LockObject'), '@_hrm_Hre_Service', 'api/Cat_LevelGeneral/', '@ConstantControlName.HRM_Category_LockObject_Grid_Name', '@ConstantControlName.HRM_Category_LockObject_PopUp_Name'); return false;
        // }
    }

    function onSaveClose() {
        debugger;
        var objName = "";
        var multiLockObj = $("#CatLockObjectInfo_ObjectName").data("kendoMultiSelect");
        for (var i = 0; i < multiLockObj._dataItems.length; i++) {
            objName += multiLockObj._dataItems[i].Name + ",";
        }

        $("#NameEntityType7").val("E_LOCKOBJECT");
        $("#Description7").val(objName.substring(0, objName.length - 1));

        // if (!checkDuplicationCode()) {
        onSaveAndClose($('#form_Cat_LockObject'), '@_hrm_Hre_Service', 'api/Cat_LevelGeneral/', '@ConstantControlName.HRM_Category_LockObject_Grid_Name', '@ConstantControlName.HRM_Category_LockObject_PopUp_Name'); return false;
        // }
    }
    function onSaveDataPopUp() {
        var objName = "";
        var multiLockObj = $("#CatLockObjectInfo_ObjectName").data("kendoMultiSelect");
        for (var i = 0; i < multiLockObj._dataItems.length; i++) {
            objName += multiLockObj._dataItems[i].Name + ",";
        }

        $("#NameEntityType7").val("E_LOCKOBJECT");
        $("#Description7").val(objName.substring(0, objName.length - 1));

        // if (!checkDuplicationCode()) {
        onlySave($('#form_Cat_LockObject'), '@_hrm_Hre_Service', 'api/Cat_LevelGeneral/', '@ConstantControlName.HRM_Category_LockObject_Grid_Name'); return false;
        // }
    }
</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_LockObject" }))
{
    @Html.HiddenFor(model => model.ID)
    @Html.HiddenFor(model => model.NameEntityType, new { id = "NameEntityType7" })
    @Html.HiddenFor(model => model.EnumType, new { id = "EnumType7" })
     @Html.HiddenFor(model => model.Description, new { id = "Description7" })

    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">

                        @{
    var Code = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "Code"
    };
    if (Model != null)
    {
        Code.Value = Model == null ? string.Empty : Model.Code;
    }
                        }

                        @Html.VnrTextBoxFor(mode => mode.Code, Code)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @ConstantDisplay.HRM_Category_LockObject.TranslateString()
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextBoxFor(mode => mode.NameEntityName, "width: 300px")
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.ObjectName)
                    </div>
                    <div class="FieldValue">

                        @{
                            var _ObjectName = new MultiSelectBuilderInfo
                           {
                               Name = "CatLockObjectInfo_ObjectName",
                               DataTextField = "Name",
                               DataValueField = "Name",
                               Url = @_hrm_Hre_Service + "Cat_GetData/GetMultiObjectName",
                               // MaxSelectedItems = 1,
                               Placeholder = ConstantDisplay.HRM_Category_Cat_Import_ObjectName.TranslateString(),
                               ServerFiltering = true,
                               Width = 500
                           };
                        }
                        @Html.VnrMultiSelectFor(mode => mode.ObjectName, _ObjectName)
                     
                    </div>
                </div>


       
                @*<div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Description, "width:500px;height:100px;")
                    </div>
                </div>*@
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150"></div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-LockObject", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-LockObject", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-LockObject", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}

<div>
    @{
       
        if (Model != null && Model.Description != null)
        {
            <script>
                    $(document).ready(function () {
                        debugger;
                        var multiLockObj = $("#CatLockObjectInfo_ObjectName").data("kendoMultiSelect");
                        var objName = '@Model.Description';
                        multiLockObj.value(objName.split(','))
                    });
            </script>
        }
    }
</div>
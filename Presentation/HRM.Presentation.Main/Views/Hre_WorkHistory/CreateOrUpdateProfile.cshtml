@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Hr.Models
@using System.Collections;

@model Hre_WorkHistoryModel
@{
    ViewBag.Title = "Hre WorkHistory";
    Layout = null;
    var _Hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    IList<SelectListItem> listLaborType = Enum.GetValues(typeof(EnumDropDown.LaborType))
      .Cast<EnumDropDown.LaborType>()
      .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
      .ToList();
    Guid ProfileID = Guid.Empty;
    string param = ViewBag.profileID;
    if (!string.IsNullOrEmpty(param))
    {
        ProfileID = Common.ConvertToGuid(param.ToString());
    }
}
<script>
    SetFieldRequired();
    //Hàm lưu
    function onSave() {
        onSaveAndContinue($('#form_Hre_WorkHistory'), '@_Hrm_Hre_Service', 'api/Hre_WorkHistory/', 'gridWorkHistory', 'windowWorkHistory');
        return false;
    }

    //Hàm lưu và đóng
    function onSaveClose() {
        onSaveAndClose($('#form_Hre_WorkHistory'), '@_Hrm_Hre_Service', 'api/Hre_WorkHistory/', 'gridWorkHistory', 'windowWorkHistory');
        return false;
    }
    //Ham lưu và tạo mới
    function doSaveNew() {
        if (doSave()) {
            KendoRouteMapping('Hrm_Hre_Web/Hre_WorkHistory/CreateOrUpdateProfile/', 'Hrm_Hre_Web', '@_hrm_Main_Web');
        }
    }

    function onSaveDataPopUp() {
        onlySave($('#form_Hre_WorkHistory'), '@_Hrm_Hre_Service', 'api/Hre_WorkHistory/', 'gridWorkHistory'); return false;
    }

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Hre_WorkHistory" }))
{
    @Html.HiddenFor(model => model.ID)
    <table style="width:100%">
        <tbody>
            <tr>
                <td valign="top">
                    <div style="width:520px;">
                        <div id="div2">
                            <div class="FieldTitle">
                                @{
    if (Model != null)
    {
        @Html.HiddenFor(m => m.ProfileID)
    }
    else
    {
        @Html.Hidden("ProfileID", ProfileID)
    }
                                }
                            </div>
                            <div class="FieldValue">
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div7">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.OrganizationStructureID)
                            </div>
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdownForCreate")
                                @Html.HiddenFor(model => model.OrganizationStructureID)
                                @Html.HiddenFor(model => model.OrgStructureName)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div5">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.JobTitleID)
                            </div>
                            <div class="FieldValue">
                                @{
    IEnumerable valuejobTitle = new string[] { };
    if (Model != null)
    {
        valuejobTitle = new[] { new { JobTitleName = Model.JobTitleName, ID = Model.JobTitleID } };
    }
                                }
                                @{
    var jobTitleID = new MultiSelectBuilderInfo
    {
        DataTextField = "JobTitleName",
        DataValueField = "ID",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiJobTitle",
        MaxSelectedItems = 1,
        Placeholder = ConstantDisplay.HRM_Category_SelectJobTitle.TranslateString(),
        Value = valuejobTitle
    };
                                }
                                @Html.VnrMultiSelectFor(mode => mode.JobTitleID, jobTitleID)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div3">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.PositionID)
                            </div>
                            <div class="FieldValue">
                                @*@{
                                        var Position = new MultiSelectBuilderInfo()
                                        {
                                            DataTextField = Hre_WorkHistoryModel.FieldNames.PositionName,
                                            DataValueField = Hre_WorkHistoryModel.FieldNames.ID,
                                            Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
                                            Placeholder = ConstantDisplay.HRM_Category_SelectPosition.TranslateString(),
                                            MaxSelectedItems = 1,
                                            Autobind = true,
                                            Value = new string[] { @Html.DisplayFor(mode => mode.PositionID).ToString() }
                                        };
                                    }
                                    @(Html.VnrMultiSelectFor(mode => mode.PositionID, Position))*@
                                @{
    IEnumerable valuePosition = new string[] { };
    if (Model != null)
    {
        valuePosition = new[] { new { PositionName = Model.PositionName, ID = Model.PositionID } };
    }
                                }
                                @{
    var positionID = new MultiSelectBuilderInfo()
    {
        DataTextField = "PositionName",
        DataValueField = "ID",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiPosition",
        Placeholder = ConstantDisplay.HRM_Category_SelectPosition.TranslateString(),
        Value = valuePosition
    };
                                }
                                @(Html.VnrMultiSelectFor(mode => mode.PositionID, positionID))
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div id="div4">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.WorkLocation)
                            </div>
                            <div class="FieldValue">
                                @{
                                    var _workplaceName = new ComboBoxBuilderInfo()
                                    {
                                        DataTextField = "WorkPlaceName",
                                        DataValueField = "WorkPlaceName",
                                        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiWorkPlace",
                                        StyleCss = "width:200px;",
                                        Value = Model == null ? string.Empty : Model.WorkLocation.ToString(),
                                    };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.WorkLocation, _workplaceName).Text(Model == null ? string.Empty : Model.WorkLocation))
                            </div>
                            <div style="clear: both;"></div>
                        </div>

                        <div id="div6">
                            <div class="FieldTitle150">
                                @Html.VnrLabelFor(mode => mode.DateNotice)
                            </div>
                            <div class="FieldValue">
                                @{
    var DateNotice = new DatePickerBuilderInfo()
    {
        Name = "WHCreateUpdate_DateNotice"
    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateNotice, DateNotice)
                            </div>
                        </div>

                        <div id="div6">
                            <div class="FieldTitle">
                                @Html.VnrLabelFor(mode => mode.DateEffective)
                            </div>
                            <div class="FieldValue">
                                @{
    var dateEffective = new DatePickerBuilderInfo()
    {
        Name = "WHCreateUpdate_DateEffective"
    };
                                }
                                @Html.VnrDatePickerFor(model => model.DateEffective, dateEffective)
                            </div>
                            <div style="clear: both;"></div>
                        </div>
                        <div class="DivContentTitleValue" id="div13">
                            <div class="FieldTitle">
                                @Html.VnrLabelForNoneIcon(model => model.Supervisor)
                            </div>
                            <div class="FieldValue">
                                @{
    var _Supervisor = new ComboBoxBuilderInfo()
     {
         DataTextField = "ProfileName",
         StyleCss = "Width: 250px",
         DataValueField = "ProfileName",
         FilterType = FilterType.Contains,
         Url = _Hrm_Hre_Service + "Hre_GetData/GetMultiProfile",
         Value = Model == null ? string.Empty : Model.Supervisor
     };
                                }
                                @Html.VnrComboBoxFor(model => model.Supervisor, _Supervisor).Text(Model == null ? string.Empty : Model.Supervisor)
                            </div>
                        </div>
                        <div class="DivContentTitleValue" id="div13">
                            <div class="FieldTitle">
                                @Html.VnrLabelForNoneIcon(model => model.EmployeeTypeName)
                            </div>
                            <div class="FieldValue">
                                @{
    var _EmployeeType = new ComboBoxBuilderInfo()
     {
         DataTextField = "EmployeeTypeName",
         DataValueField = "ID",
         Url = _hrm_Hr_Service + "Cat_GetData/GetMultiEmployeeType",
         StyleCss = "width:250px;",
         Value = Model == null ? string.Empty : Model.EmployeeTypeID.ToString(),
     };
                                }
                                @(Html.VnrComboBoxFor(mode => mode.EmployeeTypeID, _EmployeeType).Text(Model == null ? string.Empty : Model.EmployeeTypeName))
                            </div>
                        </div>
                        <div class="DivContentTitleValue" id="div13">
                            <div class="FieldTitle">
                                @Html.VnrLabelForNoneIcon(model => model.LaborType)
                            </div>
                            <div class="FieldValue">
                                @{
    var ddlLaborType = new DropDownListBuilderInfo()
    {
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listLaborType
    };
                                }
                                @Html.VnrDropDownListFor(model => model.LaborType, ddlLaborType)
                            </div>
                        </div>

                    </div>
                </td>
            </tr>
            @*<tr>
                    <td>
                        <div class="commandToolBarWidge">
                            <div class="options">
                                @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save_WorkHistory", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                                @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-Close_WorkHistory", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                                @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "doSaveNew", Name = "save-new_WorkHistory", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            </div>
                        </div>
                    </td>
                </tr>*@
            <tr>
                <td style="padding-top:2px; padding-bottom:10px;">
                    <div class="LineFooterCommandEdit">
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div>
                        <div class="FieldTitle">
                        </div>
                        <div class="FieldValue">
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save_WorkHistory", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-Close_WorkHistory", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "doSaveNew", Name = "save-new_WorkHistory", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
}

<script type="text/javascript">
    $(document).ready(function () {
        $("#TreeViewDropDownInput").val('@Model.OrgStructureName');
        $("#OrganizationStructureID").val('@Model.OrganizationStructureID');
          @*var treeview = $("#treeviewOrg").data("kendoTreeView");
        var getitem = treeview.dataSource.get('@Model.OrgStructureID');
        treeview.findByUid(getitem.uid);
        var selectitem = treeview.findByUid(getitem.uid);
        treeview.select(selectitem);*@
        });

</script>
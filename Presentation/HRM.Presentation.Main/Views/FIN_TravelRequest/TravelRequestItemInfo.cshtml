@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@model HRM.Presentation.Hr.Models.FIN_TravelRequestItemModel

@{
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Guid ContractID = Guid.Empty;
    string aaa = ViewBag.contractID;
    if (!string.IsNullOrEmpty(aaa))
    {
        ContractID = Common.ConvertToGuid(aaa.ToString());
    }

    IList<SelectListItem> listPurpose = Enum.GetValues(typeof(EnumDropDown.TravelRequestPurpose))
  .Cast<EnumDropDown.TravelRequestPurpose>()
  .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
  .ToList();

    IList<SelectListItem> listMean = Enum.GetValues(typeof(EnumDropDown.TravelRequestMean))
    .Cast<EnumDropDown.TravelRequestMean>()
    .Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) })
    .ToList();
    
    
}
<script>
    SetFieldRequiredByScreenName("TravelRequestItemInfo")
    //SetFieldRequired();
    $(document).ready(function () {
        $("#TravelRequestID").val($("#TravelRequest_ID").val());
       
      
    });

    function onSaveClose() {
        var _IsBookingHotel = document.getElementById("IsBookingHotel");
        if (_IsBookingHotel != null && _IsBookingHotel.checked) {
            $("#IsBookingHotel").val("true");
        } else {
            $("#IsBookingHotel").val("false");
        }
        onSaveAndClose($('#form_cat_TravelRequestItem'), '@_hrm_Hr_Service', 'api/Fin_TravelRequestItem/', 'grid_TravelRequestItem', 'windowTravelRequestItem'); return false;
    }

    function onSaveDataPopUp() {
        var _IsBookingHotel = document.getElementById("IsBookingHotel");
        if (_IsBookingHotel != null && _IsBookingHotel.checked) {
            $("#IsBookingHotel").val("true");
        } else {
            $("#IsBookingHotel").val("false");
        }
        onlySave($('#form_cat_TravelRequestItem'), '@_hrm_Hr_Service', 'api/Fin_TravelRequestItem/', 'grid_TravelRequestItem');

    }

    function onSaveNew() {
        var _IsBookingHotel = document.getElementById("IsBookingHotel");
        if (_IsBookingHotel != null && _IsBookingHotel.checked) {
            $("#IsBookingHotel").val("true");
        } else {
            $("#IsBookingHotel").val("false");
        }
        onSaveAndContinue($('#form_cat_TravelRequestItem'), '@_hrm_Hr_Service', 'api/Fin_TravelRequestItem/', 'grid_TravelRequestItem', 'windowTravelRequestItem');

    }

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_TravelRequestItem" }))
{
    @Html.HiddenFor(model => model.TravelRequestItem_ID)
    if (Model != null)
    {
        @Html.HiddenFor(mode => mode.TravelRequestID)
    }
    else
    {
        @Html.HiddenFor(mode => mode.TravelRequestID, ContractID)
    }
    <table>
        <tr>
            <td>
                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.TravelRequestItemName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.TravelRequestItemName)
                    </div>
                </div>
                @*<div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.TravelRequestItemCode)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.TravelRequestItemCode)
                    </div>
                </div>*@
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Purpose)
                    </div>
                    <div class="FieldValue">
                        @{
                         var Purpose = new DropDownListBuilderInfo()
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = listPurpose,
                            OptionLabel = ConstantDisplay.HRM_Category_SelectPurpose.TranslateString(),
                        };
                        }
                        @Html.VnrDropDownListFor(model => model.Purpose, Purpose)
                    </div>
                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Mean)
                    </div>
                    <div class="FieldValue">
                        @{
                         var Mean = new DropDownListBuilderInfo()
                        {
                            DataTextField = "Text",
                            DataValueField = "Value",
                            BindTo = listMean,
                            OptionLabel = ConstantDisplay.HRM_Category_SelectMean.TranslateString(),
                        };
                        }
                        @Html.VnrDropDownListFor(model => model.Mean, Mean)
                    </div>
                </div>

                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.Departure)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.Departure)
                    </div>
                </div>

                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.DepartureTime)
                    </div>
                    <div class="FieldValue">
                        @{
                             var DepartureTime = new DateTimePickerBuilderInfo()
                            {
                            };
                        }
                        @Html.VnrDateTimePickerFor(model => model.DepartureTime, DepartureTime)
                    </div>
                </div>
                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.Arrival)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.Arrival)
                    </div>
                </div>

                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.ArrivalTime)
                    </div>
                    <div class="FieldValue">
                        @{
                             var ArrivalTime = new DateTimePickerBuilderInfo()
                       {
                       };
                        }
                        @Html.VnrDateTimePickerFor(model => model.ArrivalTime, ArrivalTime)
                    </div>
                </div>
                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.IsBookingHotel)
                    </div>
                    <div class="FieldValue">
                        @{
                         var IsBookingHotel = new CheckBoxBuilderInfo()
                           {

                           };
                           if (Model != null)
                           {
                               if (Model.IsBookingHotel == true)
                               {
                                   IsBookingHotel.Value = true;
                               }
                               else
                               {
                                   IsBookingHotel.Value = false;
                               }
                           }

                        }
                        @Html.VnrCheckBoxFor(model => model.IsBookingHotel, IsBookingHotel)
                    </div>

                </div>

                <div class="DivContentTitleValue" id="div13">
                    <div class="FieldTitle150">
                        @Html.VnrLabelForNoneIcon(model => model.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Description)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-TravelRequestItem", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveNew", Name = "save-New-TravelRequestItem", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "saveclose-TravelRequestItem", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
    </table>
}


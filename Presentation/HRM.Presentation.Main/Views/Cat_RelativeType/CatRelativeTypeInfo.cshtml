@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@model HRM.Presentation.Category.Models.CatRelativeTypeModel

@{
    ViewBag.Title = "InsertCatRelativeType";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineID = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}


<script>
    SetFieldRequired();
    function checkDuplicationCode() {
        
        var _code = $("#RelativeType_Code").val();
        var _ID = '@lineID';
        var param = {
            tableName: 'Cat_RelativeType',
            columnName: 'Code',
            keyword: _code,
            ID: _ID
        };

        var isduplicate = checkDuplicate('@_hrm_Sys_Service', 'Sys_GetData', 'CheckDuplicate', param, "Code");
        
        return isduplicate;
    }
    function onSave() {
      //  if (!checkDuplicationCode()) {
            
            onSaveAndContinue($('#form_cat_relativetype'), '@_hrm_Hr_Service', 'api/CatRelativeType/', 'gridCatRelativeType', 'windowCatRelativeType');
      //  }
        return false;
    }

    function onSaveClose() {
       // if ( !checkDuplicationCode()) {
            onSaveAndClose($('#form_cat_relativetype'), '@_hrm_Hr_Service', 'api/CatRelativeType/', 'gridCatRelativeType', 'windowCatRelativeType');
       // }
        return false;
    }
    function onSaveDataPopUp() {
        
           // if (!checkDuplicationCode()) {
                onlySave($('#form_cat_relativetype'), '@_hrm_Hr_Service', 'api/CatRelativeType/', 'gridCatRelativeType'); return false;
       // }
    }
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_relativetype" }))
{
    @Html.HiddenFor(model => model.ID)




     <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
    var _RelativeTypeCode = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "Code",
    };
    if (Model != null)
    {
        _RelativeTypeCode.Value = Model.Code == null ? string.Empty : Model.Code;
    }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code, _RelativeTypeCode)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.RelativeTypeName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.RelativeTypeName, "width: 300px")
                    </div>
                </div>
                
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-RelativeType", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catRelativeType", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catRelativeType", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
 </table>
}


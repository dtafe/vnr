@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Category.Models
@model HRM.Presentation.Category.Models.CatGradeModel

@{
    ViewBag.Title = "GradeInfo";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var lineId = Model == null ? Guid.Empty : Model.ID;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
}

<script>
    SetFieldRequired();
    //var data = SetCharacteFieldRequired();
    @*function checkDuplicationCode() {
        
        var _code = $("#Grade_Code").val();
        var _id = '@lineId';
        var param = {
            tableName: 'Cat_Grade',
            columnName: 'Code',
            keyword: _code,
            ID: _id
        };

        var isduplicate = checkDuplicate('@_hrm_Sys_Service', 'Sys_GetData', 'CheckDuplicate', param, "Code");
        
        return isduplicate;
    }*@
    function onSave() {
        
        //if (CheckValidate(data)) {
            
             //if (!checkDuplicationCode()) {
            onSaveAndContinue($('#form_cat_Grade'), '@_hrm_Hr_Service', 'api/CatGrade/', 'gridCatGrade', 'windowCatGrade');
            //}

        //}
        return false;
    }

    function onSaveClose() {
        
        //if (CheckValidate(data)) {
              //if (!checkDuplicationCode()) {
            onSaveAndClose($('#form_cat_Grade'), '@_hrm_Hr_Service', 'api/CatGrade/', 'gridCatGrade', 'windowCatGrade');
        //    }

        //}
        return false;
    }

    function onSaveDataPopUp() {
        
        //if (CheckValidate(data)) {
        //    if (!checkDuplicationCode()) {
                onlySave($('#form_cat_Grade'), '@_hrm_Hr_Service', 'api/CatGrade/', 'gridCatGrade'); return false;
        //    }
        //}
    }
</script>

<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_cat_Grade" }))
{
    @Html.HiddenFor(model => model.ID)
     

     <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Code)
                    </div>
                    <div class="FieldValue">
                        @{
    var _GradeCode = new TextBoxBuilderInfo()
    {
        Name = "GradeCfg_Code",
        CssStyle = "width:200px"
    };
    if (Model != null)
    {
        _GradeCode.Value = Model.Code == null ? string.Empty : Model.Code;
    }
                        }
                        @Html.VnrTextBoxFor(mode => mode.Code, _GradeCode)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.GradeCfgName)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.GradeCfgName, "width:200px")
                    </div>
                </div>
                

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.CurrencyID)
                    </div>
                    <div class="FieldValue">
                        @{
                                var mtsCurrencyID = new ComboBoxBuilderInfo()
                            {
                                DataTextField = "CurrencyName",
                                DataValueField = "ID",
                                FilterType = FilterType.Contains,
                                Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
                                Name = "GradeInfo_CurrencyID"
                            };
                            if(Model != null){
                                mtsCurrencyID.Value = Model.CurrencyID == null ? string.Empty : Model.CurrencyID.ToString();
                                mtsCurrencyID.Autobind = true;
                            }
                        }
                        @Html.VnrComboBoxFor(model => model.CurrencyID, mtsCurrencyID)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.HourOnWorkDate)
                    </div>
                    <div class="FieldValue">
                        @{
    var hourOnWorkDate = new NumericTextBoxBuilderInfo<double>() {
        Format = "n0"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.HourOnWorkDate, hourOnWorkDate))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.SalaryTimeType)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextBoxFor(mode => mode.SalaryTimeType, "width:150px")
                        @Html.ValidationMessageFor(model => model.SalaryTimeType)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.SalaryTimeDay)
                    </div>
                    <div class="FieldValue">
                        @{
    var salaryTimeDay = new NumericTextBoxBuilderInfo<int>() { 
        Format = "n0"
    };
                        }
                        @(Html.VnrNumericTextBoxFor(model => model.SalaryTimeDay, salaryTimeDay))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Description)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(mode => mode.Description)
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">

                    </div>
                    <div class="FieldValue">
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-Grade", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catGrade", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catGrade", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    </div>
                </div>
            </td>
        </tr>
 </table>
}


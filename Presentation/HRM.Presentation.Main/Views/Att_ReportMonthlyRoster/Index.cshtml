@using HRM.Infrastructure.Utilities
@using HRM.Infrastructure.Security
@using HRM.Presentation.Attendance.Models;
@using HRM.Presentation.UI.Controls.Kendo

@model Att_ReportMonthlyRosterModel
@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;

}
@Html.Hidden("Screen", screen)

<script>
    var checkedNodes = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    SetFieldRequired();
    $('input[type=checkbox]').change(function () {
        if ($(this).is(':checked')) {
            $(this).val('true');
        } else {
            $(this).val('false');
        }
    });
    function filterFieldInfo(isExportDDL) {
        

        checkedNodes = [];
        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes)
        var _payrollIDs = $('#@Html.FieldIdFor(model => model.PayrollIDs)').val() != null ? $('#@Html.FieldIdFor(model => model.PayrollIDs)').val().join(',') : $('#@Html.FieldIdFor(model => model.PayrollIDs)').val();
        var elementPara = {
            OrgStructureID: checkedNodes.join(','),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            OnlyHolydayNotHaveRoster: document.getElementById('@Html.FieldIdFor(model => model.OnlyHolydayNotHaveRoster)').checked,
            PayrollIDs: _payrollIDs,
            UserExport: $('#UserLoginName').val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid
        };
        if (isExportDDL == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            ShowHre_ProgressBar();
            
            $.ajax({
                type: 'POST',
                url: '@_hrm_Hr_Service' + 'Att_GetData/GetReportMonthlyRosterListValidate',
                data: filterFieldInfo(),
                dataType: 'json',
                async: false,
                success: function (data) {
                    
                    if (data[0] == "error") {
                        CloseHre_ProgressBar();
                        ShowNotificationProcessor(data[1]);
                    }
                    else {
                        CloseHre_ProgressBar();
                        var grid = $('#gridAtt_ReportMonthlyRoster').data("kendoGrid");
                        grid.dataSource.read();
                        return false;
                    }
                }
            });
        });
    });

    $("#btnExport").click(function () {
        
        var isAccess = checkPermission(PrivilegeType.Export, '@ConstantPermission.Att_ReportMonthlyRoster');
        if (!isAccess) {
            return;
        }
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Att_GetData/GetReportMonthlyRosterList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload);
        checkedNodes = [];
       
    });

    $("#btnCreateTemplate").click(function () {
        
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = true;
        CreateTemplate('@_hrm_Hr_Service' + '/Att_GetData/GetReportMonthlyRosterList', filterFieldInfo(true));
    });

</script>
@Html.Hidden("valueFields")
<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div id="2" style="float:left;width:450px">
                    <div>
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(m => m.DateFrom)
                            @Html.HiddenFor(m=>m.UserExport)
                        </div>
                        <div class="FieldValue">
                            @{
                                var DateStart = new DatePickerBuilderInfo()
                                {
                                    Value = DateTime.Today.ToShortDateString(),
                                    Placeholder = ConstantDisplay.HRM_Attendance_DateFrom.TranslateString(),
                                    StyleCss = "width:100px"
                                };
                            }
                            @Html.VnrDatePickerFor(model => model.DateFrom, DateStart)
                            @{
                                var DateEnd = new DatePickerBuilderInfo()
                                {
                                    Value = DateTime.Today.ToShortDateString(),
                                    Placeholder = ConstantDisplay.HRM_Attendance_DateTo.TranslateString(),
                                    StyleCss = "width:100px"
                                };
                            }
                            @Html.VnrDatePickerFor(model => model.DateTo, DateEnd)
                        </div>
                    </div>
                    <div id="div6">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.OrgStructureID)
                        </div>
                        <div class="FieldValue">
                            @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                        </div>
                    </div>
                </div>
                <div style="float:left">
                    <div id="div7">
                        <div class="FieldTitle">
                            @Html.VnrLabelFor(mode => mode.PayrollIDs)
                        </div>
                        <div class="FieldValue">
                            <div class="FieldValue">
                                @{
                                    var _PayrollIDs = new MultiSelectBuilderInfo()
                                    {
                                        DataTextField = "PayrollGroupName",
                                        DataValueField = "ID",
                                        Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiPayrollGroup",
                                        Value = @Html.DisplayFor(mode => mode.PayrollID).ToString(),
                                        Enable = true,
                                        Placeholder = @ConstantDisplay.HRM_Category_SelectPayrollGroup.TranslateString()
                                    };
                                }
                                @(Html.VnrMultiSelectFor(mode => mode.PayrollIDs, _PayrollIDs))
                            </div>
                        </div>
                    </div>
                    <div class="DivContentTitleValue" id="div33">
                        <div class="FieldTitle">
                        </div>
                        <div class="FieldValue">
                            <div style="float:left">
                                @{
                                    var _onlyHolydayNotHaveRoster = new CheckBoxBuilderInfo()
                                    {
                                    };
                                }
                                @Html.VnrCheckBoxFor(mode => mode.OnlyHolydayNotHaveRoster, _onlyHolydayNotHaveRoster)
                            </div>
                            <div style="float:left; padding-top:3px">
                                @Html.VnrLabelForNoneIcon(model => model.OnlyHolydayNotHaveRoster)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="commandToolBarWidge">
    <div style="float: left">@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantDisplay.HRM_Common_Search_Button.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })</div>
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantAction.HRM_Common_ExportReport.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantAction.HRM_Common_CreateTemplate.TranslateString() , ImageUrl = ConstantPath.IconExportPath })
          </div>
    </div>
    <div class="clear"></div>
</div>
@*<div id="gridAtt_ReportMonthlyRoster">

</div>*@
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        string[] valueFields = new string[]
        {
            Att_ReportMonthlyRosterModel.FieldNames.CodeEmp,
            Att_ReportMonthlyRosterModel.FieldNames.ProfileName,
            Att_ReportMonthlyRosterModel.FieldNames.PositionName,
            Att_ReportMonthlyRosterModel.FieldNames.DepartmentName,
            Att_ReportMonthlyRosterModel.FieldNames.SectionName,
                      Att_ReportMonthlyRosterModel.FieldNames.DateFrom,
            Att_ReportMonthlyRosterModel.FieldNames.DateTo,
            Att_ReportMonthlyRosterModel.FieldNames.UserExport,
            Att_ReportMonthlyRosterModel.FieldNames.DateExport,
        };
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
        {
            {Att_ReportMonthlyRosterModel.FieldNames.CodeEmp,70},
            {Att_ReportMonthlyRosterModel.FieldNames.ProfileName,135},
            {Att_ReportMonthlyRosterModel.FieldNames.PositionName,100},
            {Att_ReportMonthlyRosterModel.FieldNames.DepartmentName,100},
            {Att_ReportMonthlyRosterModel.FieldNames.SectionName,100},

    };

        Dictionary<string, string> displayFields = new Dictionary<string, string>()
        {
            {Att_ReportMonthlyRosterModel.FieldNames.CodeEmp,ConstantDisplay.HRM_Attendance_CodeEmp},
            {Att_ReportMonthlyRosterModel.FieldNames.ProfileName,ConstantDisplay.HRM_Attendance_ProfileName},
            {Att_ReportMonthlyRosterModel.FieldNames.PositionName,ConstantDisplay.HRM_Attendance_Position},
            {Att_ReportMonthlyRosterModel.FieldNames.DepartmentName,ConstantDisplay.HRM_Attendance_DepartmentName1},
            {Att_ReportMonthlyRosterModel.FieldNames.SectionName,ConstantDisplay.HRM_Attendance_SectionName1},
                        {Att_ReportMonthlyRosterModel.FieldNames.DateFrom,ConstantDisplay.HRM_Attendance_DateFrom},
            {Att_ReportMonthlyRosterModel.FieldNames.DateTo,ConstantDisplay.HRM_Attendance_DateTo},
            {Att_ReportMonthlyRosterModel.FieldNames.UserExport,ConstantDisplay.HRM_Att_Report_UserExport},
            {Att_ReportMonthlyRosterModel.FieldNames.DateExport,ConstantDisplay.HRM_Attendance_DateExport}
        };
        Dictionary<string, string> formatFields = new Dictionary<string, string>()
        {
        };
        string[] hiddenFields = new string[]
        {
            Att_ReportMonthlyRosterModel.FieldNames.UserExport,
            Att_ReportMonthlyRosterModel.FieldNames.DateExport,
            Att_ReportMonthlyRosterModel.FieldNames.DateFrom,
            Att_ReportMonthlyRosterModel.FieldNames.DateTo
        };
        var grid = new GridBuilderInfo
        {
            Name = "gridAtt_ReportMonthlyRoster",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            FormatFields = formatFields,
            ReadActionUrl = _hrm_Hr_Service + "Att_GetData/GetReportMonthlyRosterList",
            ReadData = "filterFieldInfo",
            ShowEditIcon = false,
            ShowCheckbox = false,
            HiddenFields=hiddenFields
        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Att_ReportMonthlyRosterModel>(grid))
</div>
@{
    var valueFields1 = string.Empty;
    for (int i = 0; i < valueFields.Count(); i++)
    {
        valueFields1 += "," + valueFields[i];
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)

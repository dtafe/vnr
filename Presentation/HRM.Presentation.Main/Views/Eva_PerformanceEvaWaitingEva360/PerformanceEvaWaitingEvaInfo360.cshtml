@using HRM.Infrastructure.Utilities
@using System.Collections
@using HRM.Infrastructure.Security
@using HRM.Presentation.UI.Controls.Kendo

@using HRM.Presentation.Evaluation.Models;
@model Eva_PerformanceEvaModel

@{
    Layout = null;
    var ID = Model == null ? Guid.Empty : Model.ID;
    var PerformanceID = Model == null ? Guid.Empty : Model.PerformanceID.Value;
    string Order = Model != null && Model.OrderEva != null ? Model.OrderEva.Value.ToString() : "0";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    //IList<SelectListItem> IlEDType = Enum.GetValues(typeof(EDType)).Cast<EDType>().Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();
    //IList<SelectListItem> IlFormula = Enum.GetValues(typeof(EFormula)).Cast<EFormula>().Select(x => new SelectListItem { Value = x.ToString(), Text = EnumDropDown.GetEnumDescription(x) }).ToList();
    string attatchFile = (Model != null && !string.IsNullOrEmpty(Model.AttachFileLast)) ? Model.AttachFileLast : "";

    //var display = "none";
    //if (Common.CompanyName == CompanyName.E_FASHIONGARMENT.ToString())
    //{
    //    display = "display";
    //}
   var display = "display";
   
}
<style>
    #gridPerformanceEvaDetailHisory td {
        white-space: normal !important;
    }

    #gridPerformanceEvaDetail td {
        white-space: normal !important;
    }

    #PopUpPerformanceEvaDetail td {
        white-space: normal !important;
    }
</style>

<script>
    var gridName = 'gridPerformanceEvaDetail';
    var popUpName = 'PopUpPerformanceEvaDetail';

    var titleEditPopUp = '@Html.Raw(ConstantDisplay.HRM_Evaluation_PerformanceEvaWaitingEva.TranslateString())';

    function Parameter() {
        var performanceID = '@PerformanceID';
        var performanceEvaID = '@ID';
        var orderEva = '@Order';
        var par =
            {
                PerformanceID: performanceID,
                PerformanceEvaID: performanceEvaID,
                OrderEva: orderEva
            };
        return par;
    }
    SetFieldRequired();
    //luoi dong (lich su)
    function LoadAuto() {
        var performanceEvaID = '@ID';

        $.ajax({
            url: '@_hrm_Hre_Service' + "Eva_GetData/GetPerformanceEvaDynamicByPerformanceEvaID/",
            data: { PerformanceID: '@PerformanceID', PerformanceEvaID: performanceEvaID, OrderEva: '@Order' },
            type: 'POST',
            asyn: false,
            datatype: 'json',
            success: function (data) {
                //  GridDynamicColum('gridPerformanceEvaDetailHisory', data.Data);
                var grid1 = VnrGridDynamic;
                grid1.GridName = 'gridPerformanceEvaDetailHisory';
                grid1.DataSource = data.Data;
                VnrGridDynamicControl(grid1);

                //var grid = $("#gridPerformanceEvaDetailHisory").data("kendoGrid");
                //grid.bind("dataBound", changePageGird);
            }
        });

    }
    $(document).ready(function () {
        $("#gridPerformanceEvaDetailHisory").width($(window).width() * 99 / 100);
        $("#Status1").val("E_APPROVE_" + '@Order');
        //$('#TotalMark').attr('disabled', true);
        $("#TotalMark").val("0");
        ShowHidePanel();
        LoadAuto();
    });

    function download() {
        var attachFileName = '@attatchFile';
        if (attachFileName != undefined) {
            window.location = "/Templates/" + attachFileName;
        }
    }

    function changePageGird() {
        // Lấy mã màu khi vượt mức
        debugger;
        var field1 = ["KPIColor", "", '', 'black', "="];
        var field = [field1];
        SetRowColorNoCondition(gridName, field);

        $('#mastercheckbox').prop('checked', false);
        var result = $("input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]");
        for (var i = 0; i < result.length; i++) {
            if (SelectedGuid.indexOf(result[i].parentNode.parentNode.attributes["data-uid"].value) != -1) {
                result[i].checked = true;
            }
        }
    };

</script>
<!--Form dùng cho edit và update-->

<div>
    @Html.HiddenFor(model => model.ID)

    <div style="display:block; padding-top:10px;">
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Evaluation_PerformanceTemplateProfile.TranslateString()
            </legend>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.PerformancePlanName)
                    </div>
                    <div class="FieldValueView" style="width: 350px; min-height: 24px">
                        @Html.DisplayFor(mode => mode.PerformancePlanName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.DatePerformOfProfile)
                    </div>
                    <div class="FieldValueView" style="width: 350px; min-height: 24px">
                        @Html.DisplayFor(mode => mode.DatePerformOfProfile)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.TemplateName)
                    </div>
                    <div class="FieldValueView" style="width:350px;min-height:24px">

                        @Html.DisplayFor(mode => mode.TemplateName)
                    </div>
                </div>

            </div>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ProfileName)
                    </div>
                    <div class="FieldValueView" style="width: 250px; min-height: 24px">
                        @Html.DisplayFor(mode => mode.ProfileName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.JobTitleNameOfProfile)
                    </div>
                    <div class="FieldValueView" style="width: 250px; min-height: 24px; ">
                        @Html.DisplayFor(mode => mode.JobTitleNameOfProfile)
                    </div>

                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.OrgStructureNameOfProfile)
                    </div>
                    <div class="FieldValueView" style="width: 250px; min-height: 24px; ">
                        @Html.DisplayFor(mode => mode.OrgStructureNameOfProfile)
                    </div>
                </div>
               
            </div>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.EvaluatorName)
                    </div>
                    <div class="FieldValueView" style="width: 250px; min-height: 24px">
                        @Html.DisplayFor(mode => mode.EvaluatorName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.JobTitleNameOfEvaluator)
                    </div>
                    <div class="FieldValueView" style="width: 250px; min-height: 24px">
                        @Html.DisplayFor(mode => mode.JobTitleNameOfEvaluator)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.OrgStructureNameOfEvaluator)
                    </div>
                    <div class="FieldValueView" style="width: 250px; min-height: 24px">
                        @Html.DisplayFor(mode => mode.OrgStructureNameOfEvaluator)
                    </div>
                </div> 
            </div>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.TotalMark)
                    </div>
                    <div class="FieldValue" >
                        @Html.VnrTextBoxFor(mode=>mode.TotalMark)
                    </div>
                </div>
            </div>
</fieldset>
    </div>
    <div style=" display: block; padding-top: 10px; width:99%; overflow-x:scroll">
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Evaluation.TranslateString()
            </legend>
            <div>
                <!--Khai báo các thông tin cho Grid-->
                @{
                    var valueFields = new string[]
                            {
                                Eva_PerformanceEvaDetailModel.FieldNames.Stt,
                                Eva_PerformanceEvaDetailModel.FieldNames.KPIName,
                                Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,
                                Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,
                                Eva_PerformanceEvaDetailModel.FieldNames.Rate,
                                Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,
                                //Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,
                                //Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,
                                Eva_PerformanceEvaDetailModel.FieldNames.Mark,
                                Eva_PerformanceEvaDetailModel.FieldNames.KPIColor,
                                Eva_PerformanceEvaDetailModel.FieldNames.NameEntityName

                            };
                    string[] hiddenFields = new string[]
                            {
                                Eva_PerformanceEvaDetailModel.FieldNames.KPIColor,
                                  Eva_PerformanceEvaDetailModel.FieldNames.NameEntityName
                            };
                    var sizeFields = new Dictionary<string, int>()
                            {
                                {Eva_PerformanceEvaDetailModel.FieldNames.Stt,50},
                                {Eva_PerformanceEvaDetailModel.FieldNames.KPIName,120},
                                {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,250},
                                {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,250},
                                {Eva_PerformanceEvaDetailModel.FieldNames.Rate,100},
                                {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,300},
                                //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,100},
                                //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,100},
                                {Eva_PerformanceEvaDetailModel.FieldNames.Mark,80},
                                {Eva_PerformanceEvaDetailModel.FieldNames.NameEntityName,80},
                            };
                    var disabledFields = new[]
                                {
                                 Eva_PerformanceEvaDetailModel.FieldNames.KPIName,
                                 Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,
                                 Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,
                                 Eva_PerformanceEvaDetailModel.FieldNames.Stt,
                                 Eva_PerformanceEvaDetailModel.FieldNames.Rate,
                                 //Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,
                                 //Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,
                                };

                    var displayFields = new Dictionary<string, string>()
                            {
                                {Eva_PerformanceEvaDetailModel.FieldNames.Stt, ConstantDisplay.HRM_Category_Element_OrderNumber},
                                {Eva_PerformanceEvaDetailModel.FieldNames.KPIName, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_KPIName},
                                {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_DescriptionKPIFix},
                                {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_DescriptionKP},
                                {Eva_PerformanceEvaDetailModel.FieldNames.Rate, ConstantDisplay.HRM_Evaluation_Rate},
                                {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_Evaluation},
                                //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_MinimumRating},
                                //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_MaximumRating},
                                {Eva_PerformanceEvaDetailModel.FieldNames.Mark, ConstantDisplay.HRM_Eva_PerformanceEvaWaitingEva_Mark},
                                {Eva_PerformanceEvaDetailModel.FieldNames.KPIColor, ConstantDisplay.HRM_Evaluation_KPI_KPIColor},
                                {Eva_PerformanceEvaDetailModel.FieldNames.NameEntityName, ConstantDisplay.HRM_Evaluation_NameEntityObject},
                            };
                    var filterable = new Dictionary<string, bool>()
                            {
                               {Eva_PerformanceEvaDetailModel.FieldNames.KPIName,true},
                               {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKPIFix,true},
                               {Eva_PerformanceEvaDetailModel.FieldNames.DescriptionKP,true},
                               {Eva_PerformanceEvaDetailModel.FieldNames.Evaluation,true},
                               //{Eva_PerformanceEvaDetailModel.FieldNames.MinimumRating,true},
                               //{Eva_PerformanceEvaDetailModel.FieldNames.MaximumRating,true},
                               {Eva_PerformanceEvaDetailModel.FieldNames.Mark,true},
                               {Eva_PerformanceEvaDetailModel.FieldNames.NameEntityName,true},
                            };
                    string[] groupFields = new[]
            {
             Eva_PerformanceEvaDetailModel.FieldNames.NameEntityName,
            };
                    var grid = new GridBuilderInfo
                    {
                        Name = "gridPerformanceEvaDetail",
                        ReadActionUrl = _hrm_Hre_Service + "Eva_GetData/GetPerformanceEvaDetailByPerformanceEvaID?PerfomanceEvaID=" + ID,
                        ReadData = "filterFieldInfo",
                        DisableFields = disabledFields,
                        ValueFields = valueFields,
                        GroupFields=groupFields,
                        SizeFields = sizeFields,
                        HiddenFields = hiddenFields,
                        DisplayFields = displayFields,
                        EditMode = GridEditMode.InCell,
                        PageSize = 20,
                        GridHeight = 340,
                        AutoBind = true,
                        Navigatable = true,
                        ShowDeleteButton = true,
                        ShowEditIcon = false,
                        EventDataBound = "changePageGird"
                    };
                }

                <!--Khởi tạo Grid-->
                @(Html.VnrGrid<Eva_PerformanceEvaDetailModel>(grid))
            </div>

            <div style="float: right; text-align: right; padding-top:10px; display:none">
                @*@{
                    var TotalMark = new TextBoxBuilderInfo()
                    {
                        Width = 80
                    };
                }
                @Html.VnrTextBoxFor(mode => mode.TotalMark, TotalMark)*@
                @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "calculate", Name = "Calculate", Content = ConstantAction.HRM_Common_Calculate.TranslateString(), ImageUrl = ConstantPath.IconComputePath })
            </div>
        </fieldset>
    </div>

    @if (Model != null && Model.OrderEva > 1)
    {

        <div style=" display: block; padding-top: 10px;">
            <fieldset>
                <legend>
                    @ConstantDisplay.HRM_Evaluation_HistoryPerformance.TranslateString()
                </legend>
                <div id="gridPerformanceEvaDetailHisory" style="overflow-x:scroll; width:1200px;"></div>
            </fieldset>
        </div>
    }

    <div style="display: @display; padding-top: 10px;">
        <fieldset>
            <legend>
                @ConstantDisplay.HRM_Evaluation_GeneralPerformance.TranslateString()
            </legend>
            <div style="float:left; padding-right:100px">

                <div>
                    <div class="FieldTitle">
                        @Html.HiddenFor(mode => mode.ID)
                        @Html.HiddenFor(model => model.Status, new { id = "Status1" })
                        @Html.VnrLabelFor(mode => mode.Strengths)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Strengths)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Weaknesses)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.Weaknesses)
                    </div>
                </div>
            </div>
            <div style="float:left;">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.ResultNote)
                    </div>
                    <div class="FieldValue">

                        @Html.VnrTextAreaFor(mode => mode.ResultNote)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.LevelName)
                    </div>
                    <div class="FieldValue">

                        @{
                            var LevelID = new DropDownListBuilderInfo()
                            {
                                DataTextField = "LevelName",
                                DataValueField = "ID",
                                Url = _hrm_Hre_Service + "Eva_GetData/GetMultiLevel",
                                OptionLabel = ConstantDisplay.HRM_Evaluation_SelectLevel.TranslateString(),
                                Value = Model != null && !string.IsNullOrEmpty(Model.LevelName) ? Model.LevelName : null
                            };
                        }
                        @Html.VnrDropDownListFor(mode => mode.LevelID, LevelID)

                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.Proportion)
                    </div>
                    <div class="FieldValue">
                        @{
                            var Proportion = new NumericTextBoxBuilderInfo<double>()
                            {
                                StyleCss = "Width:70px"
                            };
                        }
                        @Html.VnrNumericTextBoxFor(mode => mode.Proportion, Proportion)
                    </div>
                </div>
                <div id="dvAttachFile">
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(mode => mode.AttachFile)
                    </div>
                    <div class="FieldValue">
                        @Html.HiddenFor(model => model.AttachFile)
                        <input type="file" name="files" id="UploadAttachFile" />
                        <script>
                            var vnrUpload = VnrUploadBuilder;
                            vnrUpload.Id = "UploadAttachFile";
                            vnrUpload.Host = '@_hrm_Main_Web';
                            vnrUpload.Multiple = true,
                            vnrUpload.Field = "AttachFile",
                            vnrUpload.FileType = "*.xls*.xlsx*.txt*.pdf*.doc*.docx*.jpg",
                            vnrUpload.Files = '@Html.DisplayFor(model => model.AttachFile)';
                            vnrUpload.AutoUpload = true;
                            vnrUpload.AutoReNameFile = true;
                            vnrUpload.Enable = true;
                            VnrUpload(vnrUpload);
                        </script>
                    </div>
                    <div style="clear: both;"></div>
                </div>
            </div>
        </fieldset>
    </div>
    <hr style="padding:5px;" />
</div>

@using System.Collections
@using HRM.Infrastructure.Utilities

@using HRM.Presentation.UI.Controls.Kendo
@model HRM.Presentation.Payroll.Models.Sal_UnusualAllowanceModel

@{
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;

    Guid ProfileID = Guid.Empty;
    string aaa = ViewBag.profileID;
    if (!string.IsNullOrEmpty(aaa))
    {
        ProfileID = Common.ConvertToGuid(aaa.ToString());
    }
    Layout = null;
    IList<SelectListItem> listEDType = Enum.GetValues(typeof(EnumDropDown.EDType))
    .Cast<EnumDropDown.EDType>()
    .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
    .ToList();

}
<script>
    SetFieldRequiredByScreenName("SalHre_UnusualEDChildCareInfo");
    document.getElementById("SalHreUnuEDChildInfo_Amount").readOnly = true;
    //document.getElementById("HreUnusualIEDChildInfo_Type").readOnly = true;
    document.getElementById("SalHreUnuEDChildInfo_UnusualAllowanceCfgName").readOnly = true;
    function onSave() {
        onSaveAndContinue($('#form_Profiel_Sal_Hre_UnuEDChildModel'), '@_hrm_Hr_Service', 'api/Sal_UnusualEDChildCare/', 'grid_Hre_UnusualEDChildCare', 'window_Hre_UnusualEDChildCare');
        return false;
    }
    function onSaveClose() {
        onSaveAndClose($('#form_Profiel_Sal_Hre_UnuEDChildModel'), '@_hrm_Hr_Service', 'api/Sal_UnusualEDChildCare/', 'grid_Hre_UnusualEDChildCare', 'window_Hre_UnusualEDChildCare');
        return false;
    }
    function onSaveDataPopUp() {
        onlySave($('#form_Profiel_Sal_Hre_UnuEDChildModel'), '@_hrm_Hr_Service', 'api/Sal_UnusualEDChildCare/', 'grid_Hre_UnusualEDChildCare');
        return false;
    }
 
    function showmonthstart(e) {
        debugger;
        var relativeID = e.sender._old;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetYearOfBirthByRalativeId',
            data: { relativeid: relativeID },
            dataType: 'json',
            async: false,
            success: function (data) {
                debugger;
                var a = $("#SalHreUnuEDChildInfo_MonthStart").data("kendoDatePicker");
                a.value(data[0].YearOfBirth);

                var datemonthstart = a.value();
                var day = datemonthstart.getDate();
                var month = datemonthstart.getMonth() + 1;
                var year = datemonthstart.getFullYear() + 18;
                var fullDate = day + "/" + month + "/" + year;
                var b = $("#SalHreUnuEDChildInfo_MonthEnd").data("kendoDatePicker");
                b.value(fullDate);
            }

        });
    }
    function showMonthEnd(e) {
        debugger;
        var datemonthstart = e.sender._old;
        var day = datemonthstart.getDate();
        var month = datemonthstart.getMonth() + 1;
        var year = datemonthstart.getFullYear() + 18;
        var fullDate = day + "/" + month + "/" + year;
        var a = $("#SalHreUnuEDChildInfo_MonthEnd").data("kendoDatePicker");
        a.value(fullDate);
    };

    //Even change số tháng bù và xử lý tính tiền bù
    function ChangeNoCompensation() {
        var value = this.value();
        var AmountofOffsetNumberic = $("#SalUnuEDChildInfo_AmountofOffset").data("kendoNumericTextBox");
        var AmountNumberic = $("#SalHreUnuEDChildInfo_Amount").data("kendoNumericTextBox");

        var Result = value * AmountNumberic.value();
        AmountofOffsetNumberic.value(Result);
    };
</script>

@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Profiel_Sal_Hre_UnuEDChildModel" }))
{
    @Html.HiddenFor(model => model.UnusualED_ID)
     <div>
        @{
            if (Model != null)
            {
                @Html.HiddenFor(m => m.ProfileID)
                @Html.HiddenFor(m=>m.ID)
            }
            else
            {
                @Html.Hidden("ProfileID", ProfileID)
            }

        }
     
    </div>
    <table>
        <tr>
            <td>
                <div>
                    <div class="FieldTitle150">
                        @*@Html.VnrLabelFor(model=>model.RelativeID)*@
                        <label>
                            @ConstantDisplay.HRM_Attendance_Pregnancy_ChildName.TranslateString()
                        </label>
                    </div>
                    <div class="FieldValue">
                        @{
    var _relativeName = new ComboBoxBuilderInfo()
       {
           Name = "SalHreUnuEDChildInfo_RelativeID",
           StyleCss = "Width: 300px",
           DataTextField = "RelativeName",
           DataValueField = "ID",
           ServerFilter = true,
           FilterType = FilterType.Contains,
           EventChange = "showmonthstart",
           Value = Model == null ? string.Empty : Model.RelativeID.ToString()
       };
                        }
                        @Html.VnrComboBoxFor(model => model.RelativeID, _relativeName).Text(Model == null ? string.Empty : Model.RelativeName)
                    </div>
                </div>

                @*<div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Type)
                    </div>
                    <div class="FieldValue">
                        @{
    var _ddlTypeCare = new DropDownListBuilderInfo()
    {
        Name = "HreUnusualIEDChildInfo_Type",
        Value = EDType.E_EARNING.ToString(),
        DataTextField = "Text",
        DataValueField = "Value",
        BindTo = listEDType,
        Autobind = true,
    };
                        }
                        @Html.VnrDropDownListFor(model => model.Type, _ddlTypeCare)
                    </div>
                </div>*@
                <div class="hidden">
                    @{
    var _txtUnusualEDTypeID = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "SalHreUnuEDChildInfo_UnusualEDTypeID"
    };
                    }
                    @Html.VnrTextBoxFor(model => model.UnusualEDTypeID, _txtUnusualEDTypeID)
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.UnusualEDTypeID)
                    </div>
                    <div class="FieldValue">
                        @{
    var _txtUnusualAllowanceCfgName = new TextBoxBuilderInfo()
    {
        Width = 300,
        Name = "SalHreUnuEDChildInfo_UnusualAllowanceCfgName",
        CssStyle = "background-color:WhiteSmoke"
    };
                        }
                        @Html.VnrTextBoxFor(model => model.UnusualAllowanceCfgName, _txtUnusualAllowanceCfgName)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.Amount)
                    </div>
                    <div class="FieldValue">
                        @{
    var _SalUnuEDChildInfoAmount = new NumericTextBoxBuilderInfo<double>
    {
        Name = "SalHreUnuEDChildInfo_Amount",
        StyleCss = "width:150px;background-color:WhiteSmoke",
        Format = ConstantFormat.HRM_Format_Money
    }; 
                        }
                        @Html.VnrNumericTextBoxFor(model => model.Amount, _SalUnuEDChildInfoAmount)
                        @{
    var ddlCurrency = new ComboBoxBuilderInfo()
    {
        Name = "SalHreUnuEDChildInfo_CurrencyID",
        StyleCss = "width:135px;",
        DataTextField = "CurrencyName",
        DataValueField = "ID",
        Index = 0,
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
        Autobind = true,
        Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
    };
                        }
                        @(Html.VnrComboBoxFor(model => model.CurrencyID, ddlCurrency).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>
                </div>
                @*<div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.BudgetId)
                    </div>
                    <div class="FieldValue">
                        @{
    var ddlBudget = new DropDownListBuilderInfo()
    {
        Name = "SalHreUnuEDChildInfo_BudgetId",
        DataTextField = "BudgetName",
        DataValueField = "ID",
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiBudget",
        Autobind = true,
        //OptionLabel = ConstantDisplay.HRM_Category_Budget_BudgetName.TranslateString(),
    };
                        }
                        @Html.VnrDropDownListFor(model => model.BudgetId, ddlBudget)
                    </div>
                </div>*@

                <div>
                    <div class="FieldTitle150">
                        <label>
                            @ConstantDisplay.HRM_System_AutoBackup_DateStart.TranslateString()
                        </label>
                        @*@Html.VnrLabelFor(model => model.MonthStart)*@
                    </div>
                    <div class="FieldValue">
                        @{
    var MonthStart = new DatePickerBuilderInfo()
    {
        Name = "SalHreUnuEDChildInfo_MonthStart",
        StyleCss = "width:120px;",
        EventSelect = "showMonthEnd"
    };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthStart, MonthStart)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        <label>
                            @ConstantDisplay.HRM_HR_Discipline_DateOfExpiry.TranslateString()
                        </label>
                    </div>
                    <div class="FieldValue">


                        @{
    var MonthEnd = new DatePickerBuilderInfo()
    {
        Name = "SalHreUnuEDChildInfo_MonthEnd",
        StyleCss = "width:120px;",
    };
                        }
                        @Html.VnrDatePickerFor(model => model.MonthEnd, MonthEnd)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.DateSubmitDoc)
                    </div>
                    <div class="FieldValue">
                        @{
    var _DateSubmitDoc = new DatePickerBuilderInfo()
    {
        Name = "SalHreUnuEDChildInfo_DateSubmitDoc",
        StyleCss = "width:120px;",
    };
                        }
                        @Html.VnrDatePickerFor(model => model.DateSubmitDoc, _DateSubmitDoc)
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(model => model.NoCompensation)
                    </div>
                    <div class="FieldValue">
                        @{
    var _NoCompensation = new NumericTextBoxBuilderInfo<Int32>()
   {
       Name = "SalHreUnuEDChildInfo_NoCompensation",
       StyleCss = "width:150px",
       Format = ConstantFormat.HRM_Format_Int
   };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.NoCompensation, _NoCompensation).Events(m => m.Change("ChangeNoCompensation"))
                    </div>
                </div>
                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.AmountOfOffSet)
                    </div>
                    <div class="FieldValue">
                        @{
    var _SalUnuEDChildInfoAmountofOffset = new NumericTextBoxBuilderInfo<double>
    {
        Name = "SalUnuEDChildInfo_AmountofOffset",
        StyleCss = "width:150px;",
        Format = ConstantFormat.HRM_Format_Money,
    };
                        }
                        @Html.VnrNumericTextBoxFor(model => model.AmountOfOffSet, _SalUnuEDChildInfoAmountofOffset)
                        @{
    var ddlCurrency2 = new ComboBoxBuilderInfo()
    {
        Name = "SalUnuEDChildInfo_CurrencyID2",
        StyleCss = "width:135px;",
        DataTextField = "CurrencyName",
        DataValueField = "ID",
        Index = 0,
        Url = _hrm_Hr_Service + "Cat_GetData/GetMultiCurrency",
        Autobind = true,
        Value = Model == null ? string.Empty : Model.CurrencyID.ToString(),
    };
                        }
                        @(Html.VnrComboBoxFor(model => model.CurrencyID2, ddlCurrency2).Text(Model == null ? string.Empty : Model.CurrencyName))
                    </div>

                </div>

                <div>
                    <div class="FieldTitle150">
                        @Html.VnrLabelFor(mode => mode.Notes)
                    </div>
                    <div class="FieldValue">
                        @Html.VnrTextAreaFor(model => model.Notes, "width:500px;height:100px;")
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="FieldTitle150">
                </div>
                <div class="FieldValue">
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-SalHre_UnusualIEDChildCare", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-SalHre_UnusualIEDChildCare", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                    @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-SalHre_UnusualIEDChildCare", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
                </div>
            </td>
        </tr>
    </table>
}
@*<div>
    @{
        if (Model != null)
        {
            <script>
                $(document).ready(function () {
                    debugger;
                    var profileIDedit = SelectID;
                    $.ajax({
                        type: 'POST',
                        url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeByProfileId',
                        data: { profileid: profileIDedit[0] },
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                            var relativeCombo = $("#SalUnuEDChildInfo_RelativeID").data("kendoComboBox");
                            relativeCombo.setDataSource(data);
                            relativeCombo.refresh();
                        }
                    });

                });
            </script>
        }

    }
</div>*@
<script>
    $(document).ready(function () {
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetRalativeByProfileId',
            data: { profileid: SelectID },
            dataType: 'json',
            async: false,
            success: function (data) {
                var relativeCombo = $("#SalHreUnuEDChildInfo_RelativeID").data("kendoComboBox");
                relativeCombo.setDataSource(data);
                relativeCombo.refresh();
            }
        });
    });

</script>
<script>
    $(document).ready(function () {
        debugger;
        $.ajax({
            type: 'POST',
            url: '@_hrm_Hr_Service' + 'Sal_GetData/GetAmountByChildCare',
            data: { id: "" },
            dataType: 'json',
            async: false,
            success: function (data) {
                debugger;
                var numerictextbox = $("#SalHreUnuEDChildInfo_Amount").data("kendoNumericTextBox");
                numerictextbox.value(data[0].Amount);
                document.getElementById("SalHreUnuEDChildInfo_UnusualEDTypeID").value = data[0].ID;
                document.getElementById("SalHreUnuEDChildInfo_UnusualAllowanceCfgName").value = data[0].UnusualAllowanceCfgName;
            }
        });
    });

</script>
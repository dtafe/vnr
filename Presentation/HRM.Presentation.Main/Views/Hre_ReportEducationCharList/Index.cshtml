@using HRM.Infrastructure.Utilities
@using HRM.Presentation.Hr.Models;
@using HRM.Presentation.UI.Controls.Kendo

@model Hre_ReportEducationChartListModel
@{
    ViewBag.Title = "Index";
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hre_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    var controller = ViewContext.RouteData.Values["Controller"].ToString();
    var action = ViewContext.RouteData.Values["Action"].ToString();
    var screen = controller + "/" + action;
}
@Html.Hidden("Screen", screen)
<script>
    var checkedNodes = [];
    var isCreateTemplate = false;
    var isCreateTemplateForDynamicGrid = false;
    function filterFieldInfo(isExport) {
        var elementPara = {
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#DateTo").val()),
            EducationIDs : $("SEducationIDs").val(),
            OrgStructureID: checkedNodes.join(','),
            AppliedForThisPeriod: $('#@Html.FieldIdFor(model => model.AppliedForThisPeriod)').val(),
            ValueFields: $('#valueFieldsGrid').val(),
            IsCreateTemplate: isCreateTemplate,
            IsCreateTemplateForDynamicGrid: isCreateTemplateForDynamicGrid,
        };
        if (isExport == true) {
            elementPara["ExportId"] = $('#ddlScreenName').val();
        }
        return elementPara;
    }


    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        //Show Hide Panel
        ShowHidePanel();
    $("#btnSearch").click(function () {

        var treeView = $("#treeviewOrg").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes)
        var grid = $('#gridAtt_ReportEducationCharList').data("kendoGrid");
        grid.dataSource.read();
        selectedIds = [];
        checkedNodes = [];

    });
    });
    $("#btnExport").click(function () {
        var isAccess = checkPermission(PrivilegeType.Export, '@HRM.Infrastructure.Security.ConstantPermission.Hre_ReportEducationChartList');
        if (!isAccess) {
            return;
        }
        isCreateTemplate = false;
        isCreateTemplateForDynamicGrid = false;
        if ($('#ddlScreenName').val() == "") {
            ExportFail();
            return;
        }
        var urlGetData = '@_hrm_Hre_Service' + "Hre_GetData/GetReportEducationCharList";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload);
        checkedNodes = [];
    });
    $("#btnCreateTemplate").click(function () {
        isCreateTemplate = true;
        isCreateTemplateForDynamicGrid = false;
        CreateTemplate('@_hrm_Hre_Service' + "Hre_GetData/GetReportEducationCharList", filterFieldInfo(true));
    });
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge" style="overflow:visible">
                <div class="hrm_box">
                    <div id="div2">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.DateFrom)
                        </div>
                        <div class="FieldValue">
                            @{
                            var DateFrom = new DatePickerBuilderInfo() {
                                Name = "DateFrom",
                                StyleCss = "width:100px;",
                            };
                            }
                            @Html.VnrDatePickerFor(mode => mode.DateFrom, DateFrom)
                            @{
                                var DateTo = new DatePickerBuilderInfo()
                                {
                                    Name = "DateTo",
                                    StyleCss = "width:100px;",
                                };
                            }
                            @Html.VnrDatePickerFor(mode => mode.DateTo, DateTo)
                        </div>
                        <div style="clear: both;"></div>
                    </div>
                    <div id="div14">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.OrgStructureID)
                        </div>
                        <div class="FieldValue">
                            <div class="FieldValue">
                                @Html.Partial("EditorTemplates/OrgStructureTreeViewDropdown")
                            </div>

                        </div>
                    </div>
                    <div id="div1">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.EducationIDs)
                        </div>
                        <div class="FieldValue">
                            @{
                            var EducationIDs = new MultiSelectBuilderInfo()
                            {
                                Name ="SEducationIDs",
                                DataTextField = "NameEntityName",
                                DataValueField = "ID",
                                Url = @_hrm_Hr_Service + "Cat_GetData/GetMultiEducationLevel",
                                Value = @Html.DisplayFor(mode => mode.EducationIDs).ToString(),


                            };
                            }
                            @(Html.VnrMultiSelectFor(mode => mode.EducationIDs, EducationIDs))
                        </div>
                    </div>
                    <div id="div6">
                        <div class="FieldTitle150">
                            @Html.VnrLabelFor(mode => mode.AppliedForThisPeriod)
                        </div>
                        <div class="FieldValue">
                            <div class="FieldValue">
                                @{
                                var IsIncludeQuitEmp = new CheckBoxBuilderInfo()
                               {

                               };
                                }

                                @Html.VnrCheckBoxFor(model => model.AppliedForThisPeriod, IsIncludeQuitEmp)
                            </div>
                        </div>
                    </div>

                </div>
                </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge">

    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    <div style="float:right">
        <script>
            function GetScreenName() {
                return {
                    screenName: '@screen'
                };
            }
        </script>
        <div class="FieldValue" style="margin-top: 0;">
            @{
                var screenName = new DropDownListBuilderInfo()
                {
                    Name = "ddlScreenName",
                    DataTextField = "ExportName",
                    DataValueField = "ID",
                    Url = @_hrm_Hr_Service + "Cat_GetData/GetScreenName",
                    StyleCss = "width:200px;",
                    Data = "GetScreenName",
                };
            }
            @Html.VnrDropDownList(screenName)

            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExport", Content = ConstantDisplay.HRM_Common_Export_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
            @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateTemplate", Content = ConstantDisplay.HRM_Common_CreateTemplate_Button.TranslateString(), ImageUrl = ConstantPath.IconExportPath })
        </div>
    </div>
</div>
<div >
    <!--Khai báo các thông tin cho Grid-->
    @{
        string[] valueFields = new string[]
                            {
                                Hre_ReportEducationChartListModel.FieldNames.EducationLevel,
                                Hre_ReportEducationChartListModel.FieldNames.ProfileCount,
                             
                            };
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {Hre_ReportEducationChartListModel.FieldNames.EducationLevel,150},
                                {Hre_ReportEducationChartListModel.FieldNames.ProfileCount,75},
                              
                            };

        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                            {
                                {Hre_ReportEducationChartListModel.FieldNames.EducationLevel,ConstantDisplay.HRM_Hr_ReportEducationChar_EducationIDs},
                                {Hre_ReportEducationChartListModel.FieldNames.ProfileCount,ConstantDisplay.HRM_Hr_ReportEducationChar_ProfileCount},
                            
                       
                                
                            };
        var grid = new GridBuilderInfo
        {
            Name = "gridAtt_ReportEducationCharList",
            ValueFields = valueFields,
            SizeFields = sizeFields,
            DisplayFields = displayFields,
            ShowNextPrevious = true,
            PageSize = 20,
            ShowPageNumber = true,
            ReadActionUrl = _hrm_Hre_Service + "Hre_GetData/GetReportEducationCharList",
            ReadData = "filterFieldInfo",
            ShowCheckbox = false,
            ShowEditIcon = false,
        };
       

    }

    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<Hre_ReportEducationChartListModel>(grid))
</div>


@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Payroll.Models
@using HRM.Infrastructure.Security
@model Sal_SalaryDepartmentSearchModel
@{
    ViewBag.Title = "Index";
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    var _hrm_Sys_Service = ConstantPathWeb.Hrm_Sys_Service;
    Layout = null;
}

<script type="text/javascript">

    function filterFieldInfo(isExport) {
        var checkedNodes = [];
        var treeView = $("#OrgSalaryDeparment").data("kendoTreeView");
        checkedNodeOrderNumbers(treeView.dataSource.view(), checkedNodes);
        return {
            OrgStructureID: checkedNodes.join(","),
            DateFrom: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#SDateFrom").val()),
            DateTo: ConvertDatetime('@_hrm_Sys_Service' + 'Sys_GetData/GetFormatDate/', $("#SDateTo").val()),
            IsExport: isExport,
            ValueFields: $("#valueFieldsGrid").val()
        };
    };

    function btnSearch() {
        ReadGrid("grid_SalaryDeparment");
    };


    function btnCreate() {
        KendoRouteMapping('#Hrm_Main_Web/Sal_SalaryDepartment/Create/', 'Hrm_Main_Web', '@_hrm_Main_Web');
    };
    EditGridNewPage("grid_SalaryDeparment", '#Hrm_Main_Web/Sal_SalaryDepartment/Edit/', 'Hrm_Main_Web', '@_hrm_Main_Web');

    //Xử lý nút Delete
    $('#btnDelete').click(function (e) {

        if (selectedIds.length == 0) {
            DeleteFail();
            return;
        }
        //  e.preventDefault();
        DeleteSelected("grid_SalaryDeparment", '@_hrm_Main_Web' + "Sal_SalaryDepartment/RemoveSelected/", selectedIds, '@ConstantPermission.Sal_Grade');
        //selectedIds = [];
    });

    $("#btnExportSelected").click(function () {

        if (selectedIds == "") {
            ExportSelectedFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportSalaryDeparmentSelected/";
        var urlDownload = '@_hrm_Main_Web';
        var listIds = selectedIds.join(",");
        var listFields = $('#valueFieldsGrid').val();
        ExportSelected(urlGetData, listIds, listFields, urlDownload, '@ConstantPermission.Sal_Grade');
    });

    $("#btnExportAll").click(function () {
        var grid = $("#grid_SalaryDeparment").data("kendoGrid");
        if (grid.dataSource.total() == 0)
        {
            ExportAllFail();
            return;
        }
        var urlGetData = '@_hrm_Hr_Service' + "Sal_GetData/ExportAllSalaryDeparmentList/";
        var urlDownload = '@_hrm_Main_Web';
        var dataParameter = filterFieldInfo(true);
        ExportAll(urlGetData, dataParameter, urlDownload, '@ConstantPermission.Sal_Grade');
    });
    
</script>

<div class="panel-wrap">
    <div id="main-content">
        <div class="widget">
            <h3>
                <!--Dòng title cho biết đang ở form nào và link quay lại-->
                @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel")
                <span class="collapse k-icon k-i-arrowhead-n"></span>
            </h3>
            <!--Bất đầu nôi dung tìm kiếm-->
            <div class="contendSearchWidge">
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(m=>m.OrgStructureID)
                    </div>
                    <div class="FieldValue">
                        @{
                            var org = new TreeViewDropdDownBuilderInfo()
                            {
                                Name="OrgSalaryDeparment"
                            };
                            
                        }
                        @Html.Partial("EditorTemplates/OrgTreeViewDropDown", org)
           
                    </div>
                </div>
                <div>
                    <div class="FieldTitle">
                        @Html.VnrLabelFor(m => m.DateFrom)
                    </div>
                    <div class="FieldValue">
                      @{
                            var dateFrom = new DatePickerBuilderInfo()
                            {
                                Name = "SDateFrom",
                                StyleCss = "width:100px;",
                                Placeholder = ConstantDisplay.HRM_HR_Profile_DateFrom.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateFrom, dateFrom)
                        @{
                            var dateTo = new DatePickerBuilderInfo()
                            {
                                Name = "SDateTo",
                                StyleCss = "width:100px;",
                                Placeholder = ConstantDisplay.HRM_HR_Profile_DateTo.TranslateString(),
                            };
                        }
                        @Html.VnrDatePickerFor(model => model.DateTo, dateTo)
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
</div>
<div class="commandToolBarWidge" id="anchor">
    <div style="float:left">
        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "btnCreate", Name = "btnCreate", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
        @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "btnSearch", Name = "btnSearch", Content = ConstantAction.HRM_Common_Search.TranslateString(), ImageUrl = ConstantPath.IconSearchPath })
    </div>
    <div style="float:right">
        <div class="btn-group">
            <button type="button" class="k-button btn-default dropdown-toggle" data-toggle="dropdown">
                <img src="@ConstantPath.IconExportPath" width="15" height="15" />
                @ConstantDisplay.HRM_Common_ExportDropdown_Title.TranslateString()
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportSelected", Content = ConstantAction.HRM_Common_ExportSelected.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
                <li>@Html.VnrButton(new ButtonBuilderInfo() { Name = "btnExportAll", Content = ConstantAction.HRM_Common_ExportAll.TranslateString(), ImageUrl = ConstantPath.IconExportPath, CssStyle = "border:0" })</li>
            </ul>
        </div>
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnChangeColumnSalaryDepartment", Content = ConstantDisplay.HRM_ChangeColumn.TranslateString(), ImageUrl = ConstantPath.Hrm_ChangeColumnIcon })
        @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnDelete", Content = ConstantAction.HRM_Common_Delete.TranslateString(), ImageUrl = ConstantPath.IconDeletePath })
    </div>
    <div class="clear"></div>
</div>

<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Payroll.Models
    @{
        IList<SelectListItem> listSaleTypes = Enum.GetValues(typeof(EnumDropDown.SalesType))
    .Cast<EnumDropDown.SalesType>()
    .Select(x => new SelectListItem { Text = EnumDropDown.GetEnumDescription(x), Value = x.ToString() })
    .ToList();

    var columnMode = string.Empty;
        var defaultColumnMode = string.Empty;
        var userId = Session[SessionObjects.UserId];
        //Lấy tên lưới cộng thêm tên của control và action để tránh trùng nhau
        var gridControlName = ConstantControlName.HRM_grid_SalaryDeparment_Name + "__Sal_SalaryDepartment_Index";
        HRM.Presentation.Main.Controllers.Sys_ColumnModeController control = new HRM.Presentation.Main.Controllers.Sys_ColumnModeController();
        //Get thông tin cấu hình trong database
        GridBuilderModel gridInfo = control.GetGridBuilderInfo(userId + "," + gridControlName);

        var grid = new GridBuilderInfo
        {
            Name = ConstantControlName.HRM_grid_SalaryDeparment_Name,
            ShowCommand = false,
            ReadActionUrl = _hrm_Hr_Service + "Sal_GetData/Get_SalaryDeparment/",
            ReadData = "filterFieldInfo",
        };

        if (gridInfo != null && gridInfo.ValueFields != null && gridInfo.ValueFields.Any())
        {
            grid.ValueFields = gridInfo.ValueFields;
            grid.SizeFields = gridInfo.SizeFields;
            grid.Filterable = gridInfo.FilterFields;
            grid.DisplayFields = gridInfo.DisplayFields;
            grid.LockedFields = gridInfo.LockedFields;
            grid.GroupFields = gridInfo.GroupFields;
            if (gridInfo.PageSize > 0)
            {
                grid.PageSize = gridInfo.PageSize;
            }
            columnMode = gridInfo.StringXml;
        }
        else
        {
            grid.ValueFields = new[]
            {
                
                
               Sal_SalaryDepartmentModel.FieldNames.E_UNIT,
                       Sal_SalaryDepartmentModel.FieldNames.E_DIVISION,
                Sal_SalaryDepartmentModel.FieldNames.E_DEPARTMENT,
                 Sal_SalaryDepartmentModel.FieldNames.E_TEAM,
                Sal_SalaryDepartmentModel.FieldNames.E_SECTION,

                     
                Sal_SalaryDepartmentModel.FieldNames.ProductionLineName,
                Sal_SalaryDepartmentModel.FieldNames.IsAll,
                Sal_SalaryDepartmentModel.FieldNames.MonthYear,
                Sal_SalaryDepartmentModel.FieldNames.DateFrom,
                Sal_SalaryDepartmentModel.FieldNames.DateTo,
                Sal_SalaryDepartmentModel.FieldNames.Amount,
                Sal_SalaryDepartmentModel.FieldNames.CurrencyName,
                Sal_SalaryDepartmentModel.FieldNames.Note,
            };

            grid.SizeFields = new Dictionary<string, int>()
            {
               
                
                {Sal_SalaryDepartmentModel.FieldNames.E_DEPARTMENT,100},
                {Sal_SalaryDepartmentModel.FieldNames.E_DIVISION,100},
                {Sal_SalaryDepartmentModel.FieldNames.E_SECTION,100},
                {Sal_SalaryDepartmentModel.FieldNames.E_TEAM,100},
                {Sal_SalaryDepartmentModel.FieldNames.E_UNIT,100},
                
                
                {Sal_SalaryDepartmentModel.FieldNames.ProductionLineName,100},
                {Sal_SalaryDepartmentModel.FieldNames.IsAll,140},
                {Sal_SalaryDepartmentModel.FieldNames.MonthYear,120},
                {Sal_SalaryDepartmentModel.FieldNames.DateFrom,90},
                {Sal_SalaryDepartmentModel.FieldNames.DateTo,90},
                {Sal_SalaryDepartmentModel.FieldNames.Amount,110},
                {Sal_SalaryDepartmentModel.FieldNames.CurrencyName,90},
                {Sal_SalaryDepartmentModel.FieldNames.Note,200}
            };

            grid.DisplayFields = new Dictionary<string, string>()
            {
                
                {Sal_SalaryDepartmentModel.FieldNames.E_UNIT,ConstantDisplay.HRM_Hre_Report_E_UNIT},
                {Sal_SalaryDepartmentModel.FieldNames.E_DIVISION,ConstantDisplay.HRM_Hre_Report_E_DIVISION},
                {Sal_SalaryDepartmentModel.FieldNames.E_DEPARTMENT,ConstantDisplay.HRM_Hre_Report_E_DEPARTMENT},
                {Sal_SalaryDepartmentModel.FieldNames.E_SECTION,ConstantDisplay.HRM_Hre_Report_E_SECTION},
                {Sal_SalaryDepartmentModel.FieldNames.E_TEAM,ConstantDisplay.HRM_Hre_Report_E_TEAM},
                
                {Sal_SalaryDepartmentModel.FieldNames.ProductionLineName,ConstantDisplay.HRM_SAL_Reparment_ProductionLineName},
                {Sal_SalaryDepartmentModel.FieldNames.IsAll,ConstantDisplay.HRM_Sal_RevenueForProfile_Target},
                {Sal_SalaryDepartmentModel.FieldNames.MonthYear,ConstantDisplay.HRM_Common_Search_Month},
                {Sal_SalaryDepartmentModel.FieldNames.DateFrom,ConstantDisplay.HRM_Sal_LineItemForShop_DateFrom},
                {Sal_SalaryDepartmentModel.FieldNames.DateTo,ConstantDisplay.HRM_Sal_LineItemForShop_DateTo},
                {Sal_SalaryDepartmentModel.FieldNames.Amount,ConstantDisplay.HRM_Payroll},
                {Sal_SalaryDepartmentModel.FieldNames.CurrencyName,ConstantDisplay.HRM_Payroll_BasicSalary_CurrencyName},
                {Sal_SalaryDepartmentModel.FieldNames.Note,ConstantDisplay.HRM_Sal_RevenueForShop_Note}
            };
            defaultColumnMode = control.SetDefaultGridBuilderInfo(grid);
        }
        //var grid = new GridBuilderInfo
        //{
        //    Name = "grid_SalaryDeparment",
        //    ValueFields = valueFields,
        //    SizeFields = sizeFields,
        //    DisplayFields = displayFields,
        //    ReadActionUrl = _hrm_Hr_Service + "Sal_GetData/Get_SalaryDeparment/",
        //    ReadData = "filterFieldInfo",
        //};
    }
    @(Html.VnrGrid<Sal_SalaryDepartmentModel>(grid))
    <script>
        ClickButtonChangeColum("btnChangeColumnSalaryDepartment", "Sal_SalaryDepartmentModel");
        $(document).ready(function () {
            $("#" + '@ConstantControlName.HRM_ChangeColum_Grid_Name').val('@gridControlName');
            $("#" + '@ConstantControlName.HRM_ChangeColum_ColumMode_Name').val('@Html.Raw(columnMode)');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('');
            $("#" + '@ConstantControlName.HRM_ChangeColum_Default_ColumMode_Name').val('@Html.Raw(defaultColumnMode)');
        });
    </script>
</div>
@{
    var listValueField = grid.ValueFields;
    var valueFields1 = string.Empty;
    if (listValueField != null)
    {
        for (int i = 0; i < listValueField.Count(); i++)
        {
            valueFields1 += "," + listValueField[i];
        }
    }
}
@Html.Hidden("valueFieldsGrid", valueFields1)
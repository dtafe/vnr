@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.UI.Controls.Kendo.MultiSelect
@using HRM.Presentation.UI.Controls.Kendo.NumericTextBox
@using HRM.Infrastructure.Utilities

@model HRM.Presentation.Category.Models.CatExportModel
@{
    ViewBag.Title = "InsertCatExport";
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    //var _hrm_Main_Web = ConstantPathWeb.Hrm_Cat_Web;
    var _hrm_Main_Web = ConstantPathWeb.Hrm_Main_Web;
}

@{
    var window = new WindowBuilderInfo
    {
        Name = "windowCatExportInExportItem",
        Visible = false,
        Width = 700,
        Title = @ConstantDisplay.HRM_Category_ExportItem.TranslateString(),
        LoadContentFrom = _hrm_Main_Web + "Cat_Export/ExportItemInfo/",
    };
}
@(Html.VnrWindow(window))
@{
    var windowError = new WindowBuilderInfo
    {
        Name = "windowError",
        Visible = false,
        Height = 150,
        Width = 300,
        Title = "Thông Báo Lỗi",
        Content = "<br><br><center><b>Vui Lòng Lưu Kết Xuất Dữ Liệu Trước Khi Tạo Mới Dữ Liệu Kết Xuất Chi Tiết!!!</b></center>"
    };
}
@(Html.VnrWindow(windowError))

<script type="text/javascript">
    SetFieldRequired();
    function param() {
        var _IsColumnDynamic = document.getElementById("IsColumnDynamic");
        if (_IsColumnDynamic != null && _IsColumnDynamic.checked) {
            $("#IsColumnDynamic").val("true");
        } else {
            $("#IsColumnDynamic").val("false");
        }

        var _IsSmartMarkers = document.getElementById("IsSmartMarkers");
        if (_IsSmartMarkers != null && _IsSmartMarkers.checked) {
            $("#IsSmartMarkers").val("true");
        } else {
            $("#IsSmartMarkers").val("false");
        }

        
        return {
            ID: $('#@Html.FieldIdFor(model => model.ID)').val(),
            ExportName: $('#@Html.FieldIdFor(model => model.ExportName)').val(),
            Code: $('#@Html.FieldIdFor(model => model.Code)').val(),
            ScreenName: $('#@Html.FieldIdFor(model => model.ScreenName)').val(),
            ObjectName: $('#@Html.FieldIdFor(model => model.ObjectName)').val(),
            SheetIndex: $('#@Html.FieldIdFor(model => model.SheetIndex)').val(),
            StartRowIndex: $('#@Html.FieldIdFor(model => model.StartRowIndex)').val(),
            StartColumnIndex: $('#@Html.FieldIdFor(model => model.StartColumnIndex)').val(),
            TemplateFile: $('#@Html.FieldIdFor(model => model.TemplateFile)').val(),
            IsProtected: $('#@Html.FieldIdFor(model => model.IsProtected)').val(),
            IsReadOnly: $('#@Html.FieldIdFor(model => model.IsReadOnly)').val(),
            Description: $('#@Html.FieldIdFor(model => model.Description)').val(),
            IsColumnDynamic: $("#IsColumnDynamic").val(),
            IsSmartMarkers: $("#IsSmartMarkers").val()
        };
    }

    //Khởi tạo điều kiện tìm kiếm
    function filterFieldInfo() {
        var paramValue = {
            ExportID: $('#ExportIdForItem').val() == null ? null : $('#ExportIdForItem').val()
        };
        
        return paramValue;
    }
    function downloadFileTemplate() {
        window.location = '@_hrm_Main_Web' + "/Downloads/" + '@Html.DisplayFor(model=>model.TemplateFile)';
    }
    //Xử lý sự kiện click button tìm kiếm
    $(document).ready(function () {
        $("#btnSearch").click(function () {
            var grid = $('#grid_Cat_ExportItem').data("kendoGrid");
            grid.dataSource.read();
        });
    });

    $("#btnCreateItem").click(function () {
        
        var x = $('#ExportIdForItem').val();
        if (x == '' || x == undefined) {
            PopUpCreate("windowError");
        }
        else {
            PopUpCreate("windowCatExportInExportItem");
        }

    });

    function onEditExportItemInExport(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@_hrm_Main_Web' + "CatExport/ExportItemInfo/";
        PopUpEdit("windowCatExportInExportItem", url, dataItem.ID);
    }

    $('input[type=radio]').change(function () {
        if ($(this).is(':checked')) {
            $(this).val('true');
        } else {
            $(this).val('false');
        }
    });

    $('input[type=checkbox]').change(function () {
        if ($(this).is(':checked')) {
            $(this).val('true');
        } else {
            $(this).val('false');
        }
    });
</script>

<div class="VnRMain">
    <table style="width:100%">
        <tbody>
            @Html.Hidden("ExportIdForItem", Html.DisplayFor(model => model.ID))
            @Html.HiddenFor(mode => mode.ID)
            <tr><td colspan="3" style=""></td></tr>
            <tr>
                <td class="Box_Mid_Left">&nbsp;&nbsp;&nbsp;</td>
                <td valign="top">
                    <div>
                        <div style="overflow:hidden">
                            <div style="float:left; width:550px">
                                <div id="div3">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.ExportName)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrTextBoxFor(model => model.ExportName, "width:300px"))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div2">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.Code)
                                    </div>
                                    <div class="FieldValue">
                                        @Html.VnrTextBoxFor(mode => mode.Code)
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div4">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.ScreenName)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrTextBoxFor(model => model.ScreenName, "width:300px"))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div5">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.ObjectName)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrTextBoxFor(model => model.ObjectName))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>

                                <div id="div6">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.SheetIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var nbrSheet = new NumericTextBoxBuilderInfo<Int64>()
                                            {
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.SheetIndex, nbrSheet))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div7">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.StartRowIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var nbrStartRowIndex = new NumericTextBoxBuilderInfo<Int64>()
                                            {
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.StartRowIndex, nbrStartRowIndex))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div8">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.StartColumnIndex)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var nbrStartColumnIndex = new NumericTextBoxBuilderInfo<Int64>()
                                            {
                                                Format = "0"
                                            };
                                        }
                                        @(Html.VnrNumericTextBoxFor(model => model.StartColumnIndex, nbrStartColumnIndex))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                            </div>
                            <div style="width:550px; display:block; float:left">
                                <div id="div9">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.TemplateFile)
                                    </div>
                                    <div class="FieldValue">
                                        <script>
                                            function onSuccess(e) {
                                                var responseTxt = jQuery.parseJSON(e.XMLHttpRequest.responseText);
                                                var status = responseTxt.Status;
                                                var srcValue = responseTxt.FileUrl;
                                                if (status == true) {
                                                    //value null
                                                    $("#TemplateFile").val('');
                                                    //set value
                                                    $("#TemplateFile").val(responseTxt.FileName);
                                                } else {
                                                    $("#TemplateFile").val('');
                                                }
                                            }
                                        </script>
                                        @*@{
                                                var uploadTemplateFile = new UploadBuilderInfo
                                                {
                                                    Name = "files",
                                                    SaveUrl = _hrm_Main_Web + "Home/SaveFileUpload",
                                                    EventSuccess = "onSuccess",
                                                    ShowFileList = true,
                                                };
                                            }
                                            @Html.VnrUpload(uploadTemplateFile)
                                            <a onclick="downloadFileTemplate()"><i>@Html.DisplayFor(model => model.TemplateFile)</i></a>*@
                                        @Html.HiddenFor(model => model.TemplateFile)
                                        <input type="file" name="files" id="UploadTemplateFile1" />
                                        <script>
                                            var vnrUpload = VnrUploadBuilder;
                                            vnrUpload.Id = "UploadTemplateFile1";
                                            vnrUpload.Host = '@_hrm_Main_Web';
                                            vnrUpload.Files = '@Html.DisplayFor(model => model.TemplateFile)';
                                            vnrUpload.Field = "TemplateFile";
                                            vnrUpload.AutoUpload = true;
                                            vnrUpload.Multiple = true;
                                            vnrUpload.AutoReNameFile = true;
                                            VnrUpload(vnrUpload);
                                        </script>
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="div10">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.IsProtected)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var IsProtected = new CheckBoxBuilderInfo() {

                                            };
                                            if (Model != null)
                                            {
                                                if (Model.IsProtected == true)
                                                {
                                                    IsProtected.Value = true;
                                                }
                                                else
                                                {
                                                    IsProtected.Value = false;
                                                }
                                            }
                                        }
                                        @(Html.VnrCheckBoxFor(model => model.IsProtected,IsProtected))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                                <div id="dvIsReadOnly">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.IsReadOnly)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var isReadOnly = new CheckBoxBuilderInfo() { 
                                            };
                                            if (Model != null)
                                            {
                                                if (Model.IsReadOnly == true)
                                                {
                                                    isReadOnly.Value = true;
                                                }
                                                else
                                                {
                                                    isReadOnly.Value = false;
                                                }
                                            }
                                        }
                                        @(Html.VnrCheckBoxFor(model => model.IsReadOnly, isReadOnly))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>

                                <div id="div10">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.IsColumnDynamic)
                                    </div>
                                    <div class="FieldValue">
                                       @{
                                           var IsColumnDynamic = new CheckBoxBuilderInfo()
                                                {

                                                };
                                                if (Model != null)
                                                {
                                                    if (Model.IsColumnDynamic == true)
                                                    {
                                                        IsColumnDynamic.Value = true;
                                                    }
                                                    else
                                                    {
                                                        IsColumnDynamic.Value = false;
                                                    }
                                                }

                                            }
                                            @Html.VnrCheckBoxFor(model => model.IsColumnDynamic, IsColumnDynamic)
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>

                                <div id="div10">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.IsSmartMarkers)
                                    </div>
                                    <div class="FieldValue">
                                        @{
                                            var IsSmartMarkers = new CheckBoxBuilderInfo()
                                                 {

                                                 };
                                            if (Model != null)
                                            {
                                                if (Model.IsSmartMarkers == true)
                                                {
                                                    IsSmartMarkers.Value = true;
                                                }
                                                else
                                                {
                                                    IsSmartMarkers.Value = false;
                                                }
                                            }

                                        }
                                        @Html.VnrCheckBoxFor(model => model.IsSmartMarkers, IsSmartMarkers)
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>

                                <div id="div11">
                                    <div class="FieldTitle">
                                        @Html.VnrLabelFor(mode => mode.Description)
                                    </div>
                                    <div class="FieldValue">
                                        @(Html.VnrTextAreaFor(model => model.Description))
                                    </div>
                                    <div style="clear: both;"></div>
                                </div>
                            </div>
                        </div>
                        <br />
                       
                    </div>
                </td>
                <td class="Box_Mid_Right">&nbsp;&nbsp;&nbsp;&nbsp;</td>
            </tr>
            <tr>
                <td class="Box_Bottom_Left"></td>
                <td class="Box_Bottom_Mid"></td>
                <td class="Box_Bottom_Right"></td>
            </tr>
        </tbody>
    </table>
</div>
<div class="commandToolBarWidge">
    @Html.VnrButton(new ButtonBuilderInfo() { Name = "btnCreateItem", Content = ConstantAction.HRM_Common_Create.TranslateString(), ImageUrl = ConstantPath.IconAddNewPath })
</div>
<div>
    <!--Khai báo các thông tin cho Grid-->
    @using HRM.Presentation.Category.Models
    @using HRM.Presentation.UI.Controls.Kendo
    @{
        //Thông tin hiển column hiển thị
        string[] valueFields = new string[]
                            {
                                CatExportItemModel.FieldNames.DataField,
                                CatExportItemModel.FieldNames.ExcelField,
                                CatExportItemModel.FieldNames.FormatString,
                                CatExportItemModel.FieldNames.GroupOrder,
                                CatExportItemModel.FieldNames.IsFixedCell,
                                CatExportItemModel.FieldNames.SubTotal,
                                CatExportItemModel.FieldNames.Description,
                                 CatExportItemModel.FieldNames.ExportID,

                            };

        //Set độ rộng cho từng column
        Dictionary<string, int> sizeFields = new Dictionary<string, int>()
                            {
                                {CatExportItemModel.FieldNames.DataField, 125},
                                {CatExportItemModel.FieldNames.ExcelField, 100},
                                {CatExportItemModel.FieldNames.FormatString, 115},
                                {CatExportItemModel.FieldNames.GroupOrder, 100},
                                {CatExportItemModel.FieldNames.IsFixedCell, 95},
                                {CatExportItemModel.FieldNames.SubTotal, 120},
                                {CatExportItemModel.FieldNames.Description, 150}


                            };

        //Thông tin hiển thị được dịch
        Dictionary<string, string> displayFields = new Dictionary<string, string>()
                            {
                                {CatExportItemModel.FieldNames.DataField, ConstantDisplay.HRM_Category_ExportItem_DataField },
                                {CatExportItemModel.FieldNames.ExcelField, ConstantDisplay.HRM_Category_ExportItem_ExcelField },
                                {CatExportItemModel.FieldNames.FormatString, ConstantDisplay.HRM_Category_ExportItem_FormatString },
                                {CatExportItemModel.FieldNames.GroupOrder, ConstantDisplay.HRM_Category_ExportItem_GroupOrder },
                                {CatExportItemModel.FieldNames.IsFixedCell, ConstantDisplay.HRM_Category_ExportItem_IsFixedCell},
                                {CatExportItemModel.FieldNames.SubTotal, ConstantDisplay.HRM_Category_ExportItem_SubTotal},
                                {CatExportItemModel.FieldNames.Description, ConstantDisplay.HRM_Category_ExportItem_Description}
                            };
                            
                             string[] hiddenField = new string[]
                            {
                                 CatExportItemModel.FieldNames.ExportID,

                            };


        var grid = new GridBuilderInfo
        {
            Name = "grid_Cat_ExportItem",
            ValueFields = valueFields,
            DisplayFields = displayFields,
            SizeFields = sizeFields,
            HiddenFields=hiddenField,
            ShowEditIcon = false,
            ShowCheckbox = false,
            ShowCommand = true,
            ShowDeleteButton = true,
            ShowEditButton = true,
            EditActionUrl = _hrm_Main_Web + "Cat_ExportItem/Create/",
            DeleteActionUrl = _hrm_Main_Web + "Cat_ExportItem/Delete/",
            AutoBind = true,
            EditMode = GridEditMode.InLine,
            ReadActionUrl = _hrm_Hr_Service + "Cat_GetData/GetExportItemByExportIDList",
            ReadData = "filterFieldInfo",

        };
    }
    <!--Khởi tạo Grid-->
    @(Html.VnrGrid<CatExportItemModel>(grid)
                                .HtmlAttributes(new { style = "height:400px" })
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Model(model => model.Field(o => o.ExportName).Editable(false))
                                    )
    )
</div>
@using HRM.Infrastructure.Utilities
@using HRM.Presentation.UI.Controls.Kendo
@using HRM.Presentation.Category.Models
@using System.Collections
@model CatExportItemModel

@{
    ViewBag.Title = ConstantDisplay.HRM_Category_ExportItem.TranslateString();
    Layout = null;
    var _hrm_Hr_Service = ConstantPathWeb.Hrm_Hre_Service;
    Guid? ExportID = Guid.Empty;
}

<script>
    var data = SetCharacteFieldRequired();
    $(document).ready(function () {
        $("#ExportID").val($("#ID").val());
    });

    function dataParam() {
        
        var _SubTotal = document.getElementById("SubTotal");
        var _IsFixedCell = document.getElementById("IsFixedCell");
        if (_SubTotal.checked) {
            _SubTotal= true;
        } else {
            _SubTotal= false;
        }
        if (_IsFixedCell.checked) {
            _IsFixedCell = true;
        } else
        {
            _IsFixedCell = false;
        }
        var param = {
            DataField: $("#DataField").val(),
            ExcelField: $("#ExcelField").val(),
            FormatString: $("#FormatString").val(),
            Description: $("#Description").val(),
            GroupOrder: $("#GroupOrder").val(),
            SubTotal: _SubTotal,
            IsFixedCell: _IsFixedCell,
            ExportID: $("#ExportID").val()
        };
        return param;
    }
    function reload() {
        
        $.ajax({
            data: dataParam(),
            type: 'Post',
            success: function (data) {
                
                var window = $("#windowCatExportInExportItem").data("kendoWindow");
                window.refresh();
                var grid = $("#grid_Cat_ExportItem").data("kendoGrid");
                grid.dataSource.read();
            }
        });
    }

    function onSave() {
        var _SubTotal = document.getElementById("SubTotal");
        var _IsFixedCell = document.getElementById("IsFixedCell");
        if (_SubTotal.checked) {
            $("#SubTotal").val("true");
        } else {
            $("#SubTotal").val("false");
        }
        if (_IsFixedCell.checked) {
            $("#IsFixedCell").val("true");
        } else {
            $("#IsFixedCell").val("false");
        }
        onSaveAndContinue($('#form_Cat_ExportItem'), '@_hrm_Hr_Service', 'api/CatExportItem/', 'grid_Cat_ExportItem', 'windowCatExportInExportItem');
        return false;
    }

    function onSaveClose() {
        
        var _SubTotal = document.getElementById("SubTotal");
        var _IsFixedCell = document.getElementById("IsFixedCell");
        if (_SubTotal.checked) {
            $("#SubTotal").val("true");
        } else {
            $("#SubTotal").val("false");
        }
        if (_IsFixedCell.checked) {
            $("#IsFixedCell").val("true");
        } else {
            $("#IsFixedCell").val("false");
        }
        onSaveAndClose($('#form_Cat_ExportItem'), '@_hrm_Hr_Service', 'api/CatExportItem/', 'grid_Cat_ExportItem', 'windowCatExportInExportItem');
        return false;
    }

    function onSaveDataPopUp() {
        var _SubTotal = document.getElementById("SubTotal");
        var _IsFixedCell = document.getElementById("IsFixedCell");
        if (_SubTotal.checked) {
            _SubTotal = true;
        } else {
            _SubTotal = false;
        }
        if (_IsFixedCell.checked) {
            _IsFixedCell = true;
        } else {
            _IsFixedCell = false;
        }
        onlySave($('#form_Cat_ExportItem'), '@_hrm_Hr_Service', 'api/CatExportItem/', 'grid_Cat_ExportItem');
        return false;
    }

</script>
<!--Form dùng cho edit và update-->
@using (Html.BeginForm("#", "", FormMethod.Post, new { id = "form_Cat_ExportItem" }))
{ 
    @*@Html.HiddenFor(model => model.ID)*@
    <div id="div4">
        <div class="FieldTitle150">
            @Html.HiddenFor(mode => mode.ExportID)
            <script>
                $("#ExportID").val($("#ExportIdForItem").val())
            </script>
            @Html.VnrLabelFor(mode => mode.DataField)
        </div>
        <div class="FieldValue">
            @(Html.VnrTextBoxFor(model => model.DataField, "width: 300px"))
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div5">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.ExcelField)
        </div>
        <div class="FieldValue">
            @(Html.VnrTextBoxFor(model => model.ExcelField, "width: 300px"))
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div6">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.FormatString)
        </div>
        <div class="FieldValue">
            @(Html.VnrTextBoxFor(model => model.FormatString, "width: 300px"))
        </div>
        <div style="clear: both;"></div>
    </div>

    <div id="div6">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.GroupOrder)
        </div>
        <div class="FieldValue">
            @{
                var OrderNumber = new NumericTextBoxBuilderInfo<Int64>()
                {
                    StyleCss = "width:150px",
                    Format = "n0"
                };
            }
            @(Html.VnrNumericTextBoxFor(model => model.GroupOrder, OrderNumber))
        </div>
        <div style="clear: both;"></div>
    </div>

     <div id="dvSubTotal">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.SubTotal)
        </div>
        <div class="FieldValue">
            @{
                    var _SubTotal = new CheckBoxBuilderInfo()
                    {
                    };
            }
            @Html.VnrCheckBoxFor(model => model.SubTotal,_SubTotal)
        </div>
        <div style="clear: both;"></div>
    </div>
    
    <div id="div7">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.IsFixedCell)
        </div>
        <div class="FieldValue">
            @{
                 var _IsFixedCell = new CheckBoxBuilderInfo()
                {
                };
            }
            @Html.VnrCheckBoxFor(model => model.IsFixedCell,_IsFixedCell)
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div8">
        <div class="FieldTitle150">
            @Html.VnrLabelFor(mode => mode.Description)
        </div>
        <div class="FieldValue">
            @Html.VnrTextAreaFor(model => model.Description, "width:500px;height:100px;")
        </div>
        <div style="clear: both;"></div>
    </div>
    <div id="div9">
        <tr>
            <td style="padding-top:2px; padding-bottom:10px;">
                <div class="LineFooterCommandEdit">
                </div>
            </td>
        </tr>
        <br />
    </div>
    <div id="div10">
        <div class="FieldTitle150"></div>
        <div class="FieldValue">
            @*<input type="button" id="btnSave" value="@ConstantAction.HRM_Common_Save.TranslateString()" onclick="onCreateOrEditGrid($('#form_Cat_ExportItem'), '@_hrm_Hr_Service', 'api/CatExportItem/', 'grid_Cat_ExportItem'); return false;" class="k-button" />*@
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveDataPopUp", Name = "save-catExportItem", Content = ConstantAction.HRM_Common_Save.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSave", Name = "save-continue-catExportItem", Content = ConstantAction.HRM_Common_SaveNew.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
            @Html.VnrButton(new ButtonBuilderInfo() { EventClick = "onSaveClose", Name = "save-close-catExportItem", Content = ConstantAction.HRM_Common_SaveClose.TranslateString(), ImageUrl = ConstantPath.IconSavePath })
        </div>
    </div>
}
